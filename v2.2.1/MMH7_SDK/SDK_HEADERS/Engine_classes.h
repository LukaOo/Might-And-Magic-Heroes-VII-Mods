#pragma once 

/*
#############################################################################################
# Might and Magic Heroes 7 (1.0.8364.0) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51 x64
# ========================================================================================= #
# File: Engine_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_MINFLOORZ                                          0.7
#define CONST_ACTORMAXSTEPHEIGHT                                 35.0
#define CONST_RBSTATE_LINVELSCALE                                10.0
#define CONST_RBSTATE_ANGVELSCALE                                1000.0
#define CONST_RB_None                                            0x00
#define CONST_RB_NeedsUpdate                                     0x01
#define CONST_RB_Sleeping                                        0x02
#define CONST_REP_RBLOCATION_ERROR_TOLERANCE_SQ                  16.0f
#define CONST_TRACEFLAG_ForceController                          16
#define CONST_TRACEFLAG_Blocking                                 8
#define CONST_TRACEFLAG_SkipMovers                               4
#define CONST_TRACEFLAG_PhysicsVolumes                           2
#define CONST_TRACEFLAG_Bullet                                   1
#define CONST_SDPG_NumBits                                       3
#define CONST_LATENT_MOVETOWARD                                  503
#define CONST_MAX_ACTIVE_CAMERA_ANIMS                            8
#define CONST_MAXCLIENTUPDATEINTERVAL                            0.25
#define CONST_CLIENTADJUSTUPDATECOST                             180.0
#define CONST_MAXVEHICLEPOSITIONERRORSQUARED                     900.0
#define CONST_MAXNEARZEROVELOCITYSQUARED                         9.0
#define CONST_MAXPOSITIONERRORSQUARED                            3.0
#define CONST_BLOCKEDPATHCOST                                    10000000
#define CONST_INFINITE_PATH_COST                                 10000000
#define CONST_GET_SAVE_SLOT_INVALID                              -1
#define CONST_GET_SAVE_SLOT_ERROR                                -2
#define CONST_COMMON_DATA_SAVE_SLOT_INDEX                        -1
#define CONST_SAVE_SYSTEM_VERSION_KEY                            "CloudSaveSystemVersion"
#define CONST_SAVE_DATA_BLOB_NAME_KEY                            "DataBlobName"
#define CONST_DATA_STORE_ID_KEY                                  "DataStoreID"
#define CONST_NUM_SAVE_SLOTS_KEY                                 "NumSaveSlots"
#define CONST_DEFAULT_SIZE_X                                     1024
#define CONST_DEFAULT_SIZE_Y                                     768
#define CONST_MAX_SUPPORTED_GAMEPADS                             4
#define CONST_MaxHistory                                         16
#define CONST_COVERLINK_DangerDist                               1536.f
#define CONST_COVERLINK_EdgeExposureDot                          0.85f
#define CONST_COVERLINK_EdgeCheckDot                             0.25f
#define CONST_COVERLINK_ExposureDot                              0.4f
#define CONST_NULLCHARACTER                                      127
#define CONST_MAX_INSTANCES_PER_CLASS                            5
#define CONST_MAX_BOOKMARK_NUMBER                                10
#define CONST_FSM_DEFAULTRECYCLETIME                             0.2
#define CONST_HeaderFlags_NoEventStrings                         1
#define CONST_GAMEEVENT_MATCH_STARTED                            0
#define CONST_GAMEEVENT_MATCH_ENDED                              1
#define CONST_GAMEEVENT_ROUND_STARTED                            2
#define CONST_GAMEEVENT_ROUND_ENDED                              3
#define CONST_GAMEEVENT_GAME_CLASS                               6
#define CONST_GAMEEVENT_GAME_OPTION_URL                          7
#define CONST_GAMEEVENT_GAME_MAPNAME                             8
#define CONST_GAMEEVENT_MEMORYUSAGE_POLL                         35
#define CONST_GAMEEVENT_FRAMERATE_POLL                           36
#define CONST_GAMEEVENT_NETWORKUSAGEIN_POLL                      37
#define CONST_GAMEEVENT_NETWORKUSAGEOUT_POLL                     38
#define CONST_GAMEEVENT_PING_POLL                                39
#define CONST_GAMEEVENT_RENDERTHREAD_POLL                        40
#define CONST_GAMEEVENT_GAMETHREAD_POLL                          41
#define CONST_GAMEEVENT_GPUFRAMETIME_POLL                        42
#define CONST_GAMEEVENT_FRAMETIME_POLL                           43
#define CONST_GAMEEVENT_TEAM_CREATED                             50
#define CONST_GAMEEVENT_TEAM_GAME_SCORE                          51
#define CONST_GAMEEVENT_TEAM_MATCH_WON                           4
#define CONST_GAMEEVENT_TEAM_ROUND_WON                           5
#define CONST_GAMEEVENT_TEAM_ROUND_STALEMATE                     52
#define CONST_GAMEEVENT_PLAYER_LOGIN                             100
#define CONST_GAMEEVENT_PLAYER_LOGOUT                            101
#define CONST_GAMEEVENT_PLAYER_SPAWN                             102
#define CONST_GAMEEVENT_PLAYER_MATCH_WON                         103
#define CONST_GAMEEVENT_PLAYER_KILL                              104
#define CONST_GAMEEVENT_PLAYER_LOCATION_POLL                     105
#define CONST_GAMEEVENT_PLAYER_TEAMCHANGE                        106
#define CONST_GAMEEVENT_PLAYER_KILL_STREAK                       107
#define CONST_GAMEEVENT_PLAYER_DEATH                             108
#define CONST_GAMEEVENT_PLAYER_ROUND_WON                         109
#define CONST_GAMEEVENT_PLAYER_ROUND_STALEMATE                   110
#define CONST_GAMEEVENT_WEAPON_DAMAGE                            150
#define CONST_GAMEEVENT_WEAPON_DAMAGE_MELEE                      151
#define CONST_GAMEEVENT_WEAPON_FIRED                             152
#define CONST_GAMEEVENT_PLAYER_KILL_NORMAL                       200
#define CONST_GAMEEVENT_GENERIC_PARAM_LIST_START                 300
#define CONST_GAMEEVENT_GENERIC_PARAM_LIST_END                   400
#define CONST_GAMEEVENT_GAME_SPECIFIC                            1000
#define CONST_GAMEEVENT_MAX_EVENTID                              0x0000FFFF
#define CONST_SCENEFILTER_None                                   0x00000000
#define CONST_SCENEFILTER_IncludeTransient                       0x00000001
#define CONST_SCENEFILTER_InputProcessorOnly                     0x00000002
#define CONST_SCENEFILTER_PausersOnly                            0x00000004
#define CONST_SCENEFILTER_PrimitiveUsersOnly                     0x00000008
#define CONST_SCENEFILTER_UsesPostProcessing                     0x00000010
#define CONST_SCENEFILTER_ReceivesFocus                          0x00000020
#define CONST_SCENEFILTER_Any                                    0xFFFFFFFF
#define CONST_MAX_AIGROUP_NUMBER                                 10
#define CONST_LINECHECK_GRANULARITY                              768.f
#define CONST_NUM_PATHFINDING_PARAMS                             9
#define CONST_NumBreadCrumbs                                     10
#define CONST_PROCBUILDING_VERSION                               1
#define CONST_ROOF_MINZ                                          0.7

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum Engine.Actor.EActorMetricsType
/*enum EActorMetricsType
{
	METRICS_VERTS                                      = 0,
	METRICS_TRIS                                       = 1,
	METRICS_SECTIONS                                   = 2,
	METRICS_MAX                                        = 3
};*/

// Enum Engine.Actor.EPhysics
/*enum EPhysics
{
	PHYS_None                                          = 0,
	PHYS_Walking                                       = 1,
	PHYS_Falling                                       = 2,
	PHYS_Swimming                                      = 3,
	PHYS_Flying                                        = 4,
	PHYS_Rotating                                      = 5,
	PHYS_Projectile                                    = 6,
	PHYS_Interpolating                                 = 7,
	PHYS_Spider                                        = 8,
	PHYS_Ladder                                        = 9,
	PHYS_RigidBody                                     = 10,
	PHYS_SoftBody                                      = 11,
	PHYS_NavMeshWalking                                = 12,
	PHYS_Unused                                        = 13,
	PHYS_Custom                                        = 14,
	PHYS_MAX                                           = 15
};*/

// Enum Engine.Actor.EMoveDir
/*enum EMoveDir
{
	MD_Stationary                                      = 0,
	MD_Forward                                         = 1,
	MD_Backward                                        = 2,
	MD_Left                                            = 3,
	MD_Right                                           = 4,
	MD_Up                                              = 5,
	MD_Down                                            = 6,
	MD_MAX                                             = 7
};*/

// Enum Engine.Actor.ECollisionType
/*enum ECollisionType
{
	COLLIDE_CustomDefault                              = 0,
	COLLIDE_NoCollision                                = 1,
	COLLIDE_BlockAll                                   = 2,
	COLLIDE_BlockWeapons                               = 3,
	COLLIDE_TouchAll                                   = 4,
	COLLIDE_TouchWeapons                               = 5,
	COLLIDE_BlockAllButWeapons                         = 6,
	COLLIDE_TouchAllButWeapons                         = 7,
	COLLIDE_BlockWeaponsKickable                       = 8,
	COLLIDE_MAX                                        = 9
};*/

// Enum Engine.Actor.ETravelType
/*enum ETravelType
{
	TRAVEL_Absolute                                    = 0,
	TRAVEL_Partial                                     = 1,
	TRAVEL_Relative                                    = 2,
	TRAVEL_MAX                                         = 3
};*/

// Enum Engine.Actor.EDoubleClickDir
/*enum EDoubleClickDir
{
	DCLICK_None                                        = 0,
	DCLICK_Left                                        = 1,
	DCLICK_Right                                       = 2,
	DCLICK_Forward                                     = 3,
	DCLICK_Back                                        = 4,
	DCLICK_Active                                      = 5,
	DCLICK_Done                                        = 6,
	DCLICK_MAX                                         = 7
};*/

// Enum Engine.Actor.ENetRole
/*enum ENetRole
{
	ROLE_None                                          = 0,
	ROLE_SimulatedProxy                                = 1,
	ROLE_AutonomousProxy                               = 2,
	ROLE_Authority                                     = 3,
	ROLE_MAX                                           = 4
};*/

// Enum Engine.PrimitiveComponent.GJKResult
/*enum GJKResult
{
	GJK_Intersect                                      = 0,
	GJK_NoIntersection                                 = 1,
	GJK_Fail                                           = 2,
	GJK_MAX                                            = 3
};*/

// Enum Engine.Scene.EDetailMode
/*enum EDetailMode
{
	DM_Low                                             = 0,
	DM_Medium                                          = 1,
	DM_High                                            = 2,
	DM_MAX                                             = 3
};*/

// Enum Engine.Scene.ESceneDepthPriorityGroup
/*enum ESceneDepthPriorityGroup
{
	SDPG_UnrealEdBackground                            = 0,
	SDPG_World                                         = 1,
	SDPG_UberWorld                                     = 2,
	SDPG_Foreground                                    = 3,
	SDPG_UnrealEdForeground                            = 4,
	SDPG_PostProcess                                   = 5,
	SDPG_MAX                                           = 6
};*/

// Enum Engine.PrimitiveComponent.ERBCollisionChannel
/*enum ERBCollisionChannel
{
	RBCC_Default                                       = 0,
	RBCC_Nothing                                       = 1,
	RBCC_Pawn                                          = 2,
	RBCC_Vehicle                                       = 3,
	RBCC_Water                                         = 4,
	RBCC_GameplayPhysics                               = 5,
	RBCC_EffectPhysics                                 = 6,
	RBCC_Untitled1                                     = 7,
	RBCC_Untitled2                                     = 8,
	RBCC_Untitled3                                     = 9,
	RBCC_Untitled4                                     = 10,
	RBCC_Cloth                                         = 11,
	RBCC_FluidDrain                                    = 12,
	RBCC_SoftBody                                      = 13,
	RBCC_FracturedMeshPart                             = 14,
	RBCC_BlockingVolume                                = 15,
	RBCC_DeadPawn                                      = 16,
	RBCC_Clothing                                      = 17,
	RBCC_ClothingCollision                             = 18,
	RBCC_MAX                                           = 19
};*/

// Enum Engine.PrimitiveComponent.ERadialImpulseFalloff
/*enum ERadialImpulseFalloff
{
	RIF_Constant                                       = 0,
	RIF_Linear                                         = 1,
	RIF_MAX                                            = 2
};*/

// Enum Engine.Texture.TextureCompressionSettings
/*enum TextureCompressionSettings
{
	TC_Default                                         = 0,
	TC_Normalmap                                       = 1,
	TC_Displacementmap                                 = 2,
	TC_NormalmapAlpha                                  = 3,
	TC_Grayscale                                       = 4,
	TC_HighDynamicRange                                = 5,
	TC_OneBitAlpha                                     = 6,
	TC_NormalmapUncompressed                           = 7,
	TC_NormalmapBC5                                    = 8,
	TC_OneBitMonochrome                                = 9,
	TC_SimpleLightmapModification                      = 10,
	TC_VectorDisplacementmap                           = 11,
	TC_MAX                                             = 12
};*/

// Enum Engine.Texture.EPixelFormat
/*enum EPixelFormat
{
	PF_Unknown                                         = 0,
	PF_A32B32G32R32F                                   = 1,
	PF_A8R8G8B8                                        = 2,
	PF_G8                                              = 3,
	PF_G16                                             = 4,
	PF_DXT1                                            = 5,
	PF_DXT3                                            = 6,
	PF_DXT5                                            = 7,
	PF_UYVY                                            = 8,
	PF_FloatRGB                                        = 9,
	PF_FloatRGBA                                       = 10,
	PF_DepthStencil                                    = 11,
	PF_ShadowDepth                                     = 12,
	PF_FilteredShadowDepth                             = 13,
	PF_R32F                                            = 14,
	PF_G16R16                                          = 15,
	PF_G16R16F                                         = 16,
	PF_G16R16F_FILTER                                  = 17,
	PF_G32R32F                                         = 18,
	PF_A2B10G10R10                                     = 19,
	PF_A16B16G16R16                                    = 20,
	PF_D24                                             = 21,
	PF_R16F                                            = 22,
	PF_R16F_FILTER                                     = 23,
	PF_BC5                                             = 24,
	PF_V8U8                                            = 25,
	PF_A1                                              = 26,
	PF_FloatR11G11B10                                  = 27,
	PF_A4R4G4B4                                        = 28,
	PF_R5G6B5                                          = 29,
	PF_MAX                                             = 30
};*/

// Enum Engine.Texture.TextureFilter
/*enum TextureFilter
{
	TF_Nearest                                         = 0,
	TF_Linear                                          = 1,
	TF_MAX                                             = 2
};*/

// Enum Engine.Texture.TextureAddress
/*enum TextureAddress
{
	TA_Wrap                                            = 0,
	TA_Clamp                                           = 1,
	TA_Mirror                                          = 2,
	TA_MAX                                             = 3
};*/

// Enum Engine.Texture.TextureGroup
/*enum TextureGroup
{
	TEXTUREGROUP_World                                 = 0,
	TEXTUREGROUP_WorldNormalMap                        = 1,
	TEXTUREGROUP_WorldSpecular                         = 2,
	TEXTUREGROUP_Character                             = 3,
	TEXTUREGROUP_CharacterNormalMap                    = 4,
	TEXTUREGROUP_CharacterSpecular                     = 5,
	TEXTUREGROUP_Weapon                                = 6,
	TEXTUREGROUP_WeaponNormalMap                       = 7,
	TEXTUREGROUP_WeaponSpecular                        = 8,
	TEXTUREGROUP_Vehicle                               = 9,
	TEXTUREGROUP_VehicleNormalMap                      = 10,
	TEXTUREGROUP_VehicleSpecular                       = 11,
	TEXTUREGROUP_Cinematic                             = 12,
	TEXTUREGROUP_Effects                               = 13,
	TEXTUREGROUP_EffectsNotFiltered                    = 14,
	TEXTUREGROUP_Skybox                                = 15,
	TEXTUREGROUP_UI                                    = 16,
	TEXTUREGROUP_Lightmap                              = 17,
	TEXTUREGROUP_RenderTarget                          = 18,
	TEXTUREGROUP_MobileFlattened                       = 19,
	TEXTUREGROUP_ProcBuilding_Face                     = 20,
	TEXTUREGROUP_ProcBuilding_LightMap                 = 21,
	TEXTUREGROUP_Shadowmap                             = 22,
	TEXTUREGROUP_ColorLookupTable                      = 23,
	TEXTUREGROUP_Terrain_Heightmap                     = 24,
	TEXTUREGROUP_Terrain_Weightmap                     = 25,
	TEXTUREGROUP_ImageBasedReflection                  = 26,
	TEXTUREGROUP_Bokeh                                 = 27,
	TEXTUREGROUP_MAX                                   = 28
};*/

// Enum Engine.Texture.TextureMipGenSettings
/*enum TextureMipGenSettings
{
	TMGS_FromTextureGroup                              = 0,
	TMGS_SimpleAverage                                 = 1,
	TMGS_Sharpen0                                      = 2,
	TMGS_Sharpen1                                      = 3,
	TMGS_Sharpen2                                      = 4,
	TMGS_Sharpen3                                      = 5,
	TMGS_Sharpen4                                      = 6,
	TMGS_Sharpen5                                      = 7,
	TMGS_Sharpen6                                      = 8,
	TMGS_Sharpen7                                      = 9,
	TMGS_Sharpen8                                      = 10,
	TMGS_Sharpen9                                      = 11,
	TMGS_Sharpen10                                     = 12,
	TMGS_NoMipmaps                                     = 13,
	TMGS_LeaveExistingMips                             = 14,
	TMGS_Blur1                                         = 15,
	TMGS_Blur2                                         = 16,
	TMGS_Blur3                                         = 17,
	TMGS_Blur4                                         = 18,
	TMGS_Blur5                                         = 19,
	TMGS_MAX                                           = 20
};*/

// Enum Engine.Texture.ETextureMipCount
/*enum ETextureMipCount
{
	TMC_ResidentMips                                   = 0,
	TMC_AllMips                                        = 1,
	TMC_AllMipsBiased                                  = 2,
	TMC_MAX                                            = 3
};*/

// Enum Engine.Settings.EOnlineDataAdvertisementType
/*enum EOnlineDataAdvertisementType
{
	ODAT_DontAdvertise                                 = 0,
	ODAT_OnlineService                                 = 1,
	ODAT_QoS                                           = 2,
	ODAT_OnlineServiceAndQoS                           = 3,
	ODAT_MAX                                           = 4
};*/

// Enum Engine.Settings.ESettingsDataType
/*enum ESettingsDataType
{
	SDT_Empty                                          = 0,
	SDT_Int32                                          = 1,
	SDT_Int64                                          = 2,
	SDT_Double                                         = 3,
	SDT_String                                         = 4,
	SDT_Float                                          = 5,
	SDT_Blob                                           = 6,
	SDT_DateTime                                       = 7,
	SDT_MAX                                            = 8
};*/

// Enum Engine.Settings.EPropertyValueMappingType
/*enum EPropertyValueMappingType
{
	PVMT_RawValue                                      = 0,
	PVMT_PredefinedValues                              = 1,
	PVMT_Ranged                                        = 2,
	PVMT_IdMapped                                      = 3,
	PVMT_MAX                                           = 4
};*/

// Enum Engine.OnlineSubsystem.EOnlineNewsType
/*enum EOnlineNewsType
{
	ONT_Unknown                                        = 0,
	ONT_GameNews                                       = 1,
	ONT_ContentAnnouncements                           = 2,
	ONT_Misc                                           = 3,
	ONT_MAX                                            = 4
};*/

// Enum Engine.OnlineSubsystem.ENATType
/*enum ENATType
{
	NAT_Unknown                                        = 0,
	NAT_Open                                           = 1,
	NAT_Moderate                                       = 2,
	NAT_Strict                                         = 3,
	NAT_MAX                                            = 4
};*/

// Enum Engine.OnlineSubsystem.EOnlineServerConnectionStatus
/*enum EOnlineServerConnectionStatus
{
	OSCS_NotConnected                                  = 0,
	OSCS_Connected                                     = 1,
	OSCS_ConnectionDropped                             = 2,
	OSCS_NoNetworkConnection                           = 3,
	OSCS_ServiceUnavailable                            = 4,
	OSCS_UpdateRequired                                = 5,
	OSCS_ServersTooBusy                                = 6,
	OSCS_DuplicateLoginDetected                        = 7,
	OSCS_InvalidUser                                   = 8,
	OSCS_MAX                                           = 9
};*/

// Enum Engine.OnlineSubsystem.EOnlineEnumerationReadState
/*enum EOnlineEnumerationReadState
{
	OERS_NotStarted                                    = 0,
	OERS_InProgress                                    = 1,
	OERS_Done                                          = 2,
	OERS_Failed                                        = 3,
	OERS_MAX                                           = 4
};*/

// Enum Engine.OnlineSubsystem.EOnlineGameState
/*enum EOnlineGameState
{
	OGS_NoSession                                      = 0,
	OGS_Pending                                        = 1,
	OGS_Starting                                       = 2,
	OGS_InProgress                                     = 3,
	OGS_Ending                                         = 4,
	OGS_Ended                                          = 5,
	OGS_MAX                                            = 6
};*/

// Enum Engine.OnlineSubsystem.EOnlineAccountCreateStatus
/*enum EOnlineAccountCreateStatus
{
	OACS_CreateSuccessful                              = 0,
	OACS_UnknownError                                  = 1,
	OACS_InvalidUserName                               = 2,
	OACS_InvalidPassword                               = 3,
	OACS_InvalidUniqueUserName                         = 4,
	OACS_UniqueUserNameInUse                           = 5,
	OACS_ServiceUnavailable                            = 6,
	OACS_MAX                                           = 7
};*/

// Enum Engine.OnlineSubsystem.ELanBeaconState
/*enum ELanBeaconState
{
	LANB_NotUsingLanBeacon                             = 0,
	LANB_Hosting                                       = 1,
	LANB_Searching                                     = 2,
	LANB_MAX                                           = 3
};*/

// Enum Engine.OnlineSubsystem.EOnlineContentType
/*enum EOnlineContentType
{
	OCT_Downloaded                                     = 0,
	OCT_SaveGame                                       = 1,
	OCT_MAX                                            = 2
};*/

// Enum Engine.OnlineSubsystem.EOnlineFriendState
/*enum EOnlineFriendState
{
	OFS_Offline                                        = 0,
	OFS_Online                                         = 1,
	OFS_Away                                           = 2,
	OFS_Busy                                           = 3,
	OFS_MAX                                            = 4
};*/

// Enum Engine.OnlineSubsystem.ENetworkNotificationPosition
/*enum ENetworkNotificationPosition
{
	NNP_TopLeft                                        = 0,
	NNP_TopCenter                                      = 1,
	NNP_TopRight                                       = 2,
	NNP_CenterLeft                                     = 3,
	NNP_Center                                         = 4,
	NNP_CenterRight                                    = 5,
	NNP_BottomLeft                                     = 6,
	NNP_BottomCenter                                   = 7,
	NNP_BottomRight                                    = 8,
	NNP_MAX                                            = 9
};*/

// Enum Engine.OnlineSubsystem.EFeaturePrivilegeLevel
/*enum EFeaturePrivilegeLevel
{
	FPL_Disabled                                       = 0,
	FPL_EnabledFriendsOnly                             = 1,
	FPL_Enabled                                        = 2,
	FPL_MAX                                            = 3
};*/

// Enum Engine.OnlineSubsystem.ELoginStatus
/*enum ELoginStatus
{
	LS_NotLoggedIn                                     = 0,
	LS_UsingLocalProfile                               = 1,
	LS_LoggedIn                                        = 2,
	LS_MAX                                             = 3
};*/

// Enum Engine.OnlineAuthInterface.EAuthStatus
/*enum EAuthStatus
{
	AUS_NotStarted                                     = 0,
	AUS_Pending                                        = 1,
	AUS_Authenticated                                  = 2,
	AUS_Failed                                         = 3,
	AUS_MAX                                            = 4
};*/

// Enum Engine.Camera.EViewTargetBlendFunction
/*enum EViewTargetBlendFunction
{
	VTBlend_Linear                                     = 0,
	VTBlend_Cubic                                      = 1,
	VTBlend_EaseIn                                     = 2,
	VTBlend_EaseOut                                    = 3,
	VTBlend_EaseInOut                                  = 4,
	VTBlend_MAX                                        = 5
};*/

// Enum Engine.DOFEffect.EFocusType
/*enum EFocusType
{
	FOCUS_Distance                                     = 0,
	FOCUS_Position                                     = 1,
	FOCUS_MAX                                          = 2
};*/

// Enum Engine.Camera.ECameraAnimPlaySpace
/*enum ECameraAnimPlaySpace
{
	CAPS_CameraLocal                                   = 0,
	CAPS_World                                         = 1,
	CAPS_UserDefined                                   = 2,
	CAPS_MAX                                           = 3
};*/

// Enum Engine.SeqAct_ControlMovieTexture.EMovieControlType
/*enum EMovieControlType
{
	MCT_Play                                           = 0,
	MCT_Stop                                           = 1,
	MCT_Pause                                          = 2,
	MCT_MAX                                            = 3
};*/

// Enum Engine.OnlineGameSearch.EOnlineGameSearchComparisonType
/*enum EOnlineGameSearchComparisonType
{
	OGSCT_Equals                                       = 0,
	OGSCT_NotEquals                                    = 1,
	OGSCT_GreaterThan                                  = 2,
	OGSCT_GreaterThanEquals                            = 3,
	OGSCT_LessThan                                     = 4,
	OGSCT_LessThanEquals                               = 5,
	OGSCT_MAX                                          = 6
};*/

// Enum Engine.OnlineGameSearch.EOnlineGameSearchEntryType
/*enum EOnlineGameSearchEntryType
{
	OGSET_Property                                     = 0,
	OGSET_LocalizedSetting                             = 1,
	OGSET_ObjectProperty                               = 2,
	OGSET_MAX                                          = 3
};*/

// Enum Engine.OnlineGameSearch.EOnlineGameSearchSortType
/*enum EOnlineGameSearchSortType
{
	OGSSO_Ascending                                    = 0,
	OGSSO_Descending                                   = 1,
	OGSSO_MAX                                          = 2
};*/

// Enum Engine.PlayerController.EProgressMessageType
/*enum EProgressMessageType
{
	PMT_Clear                                          = 0,
	PMT_Information                                    = 1,
	PMT_AdminMessage                                   = 2,
	PMT_DownloadProgress                               = 3,
	PMT_ConnectionFailure                              = 4,
	PMT_PeerConnectionFailure                          = 5,
	PMT_PeerHostMigrationFailure                       = 6,
	PMT_SocketFailure                                  = 7,
	PMT_MAX                                            = 8
};*/

// Enum Engine.SkeletalMeshComponent.EPhysBodyOp
/*enum EPhysBodyOp
{
	PBO_None                                           = 0,
	PBO_Term                                           = 1,
	PBO_Disable                                        = 2,
	PBO_MAX                                            = 3
};*/

// Enum Engine.SkeletalMeshComponent.EFaceFXRegOp
/*enum EFaceFXRegOp
{
	FXRO_Add                                           = 0,
	FXRO_Multiply                                      = 1,
	FXRO_Replace                                       = 2,
	FXRO_MAX                                           = 3
};*/

// Enum Engine.SkeletalMeshComponent.EBoneVisibilityStatus
/*enum EBoneVisibilityStatus
{
	BVS_HiddenByParent                                 = 0,
	BVS_Visible                                        = 1,
	BVS_ExplicitlyHidden                               = 2,
	BVS_MAX                                            = 3
};*/

// Enum Engine.SkeletalMeshComponent.EFaceFXBlendMode
/*enum EFaceFXBlendMode
{
	FXBM_Overwrite                                     = 0,
	FXBM_Additive                                      = 1,
	FXBM_MAX                                           = 2
};*/

// Enum Engine.SkeletalMeshComponent.EInstanceWeightUsage
/*enum EInstanceWeightUsage
{
	IWU_PartialSwap                                    = 0,
	IWU_FullSwap                                       = 1,
	IWU_MAX                                            = 2
};*/

// Enum Engine.SkeletalMeshComponent.EAnimRotationOnly
/*enum EAnimRotationOnly
{
	EARO_AnimSet                                       = 0,
	EARO_ForceEnabled                                  = 1,
	EARO_ForceDisabled                                 = 2,
	EARO_MAX                                           = 3
};*/

// Enum Engine.SkeletalMeshComponent.ERootMotionRotationMode
/*enum ERootMotionRotationMode
{
	RMRM_Ignore                                        = 0,
	RMRM_RotateActor                                   = 1,
	RMRM_MAX                                           = 2
};*/

// Enum Engine.SkeletalMeshComponent.ERootMotionMode
/*enum ERootMotionMode
{
	RMM_Translate                                      = 0,
	RMM_Velocity                                       = 1,
	RMM_Ignore                                         = 2,
	RMM_Accel                                          = 3,
	RMM_Relative                                       = 4,
	RMM_MAX                                            = 5
};*/

// Enum Engine.SkeletalMeshComponent.EMaxDistanceScaleMode
/*enum EMaxDistanceScaleMode
{
	MDSM_Multiply                                      = 0,
	MDSM_Substract                                     = 1,
	MDSM_MAX                                           = 2
};*/

// Enum Engine.PlayerController.EInputMatchAction
/*enum EInputMatchAction
{
	IMA_GreaterThan                                    = 0,
	IMA_LessThan                                       = 1,
	IMA_MAX                                            = 2
};*/

// Enum Engine.PlayerController.EInputTypes
/*enum EInputTypes
{
	IT_XAxis                                           = 0,
	IT_YAxis                                           = 1,
	IT_MAX                                             = 2
};*/

// Enum Engine.Pylon.ENavMeshEdgeType
/*enum ENavMeshEdgeType
{
	NAVEDGE_Normal                                     = 0,
	NAVEDGE_Mantle                                     = 1,
	NAVEDGE_Coverslip                                  = 2,
	NAVEDGE_SwatTurn                                   = 3,
	NAVEDGE_DropDown                                   = 4,
	NAVEDGE_PathObject                                 = 5,
	NAVEDGE_BackRefDummy                               = 6,
	NAVEDGE_Jump                                       = 7,
	NAVEDGE_MAX                                        = 8
};*/

// Enum Engine.AmbientOcclusionEffect.EAmbientOcclusionQuality
/*enum EAmbientOcclusionQuality
{
	AO_High                                            = 0,
	AO_Medium                                          = 1,
	AO_Low                                             = 2,
	AO_MAX                                             = 3
};*/

// Enum Engine.Brush.ECsgOper
/*enum ECsgOper
{
	CSG_Active                                         = 0,
	CSG_Add                                            = 1,
	CSG_Subtract                                       = 2,
	CSG_Intersect                                      = 3,
	CSG_Deintersect                                    = 4,
	CSG_MAX                                            = 5
};*/

// Enum Engine.ReverbVolume.ReverbPreset
/*enum ReverbPreset
{
	REVERB_Default                                     = 0,
	REVERB_Bathroom                                    = 1,
	REVERB_StoneRoom                                   = 2,
	REVERB_Auditorium                                  = 3,
	REVERB_ConcertHall                                 = 4,
	REVERB_Cave                                        = 5,
	REVERB_Hallway                                     = 6,
	REVERB_StoneCorridor                               = 7,
	REVERB_Alley                                       = 8,
	REVERB_Forest                                      = 9,
	REVERB_City                                        = 10,
	REVERB_Mountains                                   = 11,
	REVERB_Quarry                                      = 12,
	REVERB_Plain                                       = 13,
	REVERB_ParkingLot                                  = 14,
	REVERB_SewerPipe                                   = 15,
	REVERB_Underwater                                  = 16,
	REVERB_SmallRoom                                   = 17,
	REVERB_MediumRoom                                  = 18,
	REVERB_LargeRoom                                   = 19,
	REVERB_MediumHall                                  = 20,
	REVERB_LargeHall                                   = 21,
	REVERB_Plate                                       = 22,
	REVERB_MAX                                         = 23
};*/

// Enum Engine.EngineTypes.EPathFindingError
/*enum EPathFindingError
{
	PATHERROR_STARTPOLYNOTFOUND                        = 0,
	PATHERROR_GOALPOLYNOTFOUND                         = 1,
	PATHERROR_ANCHORPYLONNOTFOUND                      = 2,
	PATHERROR_NOPATHFOUND                              = 3,
	PATHERROR_COMPUTEVALIDFINALDEST_FAIL               = 4,
	PATHERROR_GETNEXTMOVELOCATION_FAIL                 = 5,
	PATHERROR_MOVETIMEOUT                              = 6,
	PATHERROR_MAX                                      = 7
};*/

// Enum Engine.AudioDevice.EDebugState
/*enum EDebugState
{
	DEBUGSTATE_None                                    = 0,
	DEBUGSTATE_IsolateDryAudio                         = 1,
	DEBUGSTATE_IsolateReverb                           = 2,
	DEBUGSTATE_TestLPF                                 = 3,
	DEBUGSTATE_TestStereoBleed                         = 4,
	DEBUGSTATE_TestLFEBleed                            = 5,
	DEBUGSTATE_DisableLPF                              = 6,
	DEBUGSTATE_DisableRadio                            = 7,
	DEBUGSTATE_MAX                                     = 8
};*/

// Enum Engine.AudioDevice.ETTSSpeaker
/*enum ETTSSpeaker
{
	TTSSPEAKER_Paul                                    = 0,
	TTSSPEAKER_Harry                                   = 1,
	TTSSPEAKER_Frank                                   = 2,
	TTSSPEAKER_Dennis                                  = 3,
	TTSSPEAKER_Kit                                     = 4,
	TTSSPEAKER_Betty                                   = 5,
	TTSSPEAKER_Ursula                                  = 6,
	TTSSPEAKER_Rita                                    = 7,
	TTSSPEAKER_Wendy                                   = 8,
	TTSSPEAKER_MAX                                     = 9
};*/

// Enum Engine.AudioDevice.ESoundClassName
/*enum ESoundClassName
{
	Master                                             = 0,
	ESoundClassName_MAX                                = 1
};*/

// Enum Engine.SoundNodeAttenuation.ESoundDistanceCalc
/*enum ESoundDistanceCalc
{
	SOUNDDISTANCE_Normal                               = 0,
	SOUNDDISTANCE_InfiniteXYPlane                      = 1,
	SOUNDDISTANCE_InfiniteXZPlane                      = 2,
	SOUNDDISTANCE_InfiniteYZPlane                      = 3,
	SOUNDDISTANCE_MAX                                  = 4
};*/

// Enum Engine.SoundNodeAttenuation.SoundDistanceModel
/*enum SoundDistanceModel
{
	ATTENUATION_Linear                                 = 0,
	ATTENUATION_Logarithmic                            = 1,
	ATTENUATION_Inverse                                = 2,
	ATTENUATION_LogReverse                             = 3,
	ATTENUATION_NaturalSound                           = 4,
	ATTENUATION_MAX                                    = 5
};*/

// Enum Engine.PlatformInterfaceBase.EPlatformInterfaceDataType
/*enum EPlatformInterfaceDataType
{
	PIDT_None                                          = 0,
	PIDT_Int                                           = 1,
	PIDT_Float                                         = 2,
	PIDT_String                                        = 3,
	PIDT_Object                                        = 4,
	PIDT_Custom                                        = 5,
	PIDT_MAX                                           = 6
};*/

// Enum Engine.AnimSequence.AnimationKeyFormat
/*enum AnimationKeyFormat
{
	AKF_ConstantKeyLerp                                = 0,
	AKF_VariableKeyLerp                                = 1,
	AKF_PerTrackCompression                            = 2,
	AKF_MAX                                            = 3
};*/

// Enum Engine.AnimSequence.AnimationCompressionFormat
/*enum AnimationCompressionFormat
{
	ACF_None                                           = 0,
	ACF_Float96NoW                                     = 1,
	ACF_Fixed48NoW                                     = 2,
	ACF_IntervalFixed32NoW                             = 3,
	ACF_Fixed32NoW                                     = 4,
	ACF_Float32NoW                                     = 5,
	ACF_Identity                                       = 6,
	ACF_MAX                                            = 7
};*/

// Enum Engine.AnimNode.ESliderType
/*enum ESliderType
{
	ST_1D                                              = 0,
	ST_2D                                              = 1,
	ST_MAX                                             = 2
};*/

// Enum Engine.AnimNode_MultiBlendPerBone.EWeightCheck
/*enum EWeightCheck
{
	EWC_AnimNodeSlotNotPlaying                         = 0,
	EWC_MAX                                            = 1
};*/

// Enum Engine.AnimNode_MultiBlendPerBone.EBlendType
/*enum EBlendType
{
	EBT_ParentBoneSpace                                = 0,
	EBT_MeshSpace                                      = 1,
	EBT_MAX                                            = 2
};*/

// Enum Engine.AnimNodeAimOffset.EAnimAimDir
/*enum EAnimAimDir
{
	ANIMAIM_LEFTUP                                     = 0,
	ANIMAIM_CENTERUP                                   = 1,
	ANIMAIM_RIGHTUP                                    = 2,
	ANIMAIM_LEFTCENTER                                 = 3,
	ANIMAIM_CENTERCENTER                               = 4,
	ANIMAIM_RIGHTCENTER                                = 5,
	ANIMAIM_LEFTDOWN                                   = 6,
	ANIMAIM_CENTERDOWN                                 = 7,
	ANIMAIM_RIGHTDOWN                                  = 8,
	ANIMAIM_MAX                                        = 9
};*/

// Enum Engine.AnimNodeAimOffset.EAimID
/*enum EAimID
{
	EAID_LeftUp                                        = 0,
	EAID_LeftDown                                      = 1,
	EAID_RightUp                                       = 2,
	EAID_RightDown                                     = 3,
	EAID_ZeroUp                                        = 4,
	EAID_ZeroDown                                      = 5,
	EAID_ZeroLeft                                      = 6,
	EAID_ZeroRight                                     = 7,
	EAID_CellLU                                        = 8,
	EAID_CellCU                                        = 9,
	EAID_CellRU                                        = 10,
	EAID_CellLC                                        = 11,
	EAID_CellCC                                        = 12,
	EAID_CellRC                                        = 13,
	EAID_CellLD                                        = 14,
	EAID_CellCD                                        = 15,
	EAID_CellRD                                        = 16,
	EAID_MAX                                           = 17
};*/

// Enum Engine.AnimNodeBlendByBase.EBaseBlendType
/*enum EBaseBlendType
{
	BBT_ByActorTag                                     = 0,
	BBT_ByActorClass                                   = 1,
	BBT_MAX                                            = 2
};*/

// Enum Engine.AnimNodeSequence.ERootRotationOption
/*enum ERootRotationOption
{
	RRO_Default                                        = 0,
	RRO_Discard                                        = 1,
	RRO_Extract                                        = 2,
	RRO_MAX                                            = 3
};*/

// Enum Engine.AnimNodeSequence.ERootBoneAxis
/*enum ERootBoneAxis
{
	RBA_Default                                        = 0,
	RBA_Discard                                        = 1,
	RBA_Translate                                      = 2,
	RBA_MAX                                            = 3
};*/

// Enum Engine.EngineTypes.EBlendMode
/*enum EBlendMode
{
	BLEND_Opaque                                       = 0,
	BLEND_Masked                                       = 1,
	BLEND_Translucent                                  = 2,
	BLEND_Additive                                     = 3,
	BLEND_Modulate                                     = 4,
	BLEND_ModulateAndAdd                               = 5,
	BLEND_SoftMasked                                   = 6,
	BLEND_AlphaComposite                               = 7,
	BLEND_DitheredTranslucent                          = 8,
	BLEND_MAX                                          = 9
};*/

// Enum Engine.EngineTypes.EMaterialLightingModel
/*enum EMaterialLightingModel
{
	MLM_Phong                                          = 0,
	MLM_NonDirectional                                 = 1,
	MLM_Unlit                                          = 2,
	MLM_SHPRT                                          = 3,
	MLM_Custom                                         = 4,
	MLM_Anisotropic                                    = 5,
	MLM_MAX                                            = 6
};*/

// Enum Engine.EngineTypes.EMaterialTessellationMode
/*enum EMaterialTessellationMode
{
	MTM_NoTessellation                                 = 0,
	MTM_FlatTessellation                               = 1,
	MTM_PNTriangles                                    = 2,
	MTM_MAX                                            = 3
};*/

// Enum Engine.EngineTypes.EMobileValueSource
/*enum EMobileValueSource
{
	MVS_Constant                                       = 0,
	MVS_VertexColorRed                                 = 1,
	MVS_VertexColorGreen                               = 2,
	MVS_VertexColorBlue                                = 3,
	MVS_VertexColorAlpha                               = 4,
	MVS_BaseTextureRed                                 = 5,
	MVS_BaseTextureGreen                               = 6,
	MVS_BaseTextureBlue                                = 7,
	MVS_BaseTextureAlpha                               = 8,
	MVS_MaskTextureRed                                 = 9,
	MVS_MaskTextureGreen                               = 10,
	MVS_MaskTextureBlue                                = 11,
	MVS_MaskTextureAlpha                               = 12,
	MVS_NormalTextureAlpha                             = 13,
	MVS_EmissiveTextureRed                             = 14,
	MVS_EmissiveTextureGreen                           = 15,
	MVS_EmissiveTextureBlue                            = 16,
	MVS_EmissiveTextureAlpha                           = 17,
	MVS_MAX                                            = 18
};*/

// Enum Engine.EngineTypes.EMobileTextureBlendFactorSource
/*enum EMobileTextureBlendFactorSource
{
	MTBFS_VertexColor                                  = 0,
	MTBFS_MaskTexture                                  = 1,
	MTBFS_MAX                                          = 2
};*/

// Enum Engine.EngineTypes.EMobileTexCoordsSource
/*enum EMobileTexCoordsSource
{
	MTCS_TexCoords0                                    = 0,
	MTCS_TexCoords1                                    = 1,
	MTCS_TexCoords2                                    = 2,
	MTCS_TexCoords3                                    = 3,
	MTCS_MAX                                           = 4
};*/

// Enum Engine.EngineTypes.EMobileAlphaValueSource
/*enum EMobileAlphaValueSource
{
	MAVS_DiffuseTextureAlpha                           = 0,
	MAVS_MaskTextureRed                                = 1,
	MAVS_MaskTextureGreen                              = 2,
	MAVS_MaskTextureBlue                               = 3,
	MAVS_MAX                                           = 4
};*/

// Enum Engine.EngineTypes.EMobileColorMultiplySource
/*enum EMobileColorMultiplySource
{
	MCMS_None                                          = 0,
	MCMS_BaseTextureRed                                = 1,
	MCMS_BaseTextureGreen                              = 2,
	MCMS_BaseTextureBlue                               = 3,
	MCMS_BaseTextureAlpha                              = 4,
	MCMS_MaskTextureRed                                = 5,
	MCMS_MaskTextureGreen                              = 6,
	MCMS_MaskTextureBlue                               = 7,
	MCMS_MaskTextureAlpha                              = 8,
	MCMS_MAX                                           = 9
};*/

// Enum Engine.EngineTypes.EMobileEmissiveColorSource
/*enum EMobileEmissiveColorSource
{
	MECS_EmissiveTexture                               = 0,
	MECS_BaseTexture                                   = 1,
	MECS_Constant                                      = 2,
	MECS_MAX                                           = 3
};*/

// Enum Engine.EngineTypes.EMobileEnvironmentBlendMode
/*enum EMobileEnvironmentBlendMode
{
	MEBM_Add                                           = 0,
	MEBM_Lerp                                          = 1,
	MEBM_MAX                                           = 2
};*/

// Enum Engine.EngineTypes.EMobileSpecularMask
/*enum EMobileSpecularMask
{
	MSM_Constant                                       = 0,
	MSM_Luminance                                      = 1,
	MSM_DiffuseRed                                     = 2,
	MSM_DiffuseGreen                                   = 3,
	MSM_DiffuseBlue                                    = 4,
	MSM_DiffuseAlpha                                   = 5,
	MSM_MaskTextureRGB                                 = 6,
	MSM_MaskTextureRed                                 = 7,
	MSM_MaskTextureGreen                               = 8,
	MSM_MaskTextureBlue                                = 9,
	MSM_MaskTextureAlpha                               = 10,
	MSM_MAX                                            = 11
};*/

// Enum Engine.EngineTypes.EMobileAmbientOcclusionSource
/*enum EMobileAmbientOcclusionSource
{
	MAOS_Disabled                                      = 0,
	MAOS_VertexColorRed                                = 1,
	MAOS_VertexColorGreen                              = 2,
	MAOS_VertexColorBlue                               = 3,
	MAOS_VertexColorAlpha                              = 4,
	MAOS_MAX                                           = 5
};*/

// Enum Engine.EngineTypes.ELightingBuildQuality
/*enum ELightingBuildQuality
{
	Quality_Preview                                    = 0,
	Quality_Medium                                     = 1,
	Quality_High                                       = 2,
	Quality_Production                                 = 3,
	Quality_NoGlobalIllumination                       = 4,
	Quality_MAX                                        = 5
};*/

// Enum Engine.Pawn.EPathSearchType
/*enum EPathSearchType
{
	PST_Default                                        = 0,
	PST_Breadth                                        = 1,
	PST_NewBestPathTo                                  = 2,
	PST_Constraint                                     = 3,
	PST_MAX                                            = 4
};*/

// Enum Engine.DynamicLightEnvironmentComponent.EDynamicLightEnvironmentBoundsMethod
/*enum EDynamicLightEnvironmentBoundsMethod
{
	DLEB_OwnerComponents                               = 0,
	DLEB_ManualOverride                                = 1,
	DLEB_ActiveComponents                              = 2,
	DLEB_MAX                                           = 3
};*/

// Enum Engine.ApexDestructibleAsset.EImpactDamageOverride
/*enum EImpactDamageOverride
{
	IDO_None                                           = 0,
	IDO_On                                             = 1,
	IDO_Off                                            = 2,
	IDO_MAX                                            = 3
};*/

// Enum Engine.ApexDestructibleDamageParameters.EDamageParameterOverrideMode
/*enum EDamageParameterOverrideMode
{
	DPOM_Absolute                                      = 0,
	DPOM_Multiplier                                    = 1,
	DPOM_MAX                                           = 2
};*/

// Enum Engine.StaticMeshComponent.ELightmapModificationFunction
/*enum ELightmapModificationFunction
{
	MLMF_Modulate                                      = 0,
	MLMF_ModulateAlpha                                 = 1,
	MLMF_MAX                                           = 2
};*/

// Enum Engine.CameraShake.EInitialOscillatorOffset
/*enum EInitialOscillatorOffset
{
	EOO_OffsetRandom                                   = 0,
	EOO_OffsetZero                                     = 1,
	EOO_MAX                                            = 2
};*/

// Enum Engine.Canvas.ECanvasBlendMode
/*enum ECanvasBlendMode
{
	BLEND_CANVAS_Opaque                                = 0,
	BLEND_CANVAS_Masked                                = 1,
	BLEND_CANVAS_Translucent                           = 2,
	BLEND_CANVAS_Additive                              = 3,
	BLEND_CANVAS_Modulate                              = 4,
	BLEND_CANVAS_ModulateAndAdd                        = 5,
	BLEND_CANVAS_SoftMasked                            = 6,
	BLEND_CANVAS_AlphaComposite                        = 7,
	BLEND_CANVAS_DitheredTranslucent                   = 8,
	BLEND_CANVAS_AlphaOnly                             = 9,
	BLEND_CANVAS_MAX                                   = 10
};*/

// Enum Engine.CloudSaveSystem.SaveDataVersionSupport
/*enum SaveDataVersionSupport
{
	SaveDataVersionSupportLessThenEqual                = 0,
	SaveDataVersionSupportEqual                        = 1,
	SaveDataVersionSupportAny                          = 2,
	SaveDataVersionSupport_MAX                         = 3
};*/

// Enum Engine.CloudSaveSystem.SaveSlotOperationEnum
/*enum SaveSlotOperationEnum
{
	SSO_SET                                            = 0,
	SSO_GET                                            = 1,
	SSO_DELETE                                         = 2,
	SSO_MAX                                            = 3
};*/

// Enum Engine.CloudStorageBase.ECloudStorageDelegate
/*enum ECloudStorageDelegate
{
	CSD_KeyValueReadComplete                           = 0,
	CSD_KeyValueWriteComplete                          = 1,
	CSD_ValueChanged                                   = 2,
	CSD_DocumentQueryComplete                          = 3,
	CSD_DocumentReadComplete                           = 4,
	CSD_DocumentWriteComplete                          = 5,
	CSD_DocumentConflictDetected                       = 6,
	CSD_MAX                                            = 7
};*/

// Enum Engine.UIRoot.EInputPlatformType
/*enum EInputPlatformType
{
	IPT_PC                                             = 0,
	IPT                                                = 1,
	IPT_PS3                                            = 2,
	IPT_MAX                                            = 3
};*/

// Enum Engine.Interaction.ETouchType
/*enum ETouchType
{
	Touch_Began                                        = 0,
	Touch_Moved                                        = 1,
	Touch_Stationary                                   = 2,
	Touch_Ended                                        = 3,
	Touch_Cancelled                                    = 4,
	Touch_MAX                                          = 5
};*/

// Enum Engine.CoverGroup.ECoverGroupFillAction
/*enum ECoverGroupFillAction
{
	CGFA_Overwrite                                     = 0,
	CGFA_Add                                           = 1,
	CGFA_Remove                                        = 2,
	CGFA_Clear                                         = 3,
	CGFA_Cylinder                                      = 4,
	CGFA_MAX                                           = 5
};*/

// Enum Engine.CoverLink.ECoverLocationDescription
/*enum ECoverLocationDescription
{
	CoverDesc_None                                     = 0,
	CoverDesc_InWindow                                 = 1,
	CoverDesc_InDoorway                                = 2,
	CoverDesc_BehindCar                                = 3,
	CoverDesc_BehindTruck                              = 4,
	CoverDesc_OnTruck                                  = 5,
	CoverDesc_BehindBarrier                            = 6,
	CoverDesc_BehindColumn                             = 7,
	CoverDesc_BehindCrate                              = 8,
	CoverDesc_BehindWall                               = 9,
	CoverDesc_BehindStatue                             = 10,
	CoverDesc_BehindSandbags                           = 11,
	CoverDesc_MAX                                      = 12
};*/

// Enum Engine.CoverLink.ECoverAction
/*enum ECoverAction
{
	CA_Default                                         = 0,
	CA_BlindLeft                                       = 1,
	CA_BlindRight                                      = 2,
	CA_LeanLeft                                        = 3,
	CA_LeanRight                                       = 4,
	CA_PopUp                                           = 5,
	CA_BlindUp                                         = 6,
	CA_PeekLeft                                        = 7,
	CA_PeekRight                                       = 8,
	CA_PeekUp                                          = 9,
	CA_MAX                                             = 10
};*/

// Enum Engine.CoverLink.ECoverType
/*enum ECoverType
{
	CT_None                                            = 0,
	CT_Standing                                        = 1,
	CT_MidLevel                                        = 2,
	CT_MAX                                             = 3
};*/

// Enum Engine.CoverLink.EFireLinkID
/*enum EFireLinkID
{
	FLI_FireLink                                       = 0,
	FLI_RejectedFireLink                               = 1,
	FLI_MAX                                            = 2
};*/

// Enum Engine.CoverLink.ECoverDirection
/*enum ECoverDirection
{
	CD_Default                                         = 0,
	CD_Left                                            = 1,
	CD_Right                                           = 2,
	CD_Up                                              = 3,
	CD_MAX                                             = 4
};*/

// Enum Engine.DecalComponent.EDecalTransform
/*enum EDecalTransform
{
	DecalTransform_OwnerAbsolute                       = 0,
	DecalTransform_OwnerRelative                       = 1,
	DecalTransform_SpawnRelative                       = 2,
	DecalTransform_MAX                                 = 3
};*/

// Enum Engine.DecalComponent.EFilterMode
/*enum EFilterMode
{
	FM_None                                            = 0,
	FM_Ignore                                          = 1,
	FM_Affect                                          = 2,
	FM_MAX                                             = 3
};*/

// Enum Engine.MaterialInterface.EMaterialUsage
/*enum EMaterialUsage
{
	MATUSAGE_SkeletalMesh                              = 0,
	MATUSAGE_FracturedMeshes                           = 1,
	MATUSAGE_ParticleSprites                           = 2,
	MATUSAGE_BeamTrails                                = 3,
	MATUSAGE_ParticleSubUV                             = 4,
	MATUSAGE_SpeedTree                                 = 5,
	MATUSAGE_StaticLighting                            = 6,
	MATUSAGE_GammaCorrection                           = 7,
	MATUSAGE_LensFlare                                 = 8,
	MATUSAGE_InstancedMeshParticles                    = 9,
	MATUSAGE_FluidSurface                              = 10,
	MATUSAGE_Decals                                    = 11,
	MATUSAGE_MaterialEffect                            = 12,
	MATUSAGE_MorphTargets                              = 13,
	MATUSAGE_FogVolumes                                = 14,
	MATUSAGE_RadialBlur                                = 15,
	MATUSAGE_InstancedMeshes                           = 16,
	MATUSAGE_SplineMesh                                = 17,
	MATUSAGE_ScreenDoorFade                            = 18,
	MATUSAGE_APEXMesh                                  = 19,
	MATUSAGE_Terrain                                   = 20,
	MATUSAGE_Landscape                                 = 21,
	MATUSAGE_MobileLandscape                           = 22,
	MATUSAGE_MAX                                       = 23
};*/

// Enum Engine.LightComponent.ELightAffectsClassification
/*enum ELightAffectsClassification
{
	LAC_USER_SELECTED                                  = 0,
	LAC_DYNAMIC_AFFECTING                              = 1,
	LAC_STATIC_AFFECTING                               = 2,
	LAC_DYNAMIC_AND_STATIC_AFFECTING                   = 3,
	LAC_MAX                                            = 4
};*/

// Enum Engine.LightComponent.ELightShadowMode
/*enum ELightShadowMode
{
	LightShadow_Normal                                 = 0,
	LightShadow_Modulate                               = 1,
	LightShadow_ModulateBetter                         = 2,
	LightShadow_MAX                                    = 3
};*/

// Enum Engine.LightComponent.EShadowProjectionTechnique
/*enum EShadowProjectionTechnique
{
	ShadowProjTech_Default                             = 0,
	ShadowProjTech_PCF                                 = 1,
	ShadowProjTech_VSM                                 = 2,
	ShadowProjTech_BPCF_Low                            = 3,
	ShadowProjTech_BPCF_Medium                         = 4,
	ShadowProjTech_BPCF_High                           = 5,
	ShadowProjTech_MAX                                 = 6
};*/

// Enum Engine.LightComponent.EShadowFilterQuality
/*enum EShadowFilterQuality
{
	SFQ_Low                                            = 0,
	SFQ_Medium                                         = 1,
	SFQ_High                                           = 2,
	SFQ_MAX                                            = 3
};*/

// Enum Engine.DistributionFloatParameterBase.DistributionParamMode
/*enum DistributionParamMode
{
	DPM_Normal                                         = 0,
	DPM_Abs                                            = 1,
	DPM_Direct                                         = 2,
	DPM_MAX                                            = 3
};*/

// Enum Engine.DOFAndBloomEffect.EDOFType
/*enum EDOFType
{
	DOFType_SimpleDOF                                  = 0,
	DOFType_ReferenceDOF                               = 1,
	DOFType_BokehDOF                                   = 2,
	DOFType_MAX                                        = 3
};*/

// Enum Engine.DOFAndBloomEffect.EDOFQuality
/*enum EDOFQuality
{
	DOFQuality_Low                                     = 0,
	DOFQuality_Medium                                  = 1,
	DOFQuality_High                                    = 2,
	DOFQuality_MAX                                     = 3
};*/

// Enum Engine.DoorMarker.EDoorType
/*enum EDoorType
{
	DOOR_Shoot                                         = 0,
	DOOR_Touch                                         = 1,
	DOOR_MAX                                           = 2
};*/

// Enum Engine.ParticleSystemComponent.EParticleSysParamType
/*enum EParticleSysParamType
{
	PSPT_None                                          = 0,
	PSPT_Scalar                                        = 1,
	PSPT_ScalarRand                                    = 2,
	PSPT_Vector                                        = 3,
	PSPT_VectorRand                                    = 4,
	PSPT_Color                                         = 5,
	PSPT_Actor                                         = 6,
	PSPT_Material                                      = 7,
	PSPT_MAX                                           = 8
};*/

// Enum Engine.ParticleSystemComponent.ParticleReplayState
/*enum ParticleReplayState
{
	PRS_Disabled                                       = 0,
	PRS_Capturing                                      = 1,
	PRS_Replaying                                      = 2,
	PRS_MAX                                            = 3
};*/

// Enum Engine.ParticleSystemComponent.EParticleEventType
/*enum EParticleEventType
{
	EPET_Any                                           = 0,
	EPET_Spawn                                         = 1,
	EPET_Death                                         = 2,
	EPET_Collision                                     = 3,
	EPET_WorldAttractorCollision                       = 4,
	EPET_Kismet                                        = 5,
	EPET_MAX                                           = 6
};*/

// Enum Engine.ParticleSystem.ParticleSystemLODMethod
/*enum ParticleSystemLODMethod
{
	PARTICLESYSTEMLODMETHOD_Automatic                  = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet                  = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic          = 2,
	PARTICLESYSTEMLODMETHOD_MAX                        = 3
};*/

// Enum Engine.Engine.ETransitionType
/*enum ETransitionType
{
	TT_None                                            = 0,
	TT_Paused                                          = 1,
	TT_Loading                                         = 2,
	TT_Saving                                          = 3,
	TT_Connecting                                      = 4,
	TT_Precaching                                      = 5,
	TT_MAX                                             = 6
};*/

// Enum Engine.FacebookIntegration.EFacebookIntegrationDelegate
/*enum EFacebookIntegrationDelegate
{
	FID_AuthorizationComplete                          = 0,
	FID_FacebookRequestComplete                        = 1,
	FID_DialogComplete                                 = 2,
	FID_FriendsListComplete                            = 3,
	FID_MAX                                            = 4
};*/

// Enum Engine.FileWriter.FWFileType
/*enum FWFileType
{
	FWFT_Log                                           = 0,
	FWFT_Stats                                         = 1,
	FWFT_HTML                                          = 2,
	FWFT_User                                          = 3,
	FWFT_Debug                                         = 4,
	FWFT_MAX                                           = 5
};*/

// Enum Engine.FluidInfluenceComponent.EInfluenceType
/*enum EInfluenceType
{
	Fluid_Flow                                         = 0,
	Fluid_Raindrops                                    = 1,
	Fluid_Wave                                         = 2,
	Fluid_Sphere                                       = 3,
	Fluid_MAX                                          = 4
};*/

// Enum Engine.FontImportOptions.EFontImportCharacterSet
/*enum EFontImportCharacterSet
{
	FontICS_Default                                    = 0,
	FontICS_Ansi                                       = 1,
	FontICS_Symbol                                     = 2,
	FontICS_MAX                                        = 3
};*/

// Enum Engine.ForceFeedbackWaveform.EWaveformFunction
/*enum EWaveformFunction
{
	WF_Constant                                        = 0,
	WF_LinearIncreasing                                = 1,
	WF_LinearDecreasing                                = 2,
	WF_Sin0to90                                        = 3,
	WF_Sin90to180                                      = 4,
	WF_Sin0to180                                       = 5,
	WF_Noise                                           = 6,
	WF_MAX                                             = 7
};*/

// Enum Engine.WorldInfo.EHostMigrationProgress
/*enum EHostMigrationProgress
{
	HostMigration_None                                 = 0,
	HostMigration_FindingNewHost                       = 1,
	HostMigration_MigratingAsHost                      = 2,
	HostMigration_MigratingAsClient                    = 3,
	HostMigration_ClientTravel                         = 4,
	HostMigration_HostReadyToTravel                    = 5,
	HostMigration_Failed                               = 6,
	HostMigration_MAX                                  = 7
};*/

// Enum Engine.WorldInfo.EConsoleType
/*enum EConsoleType
{
	CONSOLE_Any                                        = 0,
	CONSOLE_Xbox360                                    = 1,
	CONSOLE_PS3                                        = 2,
	CONSOLE_Mobile                                     = 3,
	CONSOLE_IPhone                                     = 4,
	CONSOLE_Android                                    = 5,
	CONSOLE_Kindle                                     = 6,
	CONSOLE_WiiU                                       = 7,
	CONSOLE_Flash                                      = 8,
	CONSOLE_MAX                                        = 9
};*/

// Enum Engine.WorldInfo.EPreferredLightmapType
/*enum EPreferredLightmapType
{
	EPLT_Default                                       = 0,
	EPLT_Directional                                   = 1,
	EPLT_Simple                                        = 2,
	EPLT_MAX                                           = 3
};*/

// Enum Engine.WorldInfo.EVisibilityAggressiveness
/*enum EVisibilityAggressiveness
{
	VIS_LeastAggressive                                = 0,
	VIS_ModeratelyAggressive                           = 1,
	VIS_MostAggressive                                 = 2,
	VIS_Max                                            = 3
};*/

// Enum Engine.WorldInfo.ENetMode
/*enum ENetMode
{
	NM_Standalone                                      = 0,
	NM_DedicatedServer                                 = 1,
	NM_ListenServer                                    = 2,
	NM_Client                                          = 3,
	NM_MAX                                             = 4
};*/

// Enum Engine.GameEngine.EFullyLoadPackageType
/*enum EFullyLoadPackageType
{
	FULLYLOAD_Map                                      = 0,
	FULLYLOAD_Game_PreLoadClass                        = 1,
	FULLYLOAD_Game_PostLoadClass                       = 2,
	FULLYLOAD_Always                                   = 3,
	FULLYLOAD_Mutator                                  = 4,
	FULLYLOAD_MAX                                      = 5
};*/

// Enum Engine.GameInfo.EStandbyType
/*enum EStandbyType
{
	STDBY_Rx                                           = 0,
	STDBY_Tx                                           = 1,
	STDBY_BadPing                                      = 2,
	STDBY_MAX                                          = 3
};*/

// Enum Engine.GameplayEvents.EGameStatGroups
/*enum EGameStatGroups
{
	GSG_EngineStats                                    = 0,
	GSG_Game                                           = 1,
	GSG_Team                                           = 2,
	GSG_Player                                         = 3,
	GSG_Weapon                                         = 4,
	GSG_Damage                                         = 5,
	GSG_Projectile                                     = 6,
	GSG_Pawn                                           = 7,
	GSG_GameSpecific                                   = 8,
	GSG_Aggregate                                      = 9,
	GSG_MAX                                            = 10
};*/

// Enum Engine.GameViewportClient.ESplitScreenType
/*enum ESplitScreenType
{
	eSST_NONE                                          = 0,
	eSST_2P_HORIZONTAL                                 = 1,
	eSST_2P_VERTICAL                                   = 2,
	eSST_3P_FAVOR_TOP                                  = 3,
	eSST_3P_FAVOR_BOTTOM                               = 4,
	eSST_4P                                            = 5,
	eSST_MAX                                           = 6
};*/

// Enum Engine.GameViewportClient.ESafeZoneType
/*enum ESafeZoneType
{
	eSZ_TOP                                            = 0,
	eSZ_BOTTOM                                         = 1,
	eSZ_LEFT                                           = 2,
	eSZ_RIGHT                                          = 3,
	eSZ_MAX                                            = 4
};*/

// Enum Engine.GameViewportClient.ESetMode
/*enum ESetMode
{
	SetMode_Toggle                                     = 0,
	SetMode_Enable                                     = 1,
	SetMode_Disable                                    = 2,
	SetMode_MAX                                        = 3
};*/

// Enum Engine.GoogleIntegration.EGoogleIntegrationDelegate
/*enum EGoogleIntegrationDelegate
{
	GDEL_AuthorizationComplete                         = 0,
	GDEL_FriendsListComplete                           = 1,
	GDEL_YouTubeSubscriptionListComplete               = 2,
	GDEL_YouTubeSubscriptionAddComplete                = 3,
	GDEL_MAX                                           = 4
};*/

// Enum Engine.InAppMessageBase.EInAppMessageInterfaceDelegate
/*enum EInAppMessageInterfaceDelegate
{
	IAMD_InAppSMSUIComplete                            = 0,
	IAMD_InAppEmailComplete                            = 1,
	IAMD_MAX                                           = 2
};*/

// Enum Engine.InGameAdManager.EAdManagerDelegate
/*enum EAdManagerDelegate
{
	AMD_ClickedBanner                                  = 0,
	AMD_UserClosedAd                                   = 1,
	AMD_MAX                                            = 2
};*/

// Enum Engine.InstancedFoliageSettings.FoliageCullOption
/*enum FoliageCullOption
{
	FOLIAGECULL_Cull                                   = 0,
	FOLIAGECULL_ScaleZ                                 = 1,
	FOLIAGECULL_ScaleXYZ                               = 2,
	FOLIAGECULL_TranslateZ                             = 3,
	FOLIAGECULL_MAX                                    = 4
};*/

// Enum Engine.Interface_NavMeshPathObstacle.EEdgeHandlingStatus
/*enum EEdgeHandlingStatus
{
	EHS_AddedBothDirs                                  = 0,
	EHS_Added0to1                                      = 1,
	EHS_Added1to0                                      = 2,
	EHS_AddedNone                                      = 3,
	EHS_MAX                                            = 4
};*/

// Enum Engine.InterpTrack.ETrackActiveCondition
/*enum ETrackActiveCondition
{
	ETAC_Always                                        = 0,
	ETAC_GoreEnabled                                   = 1,
	ETAC_GoreDisabled                                  = 2,
	ETAC_MAX                                           = 3
};*/

// Enum Engine.InterpTrackHeadTracking.EHeadTrackingAction
/*enum EHeadTrackingAction
{
	EHTA_DisableHeadTracking                           = 0,
	EHTA_EnableHeadTracking                            = 1,
	EHTA_MAX                                           = 2
};*/

// Enum Engine.InterpTrackToggle.ETrackToggleAction
/*enum ETrackToggleAction
{
	ETTA_Off                                           = 0,
	ETTA_On                                            = 1,
	ETTA_Toggle                                        = 2,
	ETTA_Trigger                                       = 3,
	ETTA_MAX                                           = 4
};*/

// Enum Engine.InterpTrackVisibility.EVisibilityTrackCondition
/*enum EVisibilityTrackCondition
{
	EVTC_Always                                        = 0,
	EVTC_GoreEnabled                                   = 1,
	EVTC_GoreDisabled                                  = 2,
	EVTC_MAX                                           = 3
};*/

// Enum Engine.InterpTrackVisibility.EVisibilityTrackAction
/*enum EVisibilityTrackAction
{
	EVTA_Hide                                          = 0,
	EVTA_Show                                          = 1,
	EVTA_Toggle                                        = 2,
	EVTA_MAX                                           = 3
};*/

// Enum Engine.InterpTrackMove.EInterpTrackMoveFrame
/*enum EInterpTrackMoveFrame
{
	IMF_World                                          = 0,
	IMF_RelativeToInitial                              = 1,
	IMF_MAX                                            = 2
};*/

// Enum Engine.InterpTrackMove.EInterpTrackMoveRotMode
/*enum EInterpTrackMoveRotMode
{
	IMR_Keyframed                                      = 0,
	IMR_LookAtGroup                                    = 1,
	IMR_Ignore                                         = 2,
	IMR_MAX                                            = 3
};*/

// Enum Engine.InterpTrackMoveAxis.EInterpMoveAxis
/*enum EInterpMoveAxis
{
	AXIS_TranslationX                                  = 0,
	AXIS_TranslationY                                  = 1,
	AXIS_TranslationZ                                  = 2,
	AXIS_RotationX                                     = 3,
	AXIS_RotationY                                     = 4,
	AXIS_RotationZ                                     = 5,
	AXIS_MAX                                           = 6
};*/

// Enum Engine.LandscapeProxy.H7LandscapeType
/*enum H7LandscapeType
{
	LT_Default                                         = 0,
	LT_Ground                                          = 1,
	LT_Water                                           = 2,
	LT_MAX                                             = 3
};*/

// Enum Engine.Landscape.ELandscapeSetupErrors
/*enum ELandscapeSetupErrors
{
	LSE_None                                           = 0,
	LSE_NoLandscapeInfo                                = 1,
	LSE_CollsionXY                                     = 2,
	LSE_NoLayerInfo                                    = 3,
	LSE_MAX                                            = 4
};*/

// Enum Engine.LandscapeGizmoActiveActor.ELandscapeGizmoType
/*enum ELandscapeGizmoType
{
	LGT_None                                           = 0,
	LGT_Height                                         = 1,
	LGT_Weight                                         = 2,
	LGT_MAX                                            = 3
};*/

// Enum Engine.LevelGridVolume.LevelGridCellShape
/*enum LevelGridCellShape
{
	LGCS_Box                                           = 0,
	LGCS_Hex                                           = 1,
	LGCS_MAX                                           = 2
};*/

// Enum Engine.LevelStreamingVolume.EStreamingVolumeUsage
/*enum EStreamingVolumeUsage
{
	SVB_Loading                                        = 0,
	SVB_LoadingAndVisibility                           = 1,
	SVB_VisibilityBlockingOnLoad                       = 2,
	SVB_BlockingOnLoad                                 = 3,
	SVB_LoadingNotVisible                              = 4,
	SVB_MAX                                            = 5
};*/

// Enum Engine.MaterialExpressionAntialiasedTextureMask.ETextureColorChannel
/*enum ETextureColorChannel
{
	TCC_Red                                            = 0,
	TCC_Green                                          = 1,
	TCC_Blue                                           = 2,
	TCC_Alpha                                          = 3,
	TCC_MAX                                            = 4
};*/

// Enum Engine.MaterialExpressionCustom.ECustomMaterialOutputType
/*enum ECustomMaterialOutputType
{
	CMOT_Float1                                        = 0,
	CMOT_Float2                                        = 1,
	CMOT_Float3                                        = 2,
	CMOT_Float4                                        = 3,
	CMOT_MAX                                           = 4
};*/

// Enum Engine.MaterialExpressionDepthOfFieldFunction.EDepthOfFieldFunctionValue
/*enum EDepthOfFieldFunctionValue
{
	TDOF_NearAndFarMask                                = 0,
	TDOF_NearMask                                      = 1,
	TDOF_FarMask                                       = 2,
	TDOF_MAX                                           = 3
};*/

// Enum Engine.MaterialExpressionFunctionInput.EFunctionInputType
/*enum EFunctionInputType
{
	FunctionInput_Scalar                               = 0,
	FunctionInput_Vector2                              = 1,
	FunctionInput_Vector3                              = 2,
	FunctionInput_Vector4                              = 3,
	FunctionInput_Texture2D                            = 4,
	FunctionInput_TextureCube                          = 5,
	FunctionInput_StaticBool                           = 6,
	FunctionInput_MAX                                  = 7
};*/

// Enum Engine.MaterialExpressionLandscapeLayerBlend.ELandscapeLayerBlendType
/*enum ELandscapeLayerBlendType
{
	LB_AlphaBlend                                      = 0,
	LB_HeightBlend                                     = 1,
	LB_MAX                                             = 2
};*/

// Enum Engine.MaterialExpressionSceneTexture.ESceneTextureType
/*enum ESceneTextureType
{
	SceneTex_Lighting                                  = 0,
	SceneTex_MAX                                       = 1
};*/

// Enum Engine.MaterialExpressionTerrainLayerCoords.ETerrainCoordMappingType
/*enum ETerrainCoordMappingType
{
	TCMT_Auto                                          = 0,
	TCMT_XY                                            = 1,
	TCMT_XZ                                            = 2,
	TCMT_YZ                                            = 3,
	TCMT_MAX                                           = 4
};*/

// Enum Engine.MaterialExpressionTransform.EMaterialVectorCoordTransformSource
/*enum EMaterialVectorCoordTransformSource
{
	TRANSFORMSOURCE_World                              = 0,
	TRANSFORMSOURCE_Local                              = 1,
	TRANSFORMSOURCE_Tangent                            = 2,
	TRANSFORMSOURCE_View                               = 3,
	TRANSFORMSOURCE_MAX                                = 4
};*/

// Enum Engine.MaterialExpressionTransform.EMaterialVectorCoordTransform
/*enum EMaterialVectorCoordTransform
{
	TRANSFORM_World                                    = 0,
	TRANSFORM_View                                     = 1,
	TRANSFORM_Local                                    = 2,
	TRANSFORM_Tangent                                  = 3,
	TRANSFORM_MAX                                      = 4
};*/

// Enum Engine.MaterialExpressionTransformPosition.EMaterialPositionTransformSource
/*enum EMaterialPositionTransformSource
{
	TRANSFORMPOSSOURCE_Local                           = 0,
	TRANSFORMPOSSOURCE_PostProjection                  = 1,
	TRANSFORMPOSSOURCE_MAX                             = 2
};*/

// Enum Engine.MaterialExpressionTransformPosition.EMaterialPositionTransform
/*enum EMaterialPositionTransform
{
	TRANSFORMPOS_World                                 = 0,
	TRANSFORMPOS_MAX                                   = 1
};*/

// Enum Engine.MicroTransactionBase.EMicroTransactionDelegate
/*enum EMicroTransactionDelegate
{
	MTD_PurchaseQueryComplete                          = 0,
	MTD_PurchaseComplete                               = 1,
	MTD_MAX                                            = 2
};*/

// Enum Engine.MicroTransactionBase.EMicroTransactionResult
/*enum EMicroTransactionResult
{
	MTR_Succeeded                                      = 0,
	MTR_Failed                                         = 1,
	MTR_Canceled                                       = 2,
	MTR_RestoredFromServer                             = 3,
	MTR_MAX                                            = 4
};*/

// Enum Engine.NxForceFieldGeneric.FFG_ForceFieldCoordinates
/*enum FFG_ForceFieldCoordinates
{
	FFG_CARTESIAN                                      = 0,
	FFG_SPHERICAL                                      = 1,
	FFG_CYLINDRICAL                                    = 2,
	FFG_TOROIDAL                                       = 3,
	FFG_MAX                                            = 4
};*/

// Enum Engine.NxGenericForceFieldBrush.FFB_ForceFieldCoordinates
/*enum FFB_ForceFieldCoordinates
{
	FFB_CARTESIAN                                      = 0,
	FFB_SPHERICAL                                      = 1,
	FFB_CYLINDRICAL                                    = 2,
	FFB_TOROIDAL                                       = 3,
	FFB_MAX                                            = 4
};*/

// Enum Engine.OnlinePlayerStorage.EOnlineProfilePropertyOwner
/*enum EOnlineProfilePropertyOwner
{
	OPPO_None                                          = 0,
	OPPO_OnlineService                                 = 1,
	OPPO_Game                                          = 2,
	OPPO_MAX                                           = 3
};*/

// Enum Engine.OnlinePlayerStorage.EOnlinePlayerStorageAsyncState
/*enum EOnlinePlayerStorageAsyncState
{
	OPAS_NotStarted                                    = 0,
	OPAS_Read                                          = 1,
	OPAS_Write                                         = 2,
	OPAS_Finished                                      = 3,
	OPAS_MAX                                           = 4
};*/

// Enum Engine.OnlineProfileSettings.EProfileSettingID
/*enum EProfileSettingID
{
	PSI_Unknown                                        = 0,
	PSI_ControllerVibration                            = 1,
	PSI_YInversion                                     = 2,
	PSI_GamerCred                                      = 3,
	PSI_GamerRep                                       = 4,
	PSI_VoiceMuted                                     = 5,
	PSI_VoiceThruSpeakers                              = 6,
	PSI_VoiceVolume                                    = 7,
	PSI_GamerPictureKey                                = 8,
	PSI_GamerMotto                                     = 9,
	PSI_GamerTitlesPlayed                              = 10,
	PSI_GamerAchievementsEarned                        = 11,
	PSI_GameDifficulty                                 = 12,
	PSI_ControllerSensitivity                          = 13,
	PSI_PreferredColor1                                = 14,
	PSI_PreferredColor2                                = 15,
	PSI_AutoAim                                        = 16,
	PSI_AutoCenter                                     = 17,
	PSI_MovementControl                                = 18,
	PSI_RaceTransmission                               = 19,
	PSI_RaceCameraLocation                             = 20,
	PSI_RaceBrakeControl                               = 21,
	PSI_RaceAcceleratorControl                         = 22,
	PSI_GameCredEarned                                 = 23,
	PSI_GameAchievementsEarned                         = 24,
	PSI_EndLiveIds                                     = 25,
	PSI_ProfileVersionNum                              = 26,
	PSI_ProfileSaveCount                               = 27,
	PSI_MAX                                            = 28
};*/

// Enum Engine.OnlineProfileSettings.EProfileDifficultyOptions
/*enum EProfileDifficultyOptions
{
	PDO_Normal                                         = 0,
	PDO_Easy                                           = 1,
	PDO_Hard                                           = 2,
	PDO_MAX                                            = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfileControllerSensitivityOptions
/*enum EProfileControllerSensitivityOptions
{
	PCSO_Medium                                        = 0,
	PCSO_Low                                           = 1,
	PCSO_High                                          = 2,
	PCSO_MAX                                           = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfilePreferredColorOptions
/*enum EProfilePreferredColorOptions
{
	PPCO_None                                          = 0,
	PPCO_Black                                         = 1,
	PPCO_White                                         = 2,
	PPCO_Yellow                                        = 3,
	PPCO_Orange                                        = 4,
	PPCO_Pink                                          = 5,
	PPCO_Red                                           = 6,
	PPCO_Purple                                        = 7,
	PPCO_Blue                                          = 8,
	PPCO_Green                                         = 9,
	PPCO_Brown                                         = 10,
	PPCO_Silver                                        = 11,
	PPCO_MAX                                           = 12
};*/

// Enum Engine.OnlineProfileSettings.EProfileAutoAimOptions
/*enum EProfileAutoAimOptions
{
	PAAO_Off                                           = 0,
	PAAO_On                                            = 1,
	PAAO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileAutoCenterOptions
/*enum EProfileAutoCenterOptions
{
	PACO_Off                                           = 0,
	PACO_On                                            = 1,
	PACO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileMovementControlOptions
/*enum EProfileMovementControlOptions
{
	PMCO_L_Thumbstick                                  = 0,
	PMCO_R_Thumbstick                                  = 1,
	PMCO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceTransmissionOptions
/*enum EProfileRaceTransmissionOptions
{
	PRTO_Auto                                          = 0,
	PRTO_Manual                                        = 1,
	PRTO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceCameraLocationOptions
/*enum EProfileRaceCameraLocationOptions
{
	PRCLO_Behind                                       = 0,
	PRCLO_Front                                        = 1,
	PRCLO_Inside                                       = 2,
	PRCLO_MAX                                          = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceBrakeControlOptions
/*enum EProfileRaceBrakeControlOptions
{
	PRBCO_Trigger                                      = 0,
	PRBCO_Button                                       = 1,
	PRBCO_MAX                                          = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceAcceleratorControlOptions
/*enum EProfileRaceAcceleratorControlOptions
{
	PRACO_Trigger                                      = 0,
	PRACO_Button                                       = 1,
	PRACO_MAX                                          = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileYInversionOptions
/*enum EProfileYInversionOptions
{
	PYIO_Off                                           = 0,
	PYIO_On                                            = 1,
	PYIO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileXInversionOptions
/*enum EProfileXInversionOptions
{
	PXIO_Off                                           = 0,
	PXIO_On                                            = 1,
	PXIO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileOmniDirEvadeOptions
/*enum EProfileOmniDirEvadeOptions
{
	PODI_Off                                           = 0,
	PODI_On                                            = 1,
	PODI_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileControllerVibrationToggleOptions
/*enum EProfileControllerVibrationToggleOptions
{
	PCVTO_Off                                          = 0,
	PCVTO_IgnoreThis                                   = 1,
	PCVTO_IgnoreThis2                                  = 2,
	PCVTO_On                                           = 3,
	PCVTO_MAX                                          = 4
};*/

// Enum Engine.OnlineProfileSettings.EProfileVoiceThruSpeakersOptions
/*enum EProfileVoiceThruSpeakersOptions
{
	PVTSO_Off                                          = 0,
	PVTSO_On                                           = 1,
	PVTSO_Both                                         = 2,
	PVTSO_MAX                                          = 3
};*/

// Enum Engine.ParticleEmitter.EParticleBurstMethod
/*enum EParticleBurstMethod
{
	EPBM_Instant                                       = 0,
	EPBM_Interpolated                                  = 1,
	EPBM_MAX                                           = 2
};*/

// Enum Engine.ParticleEmitter.EParticleSubUVInterpMethod
/*enum EParticleSubUVInterpMethod
{
	PSUVIM_None                                        = 0,
	PSUVIM_Linear                                      = 1,
	PSUVIM_Linear_Blend                                = 2,
	PSUVIM_Random                                      = 3,
	PSUVIM_Random_Blend                                = 4,
	PSUVIM_MAX                                         = 5
};*/

// Enum Engine.ParticleEmitter.EEmitterRenderMode
/*enum EEmitterRenderMode
{
	ERM_Normal                                         = 0,
	ERM_Point                                          = 1,
	ERM_Cross                                          = 2,
	ERM_None                                           = 3,
	ERM_MAX                                            = 4
};*/

// Enum Engine.ParticleModule.EModuleType
/*enum EModuleType
{
	EPMT_General                                       = 0,
	EPMT_TypeData                                      = 1,
	EPMT_Beam                                          = 2,
	EPMT_Trail                                         = 3,
	EPMT_Spawn                                         = 4,
	EPMT_Required                                      = 5,
	EPMT_Event                                         = 6,
	EPMT_MAX                                           = 7
};*/

// Enum Engine.ParticleModule.EParticleSourceSelectionMethod
/*enum EParticleSourceSelectionMethod
{
	EPSSM_Random                                       = 0,
	EPSSM_Sequential                                   = 1,
	EPSSM_MAX                                          = 2
};*/

// Enum Engine.ParticleModuleAttractorBoneSocket.EBoneSocketAttractorFalloffType
/*enum EBoneSocketAttractorFalloffType
{
	BSFOFF_Constant                                    = 0,
	BSFOFF_Linear                                      = 1,
	BSFOFF_Exponent                                    = 2,
	BSFOFF_MAX                                         = 3
};*/

// Enum Engine.ParticleModuleAttractorBoneSocket.ELocationBoneSocketDestination
/*enum ELocationBoneSocketDestination
{
	BONESOCKETDEST_Bones                               = 0,
	BONESOCKETDEST_Sockets                             = 1,
	BONESOCKETDEST_MAX                                 = 2
};*/

// Enum Engine.ParticleModuleAttractorBoneSocket.ELocationBoneSocketDestSelectionMethod
/*enum ELocationBoneSocketDestSelectionMethod
{
	BONESOCKETDESTSEL_Sequential                       = 0,
	BONESOCKETDESTSEL_Random                           = 1,
	BONESOCKETDESTSEL_RandomExhaustive                 = 2,
	BONESOCKETDESTSEL_BlendAll                         = 3,
	BONESOCKETDESTSEL_MAX                              = 4
};*/

// Enum Engine.ParticleModuleAttractorParticle.EAttractorParticleSelectionMethod
/*enum EAttractorParticleSelectionMethod
{
	EAPSM_Random                                       = 0,
	EAPSM_Sequential                                   = 1,
	EAPSM_MAX                                          = 2
};*/

// Enum Engine.ParticleModuleAttractorSkelVertSurface.EVertSurfaceAttractorFalloffType
/*enum EVertSurfaceAttractorFalloffType
{
	VSFOFF_Constant                                    = 0,
	VSFOFF_Linear                                      = 1,
	VSFOFF_Exponent                                    = 2,
	VSFOFF_MAX                                         = 3
};*/

// Enum Engine.ParticleModuleAttractorSkelVertSurface.EAttractorSkelVertSurfaceDestination
/*enum EAttractorSkelVertSurfaceDestination
{
	VERTSURFACEDEST_Vert                               = 0,
	VERTSURFACEDEST_Surface                            = 1,
	VERTSURFACEDEST_MAX                                = 2
};*/

// Enum Engine.ParticleModuleBeamBase.Beam2SourceTargetMethod
/*enum Beam2SourceTargetMethod
{
	PEB2STM_Default                                    = 0,
	PEB2STM_UserSet                                    = 1,
	PEB2STM_Emitter                                    = 2,
	PEB2STM_Particle                                   = 3,
	PEB2STM_Actor                                      = 4,
	PEB2STM_MAX                                        = 5
};*/

// Enum Engine.ParticleModuleBeamBase.Beam2SourceTargetTangentMethod
/*enum Beam2SourceTargetTangentMethod
{
	PEB2STTM_Direct                                    = 0,
	PEB2STTM_UserSet                                   = 1,
	PEB2STTM_Distribution                              = 2,
	PEB2STTM_Emitter                                   = 3,
	PEB2STTM_MAX                                       = 4
};*/

// Enum Engine.ParticleModuleBeamModifier.BeamModifierType
/*enum BeamModifierType
{
	PEB2MT_Source                                      = 0,
	PEB2MT_Target                                      = 1,
	PEB2MT_MAX                                         = 2
};*/

// Enum Engine.ParticleModuleCameraOffset.EParticleCameraOffsetUpdateMethod
/*enum EParticleCameraOffsetUpdateMethod
{
	EPCOUM_DirectSet                                   = 0,
	EPCOUM_Additive                                    = 1,
	EPCOUM_Scalar                                      = 2,
	EPCOUM_MAX                                         = 3
};*/

// Enum Engine.ParticleModuleCollisionBase.EParticleCollisionComplete
/*enum EParticleCollisionComplete
{
	EPCC_Kill                                          = 0,
	EPCC_Freeze                                        = 1,
	EPCC_HaltCollisions                                = 2,
	EPCC_FreezeTranslation                             = 3,
	EPCC_FreezeRotation                                = 4,
	EPCC_FreezeMovement                                = 5,
	EPCC_MAX                                           = 6
};*/

// Enum Engine.ParticleModuleCollision.ParticleAttractorActionType
/*enum ParticleAttractorActionType
{
	PAAT_None                                          = 0,
	PAAT_Destroy                                       = 1,
	PAAT_Freeze                                        = 2,
	PAAT_Event                                         = 3,
	PAAT_MAX                                           = 4
};*/

// Enum Engine.ParticleModuleLocationBoneSocket.ELocationBoneSocketSource
/*enum ELocationBoneSocketSource
{
	BONESOCKETSOURCE_Bones                             = 0,
	BONESOCKETSOURCE_Sockets                           = 1,
	BONESOCKETSOURCE_MAX                               = 2
};*/

// Enum Engine.ParticleModuleLocationBoneSocket.ELocationBoneSocketSelectionMethod
/*enum ELocationBoneSocketSelectionMethod
{
	BONESOCKETSEL_Sequential                           = 0,
	BONESOCKETSEL_Random                               = 1,
	BONESOCKETSEL_RandomExhaustive                     = 2,
	BONESOCKETSEL_MAX                                  = 3
};*/

// Enum Engine.ParticleModuleLocationEmitter.ELocationEmitterSelectionMethod
/*enum ELocationEmitterSelectionMethod
{
	ELESM_Random                                       = 0,
	ELESM_Sequential                                   = 1,
	ELESM_MAX                                          = 2
};*/

// Enum Engine.ParticleModuleLocationPrimitiveCylinder.CylinderHeightAxis
/*enum CylinderHeightAxis
{
	PMLPC_HEIGHTAXIS_X                                 = 0,
	PMLPC_HEIGHTAXIS_Y                                 = 1,
	PMLPC_HEIGHTAXIS_Z                                 = 2,
	PMLPC_HEIGHTAXIS_MAX                               = 3
};*/

// Enum Engine.ParticleModuleLocationSkelVertSurface.ELocationSkelVertSurfaceSource
/*enum ELocationSkelVertSurfaceSource
{
	VERTSURFACESOURCE_Vert                             = 0,
	VERTSURFACESOURCE_Surface                          = 1,
	VERTSURFACESOURCE_MAX                              = 2
};*/

// Enum Engine.ParticleModuleLocationStaticVertSurface.ELocationStaticVertSurfaceSource
/*enum ELocationStaticVertSurfaceSource
{
	VERTSTATICSURFACESOURCE_Vert                       = 0,
	VERTSTATICSURFACESOURCE_Surface                    = 1,
	VERTSTATICSURFACESOURCE_MAX                        = 2
};*/

// Enum Engine.ParticleModuleOrbit.EOrbitChainMode
/*enum EOrbitChainMode
{
	EOChainMode_Add                                    = 0,
	EOChainMode_Scale                                  = 1,
	EOChainMode_Link                                   = 2,
	EOChainMode_MAX                                    = 3
};*/

// Enum Engine.ParticleModuleOrientationAxisLock.EParticleAxisLock
/*enum EParticleAxisLock
{
	EPAL_NONE                                          = 0,
	EPAL_X                                             = 1,
	EPAL_Y                                             = 2,
	EPAL_Z                                             = 3,
	EPAL_NEGATIVE_X                                    = 4,
	EPAL_NEGATIVE_Y                                    = 5,
	EPAL_NEGATIVE_Z                                    = 6,
	EPAL_ROTATE_X                                      = 7,
	EPAL_ROTATE_Y                                      = 8,
	EPAL_ROTATE_Z                                      = 9,
	EPAL_MAX                                           = 10
};*/

// Enum Engine.ParticleModuleParameterDynamic.EEmitterDynamicParameterValue
/*enum EEmitterDynamicParameterValue
{
	EDPV_UserSet                                       = 0,
	EDPV_VelocityX                                     = 1,
	EDPV_VelocityY                                     = 2,
	EDPV_VelocityZ                                     = 3,
	EDPV_VelocityMag                                   = 4,
	EDPV_MAX                                           = 5
};*/

// Enum Engine.ParticleModulePhysicsVolumes.EParticleLevelInfluenceType
/*enum EParticleLevelInfluenceType
{
	LIT_Never                                          = 0,
	LIT_OutsidePhysicsVolumes                          = 1,
	LIT_Always                                         = 2,
	LIT_MAX                                            = 3
};*/

// Enum Engine.ParticleSpriteEmitter.EParticleScreenAlignment
/*enum EParticleScreenAlignment
{
	PSA_Square                                         = 0,
	PSA_Rectangle                                      = 1,
	PSA_Velocity                                       = 2,
	PSA_TypeSpecific                                   = 3,
	PSA_MAX                                            = 4
};*/

// Enum Engine.ParticleModuleRequired.EParticleSortMode
/*enum EParticleSortMode
{
	PSORTMODE_None                                     = 0,
	PSORTMODE_ViewProjDepth                            = 1,
	PSORTMODE_DistanceToView                           = 2,
	PSORTMODE_Age_OldestFirst                          = 3,
	PSORTMODE_Age_NewestFirst                          = 4,
	PSORTMODE_MAX                                      = 5
};*/

// Enum Engine.ParticleModuleRequired.EEmitterNormalsMode
/*enum EEmitterNormalsMode
{
	ENM_CameraFacing                                   = 0,
	ENM_Spherical                                      = 1,
	ENM_Cylindrical                                    = 2,
	ENM_MAX                                            = 3
};*/

// Enum Engine.ParticleModuleTrailSource.ETrail2SourceMethod
/*enum ETrail2SourceMethod
{
	PET2SRCM_Default                                   = 0,
	PET2SRCM_Particle                                  = 1,
	PET2SRCM_Actor                                     = 2,
	PET2SRCM_MAX                                       = 3
};*/

// Enum Engine.ParticleModuleTrailSpawn.ETrail2SpawnMethod
/*enum ETrail2SpawnMethod
{
	PET2SM_Emitter                                     = 0,
	PET2SM_Velocity                                    = 1,
	PET2SM_Distance                                    = 2,
	PET2SM_MAX                                         = 3
};*/

// Enum Engine.ParticleModuleTrailTaper.ETrailTaperMethod
/*enum ETrailTaperMethod
{
	PETTM_None                                         = 0,
	PETTM_Full                                         = 1,
	PETTM_Partial                                      = 2,
	PETTM_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleTypeDataBeam.EBeamMethod
/*enum EBeamMethod
{
	PEBM_Distance                                      = 0,
	PEBM_EndPoints                                     = 1,
	PEBM_EndPoints_Interpolated                        = 2,
	PEBM_UserSet_EndPoints                             = 3,
	PEBM_UserSet_EndPoints_Interpolated                = 4,
	PEBM_MAX                                           = 5
};*/

// Enum Engine.ParticleModuleTypeDataBeam.EBeamEndPointMethod
/*enum EBeamEndPointMethod
{
	PEBEPM_Calculated                                  = 0,
	PEBEPM_Distribution                                = 1,
	PEBEPM_Distribution_Constant                       = 2,
	PEBEPM_MAX                                         = 3
};*/

// Enum Engine.ParticleModuleTypeDataBeam2.EBeam2Method
/*enum EBeam2Method
{
	PEB2M_Distance                                     = 0,
	PEB2M_Target                                       = 1,
	PEB2M_Branch                                       = 2,
	PEB2M_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleTypeDataBeam2.EBeamTaperMethod
/*enum EBeamTaperMethod
{
	PEBTM_None                                         = 0,
	PEBTM_Full                                         = 1,
	PEBTM_Partial                                      = 2,
	PEBTM_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleTypeDataMesh.EMeshScreenAlignment
/*enum EMeshScreenAlignment
{
	PSMA_MeshFaceCameraWithRoll                        = 0,
	PSMA_MeshFaceCameraWithSpin                        = 1,
	PSMA_MeshFaceCameraWithLockedAxis                  = 2,
	PSMA_MAX                                           = 3
};*/

// Enum Engine.ParticleModuleTypeDataMesh.EMeshCameraFacingUpAxis
/*enum EMeshCameraFacingUpAxis
{
	CameraFacing_NoneUP                                = 0,
	CameraFacing_ZUp                                   = 1,
	CameraFacing_NegativeZUp                           = 2,
	CameraFacing_YUp                                   = 3,
	CameraFacing_NegativeYUp                           = 4,
	CameraFacing_MAX                                   = 5
};*/

// Enum Engine.ParticleModuleTypeDataMesh.EMeshCameraFacingOptions
/*enum EMeshCameraFacingOptions
{
	XAxisFacing_NoUp                                   = 0,
	XAxisFacing_ZUp                                    = 1,
	XAxisFacing_NegativeZUp                            = 2,
	XAxisFacing_YUp                                    = 3,
	XAxisFacing_NegativeYUp                            = 4,
	LockedAxis_ZAxisFacing                             = 5,
	LockedAxis_NegativeZAxisFacing                     = 6,
	LockedAxis_YAxisFacing                             = 7,
	LockedAxis_NegativeYAxisFacing                     = 8,
	VelocityAligned_ZAxisFacing                        = 9,
	VelocityAligned_NegativeZAxisFacing                = 10,
	VelocityAligned_YAxisFacing                        = 11,
	VelocityAligned_NegativeYAxisFacing                = 12,
	EMeshCameraFacingOptions_MAX                       = 13
};*/

// Enum Engine.ParticleModuleTypeDataMeshPhysX.EPhysXMeshRotationMethod
/*enum EPhysXMeshRotationMethod
{
	PMRM_Disabled                                      = 0,
	PMRM_Spherical                                     = 1,
	PMRM_Box                                           = 2,
	PMRM_LongBox                                       = 3,
	PMRM_FlatBox                                       = 4,
	PMRM_Velocity                                      = 5,
	PMRM_MAX                                           = 6
};*/

// Enum Engine.ParticleModuleTypeDataRibbon.ETrailsRenderAxisOption
/*enum ETrailsRenderAxisOption
{
	Trails_CameraUp                                    = 0,
	Trails_SourceUp                                    = 1,
	Trails_WorldUp                                     = 2,
	Trails_MAX                                         = 3
};*/

// Enum Engine.ParticleSystem.EParticleSystemOcclusionBoundsMethod
/*enum EParticleSystemOcclusionBoundsMethod
{
	EPSOBM_None                                        = 0,
	EPSOBM_ParticleBounds                              = 1,
	EPSOBM_CustomBounds                                = 2,
	EPSOBM_MAX                                         = 3
};*/

// Enum Engine.ParticleSystem.EParticleSystemUpdateMode
/*enum EParticleSystemUpdateMode
{
	EPSUM_RealTime                                     = 0,
	EPSUM_FixedTime                                    = 1,
	EPSUM_MAX                                          = 2
};*/

// Enum Engine.ProcBuildingRuleset.EProcBuildingAxis
/*enum EProcBuildingAxis
{
	EPBAxis_X                                          = 0,
	EPBAxis_Z                                          = 1,
	EPBAxis_MAX                                        = 2
};*/

// Enum Engine.ProcBuilding.EScopeEdge
/*enum EScopeEdge
{
	EPSA_Top                                           = 0,
	EPSA_Bottom                                        = 1,
	EPSA_Left                                          = 2,
	EPSA_Right                                         = 3,
	EPSA_None                                          = 4,
	EPSA_MAX                                           = 5
};*/

// Enum Engine.ProcBuilding.EBuildingStatsBrowserColumns
/*enum EBuildingStatsBrowserColumns
{
	BSBC_Name                                          = 0,
	BSBC_Ruleset                                       = 1,
	BSBC_NumStaticMeshComps                            = 2,
	BSBC_NumInstancedStaticMeshComps                   = 3,
	BSBC_NumInstancedTris                              = 4,
	BSBC_LightmapMemBytes                              = 5,
	BSBC_ShadowmapMemBytes                             = 6,
	BSBC_LODDiffuseMemBytes                            = 7,
	BSBC_LODLightingMemBytes                           = 8,
	BSBC_MAX                                           = 9
};*/

// Enum Engine.ProcBuilding.EPBCornerType
/*enum EPBCornerType
{
	EPBC_Default                                       = 0,
	EPBC_Chamfer                                       = 1,
	EPBC_Round                                         = 2,
	EPBC_MAX                                           = 3
};*/

// Enum Engine.PBRuleNodeEdgeAngle.EProcBuildingEdge
/*enum EProcBuildingEdge
{
	EPBE_Top                                           = 0,
	EPBE_Bottom                                        = 1,
	EPBE_Left                                          = 2,
	EPBE_Right                                         = 3,
	EPBE_MAX                                           = 4
};*/

// Enum Engine.PhysicalMaterial.EPhysEffectType
/*enum EPhysEffectType
{
	EPMET_Impact                                       = 0,
	EPMET_Slide                                        = 1,
	EPMET_MAX                                          = 2
};*/

// Enum Engine.PhysXParticleSystem.ESimulationMethod
/*enum ESimulationMethod
{
	ESM_SPH                                            = 0,
	ESM_NO_PARTICLE_INTERACTION                        = 1,
	ESM_MIXED_MODE                                     = 2,
	ESM_MAX                                            = 3
};*/

// Enum Engine.PhysXParticleSystem.EPacketSizeMultiplier
/*enum EPacketSizeMultiplier
{
	EPSM                                               = 0,
	EPSM01                                             = 1,
	EPSM02                                             = 2,
	EPSM03                                             = 3,
	EPSM04                                             = 4,
	EPSM05                                             = 5,
	EPSM_MAX                                           = 6
};*/

// Enum Engine.SceneCaptureComponent.ESceneCaptureViewMode
/*enum ESceneCaptureViewMode
{
	SceneCapView_Lit                                   = 0,
	SceneCapView_Unlit                                 = 1,
	SceneCapView_LitNoShadows                          = 2,
	SceneCapView_Wire                                  = 3,
	SceneCapView_MAX                                   = 4
};*/

// Enum Engine.RB_BodySetup.ESleepFamily
/*enum ESleepFamily
{
	SF_Normal                                          = 0,
	SF_Sensitive                                       = 1,
	SF_MAX                                             = 2
};*/

// Enum Engine.RB_RadialForceActor.ERadialForceType
/*enum ERadialForceType
{
	RFT_Force                                          = 0,
	RFT_Impulse                                        = 1,
	RFT_MAX                                            = 2
};*/

// Enum Engine.Route.ERouteDirection
/*enum ERouteDirection
{
	ERD_Forward                                        = 0,
	ERD_Reverse                                        = 1,
	ERD_MAX                                            = 2
};*/

// Enum Engine.Route.ERouteType
/*enum ERouteType
{
	ERT_Linear                                         = 0,
	ERT_Loop                                           = 1,
	ERT_Circle                                         = 2,
	ERT_MAX                                            = 3
};*/

// Enum Engine.Route.ERouteFillAction
/*enum ERouteFillAction
{
	RFA_Overwrite                                      = 0,
	RFA_Add                                            = 1,
	RFA_Remove                                         = 2,
	RFA_Clear                                          = 3,
	RFA_MAX                                            = 4
};*/

// Enum Engine.SeqAct_ActorFactory.EPointSelection
/*enum EPointSelection
{
	PS_Normal                                          = 0,
	PS_Random                                          = 1,
	PS_Reverse                                         = 2,
	PS_MAX                                             = 3
};*/

// Enum Engine.SeqAct_SetMesh.EMeshType
/*enum EMeshType
{
	MeshType_StaticMesh                                = 0,
	MeshType_SkeletalMesh                              = 1,
	MeshType_MAX                                       = 2
};*/

// Enum Engine.WorldAttractor.EWorldAttractorFalloffType
/*enum EWorldAttractorFalloffType
{
	FOFF_Constant                                      = 0,
	FOFF_Linear                                        = 1,
	FOFF_Exponent                                      = 2,
	FOFF_MAX                                           = 3
};*/

// Enum Engine.SeqEvent_ParticleEvent.EParticleEventOutputType
/*enum EParticleEventOutputType
{
	ePARTICLEOUT_Spawn                                 = 0,
	ePARTICLEOUT_Death                                 = 1,
	ePARTICLEOUT_Collision                             = 2,
	ePARTICLEOUT_AttractorCollision                    = 3,
	ePARTICLEOUT_Kismet                                = 4,
	ePARTICLEOUT_MAX                                   = 5
};*/

// Enum Engine.SkelControlBase.EBoneControlSpace
/*enum EBoneControlSpace
{
	BCS_WorldSpace                                     = 0,
	BCS_ActorSpace                                     = 1,
	BCS_ComponentSpace                                 = 2,
	BCS_ParentBoneSpace                                = 3,
	BCS_BoneSpace                                      = 4,
	BCS_OtherBoneSpace                                 = 5,
	BCS_BaseMeshSpace                                  = 6,
	BCS_MAX                                            = 7
};*/

// Enum Engine.SkelControlSpline.ESplineControlRotMode
/*enum ESplineControlRotMode
{
	SCR_NoChange                                       = 0,
	SCR_AlongSpline                                    = 1,
	SCR_Interpolate                                    = 2,
	SCR_MAX                                            = 3
};*/

// Enum Engine.SkeletalMesh.SoftBodyBoneType
/*enum SoftBodyBoneType
{
	SOFTBODYBONE_Fixed                                 = 0,
	SOFTBODYBONE_BreakableAttachment                   = 1,
	SOFTBODYBONE_TwoWayAttachment                      = 2,
	SOFTBODYBONE_MAX                                   = 3
};*/

// Enum Engine.SkeletalMesh.ClothBoneType
/*enum ClothBoneType
{
	CLOTHBONE_Fixed                                    = 0,
	CLOTHBONE_BreakableAttachment                      = 1,
	CLOTHBONE_TearLine                                 = 2,
	CLOTHBONE_MAX                                      = 3
};*/

// Enum Engine.SkeletalMesh.SkeletalMeshOptimizationNormalMode
/*enum SkeletalMeshOptimizationNormalMode
{
	SMONM_Recalculate                                  = 0,
	SMONM_RecalculateSoft                              = 1,
	SMONM_RecalculateHard                              = 2,
	SMONM_MAX                                          = 3
};*/

// Enum Engine.SkeletalMesh.SkeletalMeshOptimizationImportance
/*enum SkeletalMeshOptimizationImportance
{
	SMOI_Off                                           = 0,
	SMOI_Lowest                                        = 1,
	SMOI_Low                                           = 2,
	SMOI_Normal                                        = 3,
	SMOI_High                                          = 4,
	SMOI_Highest                                       = 5,
	SMOI_MAX                                           = 6
};*/

// Enum Engine.SkeletalMesh.SkeletalMeshOptimizationType
/*enum SkeletalMeshOptimizationType
{
	SMOT_NumOfTriangles                                = 0,
	SMOT_MaxDeviation                                  = 1,
	SMOT_MAX                                           = 2
};*/

// Enum Engine.SkeletalMesh.TriangleSortOption
/*enum TriangleSortOption
{
	TRISORT_None                                       = 0,
	TRISORT_CenterRadialDistance                       = 1,
	TRISORT_Random                                     = 2,
	TRISORT_MergeContiguous                            = 3,
	TRISORT_Custom                                     = 4,
	TRISORT_CustomLeftRight                            = 5,
	TRISORT_MAX                                        = 6
};*/

// Enum Engine.SkeletalMesh.BoneBreakOption
/*enum BoneBreakOption
{
	BONEBREAK_SoftPreferred                            = 0,
	BONEBREAK_AutoDetect                               = 1,
	BONEBREAK_RigidPreferred                           = 2,
	BONEBREAK_MAX                                      = 3
};*/

// Enum Engine.SkeletalMesh.TriangleSortAxis
/*enum TriangleSortAxis
{
	TSA_X_Axis                                         = 0,
	TSA_Y_Axis                                         = 1,
	TSA_Z_Axis                                         = 2,
	TSA_MAX                                            = 3
};*/

// Enum Engine.SkeletalMesh.ClothMovementScaleGen
/*enum ClothMovementScaleGen
{
	ECMDM_DistToFixedVert                              = 0,
	ECMDM_VertexBoneWeight                             = 1,
	ECMDM_Empty                                        = 2,
	ECMDM_MAX                                          = 3
};*/

// Enum Engine.SoundNodeWave.EDecompressionType
/*enum EDecompressionType
{
	DTYPE_Setup                                        = 0,
	DTYPE_Invalid                                      = 1,
	DTYPE_Preview                                      = 2,
	DTYPE_Native                                       = 3,
	DTYPE_RealTime                                     = 4,
	DTYPE_Procedural                                   = 5,
	DTYPE_Xenon                                        = 6,
	DTYPE_MAX                                          = 7
};*/

// Enum Engine.SpeedTreeComponent.ESpeedTreeMeshType
/*enum ESpeedTreeMeshType
{
	STMT_MinMinusOne                                   = 0,
	STMT_Branches1                                     = 1,
	STMT_Branches2                                     = 2,
	STMT_Fronds                                        = 3,
	STMT_LeafCards                                     = 4,
	STMT_LeafMeshes                                    = 5,
	STMT_Billboards                                    = 6,
	STMT_Max                                           = 7
};*/

// Enum Engine.SVehicleWheel.EWheelSide
/*enum EWheelSide
{
	SIDE_None                                          = 0,
	SIDE_Left                                          = 1,
	SIDE_Right                                         = 2,
	SIDE_MAX                                           = 3
};*/

// Enum Engine.TerrainMaterial.ETerrainMappingType
/*enum ETerrainMappingType
{
	TMT_Auto                                           = 0,
	TMT_XY                                             = 1,
	TMT_XZ                                             = 2,
	TMT_YZ                                             = 3,
	TMT_MAX                                            = 4
};*/

// Enum Engine.TextureFlipBook.TextureFlipBookMethod
/*enum TextureFlipBookMethod
{
	TFBM_UL_ROW                                        = 0,
	TFBM_UL_COL                                        = 1,
	TFBM_UR_ROW                                        = 2,
	TFBM_UR_COL                                        = 3,
	TFBM_LL_ROW                                        = 4,
	TFBM_LL_COL                                        = 5,
	TFBM_LR_ROW                                        = 6,
	TFBM_LR_COL                                        = 7,
	TFBM_RANDOM                                        = 8,
	TFBM_MAX                                           = 9
};*/

// Enum Engine.TextureMovie.EMovieStreamSource
/*enum EMovieStreamSource
{
	MovieStream_File                                   = 0,
	MovieStream_Memory                                 = 1,
	MovieStream_MAX                                    = 2
};*/

// Enum Engine.TwitterIntegrationBase.ETwitterRequestMethod
/*enum ETwitterRequestMethod
{
	TRM_Get                                            = 0,
	TRM_Post                                           = 1,
	TRM_Delete                                         = 2,
	TRM_MAX                                            = 3
};*/

// Enum Engine.TwitterIntegrationBase.ETwitterIntegrationDelegate
/*enum ETwitterIntegrationDelegate
{
	TID_AuthorizeComplete                              = 0,
	TID_TweetUIComplete                                = 1,
	TID_RequestComplete                                = 2,
	TID_MAX                                            = 3
};*/

// Enum Engine.UberPostProcessEffect.ETonemapperType
/*enum ETonemapperType
{
	Tonemapper_Off                                     = 0,
	Tonemapper_Filmic                                  = 1,
	Tonemapper_Customizable                            = 2,
	Tonemapper_MAX                                     = 3
};*/

// Enum Engine.UberPostProcessEffect.EPostProcessAAType
/*enum EPostProcessAAType
{
	PostProcessAA_Off                                  = 0,
	PostProcessAA_FXAA0                                = 1,
	PostProcessAA_FXAA1                                = 2,
	PostProcessAA_FXAA2                                = 3,
	PostProcessAA_FXAA3                                = 4,
	PostProcessAA_FXAA4                                = 5,
	PostProcessAA_FXAA5                                = 6,
	PostProcessAA_MLAA                                 = 7,
	PostProcessAA_MAX                                  = 8
};*/

// Enum Engine.UIDataProvider_MenuItem.EMenuOptionType
/*enum EMenuOptionType
{
	MENUOT_ComboReadOnly                               = 0,
	MENUOT_ComboNumeric                                = 1,
	MENUOT_CheckBox                                    = 2,
	MENUOT_Slider                                      = 3,
	MENUOT_Spinner                                     = 4,
	MENUOT_EditBox                                     = 5,
	MENUOT_CollectionCheckBox                          = 6,
	MENUOT_CollapsingList                              = 7,
	MENUOT_MAX                                         = 8
};*/

// Enum Engine.UIDataStore_OnlineStats.EStatsFetchType
/*enum EStatsFetchType
{
	SFT_Player                                         = 0,
	SFT_CenteredOnPlayer                               = 1,
	SFT_Friends                                        = 2,
	SFT_TopRankings                                    = 3,
	SFT_MAX                                            = 4
};*/

// Enum Engine.Weapon.EWeaponFireType
/*enum EWeaponFireType
{
	EWFT_InstantHit                                    = 0,
	EWFT_Projectile                                    = 1,
	EWFT_Custom                                        = 2,
	EWFT_None                                          = 3,
	EWFT_MAX                                           = 4
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class Engine.Actor ( Property size: 154 iter: 448) 
// Class name index: 164 
// 0x01E0 (0x0240 - 0x0060)
class AActor : public UObject
{
public:
	TArray< class UActorComponent* >                   Components;                                       		// 0x0060 (0x0010) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UActorComponent* >                   AllComponents;                                    		// 0x0070 (0x0010) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     Location;                                         		// 0x0080 (0x000C) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	struct FRotator                                    Rotation;                                         		// 0x008C (0x000C) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	float                                              DrawScale;                                        		// 0x0098 (0x0004) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	struct FVector                                     DrawScale3D;                                      		// 0x009C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     PrePivot;                                         		// 0x00A8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      EditorIconColor;                                  		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRenderCommandFence                         DetachFence;                                      		// 0x00B8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CustomTimeDilation;                               		// 0x00BC (0x0004) [0x0000000000000000]              
	unsigned char                                      Physics;                                          		// 0x00C0 (0x0001) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	unsigned char                                      RemoteRole;                                       		// 0x00C1 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      Role;                                             		// 0x00C2 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      CollisionType;                                    		// 0x00C3 (0x0001) [0x0000000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned char                                      ReplicatedCollisionType;                          		// 0x00C4 (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      TickGroup;                                        		// 0x00C5 (0x0001) [0x0000000000000002]              ( CPF_Const )
	class AActor*                                      Owner;                                            		// 0x00C8 (0x0008) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	class AActor*                                      Base;                                             		// 0x00D0 (0x0008) [0x0000000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	TArray< struct FTimerData >                        Timers;                                           		// 0x00D8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bStatic : 1;                                      		// 0x00E8 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bHidden : 1;                                      		// 0x00E8 (0x0004) [0x0000000000000023] [0x00000002] ( CPF_Edit | CPF_Const | CPF_Net )
	unsigned long                                      bNoDelete : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bDeleteMe : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bTicked : 1;                                      		// 0x00E8 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bOnlyOwnerSee : 1;                                		// 0x00E8 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bTickIsDisabled : 1;                              		// 0x00E8 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bWorldGeometry : 1;                               		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bIgnoreRigidBodyPawns : 1;                        		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bOrientOnSlope : 1;                               		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIgnoreEncroachers : 1;                           		// 0x00E8 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bPushedByEncroachers : 1;                         		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bDestroyedByInterpActor : 1;                      		// 0x00E8 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bRouteBeginPlayEvenIfStatic : 1;                  		// 0x00E8 (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bIsMoving : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bAlwaysEncroachCheck : 1;                         		// 0x00E8 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bHasAlternateTargetLocation : 1;                  		// 0x00E8 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bCanStepUpOn : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bNetTemporary : 1;                                		// 0x00E8 (0x0004) [0x0000000000000002] [0x00040000] ( CPF_Const )
	unsigned long                                      bOnlyRelevantToOwner : 1;                         		// 0x00E8 (0x0004) [0x0000000000000002] [0x00080000] ( CPF_Const )
	unsigned long                                      bNetDirty : 1;                                    		// 0x00E8 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bAlwaysRelevant : 1;                              		// 0x00E8 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bReplicateInstigator : 1;                         		// 0x00E8 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bReplicateMovement : 1;                           		// 0x00E8 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bSkipActorPropertyReplication : 1;                		// 0x00E8 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bUpdateSimulatedPosition : 1;                     		// 0x00E8 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bTearOff : 1;                                     		// 0x00E8 (0x0004) [0x0000000000000020] [0x04000000] ( CPF_Net )
	unsigned long                                      bOnlyDirtyReplication : 1;                        		// 0x00E8 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bAllowFluidSurfaceInteraction : 1;                		// 0x00E8 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bDemoRecording : 1;                               		// 0x00E8 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bDemoOwner : 1;                                   		// 0x00E8 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bForceDemoRelevant : 1;                           		// 0x00E8 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bNetInitialRotation : 1;                          		// 0x00EC (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bReplicateRigidBodyLocation : 1;                  		// 0x00EC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bKillDuringLevelTransition : 1;                   		// 0x00EC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bExchangedRoles : 1;                              		// 0x00EC (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bConsiderAllStaticMeshComponentsForStreaming : 1; 		// 0x00EC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDebug : 1;                                       		// 0x00EC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bPostRenderIfNotVisible : 1;                      		// 0x00EC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bForceNetUpdate : 1;                              		// 0x00EC (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bPendingNetUpdate : 1;                            		// 0x00EC (0x0004) [0x0000000000002002] [0x00000100] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHardAttach : 1;                                  		// 0x00EC (0x0004) [0x0000000000000023] [0x00000200] ( CPF_Edit | CPF_Const | CPF_Net )
	unsigned long                                      bIgnoreBaseRotation : 1;                          		// 0x00EC (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bShadowParented : 1;                              		// 0x00EC (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bSkipAttachedMoves : 1;                           		// 0x00EC (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bCanBeAdheredTo : 1;                              		// 0x00EC (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bCanBeFrictionedTo : 1;                           		// 0x00EC (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bHurtEntry : 1;                                   		// 0x00EC (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bGameRelevant : 1;                                		// 0x00EC (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bMovable : 1;                                     		// 0x00EC (0x0004) [0x0000000000000002] [0x00020000] ( CPF_Const )
	unsigned long                                      bDestroyInPainVolume : 1;                         		// 0x00EC (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bCanBeDamaged : 1;                                		// 0x00EC (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bShouldBaseAtStartup : 1;                         		// 0x00EC (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bPendingDelete : 1;                               		// 0x00EC (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bCanTeleport : 1;                                 		// 0x00EC (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bAlwaysTick : 1;                                  		// 0x00EC (0x0004) [0x0000000000000002] [0x00800000] ( CPF_Const )
	unsigned long                                      bBlocksNavigation : 1;                            		// 0x00EC (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      BlockRigidBody : 1;                               		// 0x00EC (0x0004) [0x0000000000002003] [0x02000000] ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned long                                      bCollideWhenPlacing : 1;                          		// 0x00EC (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bCollideActors : 1;                               		// 0x00EC (0x0004) [0x0000000000000022] [0x08000000] ( CPF_Const | CPF_Net )
	unsigned long                                      bCollideWorld : 1;                                		// 0x00EC (0x0004) [0x0000000000000020] [0x10000000] ( CPF_Net )
	unsigned long                                      bCollideComplex : 1;                              		// 0x00EC (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bBlockActors : 1;                                 		// 0x00EC (0x0004) [0x0000000000000020] [0x40000000] ( CPF_Net )
	unsigned long                                      bProjTarget : 1;                                  		// 0x00EC (0x0004) [0x0000000000000020] [0x80000000] ( CPF_Net )
	unsigned long                                      bBlocksTeleport : 1;                              		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bMoveIgnoresDestruction : 1;                      		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bProjectileMoveSingleBlocking : 1;                		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bNoEncroachCheck : 1;                             		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCollideAsEncroacher : 1;                         		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bPhysRigidBodyOutOfWorldCheck : 1;                		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bComponentOutsideWorld : 1;                       		// 0x00F0 (0x0004) [0x0000000000002002] [0x00000040] ( CPF_Const | CPF_Transient )
	unsigned long                                      bForceOctreeSNFilter : 1;                         		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bForceOctreeMNFilter : 1;                         		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bRigidBodyWasAwake : 1;                           		// 0x00F0 (0x0004) [0x0000000000002002] [0x00000200] ( CPF_Const | CPF_Transient )
	unsigned long                                      bCallRigidBodyWakeEvents : 1;                     		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bBounce : 1;                                      		// 0x00F0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bJustTeleported : 1;                              		// 0x00F0 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bEnableMobileTouch : 1;                           		// 0x00F0 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bNetInitial : 1;                                  		// 0x00F0 (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bNetOwner : 1;                                    		// 0x00F0 (0x0004) [0x0000000000000022] [0x00008000] ( CPF_Const | CPF_Net )
	unsigned long                                      bHiddenEd : 1;                                    		// 0x00F0 (0x0004) [0x0000000000000002] [0x00010000] ( CPF_Const )
	unsigned long                                      bEditable : 1;                                    		// 0x00F0 (0x0004) [0x0000000000000002] [0x00020000] ( CPF_Const )
	unsigned long                                      bHiddenEdGroup : 1;                               		// 0x00F0 (0x0004) [0x0000000020000002] [0x00040000] ( CPF_Const | CPF_Deprecated )
	unsigned long                                      bHiddenEdLayer : 1;                               		// 0x00F0 (0x0004) [0x0000000000000002] [0x00080000] ( CPF_Const )
	unsigned long                                      bHiddenEdCustom : 1;                              		// 0x00F0 (0x0004) [0x0000000000000002] [0x00100000] ( CPF_Const )
	unsigned long                                      bHiddenEdTemporary : 1;                           		// 0x00F0 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bHiddenEdLevel : 1;                               		// 0x00F0 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bHiddenEdScene : 1;                               		// 0x00F0 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bIsErrored : 1;                                   		// 0x00F0 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bEdShouldSnap : 1;                                		// 0x00F0 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bTempEditor : 1;                                  		// 0x00F0 (0x0004) [0x0000000000002002] [0x04000000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bPathColliding : 1;                               		// 0x00F0 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bPathTemp : 1;                                    		// 0x00F0 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bScriptInitialized : 1;                           		// 0x00F0 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bLockLocation : 1;                                		// 0x00F0 (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      bForceAllowKismetModification : 1;                		// 0x00F0 (0x0004) [0x0000000000000002] [0x80000000] ( CPF_Const )
	unsigned long                                      bDebugEffectIsRelevant : 1;                       		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                SkelMeshCompTickTag;                              		// 0x00F8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NetTag;                                           		// 0x00FC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NetUpdateTime;                                    		// 0x0100 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NetUpdateFrequency;                               		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              NetPriority;                                      		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              LastNetUpdateTime;                                		// 0x010C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              TimeSinceLastTick;                                		// 0x0110 (0x0004) [0x0000000000000000]              
	class APawn*                                       Instigator;                                       		// 0x0114 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class AWorldInfo*                                  WorldInfo;                                        		// 0x011C (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LifeSpan;                                         		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              CreationTime;                                     		// 0x0128 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastRenderTime;                                   		// 0x012C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       Tag;                                              		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       InitialState;                                     		// 0x0138 (0x0008) [0x0000000000000000]              
	struct FName                                       Layer;                                            		// 0x0140 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       Group;                                            		// 0x0148 (0x0008) [0x0000000020000000]              ( CPF_Deprecated )
	struct FQWord                                      HiddenEditorViews;                                		// 0x0150 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AActor* >                            Touching;                                         		// 0x0158 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class AActor* >                            Children;                                         		// 0x0168 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              LatentFloat;                                      		// 0x0178 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UAnimNodeSequence*                           LatentSeqNode;                                    		// 0x017C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class APhysicsVolume*                              PhysicsVolume;                                    		// 0x0184 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     Velocity;                                         		// 0x018C (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     Acceleration;                                     		// 0x0198 (0x000C) [0x0000000000000000]              
	struct FVector                                     AngularVelocity;                                  		// 0x01A4 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class USkeletalMeshComponent*                      BaseSkelComponent;                                		// 0x01B0 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       BaseBoneName;                                     		// 0x01B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            Attached;                                         		// 0x01C0 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FVector                                     RelativeLocation;                                 		// 0x01D0 (0x000C) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	struct FRotator                                    RelativeRotation;                                 		// 0x01DC (0x000C) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	class UPrimitiveComponent*                         CollisionComponent;                               		// 0x01E8 (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	int                                                OverlapTag;                                       		// 0x01F0 (0x0004) [0x0000000000001000]              ( CPF_Native )
	struct FRotator                                    RotationRate;                                     		// 0x01F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      PendingTouch;                                     		// 0x0200 (0x0008) [0x0000000000000000]              
	class UClass*                                      MessageClass;                                     		// 0x0208 (0x0008) [0x0000000000000000]              
	TArray< class UClass* >                            SupportedEvents;                                  		// 0x0210 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class USequenceEvent* >                    GeneratedEvents;                                  		// 0x0220 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class USeqAct_Latent* >                    LatentActions;                                    		// 0x0230 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 129 ];

		return pClassPointer;
	};

	class USpriteComponent* GetActorSpriteComponent ( );
	int GetActorMetrics ( unsigned char MetricsType );
	bool eventOnMobileTouch ( class APlayerController* InPC, struct FVector2D TouchLocation );
	bool IsMobileTouchEnabled ( );
	bool ShouldBeHiddenBySHOW_NavigationNodes ( );
	bool WillOverlap ( struct FVector PosA, struct FVector VelA, struct FVector PosB, struct FVector VelB, float StepSize, float Radius, float* Time );
	struct FVector GetAvoidanceVector ( struct FVector GoalLocation, float CollisionRadius, float MaxSpeed, int NumSamples, float VelocityStepRate, float MaxTimeTilOverlap, TArray< class AActor* >* Obstacles );
	void eventReplicationEnded ( );
	void eventPostDemoRewind ( );
	void eventAnimTreeUpdated ( class USkeletalMeshComponent* SkelMesh );
	bool SupportsKismetModification ( class USequenceOp* AskingOp, struct FString* Reason );
	class UParticleSystem* GetAnimTrailParticleSystem ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotifyEnd ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotifyTick ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotify ( class UAnimNotify_Trails* AnimNotifyData );
	bool eventCreateForceField ( class UAnimNotify_ForceField* AnimNotifyData );
	bool eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	void GetAimAdhesionExtent ( float* Width, float* Height, struct FVector* Center );
	void GetAimFrictionExtent ( float* Width, float* Height, struct FVector* Center );
	bool IsInPersistentLevel ( unsigned long bIncludeLevelStreamingPersistent );
	void eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance );
	struct FGuid GetPackageGuid ( struct FName PackageName );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void eventRootMotionProcessed ( class USkeletalMeshComponent* SkelComp );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void SetHUDLocation ( struct FVector NewHUDLocation );
	void eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void eventSpawnedByKismet ( );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	void FindGoodEndView ( class APlayerController* PC, struct FRotator* GoodRotation );
	void NotifyLocalPlayerTeamReceived ( );
	unsigned char eventScriptGetTeamNum ( );
	unsigned char GetTeamNum ( );
	void PawnBaseDied ( );
	bool IsPlayerOwned ( );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	bool IsStationary ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	bool CanActorPlayFaceFXAnim ( );
	bool IsActorPlayingFaceFXAnim ( );
	void eventTickSkelControl ( float DeltaTime, class USkeletalMeshComponent* SkelComp, class USkelControlBase* SkelCtrl );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnAttachToActor ( class USeqAct_AttachToActor* Action );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void OnChangeCollision ( class USeqAct_ChangeCollision* Action );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	void OnSetBlockRigidBody ( class USeqAct_SetBlockRigidBody* Action );
	void OnSetVelocity ( class USeqAct_SetVelocity* Action );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnModifyHealth ( class USeqAct_ModifyHealth* Action );
	void PrestreamTextures ( float Seconds, unsigned long bEnableStreaming, int CinematicTextureGroups );
	void eventShutDown ( );
	void SetNetUpdateTime ( float NewUpdateTime );
	void eventForceNetRelevant ( );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void ClearLatentAction ( class UClass* actionClass, unsigned long bAborted, class USeqAct_Latent* exceptionAction );
	bool FindEventsOfClass ( class UClass* EventClass, unsigned long bIncludeDisabled, TArray< class USequenceEvent* >* out_EventList );
	bool ActivateEventClass ( class UClass* InClass, class AActor* InInstigator, unsigned long bTest, TArray< class USequenceEvent* >* EventList, TArray< int >* ActivateIndices, TArray< class USequenceEvent* >* ActivatedEvents );
	bool TriggerGlobalEventClass ( class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex );
	void eventReceivedNewEvent ( class USequenceEvent* Evt );
	bool TriggerEventClass ( class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex, unsigned long bTest, TArray< class USequenceEvent* >* ActivatedEvents );
	void eventDebugMessagePlayer ( struct FString msg );
	bool ImpactEffectIsRelevant ( class APawn* EffectInstigator, struct FVector SpawnLocation, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance, unsigned long bSkipLOSCheck );
	bool ActorEffectIsRelevant ( class APawn* EffectInstigator, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float VisibleCullDistance, float HiddenCullDistance );
	void ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation );
	bool CanSplash ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	bool IsInPain ( );
	void eventReset ( );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventModifyHearSoundComponent ( class UAudioComponent* AC );
	struct FString GetPhysicsName ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FString GetDebugName ( );
	void MatchStarting ( );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void ReplaceText ( struct FString Replace, struct FString With, struct FString* Text );
	struct FString GetHumanReadableName ( );
	struct FString GetItemName ( struct FString FullName );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void eventEndViewTarget ( class APlayerController* PC );
	void eventBecomeViewTarget ( class APlayerController* PC );
	bool CheckForErrors ( );
	void eventDebugFreezeGame ( class AActor* ActorToLookAt );
	float GetGravityZ ( );
	void CheckHitInfo ( class UPrimitiveComponent* FallBackComponent, struct FVector Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamage ( int DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void KilledBy ( class APawn* EventInstigator );
	bool HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool StopsProjectile ( class AProjectile* P );
	void eventNotifySkelControlBeyondLimit ( class USkelControlLookAt* LookAt );
	void eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance );
	void eventSetInitialState ( );
	void eventPostBeginPlay ( );
	void eventBroadcastLocalizedTeamMessage ( int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalizedMessage ( class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventPreBeginPlay ( );
	class APlayerController* GetALocalPlayerController ( );
	void LocalPlayerControllers ( class UClass* BaseClass, class APlayerController** PC );
	void AllOwnedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	void ComponentList ( class UClass* BaseClass, class UActorComponent** out_Component );
	void OverlappingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** out_Actor );
	void CollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bUseOverlapCheck, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleCollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, struct FVector Extent, unsigned long bTraceActors, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor );
	void TraceActors ( class UClass* BaseClass, struct FVector End, struct FVector Start, struct FVector Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo );
	void TouchingActors ( class UClass* BaseClass, class AActor** Actor );
	void BasedActors ( class UClass* BaseClass, class AActor** Actor );
	void ChildActors ( class UClass* BaseClass, class AActor** Actor );
	void DynamicActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	void AllActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	struct FString GetURLMap ( );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	bool PreTeleport ( class ATeleporter* InTeleporter );
	struct FVector GetDestination ( class AController* C );
	bool CalculateMinSpeedTrajectory ( struct FVector End, struct FVector Start, float MaxTossSpeed, float MinTossSpeed, struct FVector CollisionSize, float TerminalVelocity, float GravityZ, unsigned long bOnlyTraceUp, struct FVector* out_Velocity );
	bool SuggestTossVelocity ( struct FVector Destination, struct FVector Start, float TossSpeed, float BaseTossZ, float DesiredZPct, struct FVector CollisionSize, float TerminalVelocity, float OverrideGravityZ, unsigned long bOnlyTraceUp, struct FVector* TossVelocity );
	bool PlayerCanSeeMe ( unsigned long bForceLOSCheck );
	void MakeNoise ( float Loudness, struct FName NoiseType );
	void ActivateOcclusion ( unsigned long bInActivate );
	void PostTrigger ( struct FName InTrigger );
	void SetSwitch ( struct FName InSwitchGroup, struct FName InSwitch );
	void SetState ( struct FName InStateGroup, struct FName InState );
	void SetRTPCValueBus ( struct FName InRTPC, float targetvalue );
	void SetRTPCValue ( struct FName InRTPC, float targetvalue );
	void PostAkEventOnBone ( class UAkEvent* InAkEvent, struct FName BoneName );
	void PostAkEvent ( class UAkEvent* InAkEvent );
	void PlaySoundBase ( class UAkBaseSoundObject* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	void PlayAkEvent ( class UAkEvent* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	void PlaySound ( class USoundCue* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	class UAudioComponent* CreateAudioComponent ( class USoundCue* InSoundCue, unsigned long bPlay, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation, unsigned long bAttachToSelf );
	void ResetTimerTimeDilation ( struct FName TimerName, class UObject* inObj );
	void ModifyTimerTimeDilation ( struct FName TimerName, float InTimerTimeDilation, class UObject* inObj );
	float GetRemainingTimeForTimer ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerRate ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerCount ( struct FName inTimerFunc, class UObject* inObj );
	bool IsTimerActive ( struct FName inTimerFunc, class UObject* inObj );
	void PauseTimer ( unsigned long bPause, struct FName inTimerFunc, class UObject* inObj );
	void ClearAllTimers ( class UObject* inObj );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	void eventTornOff ( );
	bool Destroy ( );
	class AActor* Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail );
	bool IsBlockedBy ( class AActor* Other );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void GetComponentsBoundingBox ( struct FBox* ActorBox );
	bool IsOverlapping ( class AActor* A );
	bool ContainsPoint ( struct FVector Spot );
	bool FindSpot ( struct FVector BoxExtent, struct FVector* SpotLocation );
	bool TraceAllPhysicsAssetInteractions ( class USkeletalMeshComponent* SkelMeshComp, struct FVector EndTrace, struct FVector StartTrace, struct FVector Extent, TArray< struct FImpactInfo >* out_Hits );
	bool FastTrace ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceBullet );
	bool PointCheckComponent ( class UPrimitiveComponent* InComponent, struct FVector PointLocation, struct FVector PointExtent );
	bool TraceComponent ( class UPrimitiveComponent* InComponent, struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, unsigned long bComplexCollision, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	class AActor* Trace ( struct FVector TraceEnd, struct FVector TraceStart, unsigned long bTraceActors, struct FVector Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	void VolumeBasedDestroy ( class APhysicsVolume* PV );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool UsedBy ( class APawn* User );
	bool eventOverRotated ( struct FRotator* out_Desired, struct FRotator* out_Actual );
	bool ClampRotation ( struct FRotator rBase, struct FRotator rUpperLimits, struct FRotator rLowerLimits, struct FRotator* out_Rot );
	void eventOnSleepRBPhysics ( );
	void eventOnWakeRBPhysics ( );
	void eventRanInto ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void eventCollisionChanged ( );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventBaseChange ( );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void eventUnTouch ( class AActor* Other );
	void eventPostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventFalling ( );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventTimer ( );
	void eventTick ( float DeltaTime );
	void eventLostChild ( class AActor* Other );
	void eventGainedChild ( class AActor* Other );
	void eventDestroyed ( );
	void SetTickIsDisabled ( unsigned long bInDisabled );
	void SetTickGroup ( unsigned char NewTickGroup );
	void ReattachComponent ( class UActorComponent* ComponentToReattach );
	void DetachComponent ( class UActorComponent* ExComponent );
	void AttachComponent ( class UActorComponent* NewComponent );
	void UnClock ( float* Time );
	void Clock ( float* Time );
	void SetPhysics ( unsigned char newPhysics );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetHidden ( unsigned long bNewHidden );
	void ChartData ( struct FString DataName, float DataValue );
	void FlushDebugStrings ( );
	void DrawDebugFrustrum ( unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, struct FMatrix* FrustumToWorld );
	void DrawDebugString ( struct FVector TextLocation, struct FString Text, class AActor* TestBaseActor, struct FColor TextColor, float Duration );
	void DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines );
	void DrawDebugCylinder ( struct FVector Start, struct FVector End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines );
	void DrawDebugStar ( struct FVector Position, float Size, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugBox ( struct FVector Center, struct FVector Extent, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugPoint ( struct FVector Position, float Size, struct FLinearColor PointColor, unsigned long bPersistentLines );
	void DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void FlushPersistentDebugLines ( );
	struct FVector GetBasedPosition ( struct FBasedPosition BP );
	void SetBasedPosition ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	struct FVector BP2Vect ( struct FBasedPosition BP );
	void Vect2BP ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	void SetForcedInitialReplicatedProperty ( class UProperty* PropToReplicate, unsigned long bAdd );
	void eventReplicatedEvent ( struct FName VarName );
	struct FVector GetAggregateBaseVelocity ( class AActor* TestBase );
	bool IsOwnedBy ( class AActor* TestActor );
	class AActor* GetBaseMost ( );
	bool IsBasedOn ( class AActor* TestActor );
	void SearchForBaseBelow ( float HeightBelow, class AActor** NewBase, struct FVector* HitNormal );
	void FindBase ( );
	void SetOwner ( class AActor* NewOwner );
	void SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName );
	float GetTerminalVelocity ( );
	void AutonomousPhysics ( float DeltaSeconds );
	bool MoveSmooth ( struct FVector Delta );
	int fixedTurn ( int Current, int Desired, int DeltaRate );
	void SetShadowParentOnAllAttachedComponents ( class UPrimitiveComponent* MyPrimComp, class ULightEnvironmentComponent* MyLightEnv );
	void SetHardAttach ( unsigned long bNewHardAttach );
	bool SetRelativeLocation ( struct FVector NewLocation );
	bool SetRelativeRotation ( struct FRotator NewRotation );
	void SetZone ( unsigned long bForceRefresh );
	unsigned char MovingWhichWay ( float* Amount );
	bool SetRotation ( struct FRotator NewRotation );
	bool SetLocation ( struct FVector NewLocation );
	bool Move ( struct FVector Delta );
	void SetDrawScale3D ( struct FVector NewScale3D );
	void SetDrawScale ( float NewScale );
	void SetCollisionType ( unsigned char NewCollisionType );
	void SetCollisionSize ( float NewRadius, float NewHeight );
	void SetCollision ( unsigned long bNewColActors, unsigned long bNewBlockActors, unsigned long bNewIgnoreEncroachers );
	void FinishAnim ( class UAnimNodeSequence* SeqNode, unsigned long bFinishOnBlendOut );
	void Sleep ( float Seconds );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	void ForceUpdateComponents ( unsigned long bCollisionUpdate, unsigned long bTransformOnly );
};



// Class Engine.Info ( Property size: 0 iter: 3) 
// Class name index: 4946 
// 0x0000 (0x0240 - 0x0240)
class AInfo : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 131 ];

		return pClassPointer;
	};

};



// Class Engine.ZoneInfo ( Property size: 4 iter: 4) 
// Class name index: 4948 
// 0x0014 (0x0254 - 0x0240)
class AZoneInfo : public AInfo
{
public:
	float                                              KillZ;                                            		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoftKill;                                         		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      KillZDamageType;                                  		// 0x0248 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoftKillZ : 1;                                   		// 0x0250 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 133 ];

		return pClassPointer;
	};

};



// Class Engine.WorldInfo ( Property size: 168 iter: 249) 
// Class name index: 4950 
// 0x080C (0x0A60 - 0x0254)
class AWorldInfo : public AZoneInfo
{
public:
	struct FPostProcessSettings                        DefaultPostProcessSettings;                       		// 0x0254 (0x0160) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	class UPostProcessChain*                           WorldPostProcessChain;                            		// 0x03B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPersistPostProcessToNextLevel : 1;               		// 0x03BC (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      bFogEnabled : 1;                                  		// 0x03BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBumpOffsetEnabled : 1;                           		// 0x03BC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseGammaCorrection : 1;                          		// 0x03BC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bMapNeedsLightingFullyRebuilt : 1;                		// 0x03BC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bMapHasMultipleDominantLightsAffectingOnePrimitive : 1;		// 0x03BC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bMapHasPathingErrors : 1;                         		// 0x03BC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bRequestedBlockOnAsyncLoading : 1;                		// 0x03BC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bBegunPlay : 1;                                   		// 0x03BC (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bPlayersOnly : 1;                                 		// 0x03BC (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bPlayersOnlyPending : 1;                          		// 0x03BC (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bSuspendAI : 1;                                   		// 0x03BC (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bDropDetail : 1;                                  		// 0x03BC (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bAggressiveLOD : 1;                               		// 0x03BC (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bStartup : 1;                                     		// 0x03BC (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bPathsRebuilt : 1;                                		// 0x03BC (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bHasPathNodes : 1;                                		// 0x03BC (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bIsMenuLevel : 1;                                 		// 0x03BC (0x0004) [0x0000000000002002] [0x00020000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDebugPauseExecution : 1;                         		// 0x03BC (0x0004) [0x0000000000002002] [0x00040000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDebugStepExecution : 1;                          		// 0x03BC (0x0004) [0x0000000000002002] [0x00080000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseConsoleInput : 1;                             		// 0x03BC (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bMinimizeBSPSections : 1;                         		// 0x03BC (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bNoDefaultInventoryForPlayer : 1;                 		// 0x03BC (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bNoPathWarnings : 1;                              		// 0x03BC (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bNoMobileMapWarnings : 1;                         		// 0x03BC (0x0004) [0x0000000000004001] [0x01000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bHighPriorityLoading : 1;                         		// 0x03BC (0x0004) [0x0000000000000020] [0x02000000] ( CPF_Net )
	unsigned long                                      bHighPriorityLoadingLocal : 1;                    		// 0x03BC (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bUseProcBuildingRulesetOverride : 1;              		// 0x03BC (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bInteractiveMode : 1;                             		// 0x03BC (0x0004) [0x0000000000002002] [0x10000000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bSupportDoubleBufferedPhysics : 1;                		// 0x03BC (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bPhysicsIgnoreDeltaTime : 1;                      		// 0x03BC (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      bEnableChanceOfPhysicsChunkOverride : 1;          		// 0x03BC (0x0004) [0x0000000000004001] [0x80000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bLimitExplosionChunkSize : 1;                     		// 0x03C0 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      bLimitDamageChunkSize : 1;                        		// 0x03C0 (0x0004) [0x0000000000004001] [0x00000002] ( CPF_Edit | CPF_Config )
	unsigned long                                      bPrecomputeVisibility : 1;                        		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPlaceCellsOnSurfaces : 1;                        		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAllowTemporalAA : 1;                             		// 0x03C0 (0x0004) [0x0000000000044001] [0x00000010] ( CPF_Edit | CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bUseGlobalIllumination : 1;                       		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bForceNoPrecomputedLighting : 1;                  		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bHaveActiveCrowd : 1;                             		// 0x03C0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bAllowHostMigration : 1;                          		// 0x03C0 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned long                                      bGameplayFramePause : 1;                          		// 0x03C0 (0x0004) [0x0000000000000000] [0x00000200] 
	float                                              SquintModeKernelSize;                             		// 0x03C4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class APostProcessVolume*                          HighestPriorityPostProcessVolume;                 		// 0x03C8 (0x0008) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	struct FReverbSettings                             DefaultReverbSettings;                            		// 0x03D0 (0x0010) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FInteriorSettings                           DefaultAmbientZoneSettings;                       		// 0x03E0 (0x0024) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              FogStart;                                         		// 0x0404 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FogEnd;                                           		// 0x0408 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      FogColor;                                         		// 0x040C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BumpEnd;                                          		// 0x0410 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AReverbVolume*                               HighestPriorityReverbVolume;                      		// 0x0414 (0x0008) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	TArray< class AMassiveLODOverrideVolume* >         MassiveLODOverrideVolumes;                        		// 0x041C (0x0010) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class APortalVolume* >                     PortalVolumes;                                    		// 0x042C (0x0010) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class AEnvironmentVolume* >                EnvironmentVolumes;                               		// 0x043C (0x0010) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class ULevelStreaming* >                   StreamingLevels;                                  		// 0x044C (0x0010) [0x0000000004420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     MapChangePositionOffset;                          		// 0x045C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FDouble                                     LastTimeUnbuiltLightingWasEncountered;            		// 0x0468 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UBookMark*                                   BookMarks[ 0xA ];                                 		// 0x0470 (0x0050) [0x0000000000000001]              ( CPF_Edit )
	class UKismetBookMark*                             KismetBookMarks[ 0xA ];                           		// 0x04C0 (0x0050) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClipPadEntry* >                     ClipPadEntries;                                   		// 0x0510 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	float                                              TimeDilation;                                     		// 0x0520 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              DemoPlayTimeDilation;                             		// 0x0524 (0x0004) [0x0000000000000000]              
	float                                              TimeSeconds;                                      		// 0x0528 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RealTimeSeconds;                                  		// 0x052C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AudioTimeSeconds;                                 		// 0x0530 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DeltaSeconds;                                     		// 0x0534 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              PauseDelay;                                       		// 0x0538 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RealTimeToUnPause;                                		// 0x053C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class APlayerReplicationInfo*                      Pauser;                                           		// 0x0540 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     VisibleGroups;                                    		// 0x0548 (0x0010) [0x0000000020400000]              ( CPF_NeedCtorLink | CPF_Deprecated )
	struct FString                                     VisibleLayers;                                    		// 0x0558 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTexture2D*                                  DefaultTexture;                                   		// 0x0568 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  WireframeTexture;                                 		// 0x0570 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  WhiteSquareTexture;                               		// 0x0578 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  LargeVertex;                                      		// 0x0580 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  BSPVertex;                                        		// 0x0588 (0x0008) [0x0000000000000000]              
	TArray< struct FString >                           DeferredExecs;                                    		// 0x0590 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AGameReplicationInfo*                        GRI;                                              		// 0x05A0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      NetMode;                                          		// 0x05A8 (0x0001) [0x0000000000000000]              
	unsigned char                                      NextTravelType;                                   		// 0x05A9 (0x0001) [0x0000000000000000]              
	unsigned char                                      VisibilityAggressiveness;                         		// 0x05AA (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PreferredLightmapType;                            		// 0x05AB (0x0001) [0x0000000000000000]              
	unsigned char                                      LevelLightingQuality;                             		// 0x05AC (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FString                                     ComputerName;                                     		// 0x05B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     EngineVersion;                                    		// 0x05C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MinNetVersion;                                    		// 0x05D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AGameInfo*                                   Game;                                             		// 0x05E0 (0x0008) [0x0000000000000000]              
	float                                              StallZ;                                           		// 0x05E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WorldGravityZ;                                    		// 0x05EC (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              DefaultGravityZ;                                  		// 0x05F0 (0x0004) [0x0000000000044002]              ( CPF_Const | CPF_Config | CPF_GlobalConfig )
	float                                              GlobalGravityZ;                                   		// 0x05F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RBPhysicsGravityScaling;                          		// 0x05F8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	class ANavigationPoint*                            NavigationPointList;                              		// 0x05FC (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AController*                                 ControllerList;                                   		// 0x0604 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       PawnList;                                         		// 0x060C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class ACoverLink*                                  CoverList;                                        		// 0x0614 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class APylon*                                      PylonList;                                        		// 0x061C (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              MoveRepSize;                                      		// 0x0624 (0x0004) [0x0000000000000000]              
	TArray< struct FNetViewer >                        ReplicationViewers;                               		// 0x0628 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     NextURL;                                          		// 0x0638 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              NextSwitchCountdown;                              		// 0x0648 (0x0004) [0x0000000000000000]              
	int                                                PackedLightAndShadowMapTextureSize;               		// 0x064C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DefaultColorScale;                                		// 0x0650 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DefaultGameType;                                  		// 0x065C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            GameTypesSupportedOnThisMap;                      		// 0x0664 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      GameTypeForPIE;                                   		// 0x0674 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UObject* >                           ClientDestroyedActorContent;                      		// 0x067C (0x0010) [0x0000000000420002]              ( CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FName >                             PreparingLevelNames;                              		// 0x068C (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       CommittedPersistentLevelName;                     		// 0x069C (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UObjectReferencer*                           PersistentMapForcedObjects;                       		// 0x06A4 (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             MusicComp;                                        		// 0x06AC (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FMusicTrackStruct                           CurrentMusicTrack;                                		// 0x06B4 (0x002C) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FMusicTrackStruct                           ReplicatedMusicTrack;                             		// 0x06E0 (0x002C) [0x0000000000402020]              ( CPF_Net | CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     Title;                                            		// 0x070C (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Author;                                           		// 0x071C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMapInfo*                                    MyMapInfo;                                        		// 0x072C (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FString                                     EmitterPoolClassPath;                             		// 0x0734 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class AEmitterPool*                                MyEmitterPool;                                    		// 0x0744 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     DecalManagerClassPath;                            		// 0x074C (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class ADecalManager*                               MyDecalManager;                                   		// 0x075C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     FractureManagerClassPath;                         		// 0x0764 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class AFractureManager*                            MyFractureManager;                                		// 0x0774 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     ParticleEventManagerClassPath;                    		// 0x077C (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class AParticleEventManager*                       MyParticleEventManager;                           		// 0x078C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UProcBuildingRuleset*                        ProcBuildingRulesetOverride;                      		// 0x0794 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                SkelMeshCompTickTagCount;                         		// 0x079C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              MaxPhysicsDeltaTime;                              		// 0x07A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxPhysicsSubsteps;                               		// 0x07A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FPhysXSceneProperties                       PhysicsProperties;                                		// 0x07A8 (0x003C) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	TArray< struct FCompartmentRunList >               CompartmentRunFrames;                             		// 0x07E4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DefaultSkinWidth;                                 		// 0x07F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ApexLODResourceBudget;                            		// 0x07F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ApexDestructionLODResourceValue;                  		// 0x07FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ApexClothingLODResourceValue;                     		// 0x0800 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FApexModuleDestructibleSettings             DestructibleSettings;                             		// 0x0804 (0x0014) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsLODVerticalEmitter*                  EmitterVertical;                                  		// 0x0818 (0x0008) [0x0000000000000000]              
	struct FPhysXVerticalProperties                    VerticalProperties;                               		// 0x0820 (0x0018) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	TArray< struct FPointer >                          WorldAttractors;                                  		// 0x0838 (0x0010) [0x0000000000001000]              ( CPF_Native )
	float                                              ChanceOfPhysicsChunkOverride;                     		// 0x0848 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxExplosionChunkSize;                            		// 0x084C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxDamageChunkSize;                               		// 0x0850 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              FractureExplosionVelScale;                        		// 0x0854 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                MaxNumFacturedChunksToSpawnInAFrame;              		// 0x0858 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumFacturedChunksSpawnedThisFrame;                		// 0x085C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FracturedMeshWeaponDamage;                        		// 0x0860 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                VisibilityCellSize;                               		// 0x0864 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CharacterLitIndirectBrightness;                   		// 0x0868 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CharacterLitIndirectContrastFactor;               		// 0x086C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CharacterShadowedIndirectBrightness;              		// 0x0870 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CharacterShadowedIndirectContrastFactor;          		// 0x0874 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CharacterLightingContrastFactor;                  		// 0x0878 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  ImageReflectionEnvironmentTexture;                		// 0x087C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ImageReflectionEnvironmentColor;                  		// 0x0884 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImageReflectionEnvironmentRotation;               		// 0x0894 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FMap_Mirror                                 ScreenMessages;                                   		// 0x0898 (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FScreenMessageString >              PriorityScreenMessages;                           		// 0x08E0 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                MaxTrianglesPerLeaf;                              		// 0x08F0 (0x0004) [0x0000000000000000]              
	class ULightmassLevelSettings*                     LMLevelSettings;                                  		// 0x08F4 (0x0008) [0x0000000024400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_Deprecated )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x08FC (0x0048) UNKNOWN PROPERTY: MapProperty Engine.WorldInfo.LandscapeInfoMap
	struct FLightmassWorldInfoSettings                 LightmassSettings;                                		// 0x0944 (0x0058) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x099C (0x0048) UNKNOWN PROPERTY: MapProperty Engine.WorldInfo.NavMeshPathConstraintCache
	unsigned char                                      UnknownData02[ 0x48 ];                            		// 0x09E4 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.WorldInfo.NavMeshPathGoalEvaluatorCache
	class ACrowdPopulationManagerBase*                 PopulationManager;                                		// 0x0A2C (0x0008) [0x0000000000000000]              
	struct FHostMigrationState                         PeerHostMigration;                                		// 0x0A34 (0x0020) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              HostMigrationTimeout;                             		// 0x0A54 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class APhysicsVolume*                              FirstPhysicsVolume;                               		// 0x0A58 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 135 ];

		return pClassPointer;
	};

	void ClearObjectPools ( );
	void ToggleHostMigration ( unsigned long bEnabled );
	void eventNotifyHostMigrationStateChanged ( unsigned char NewState, unsigned char OldState );
	bool BeginHostMigration ( );
	bool eventCanBeginHostMigration ( );
	class AEnvironmentVolume* FindEnvironmentVolume ( struct FVector TestLocation );
	class AWorldInfo* GetWorldInfo ( );
	struct FWorldFractureSettings GetWorldFractureSettings ( );
	void DoMemoryTracking ( );
	bool GetDemoRewindPoints ( TArray< int >* OutRewindPoints );
	void GetDemoFrameInfo ( int* CurrentFrame, int* TotalFrames );
	bool IsPlayingDemo ( );
	bool IsRecordingDemo ( );
	unsigned char GetDetailMode ( );
	struct FString GetMapName ( unsigned long bIncludePrefix );
	void SetMapInfo ( class UMapInfo* NewMapInfo );
	class UMapInfo* GetVanillaMapInfo ( );
	class UMapInfo* GetMapInfo ( );
	void SetSeamlessTravelMidpointPause ( unsigned long bNowPaused );
	bool IsInSeamlessTravel ( );
	void SeamlessTravel ( struct FString URL, unsigned long bAbsolute, struct FGuid MapPackageGuid );
	void CommitMapChange ( unsigned long bKeepSurvivingLevels );
	void CancelPendingMapChange ( );
	bool IsMapChangeReady ( );
	bool IsPreparingMapChange ( );
	void PrepareMapChange ( TArray< struct FName >* LevelNames );
	void NotifyMatchStarted ( unsigned long bShouldActivateLevelStartupEvents, unsigned long bShouldActivateLevelBeginningEvents, unsigned long bShouldActivateLevelLoadedEvents );
	void AllClientConnections ( class UPlayer** ClientConnection, int* ClientIP, int* ClientPort );
	void AllPawns ( class UClass* BaseClass, struct FVector TestLocation, float TestRadius, class APawn** P );
	void AllControllers ( class UClass* BaseClass, class AController** C );
	void NavigationPointCheck ( struct FVector Point, struct FVector Extent, TArray< class ANavigationPoint* >* Navs, TArray< class UReachSpec* >* Specs );
	void RadiusNavigationPoints ( class UClass* BaseClass, struct FVector Point, float Radius, class ANavigationPoint** N );
	void AllNavigationPoints ( class UClass* BaseClass, class ANavigationPoint** N );
	void Reset ( );
	void PostBeginPlay ( );
	void PreBeginPlay ( );
	void ThisIsNeverExecuted ( class ADefaultPhysicsVolume* P );
	void eventServerTravel ( struct FString URL, unsigned long bAbsolute, unsigned long bShouldSkipGameNotify );
	class UClass* GetGameClass ( );
	struct FString GetAddressURL ( );
	void VerifyNavList ( );
	void ForceGarbageCollection ( unsigned long bFullPurge );
	bool IsPlayInMobilePreview ( );
	bool IsPlayInPreview ( );
	bool IsPlayInEditor ( );
	bool IsWithGFx ( );
	bool IsConsoleBuild ( unsigned char ConsoleType );
	bool IsDemoBuild ( );
	struct FString GetLocalURL ( );
	void SetLevelRBGravity ( struct FVector NewGrav );
	TArray< class USequence* > GetAllRootSequences ( );
	class USequence* GetGameSequence ( );
	float GetGravityZ ( );
	void UpdateMusicTrack ( struct FMusicTrackStruct NewMusicTrack );
	void SetMusicVolume ( float VolumeMultiplier );
	bool IsMenuLevel ( struct FString MapName );
	void AddOnScreenDebugMessage ( int Key, float TimeToDisplay, struct FColor DisplayColor, struct FString DebugMessage );
	void eventReplicatedEvent ( struct FName VarName );
	class UNavMeshPathGoalEvaluator* GetNavMeshPathGoalEvaluatorFromCache ( class UClass* GoalEvalClass, class UNavigationHandle* Requestor );
	class UNavMeshPathConstraint* GetNavMeshPathConstraintFromCache ( class UClass* ConstraintClass, class UNavigationHandle* Requestor );
	void ReleaseCachedConstraintsAndEvaluators ( );
};



// Class Engine.DownloadableContentEnumerator ( Property size: 4 iter: 12) 
// Class name index: 4952 
// 0x0040 (0x00A0 - 0x0060)
class UDownloadableContentEnumerator : public UObject
{
public:
	TArray< struct FOnlineContent >                    DLCBundles;                                       		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DLCRootDir;                                       		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   FindDLCDelegates;                                 		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFindDLCComplete__Delegate;                    		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0094 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 137 ];

		return pClassPointer;
	};

	void TriggerFindDLCDelegates ( );
	void InstallDLC ( struct FString DLCName );
	void InstallAllDLC ( );
	void DeleteDLC ( struct FString DLCName );
	void ClearFindDLCDelegate ( struct FScriptDelegate InDelegate );
	void AddFindDLCDelegate ( struct FScriptDelegate InDelegate );
	void OnFindDLCComplete ( );
	void FindDLC ( );
};



// Class Engine.DownloadableContentManager ( Property size: 8 iter: 25) 
// Class name index: 4954 
// 0x00B0 (0x0110 - 0x0060)
class UDownloadableContentManager : public UObject
{
public:
	TArray< struct FPointer >                          DLCConfigCacheChanges;                            		// 0x0060 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FString >                           InstalledDLC;                                     		// 0x0070 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FMap_Mirror                                 NonPackageFilePathMap;                            		// 0x0080 (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UClass* >                            ClassesToReload;                                  		// 0x00C8 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UObject* >                           ObjectsToReload;                                  		// 0x00D8 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FString >                           QueuedFullyLoadPackageInis;                       		// 0x00E8 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UGameEngine*                                 GameEngine;                                       		// 0x00F8 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FScriptDelegate                             __OnRefreshComplete__Delegate;                    		// 0x0100 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0104 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 139 ];

		return pClassPointer;
	};

	void OnRefreshComplete ( );
	void AddPackagesToFullyLoad ( struct FString Filename );
	void RefreshDLCEnumComplete ( );
	void RefreshDLC ( );
	void OnContentChange ( );
	void OnStorageDeviceChange ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void eventInit ( );
	void InstallNonPackageFiles ( struct FOnlineContent* DLCBundle );
	void InstallPackages ( struct FOnlineContent* DLCBundle );
	void UpdateObjectLists ( );
	void MarkPerObjectConfigPendingKill ( struct FString Section );
	void AddSectionToObjectList ( struct FString Section );
	bool GetDLCNonPackageFilePath ( struct FName NonPackageFileName, struct FString* Path );
	void ClearDLC ( );
	void InstallDLCs ( TArray< struct FOnlineContent >* DLCBundles );
	bool InstallDLC ( struct FOnlineContent* DLCBundle );
};



// Class Engine.Engine ( Property size: 244 iter: 285) 
// Class name index: 21 
// 0x0838 (0x08A0 - 0x0068)
class UEngine : public USubsystem
{
public:
	class UFont*                                       TinyFont;                                         		// 0x0068 (0x0008) [0x0000000000000000]              
	struct FString                                     TinyFontName;                                     		// 0x0070 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UFont*                                       SmallFont;                                        		// 0x0080 (0x0008) [0x0000000000000000]              
	struct FString                                     SmallFontName;                                    		// 0x0088 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UFont*                                       MediumFont;                                       		// 0x0098 (0x0008) [0x0000000000000000]              
	struct FString                                     MediumFontName;                                   		// 0x00A0 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UFont*                                       LargeFont;                                        		// 0x00B0 (0x0008) [0x0000000000000000]              
	struct FString                                     LargeFontName;                                    		// 0x00B8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UFont*                                       SubtitleFont;                                     		// 0x00C8 (0x0008) [0x0000000000000000]              
	struct FString                                     SubtitleFontName;                                 		// 0x00D0 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< class UFont* >                             AdditionalFonts;                                  		// 0x00E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           AdditionalFontNames;                              		// 0x00F0 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UClass*                                      ConsoleClass;                                     		// 0x0100 (0x0008) [0x0000000000000000]              
	struct FString                                     ConsoleClassName;                                 		// 0x0108 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UClass*                                      GameViewportClientClass;                          		// 0x0118 (0x0008) [0x0000000000000000]              
	struct FString                                     GameViewportClientClassName;                      		// 0x0120 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UClass*                                      DataStoreClientClass;                             		// 0x0130 (0x0008) [0x0000000000000000]              
	struct FString                                     DataStoreClientClassName;                         		// 0x0138 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UClass*                                      LocalPlayerClass;                                 		// 0x0148 (0x0008) [0x0000000000000000]              
	struct FString                                     LocalPlayerClassName;                             		// 0x0150 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UMaterial*                                   DefaultMaterial;                                  		// 0x0160 (0x0008) [0x0000000000000000]              
	struct FString                                     DefaultMaterialName;                              		// 0x0168 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   DefaultDecalMaterial;                             		// 0x0178 (0x0008) [0x0000000000000000]              
	struct FString                                     DefaultDecalMaterialName;                         		// 0x0180 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture*                                    DefaultTexture;                                   		// 0x0190 (0x0008) [0x0000000000000000]              
	struct FString                                     DefaultTextureName;                               		// 0x0198 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   WireframeMaterial;                                		// 0x01A8 (0x0008) [0x0000000000000000]              
	struct FString                                     WireframeMaterialName;                            		// 0x01B0 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   EmissiveTexturedMaterial;                         		// 0x01C0 (0x0008) [0x0000000000000000]              
	struct FString                                     EmissiveTexturedMaterialName;                     		// 0x01C8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   GeomMaterial;                                     		// 0x01D8 (0x0008) [0x0000000000000000]              
	struct FString                                     GeomMaterialName;                                 		// 0x01E0 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   DefaultFogVolumeMaterial;                         		// 0x01F0 (0x0008) [0x0000000000000000]              
	struct FString                                     DefaultFogVolumeMaterialName;                     		// 0x01F8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   TickMaterial;                                     		// 0x0208 (0x0008) [0x0000000000000000]              
	struct FString                                     TickMaterialName;                                 		// 0x0210 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   CrossMaterial;                                    		// 0x0220 (0x0008) [0x0000000000000000]              
	struct FString                                     CrossMaterialName;                                		// 0x0228 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   LevelColorationLitMaterial;                       		// 0x0238 (0x0008) [0x0000000000000000]              
	struct FString                                     LevelColorationLitMaterialName;                   		// 0x0240 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   LevelColorationUnlitMaterial;                     		// 0x0250 (0x0008) [0x0000000000000000]              
	struct FString                                     LevelColorationUnlitMaterialName;                 		// 0x0258 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   LightingTexelDensityMaterial;                     		// 0x0268 (0x0008) [0x0000000000000000]              
	struct FString                                     LightingTexelDensityName;                         		// 0x0270 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                 		// 0x0280 (0x0008) [0x0000000000000000]              
	struct FString                                     ShadedLevelColorationLitMaterialName;             		// 0x0288 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;               		// 0x0298 (0x0008) [0x0000000000000000]              
	struct FString                                     ShadedLevelColorationUnlitMaterialName;           		// 0x02A0 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   RemoveSurfaceMaterial;                            		// 0x02B0 (0x0008) [0x0000000000000000]              
	struct FString                                     RemoveSurfaceMaterialName;                        		// 0x02B8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   VertexColorMaterial;                              		// 0x02C8 (0x0008) [0x0000000000000000]              
	struct FString                                     VertexColorMaterialName;                          		// 0x02D0 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;            		// 0x02E0 (0x0008) [0x0000000000000000]              
	struct FString                                     VertexColorViewModeMaterialName_ColorOnly;        		// 0x02E8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;         		// 0x02F8 (0x0008) [0x0000000000000000]              
	struct FString                                     VertexColorViewModeMaterialName_AlphaAsColor;     		// 0x0300 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;              		// 0x0310 (0x0008) [0x0000000000000000]              
	struct FString                                     VertexColorViewModeMaterialName_RedOnly;          		// 0x0318 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;            		// 0x0328 (0x0008) [0x0000000000000000]              
	struct FString                                     VertexColorViewModeMaterialName_GreenOnly;        		// 0x0330 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;             		// 0x0340 (0x0008) [0x0000000000000000]              
	struct FString                                     VertexColorViewModeMaterialName_BlueOnly;         		// 0x0348 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   HeatmapMaterial;                                  		// 0x0358 (0x0008) [0x0000000000000000]              
	struct FString                                     HeatmapMaterialName;                              		// 0x0360 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   BoneWeightMaterial;                               		// 0x0370 (0x0008) [0x0000000000000000]              
	struct FString                                     BoneWeightMaterialName;                           		// 0x0378 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   TangentColorMaterial;                             		// 0x0388 (0x0008) [0x0000000000000000]              
	struct FString                                     TangentColorMaterialName;                         		// 0x0390 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   MobileEmulationMasterMaterial;                    		// 0x03A0 (0x0008) [0x0000000000000000]              
	struct FString                                     MobileEmulationMasterMaterialName;                		// 0x03A8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   ProcBuildingSimpleMaterial;                       		// 0x03B8 (0x0008) [0x0000000000000000]              
	struct FString                                     ProcBuildingSimpleMaterialName;                   		// 0x03C0 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UStaticMesh*                                 BuildingQuadStaticMesh;                           		// 0x03D0 (0x0008) [0x0000000000000000]              
	struct FString                                     BuildingQuadStaticMeshName;                       		// 0x03D8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	float                                              ProcBuildingLODColorTexelsPerWorldUnit;           		// 0x03E8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              ProcBuildingLODLightingTexelsPerWorldUnit;        		// 0x03EC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxProcBuildingLODColorTextureSize;               		// 0x03F0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxProcBuildingLODLightingTextureSize;            		// 0x03F4 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      UseProcBuildingLODTextureCropping : 1;            		// 0x03F8 (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      ForcePowerOfTwoProcBuildingLODTextures : 1;       		// 0x03F8 (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCombineSimilarMappings : 1;                      		// 0x03F8 (0x0004) [0x0000000000044000] [0x00000004] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bRenderLightMapDensityGrayscale : 1;              		// 0x03F8 (0x0004) [0x0000000000044000] [0x00000008] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bScreenshotRequested : 1;                         		// 0x03F8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bUseSound : 1;                                    		// 0x03F8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bUseWwiseSound : 1;                               		// 0x03F8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bUseBackgroundLevelStreaming : 1;                 		// 0x03F8 (0x0004) [0x0000000000004001] [0x00000080] ( CPF_Edit | CPF_Config )
	unsigned long                                      bSubtitlesEnabled : 1;                            		// 0x03F8 (0x0004) [0x0000000000004001] [0x00000100] ( CPF_Edit | CPF_Config )
	unsigned long                                      bSubtitlesForcedOff : 1;                          		// 0x03F8 (0x0004) [0x0000000000004001] [0x00000200] ( CPF_Edit | CPF_Config )
	unsigned long                                      bSmoothFrameRate : 1;                             		// 0x03F8 (0x0004) [0x0000000000004000] [0x00000400] ( CPF_Config )
	unsigned long                                      bCheckForMultiplePawnsSpawnedInAFrame : 1;        		// 0x03F8 (0x0004) [0x0000000000004000] [0x00000800] ( CPF_Config )
	unsigned long                                      bShouldGenerateSimpleLightmaps : 1;               		// 0x03F8 (0x0004) [0x0000000000044000] [0x00001000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bForceStaticTerrain : 1;                          		// 0x03F8 (0x0004) [0x0000000000004001] [0x00002000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bForceCPUSkinning : 1;                            		// 0x03F8 (0x0004) [0x0000000000004000] [0x00004000] ( CPF_Config )
	unsigned long                                      bUsePostProcessEffects : 1;                       		// 0x03F8 (0x0004) [0x0000000000004000] [0x00008000] ( CPF_Config )
	unsigned long                                      bOnScreenKismetWarnings : 1;                      		// 0x03F8 (0x0004) [0x0000000000004000] [0x00010000] ( CPF_Config )
	unsigned long                                      bEnableKismetLogging : 1;                         		// 0x03F8 (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	unsigned long                                      bAllowMatureLanguage : 1;                         		// 0x03F8 (0x0004) [0x0000000000004000] [0x00040000] ( CPF_Config )
	unsigned long                                      bDisablePhysXHardwareSupport : 1;                 		// 0x03F8 (0x0004) [0x0000000000044000] [0x00080000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bPauseOnLossOfFocus : 1;                          		// 0x03F8 (0x0004) [0x0000000000004000] [0x00100000] ( CPF_Config )
	unsigned long                                      bCheckParticleRenderSize : 1;                     		// 0x03F8 (0x0004) [0x0000000000044000] [0x00200000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bEnableColorClear : 1;                            		// 0x03F8 (0x0004) [0x0000000000044002] [0x00400000] ( CPF_Const | CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bAreConstraintsDirty : 1;                         		// 0x03F8 (0x0004) [0x0000000000002000] [0x00800000] ( CPF_Transient )
	unsigned long                                      bHasPendingGlobalReattach : 1;                    		// 0x03F8 (0x0004) [0x0000000000002000] [0x01000000] ( CPF_Transient )
	unsigned long                                      bEnableOnScreenDebugMessages : 1;                 		// 0x03F8 (0x0004) [0x0000000000044000] [0x02000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bEnableOnScreenDebugMessagesDisplay : 1;          		// 0x03F8 (0x0004) [0x0000000000002000] [0x04000000] ( CPF_Transient )
	unsigned long                                      bSuppressMapWarnings : 1;                         		// 0x03F8 (0x0004) [0x0000000000044000] [0x08000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCookSeparateSharedMPGameContent : 1;             		// 0x03F8 (0x0004) [0x0000000000044000] [0x10000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bUseRecastNavMesh : 1;                            		// 0x03F8 (0x0004) [0x0000000000044000] [0x20000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bDisableAILogging : 1;                            		// 0x03F8 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bUseNormalMapsForSimpleLightMaps : 1;             		// 0x03F8 (0x0004) [0x0000000000044000] [0x80000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bStartWithMatineeCapture : 1;                     		// 0x03FC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCompressMatineeCapture : 1;                      		// 0x03FC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bLockReadOnlyLevels : 1;                          		// 0x03FC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              MaxRMSDForCombiningMappings;                      		// 0x0400 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                ImageReflectionTextureSize;                       		// 0x0404 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                LightingOnlyBrightness;                           		// 0x0408 (0x0010) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FColor >                            LightComplexityColors;                            		// 0x0418 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< struct FLinearColor >                      ShaderComplexityColors;                           		// 0x0428 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	float                                              MaxPixelShaderAdditiveComplexityCount;            		// 0x0438 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MinTextureDensity;                                		// 0x043C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              IdealTextureDensity;                              		// 0x0440 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxTextureDensity;                                		// 0x0444 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MinLightMapDensity;                               		// 0x0448 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              IdealLightMapDensity;                             		// 0x044C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxLightMapDensity;                               		// 0x0450 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              RenderLightMapDensityGrayscaleScale;              		// 0x0454 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              RenderLightMapDensityColorScale;                  		// 0x0458 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                LightMapDensityVertexMappedColor;                 		// 0x045C (0x0010) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                LightMapDensitySelectedColor;                     		// 0x046C (0x0010) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FStatColorMapping >                 StatColorMappings;                                		// 0x047C (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   EditorBrushMaterial;                              		// 0x048C (0x0008) [0x0000000000000000]              
	struct FString                                     EditorBrushMaterialName;                          		// 0x0494 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UPhysicalMaterial*                           DefaultPhysMaterial;                              		// 0x04A4 (0x0008) [0x0000000000000000]              
	struct FString                                     DefaultPhysMaterialName;                          		// 0x04AC (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UPhysicalMaterial*                           LandscapeHolePhysMaterial;                        		// 0x04BC (0x0008) [0x0000000000000000]              
	struct FString                                     LandscapeHolePhysMaterialName;                    		// 0x04C4 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UApexDestructibleDamageParameters*           ApexDamageParams;                                 		// 0x04D4 (0x0008) [0x0000000000000000]              
	struct FString                                     ApexDamageParamsName;                             		// 0x04DC (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   TerrainErrorMaterial;                             		// 0x04EC (0x0008) [0x0000000000000000]              
	struct FString                                     TerrainErrorMaterialName;                         		// 0x04F4 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	int                                                TerrainMaterialMaxTextureCount;                   		// 0x0504 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                TerrainTessellationCheckCount;                    		// 0x0508 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              TerrainTessellationCheckDistance;                 		// 0x050C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	class UClass*                                      OnlineSubsystemClass;                             		// 0x0510 (0x0008) [0x0000000000000000]              
	struct FString                                     DefaultOnlineSubsystemName;                       		// 0x0518 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UPostProcessChain*                           DefaultPostProcess;                               		// 0x0528 (0x0008) [0x0000000000000000]              
	struct FString                                     DefaultPostProcessName;                           		// 0x0530 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UPostProcessChain*                           ThumbnailSkeletalMeshPostProcess;                 		// 0x0540 (0x0008) [0x0000000000000000]              
	struct FString                                     ThumbnailSkeletalMeshPostProcessName;             		// 0x0548 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UPostProcessChain*                           ThumbnailParticleSystemPostProcess;               		// 0x0558 (0x0008) [0x0000000000000000]              
	struct FString                                     ThumbnailParticleSystemPostProcessName;           		// 0x0560 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UPostProcessChain*                           ThumbnailMaterialPostProcess;                     		// 0x0570 (0x0008) [0x0000000000000000]              
	struct FString                                     ThumbnailMaterialPostProcessName;                 		// 0x0578 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UPostProcessChain*                           DefaultUIScenePostProcess;                        		// 0x0588 (0x0008) [0x0000000000000000]              
	struct FString                                     DefaultUIScenePostProcessName;                    		// 0x0590 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UMaterial*                                   DefaultUICaretMaterial;                           		// 0x05A0 (0x0008) [0x0000000000000000]              
	struct FString                                     DefaultUICaretMaterialName;                       		// 0x05A8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   SceneCaptureReflectActorMaterial;                 		// 0x05B8 (0x0008) [0x0000000000000000]              
	struct FString                                     SceneCaptureReflectActorMaterialName;             		// 0x05C0 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UMaterial*                                   SceneCaptureCubeActorMaterial;                    		// 0x05D0 (0x0008) [0x0000000000000000]              
	struct FString                                     SceneCaptureCubeActorMaterialName;                		// 0x05D8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  ScreenDoorNoiseTexture;                           		// 0x05E8 (0x0008) [0x0000000000000000]              
	struct FString                                     ScreenDoorNoiseTextureName;                       		// 0x05F0 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  ImageGrainNoiseTexture;                           		// 0x0600 (0x0008) [0x0000000000000000]              
	struct FString                                     ImageGrainNoiseTextureName;                       		// 0x0608 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  RandomAngleTexture;                               		// 0x0618 (0x0008) [0x0000000000000000]              
	struct FString                                     RandomAngleTextureName;                           		// 0x0620 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  RandomNormalTexture;                              		// 0x0630 (0x0008) [0x0000000000000000]              
	struct FString                                     RandomNormalTextureName;                          		// 0x0638 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  RandomMirrorDiscTexture;                          		// 0x0648 (0x0008) [0x0000000000000000]              
	struct FString                                     RandomMirrorDiscTextureName;                      		// 0x0650 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture*                                    WeightMapPlaceholderTexture;                      		// 0x0660 (0x0008) [0x0000000000000000]              
	struct FString                                     WeightMapPlaceholderTextureName;                  		// 0x0668 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  LightMapDensityTexture;                           		// 0x0678 (0x0008) [0x0000000000000000]              
	struct FString                                     LightMapDensityTextureName;                       		// 0x0680 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UTexture2D*                                  LightMapDensityNormal;                            		// 0x0690 (0x0008) [0x0000000000000000]              
	struct FString                                     LightMapDensityNormalName;                        		// 0x0698 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class USoundNodeWave*                              DefaultSound;                                     		// 0x06A8 (0x0008) [0x0000000000000000]              
	struct FString                                     DefaultSoundName;                                 		// 0x06B0 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	float                                              TimeBetweenPurgingPendingKillObjects;             		// 0x06C0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	class UClient*                                     Client;                                           		// 0x06C4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	TArray< class ULocalPlayer* >                      GamePlayers;                                      		// 0x06CC (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )
	class UGameViewportClient*                         GameViewport;                                     		// 0x06DC (0x0008) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FString >                           DeferredCommands;                                 		// 0x06E4 (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )
	int                                                TickCycles;                                       		// 0x06F4 (0x0004) [0x0000000000000000]              
	int                                                GameCycles;                                       		// 0x06F8 (0x0004) [0x0000000000000000]              
	int                                                ClientCycles;                                     		// 0x06FC (0x0004) [0x0000000000000000]              
	float                                              MaxSmoothedFrameRate;                             		// 0x0700 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MinSmoothedFrameRate;                             		// 0x0704 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NumPawnsAllowedToBeSpawnedInAFrame;               		// 0x0708 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FPointer                                    RemoteControlExec;                                		// 0x070C (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    MobileMaterialEmulator;                           		// 0x0714 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FColor                                      C_WorldBox;                                       		// 0x071C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_BrushWire;                                      		// 0x0720 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_AddWire;                                        		// 0x0724 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_SubtractWire;                                   		// 0x0728 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_SemiSolidWire;                                  		// 0x072C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_NonSolidWire;                                   		// 0x0730 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_WireBackground;                                 		// 0x0734 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_ScaleBoxHi;                                     		// 0x0738 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_VolumeCollision;                                		// 0x073C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_BSPCollision;                                   		// 0x0740 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_OrthoBackground;                                		// 0x0744 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_Volume;                                         		// 0x0748 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_BrushShape;                                     		// 0x074C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StreamingDistanceFactor;                          		// 0x0750 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ScoutClassName;                                   		// 0x0754 (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      TransitionType;                                   		// 0x0764 (0x0001) [0x0000000000000000]              
	struct FString                                     TransitionDescription;                            		// 0x0768 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TransitionGameType;                               		// 0x0778 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MeshLODRange;                                     		// 0x0788 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraRotationThreshold;                          		// 0x078C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraTranslationThreshold;                       		// 0x0790 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PrimitiveProbablyVisibleTime;                     		// 0x0794 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PercentUnoccludedRequeries;                       		// 0x0798 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxOcclusionPixelsFraction;                       		// 0x079C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxFluidNumVerts;                                 		// 0x07A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidSimulationTimeLimit;                         		// 0x07A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleResize;                                		// 0x07A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleResizeWarn;                            		// 0x07AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleVertexMemory;                          		// 0x07B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleSpriteCount;                           		// 0x07B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxParticleSubUVCount;                            		// 0x07B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BeginUPTryCount;                                  		// 0x07BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FDropNoteInfo >                     PendingDroppedNotes;                              		// 0x07C0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     DynamicCoverMeshComponentName;                    		// 0x07D0 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	float                                              NetClientTicksPerSecond;                          		// 0x07E0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxTrackedOcclusionIncrement;                     		// 0x07E4 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              TrackedOcclusionStepSize;                         		// 0x07E8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                DefaultSelectedMaterialColor;                     		// 0x07EC (0x0010) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                DefaultHoveredMaterialColor;                      		// 0x07FC (0x0010) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                SelectedMaterialColor;                            		// 0x080C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                UnselectedMaterialColor;                          		// 0x081C (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                H7ErrorMaterialColor;                             		// 0x082C (0x0010) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FName >                             IgnoreSimulatedFuncWarnings;                      		// 0x083C (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	int                                                ScreenSaverInhibitorSemaphore;                    		// 0x084C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    ScreenSaverInhibitor;                             		// 0x0850 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UTranslationContext*                         GlobalTranslationContext;                         		// 0x0858 (0x0008) [0x0000000000000000]              
	struct FDouble                                     LoadingMovieStartTime;                            		// 0x0860 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     MatineeCaptureName;                               		// 0x0868 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     MatineePackageCaptureName;                        		// 0x0878 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     VisibleLevelsForMatineeCapture;                   		// 0x0888 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                MatineeCaptureFPS;                                		// 0x0898 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MatineeCaptureType;                               		// 0x089C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 141 ];

		return pClassPointer;
	};

	struct FString GetIdentifierForVendor ( );
	float GetSystemSettingFloat ( struct FString SettingName );
	int GetSystemSettingInt ( struct FString SettingName );
	bool GetSystemSettingBool ( struct FString SettingName );
	void LaunchURL ( struct FString URL );
	bool BasicLoadObject ( class UObject* Obj, struct FString PathName, unsigned long bIsSaveGame, int Version );
	bool BasicSaveObject ( class UObject* Obj, struct FString PathName, unsigned long bIsSaveGame, int Version, unsigned long bEncrypt );
	void AddTextureStreamingSlaveLoc ( struct FVector InLoc, float BoostFactor, unsigned long bOverrideLocation, float OverrideDuration );
	class UPostProcessChain* GetWorldPostProcessChain ( );
	class UPostProcessChain* GetDefaultPostProcessChain ( );
	class UEngine* GetEngine ( );
	bool IsRealDStereoEnabled ( );
	void AddOverlayWrapped ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth );
	void AddOverlay ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, unsigned long bIsCentered );
	void RemoveAllOverlays ( );
	void StopMovie ( unsigned long bDelayStopUntilGameHasRendered );
	bool PlayLoadMapMovie ( );
	struct FString GetLastMovieName ( );
	class UAudioDevice* GetAudioDevice ( );
	bool IsUsingES2Renderer ( );
	bool IsStereoscopic3D ( );
	bool IsSplitScreen ( );
	class UFont* GetAdditionalFont ( int AdditionalFontIndex );
	class UFont* GetSubtitleFont ( );
	class UFont* GetLargeFont ( );
	class UFont* GetMediumFont ( );
	class UFont* GetSmallFont ( );
	class UFont* GetTinyFont ( );
	bool HasNetworkConnection ( );
	struct FString BuildBugSubmissionString ( struct FString BugField, struct FString BugFieldData );
	struct FString GetDevicePushNotificationToken ( );
	float GetOSVersion ( );
	struct FString GetDeviceUUID ( );
	struct FString GetBuildDate ( );
	class AWorldInfo* GetCurrentWorldInfo ( );
	bool IsGame ( );
	bool IsEditor ( );
};



// Class Engine.GameEngine ( Property size: 33 iter: 45) 
// Class name index: 3974 
// 0x01DC (0x0A7C - 0x08A0)
class UGameEngine : public UEngine
{
public:
	class UPendingLevel*                               GPendingLevel;                                    		// 0x08A0 (0x0008) [0x0000000000000000]              
	struct FString                                     PendingLevelPlayerControllerClassName;            		// 0x08A8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FURL                                        LastURL;                                          		// 0x08B8 (0x0058) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FURL                                        LastRemoteURL;                                    		// 0x0910 (0x0058) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ServerActors;                                     		// 0x0968 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TravelURL;                                        		// 0x0978 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      TravelType;                                       		// 0x0988 (0x0001) [0x0000000000000000]              
	unsigned long                                      bWorldWasLoadedThisTick : 1;                      		// 0x098C (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bCheckForMovieCapture : 1;                        		// 0x098C (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bTriggerPostLoadMap : 1;                          		// 0x098C (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bStartedLoadMapMovie : 1;                         		// 0x098C (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldCommitPendingMapChange : 1;                		// 0x098C (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bShouldKeepSurvivingLevelOnNextCommitMapChange : 1;		// 0x098C (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bClearAnimSetLinkupCachesOnLoadMap : 1;           		// 0x098C (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bEnableSecondaryDisplay : 1;                      		// 0x098C (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bEnableSecondaryViewport : 1;                     		// 0x098C (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	class UOnlineSubsystem*                            OnlineSubsystem;                                  		// 0x0990 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UDownloadableContentEnumerator*              DLCEnumerator;                                    		// 0x0998 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     DownloadableContentEnumeratorClassName;           		// 0x09A0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UDownloadableContentManager*                 DLCManager;                                       		// 0x09B0 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     DownloadableContentManagerClassName;              		// 0x09B8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             LevelsToLoadForPendingMapChange;                  		// 0x09C8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class ULevel* >                            LoadedLevelsForPendingMapChange;                  		// 0x09D8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     PendingMapChangeFailureDescription;               		// 0x09E8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              MaxDeltaTime;                                     		// 0x09F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     SecondaryViewportClientClassName;                 		// 0x09FC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class UScriptViewportClient* >             SecondaryViewportClients;                         		// 0x0A0C (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )
	TArray< struct FPointer >                          SecondaryViewportFrames;                          		// 0x0A1C (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )
	TArray< struct FLevelStreamingStatus >             PendingLevelStreamingStatusUpdates;               		// 0x0A2C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UObjectReferencer* >                 ObjectReferencers;                                		// 0x0A3C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FFullyLoadedPackagesInfo >          PackagesToFullyLoad;                              		// 0x0A4C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FNamedNetDriver >                   NamedNetDrivers;                                  		// 0x0A5C (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FAnimTag >                          AnimTags;                                         		// 0x0A6C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 143 ];

		return pClassPointer;
	};

	bool HasSecondaryScreenActive ( );
	class UDownloadableContentManager* GetDLCManager ( );
	class UDownloadableContentEnumerator* GetDLCEnumerator ( );
	class UOnlineSubsystem* GetOnlineSubsystem ( );
	void DestroyNamedNetDriver ( struct FName NetDriverName );
	bool CreateNamedNetDriver ( struct FName NetDriverName );
};



// Class Engine.EngineBaseTypes ( Property size: 0 iter: 1) 
// Class name index: 4958 
// 0x0000 (0x0060 - 0x0060)
class UEngineBaseTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 145 ];

		return pClassPointer;
	};

};



// Class Engine.Brush ( Property size: 9 iter: 11) 
// Class name index: 1208 
// 0x0030 (0x0270 - 0x0240)
class ABrush : public AActor
{
public:
	unsigned char                                      CsgOper;                                          		// 0x0240 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BrushColor;                                       		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PolyFlags;                                        		// 0x0248 (0x0004) [0x0000000000000000]              
	unsigned long                                      bColored : 1;                                     		// 0x024C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSolidWhenSelected : 1;                           		// 0x024C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPlaceableFromClassBrowser : 1;                   		// 0x024C (0x0004) [0x0000000000000000] [0x00000004] 
	class UModel*                                      Brush;                                            		// 0x0250 (0x0008) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	class UBrushComponent*                             BrushComponent;                                   		// 0x0258 (0x0008) [0x00000000040A000A]              ( CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	TArray< struct FGeomSelection >                    SavedSelections;                                  		// 0x0260 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 147 ];

		return pClassPointer;
	};

};



// Class Engine.BrushShape ( Property size: 0 iter: 0) 
// Class name index: 4961 
// 0x0000 (0x0270 - 0x0270)
class ABrushShape : public ABrush
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 149 ];

		return pClassPointer;
	};

};



// Class Engine.Volume ( Property size: 4 iter: 12) 
// Class name index: 4963 
// 0x000C (0x027C - 0x0270)
class AVolume : public ABrush
{
public:
	class AActor*                                      AssociatedActor;                                  		// 0x0270 (0x0008) [0x0000000000000000]              
	unsigned long                                      bForcePawnWalk : 1;                               		// 0x0278 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProcessAllActors : 1;                            		// 0x0278 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPawnsOnly : 1;                                   		// 0x0278 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 151 ];

		return pClassPointer;
	};

	void eventProcessActorSetVolume ( class AActor* Other );
	void eventCollisionChanged ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void eventPostBeginPlay ( );
	bool EncompassesPoint ( struct FVector Loc );
	bool Encompasses ( class AActor* Other );
};



// Class Engine.BlockingVolume ( Property size: 1 iter: 2) 
// Class name index: 4965 
// 0x0004 (0x0280 - 0x027C)
class ABlockingVolume : public AVolume
{
public:
	unsigned long                                      bBlockCamera : 1;                                 		// 0x027C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 153 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};



// Class Engine.DynamicBlockingVolume ( Property size: 1 iter: 5) 
// Class name index: 4967 
// 0x0004 (0x0284 - 0x0280)
class ADynamicBlockingVolume : public ABlockingVolume
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0280 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 155 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct ADynamicBlockingVolume_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ADynamicBlockingVolume_FCheckpointRecord* Record );
	void eventPostBeginPlay ( );
};



// Class Engine.CullDistanceVolume ( Property size: 2 iter: 3) 
// Class name index: 4969 
// 0x0014 (0x0290 - 0x027C)
class ACullDistanceVolume : public AVolume
{
public:
	TArray< struct FCullDistanceSizePair >             CullDistances;                                    		// 0x027C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bEnabled : 1;                                     		// 0x028C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 157 ];

		return pClassPointer;
	};

};



// Class Engine.H7LightmassEnvironmentSphere ( Property size: 1 iter: 2) 
// Class name index: 4971 
// 0x0008 (0x0284 - 0x027C)
class AH7LightmassEnvironmentSphere : public AVolume
{
public:
	struct FPointer                                    VfTable_IH7LightmassEnvironmentSphereInterface;   		// 0x027C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 159 ];

		return pClassPointer;
	};

	bool GetLightmassData ( struct FH7LightmassEnvironmentSphereData* Data );
};



// Class Engine.LevelGridVolume ( Property size: 6 iter: 8) 
// Class name index: 4973 
// 0x00A4 (0x0320 - 0x027C)
class ALevelGridVolume : public AVolume
{
public:
	struct FString                                     LevelGridVolumeName;                              		// 0x027C (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      CellShape;                                        		// 0x028C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                Subdivisions[ 0x3 ];                              		// 0x0290 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LoadingDistance;                                  		// 0x029C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              KeepLoadedRange;                                  		// 0x02A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FKConvexElem                                CellConvexElem;                                   		// 0x02A4 (0x007C) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 161 ];

		return pClassPointer;
	};

};



// Class Engine.LevelStreamingVolume ( Property size: 7 iter: 12) 
// Class name index: 4975 
// 0x001C (0x0298 - 0x027C)
class ALevelStreamingVolume : public AVolume
{
public:
	TArray< class ULevelStreaming* >                   StreamingLevels;                                  		// 0x027C (0x0010) [0x0000000001420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	unsigned long                                      bEditorPreVisOnly : 1;                            		// 0x028C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisabled : 1;                                    		// 0x028C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTestDistanceToVolume : 1;                        		// 0x028C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      StreamingUsage;                                   		// 0x0290 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Usage;                                            		// 0x0291 (0x0001) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              TestVolumeDistance;                               		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 163 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct ALevelStreamingVolume_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ALevelStreamingVolume_FCheckpointRecord* Record );
	void OnToggle ( class USeqAct_Toggle* Action );
};



// Class Engine.LightmassCharacterIndirectDetailVolume ( Property size: 0 iter: 0) 
// Class name index: 4977 
// 0x0000 (0x027C - 0x027C)
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 165 ];

		return pClassPointer;
	};

};



// Class Engine.LightmassImportanceVolume ( Property size: 0 iter: 0) 
// Class name index: 4979 
// 0x0000 (0x027C - 0x027C)
class ALightmassImportanceVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 167 ];

		return pClassPointer;
	};

};



// Class Engine.MassiveLODOverrideVolume ( Property size: 0 iter: 0) 
// Class name index: 4981 
// 0x0000 (0x027C - 0x027C)
class AMassiveLODOverrideVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 169 ];

		return pClassPointer;
	};

};



// Class Engine.PathBlockingVolume ( Property size: 0 iter: 0) 
// Class name index: 4983 
// 0x0000 (0x027C - 0x027C)
class APathBlockingVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 171 ];

		return pClassPointer;
	};

};



// Class Engine.PhysicsVolume ( Property size: 26 iter: 47) 
// Class name index: 4985 
// 0x0050 (0x02CC - 0x027C)
class APhysicsVolume : public AVolume
{
public:
	struct FVector                                     ZoneVelocity;                                     		// 0x027C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelocityAffectsWalking : 1;                      		// 0x0288 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPainCausing : 1;                                 		// 0x0288 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAIShouldIgnorePain : 1;                          		// 0x0288 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEntryPain : 1;                                   		// 0x0288 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      BACKUP_bPainCausing : 1;                          		// 0x0288 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDestructive : 1;                                 		// 0x0288 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNoInventory : 1;                                 		// 0x0288 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bMoveProjectiles : 1;                             		// 0x0288 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bBounceVelocity : 1;                              		// 0x0288 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bNeutralZone : 1;                                 		// 0x0288 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bCrowdAgentsPlayDeathAnim : 1;                    		// 0x0288 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bPhysicsOnContact : 1;                            		// 0x0288 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bWaterVolume : 1;                                 		// 0x0288 (0x0004) [0x0000000000000000] [0x00001000] 
	float                                              GroundFriction;                                   		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TerminalVelocity;                                 		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamagePerSec;                                     		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DamageType;                                       		// 0x0298 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                Priority;                                         		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidFriction;                                    		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PainInterval;                                     		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RigidBodyDamping;                                 		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDampingForce;                                  		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AInfo*                                       PainTimer;                                        		// 0x02B4 (0x0008) [0x0000000000000000]              
	class AController*                                 DamageInstigator;                                 		// 0x02BC (0x0008) [0x0000000000000000]              
	class APhysicsVolume*                              NextPhysicsVolume;                                		// 0x02C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 173 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct APhysicsVolume_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct APhysicsVolume_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void OnSetDamageInstigator ( class USeqAct_SetDamageInstigator* Action );
	void NotifyPawnBecameViewTarget ( class APawn* P, class APlayerController* PC );
	void ModifyPlayer ( class APawn* PlayerPawn );
	void CausePainTo ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void TimerPop ( class AVolumeTimer* T );
	void eventCollisionChanged ( );
	void OnToggle ( class USeqAct_Toggle* inAction );
	void eventPawnLeavingVolume ( class APawn* Other );
	void eventPawnEnteredVolume ( class APawn* Other );
	void eventActorLeavingVolume ( class AActor* Other );
	void eventActorEnteredVolume ( class AActor* Other );
	void eventPhysicsChangedFor ( class AActor* Other );
	void Reset ( );
	void eventPostBeginPlay ( );
	struct FVector GetZoneVelocityForActor ( class AActor* TheActor );
	float GetGravityZ ( );
};



// Class Engine.DefaultPhysicsVolume ( Property size: 0 iter: 1) 
// Class name index: 4987 
// 0x0000 (0x02CC - 0x02CC)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 175 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
};



// Class Engine.GravityVolume ( Property size: 1 iter: 1) 
// Class name index: 4989 
// 0x0004 (0x02D0 - 0x02CC)
class AGravityVolume : public APhysicsVolume
{
public:
	float                                              GravityZ;                                         		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 177 ];

		return pClassPointer;
	};

};



// Class Engine.LadderVolume ( Property size: 9 iter: 14) 
// Class name index: 4991 
// 0x0040 (0x030C - 0x02CC)
class ALadderVolume : public APhysicsVolume
{
public:
	struct FRotator                                    WallDir;                                          		// 0x02CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LookDir;                                          		// 0x02D8 (0x000C) [0x0000000000000000]              
	struct FVector                                     ClimbDir;                                         		// 0x02E4 (0x000C) [0x0000000000000000]              
	class ALadder*                                     LadderList;                                       		// 0x02F0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bNoPhysicalLadder : 1;                            		// 0x02F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAutoPath : 1;                                    		// 0x02F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowLadderStrafing : 1;                         		// 0x02F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class APawn*                                       PendingClimber;                                   		// 0x02FC (0x0008) [0x0000000000000000]              
	class UArrowComponent*                             WallDirArrow;                                     		// 0x0304 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 179 ];

		return pClassPointer;
	};

	void eventPhysicsChangedFor ( class AActor* Other );
	void eventPawnLeavingVolume ( class APawn* P );
	void eventPawnEnteredVolume ( class APawn* P );
	bool InUse ( class APawn* Ignored );
	void eventPostBeginPlay ( );
};



// Class Engine.PortalVolume ( Property size: 1 iter: 1) 
// Class name index: 4993 
// 0x0010 (0x028C - 0x027C)
class APortalVolume : public AVolume
{
public:
	TArray< class APortalTeleporter* >                 Portals;                                          		// 0x027C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 181 ];

		return pClassPointer;
	};

};



// Class Engine.PostProcessVolume ( Property size: 5 iter: 10) 
// Class name index: 4995 
// 0x0170 (0x03EC - 0x027C)
class APostProcessVolume : public AVolume
{
public:
	float                                              Priority;                                         		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOverrideWorldPostProcessChain : 1;               		// 0x0280 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x0280 (0x0004) [0x0000000000000021] [0x00000002] ( CPF_Edit | CPF_Net )
	struct FPostProcessSettings                        Settings;                                         		// 0x0284 (0x0160) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class APostProcessVolume*                          NextLowerPriorityVolume;                          		// 0x03E4 (0x0008) [0x0000000001002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 183 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};



// Class Engine.PrecomputedVisibilityOverrideVolume ( Property size: 2 iter: 2) 
// Class name index: 4997 
// 0x0020 (0x029C - 0x027C)
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	TArray< class AActor* >                            OverrideVisibleActors;                            		// 0x027C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AActor* >                            OverrideInvisibleActors;                          		// 0x028C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 185 ];

		return pClassPointer;
	};

};



// Class Engine.PrecomputedVisibilityVolume ( Property size: 0 iter: 0) 
// Class name index: 4999 
// 0x0000 (0x027C - 0x027C)
class APrecomputedVisibilityVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 187 ];

		return pClassPointer;
	};

};



// Class Engine.ReverbVolume ( Property size: 5 iter: 8) 
// Class name index: 5001 
// 0x0044 (0x02C0 - 0x027C)
class AReverbVolume : public AVolume
{
public:
	float                                              Priority;                                         		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x0280 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	struct FReverbSettings                             Settings;                                         		// 0x0284 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FInteriorSettings                           AmbientZoneSettings;                              		// 0x0294 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	class AReverbVolume*                               NextLowerPriorityVolume;                          		// 0x02B8 (0x0008) [0x0000000001002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 189 ];

		return pClassPointer;
	};

};



// Class Engine.TriggerVolume ( Property size: 0 iter: 2) 
// Class name index: 5003 
// 0x0000 (0x027C - 0x027C)
class ATriggerVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 191 ];

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
	void eventPostBeginPlay ( );
};



// Class Engine.DroppedPickup ( Property size: 4 iter: 19) 
// Class name index: 5005 
// 0x001C (0x025C - 0x0240)
class ADroppedPickup : public AActor
{
public:
	class AInventory*                                  Inventory;                                        		// 0x0240 (0x0008) [0x0000000000000000]              
	class UClass*                                      InventoryClass;                                   		// 0x0248 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class ANavigationPoint*                            PickupCache;                                      		// 0x0250 (0x0008) [0x0000000000000000]              
	unsigned long                                      bFadeOut : 1;                                     		// 0x0258 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 193 ];

		return pClassPointer;
	};

	void RecheckValidTouch ( );
	void PickedUpBy ( class APawn* P );
	void GiveTo ( class APawn* P );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	float DetourWeight ( class APawn* Other, float PathWeight );
	void eventEncroachedBy ( class AActor* Other );
	void eventSetPickupParticles ( class UParticleSystemComponent* PickupParticles );
	void eventSetPickupMesh ( class UPrimitiveComponent* PickupMesh );
	void Reset ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventDestroyed ( );
	void RemoveFromNavigation ( );
	void AddToNavigation ( );
};



// Class Engine.DynamicSMActor ( Property size: 11 iter: 20) 
// Class name index: 5007 
// 0x0050 (0x0290 - 0x0240)
class ADynamicSMActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0240 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0248 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UStaticMesh*                                 ReplicatedMesh;                                   		// 0x0250 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UMaterialInterface*                          ReplicatedMaterial0;                              		// 0x0258 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class UMaterialInterface*                          ReplicatedMaterial1;                              		// 0x0260 (0x0008) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bForceStaticDecals : 1;                           		// 0x0268 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bPawnCanBaseOn : 1;                               		// 0x0268 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSafeBaseIfAsleep : 1;                            		// 0x0268 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FVector                                     ReplicatedMeshTranslation;                        		// 0x026C (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    ReplicatedMeshRotation;                           		// 0x0278 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     ReplicatedMeshScale3D;                            		// 0x0284 (0x000C) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 195 ];

		return pClassPointer;
	};

	void SetLightEnvironmentToNotBeDynamic ( );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	bool CanBasePawn ( class APawn* P );
	void SetStaticMesh ( class UStaticMesh* NewMesh, struct FVector NewTranslation, struct FRotator NewRotation, struct FVector NewScale3D );
	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	void OnSetMesh ( class USeqAct_SetMesh* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};



// Class Engine.DynamicSMActor_Spawnable ( Property size: 0 iter: 0) 
// Class name index: 5009 
// 0x0000 (0x0290 - 0x0290)
class ADynamicSMActor_Spawnable : public ADynamicSMActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 197 ];

		return pClassPointer;
	};

};



// Class Engine.InterpActor ( Property size: 18 iter: 34) 
// Class name index: 5011 
// 0x004C (0x02DC - 0x0290)
class AInterpActor : public ADynamicSMActor
{
public:
	unsigned long                                      bShouldSaveForCheckpoint : 1;                     		// 0x0290 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bMonitorMover : 1;                                		// 0x0290 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bMonitorZVelocity : 1;                            		// 0x0290 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDestroyProjectilesOnEncroach : 1;                		// 0x0290 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bContinueOnEncroachPhysicsObject : 1;             		// 0x0290 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bStopOnEncroach : 1;                              		// 0x0290 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bShouldShadowParentAllAttachedActors : 1;         		// 0x0290 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bIsLift : 1;                                      		// 0x0290 (0x0004) [0x0000000000000000] [0x00000080] 
	class ANavigationPoint*                            MyMarker;                                         		// 0x0294 (0x0008) [0x0000000000000000]              
	float                                              MaxZVelocity;                                     		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              StayOpenTime;                                     		// 0x02A0 (0x0004) [0x0000000000000000]              
	class USoundCue*                                   OpenSound;                                        		// 0x02A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   OpeningAmbientSound;                              		// 0x02AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   OpenedSound;                                      		// 0x02B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CloseSound;                                       		// 0x02BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ClosingAmbientSound;                              		// 0x02C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ClosedSound;                                      		// 0x02CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             AmbientSoundComponent;                            		// 0x02D4 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 199 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void ShutDown ( );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void PlayMovingSound ( unsigned long bClosing );
	void FinishedOpen ( );
	void Restart ( );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventRanInto ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void eventPostBeginPlay ( );
};



// Class Engine.Emitter ( Property size: 5 iter: 23) 
// Class name index: 5013 
// 0x0014 (0x0254 - 0x0240)
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                          		// 0x0240 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0248 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bDestroyOnSystemFinish : 1;                       		// 0x0250 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPostUpdateTickGroup : 1;                         		// 0x0250 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCurrentlyActive : 1;                             		// 0x0250 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 201 ];

		return pClassPointer;
	};

	void HideSelf ( );
	void ApplyCheckpointRecord ( struct AEmitter_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct AEmitter_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void OnSetParticleSysParam ( class USeqAct_SetParticleSysParam* Action );
	void SetActorParameter ( struct FName ParameterName, class AActor* Param );
	void SetExtColorParameter ( struct FName ParameterName, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned char Alpha );
	void SetColorParameter ( struct FName ParameterName, struct FColor Param );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	void ShutDown ( );
	void OnParticleEventGenerator ( class USeqAct_ParticleEventGenerator* Action );
	void OnToggle ( class USeqAct_Toggle* Action );
	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
};



// Class Engine.EmitterPool ( Property size: 13 iter: 25) 
// Class name index: 5015 
// 0x0070 (0x02B0 - 0x0240)
class AEmitterPool : public AActor
{
public:
	class UParticleSystemComponent*                    PSCTemplate;                                      		// 0x0240 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UParticleSystemComponent* >          PoolComponents;                                   		// 0x0248 (0x0010) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UParticleSystemComponent* >          ActiveComponents;                                 		// 0x0258 (0x0010) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                MaxActiveEffects;                                 		// 0x0268 (0x0004) [0x0000000000000000]              
	unsigned long                                      bLogPoolOverflow : 1;                             		// 0x026C (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bLogPoolOverflowList : 1;                         		// 0x026C (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FEmitterBaseInfo >                  RelativePSCs;                                     		// 0x0270 (0x0010) [0x0000000000482000]              ( CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	float                                              SMC_MIC_ReductionTime;                            		// 0x0280 (0x0004) [0x0000000000000000]              
	float                                              SMC_MIC_CurrentReductionTime;                     		// 0x0284 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                IdealStaticMeshComponents;                        		// 0x0288 (0x0004) [0x0000000000000000]              
	int                                                IdealMaterialInstanceConstants;                   		// 0x028C (0x0004) [0x0000000000000000]              
	TArray< class UStaticMeshComponent* >              FreeSMComponents;                                 		// 0x0290 (0x0010) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInstanceConstant* >         FreeMatInstConsts;                                		// 0x02A0 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 203 ];

		return pClassPointer;
	};

	class UParticleSystemComponent* SpawnEmitterCustomLifetime ( class UParticleSystem* EmitterTemplate, unsigned long bSkipAutoActivate );
	class UParticleSystemComponent* SpawnEmitterMeshAttachment ( class UParticleSystem* EmitterTemplate, class USkeletalMeshComponent* Mesh, struct FName AttachPointName, unsigned long bAttachToSocket, struct FVector RelativeLoc, struct FRotator RelativeRot );
	class UParticleSystemComponent* SpawnEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* AttachToActor, class AActor* InInstigator, int MaxDLEPooledReuses, unsigned long bInheritScaleFromBase );
	class UParticleSystemComponent* GetPooledComponent ( class UParticleSystem* EmitterTemplate, unsigned long bAutoActivate );
	class UMaterialInstanceConstant* GetFreeMatInstConsts ( unsigned long bCreateNewObject );
	void FreeMaterialInstanceConstants ( class UStaticMeshComponent* SMC );
	class UStaticMeshComponent* GetFreeStaticMeshComponent ( unsigned long bCreateNewObject );
	void FreeStaticMeshComponents ( class UParticleSystemComponent* PSC );
	void ReturnToPool ( class UParticleSystemComponent* PSC );
	void ClearPoolComponents ( unsigned long bClearActive );
	void OnParticleSystemFinished ( class UParticleSystemComponent* PSC );
};



// Class Engine.H7UnrealObjectCellMarker ( Property size: 0 iter: 0) 
// Class name index: 5017 
// 0x0000 (0x0240 - 0x0240)
class AH7UnrealObjectCellMarker : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 205 ];

		return pClassPointer;
	};

};



// Class Engine.HUD ( Property size: 37 iter: 77) 
// Class name index: 5019 
// 0x0320 (0x0560 - 0x0240)
class AHUD : public AActor
{
public:
	struct FColor                                      WhiteColor;                                       		// 0x0240 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      GreenColor;                                       		// 0x0244 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      RedColor;                                         		// 0x0248 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APlayerController*                           PlayerOwner;                                      		// 0x024C (0x0008) [0x0000000000000000]              
	unsigned long                                      bLostFocusPaused : 1;                             		// 0x0254 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bShowHUD : 1;                                     		// 0x0254 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bShowScores : 1;                                  		// 0x0254 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bShowDebugInfo : 1;                               		// 0x0254 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShowBadConnectionAlert : 1;                      		// 0x0254 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bShowDirectorInfoDebug : 1;                       		// 0x0254 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bShowDirectorInfoHUD : 1;                         		// 0x0254 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bMessageBeep : 1;                                 		// 0x0254 (0x0004) [0x0000000000044000] [0x00000080] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bRenderFullScreen : 1;                            		// 0x0254 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bScaleCanvasForCinematicMode : 1;                 		// 0x0254 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bShowOverlays : 1;                                		// 0x0254 (0x0004) [0x0000000000000000] [0x00000400] 
	float                                              HudCanvasScale;                                   		// 0x0258 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< class AActor* >                            PostRenderedActors;                               		// 0x025C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FConsoleMessage >                   ConsoleMessages;                                  		// 0x026C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColor                                      ConsoleColor;                                     		// 0x027C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ConsoleMessageCount;                              		// 0x0280 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                ConsoleFontSize;                                  		// 0x0284 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MessageFontOffset;                                		// 0x0288 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxHUDAreaMessageCount;                           		// 0x028C (0x0004) [0x0000000000000000]              
	struct FHudLocalizedMessage                        LocalMessages[ 0x8 ];                             		// 0x0290 (0x0280) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	float                                              ConsoleMessagePosX;                               		// 0x0510 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConsoleMessagePosY;                               		// 0x0514 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCanvas*                                     Canvas;                                           		// 0x0518 (0x0008) [0x0000000000000000]              
	float                                              LastHUDRenderTime;                                		// 0x0520 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RenderDelta;                                      		// 0x0524 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SizeX;                                            		// 0x0528 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SizeY;                                            		// 0x052C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CenterX;                                          		// 0x0530 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CenterY;                                          		// 0x0534 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RatioX;                                           		// 0x0538 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RatioY;                                           		// 0x053C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             DebugDisplay;                                     		// 0x0540 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< struct FKismetDrawTextInfo >               KismetTextInfo;                                   		// 0x0550 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 207 ];

		return pClassPointer;
	};

	void eventOnLostFocusPause ( unsigned long bEnable );
	void NotifyBindPostProcessEffects ( );
	void PlayerOwnerDied ( );
	class UFont* GetFontSizeIndex ( int FontSize );
	void DrawText ( struct FString Text, struct FVector2D Position, class UFont* TextFont, struct FVector2D FontScale, struct FColor TextColor, struct FFontRenderInfo* RenderInfo );
	void DisplayKismetMessages ( );
	void DisplayLocalMessages ( );
	void DrawMessageText ( struct FHudLocalizedMessage LocalMessage, float ScreenX, float ScreenY );
	void DrawMessage ( int I, float PosY, float* DX, float* DY );
	void GetScreenCoords ( float PosY, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* InMessage );
	void AddLocalizedMessage ( int Index, class UClass* InMessageClass, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, int MessageCount, class UObject* OptionalObject );
	void LocalizedMessage ( class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, class UObject* OptionalObject );
	void AddConsoleMessage ( struct FString M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime );
	bool ShouldShowConsoleMessage ( struct FConsoleMessage InConsoleMessage );
	void DisplayConsoleMessages ( );
	void Message ( class APlayerReplicationInfo* PRI, struct FString msg, struct FName MsgType, float Lifetime );
	void ClearMessage ( struct FHudLocalizedMessage* M );
	void DisplayBadConnectionAlert ( );
	void DrawHUD ( );
	void eventPostRender ( );
	void PreCalcValues ( );
	void DrawRoute ( class APawn* Target );
	void ShowDebugInfo ( float* out_YL, float* out_YPos );
	void ToggleDirectorInfoDebug ( );
	void ToggleDirectorInfoHUD ( );
	bool ShouldDisplayDebug ( struct FName DebugType );
	void ShowDebug ( struct FName DebugType );
	void SetShowScores ( unsigned long bNewValue );
	void ShowScores ( );
	void ShowHUD ( );
	void ToggleHUD ( );
	void AddPostRenderedActor ( class AActor* A );
	void RemovePostRenderedActor ( class AActor* A );
	void DrawActorOverlays ( struct FVector ViewPoint, struct FRotator ViewRotation );
	void eventPostBeginPlay ( );
	void Draw2DLine ( int X1, int Y1, int X2, int Y2, struct FColor LineColor );
	void Draw3DLine ( struct FVector Start, struct FVector End, struct FColor LineColor );
};



// Class Engine.AutoTestManager ( Property size: 29 iter: 54) 
// Class name index: 5021 
// 0x00C4 (0x0304 - 0x0240)
class AAutoTestManager : public AInfo
{
public:
	unsigned long                                      bAutomatedPerfTesting : 1;                        		// 0x0240 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoContinueToNextRound : 1;                     		// 0x0240 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUsingAutomatedTestingMapList : 1;                		// 0x0240 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAutomatedTestingWithOpen : 1;                    		// 0x0240 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bExitOnCyclesComplete : 1;                        		// 0x0240 (0x0004) [0x0000000000044000] [0x00000010] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCheckingForFragmentation : 1;                    		// 0x0240 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bCheckingForMemLeaks : 1;                         		// 0x0240 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bDoingASentinelRun : 1;                           		// 0x0240 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bSentinelStreamingLevelStillLoading : 1;          		// 0x0240 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	int                                                AutomatedPerfRemainingTime;                       		// 0x0244 (0x0004) [0x0000000000000000]              
	int                                                AutomatedTestingMapIndex;                         		// 0x0248 (0x0004) [0x0000000000000000]              
	TArray< struct FString >                           AutomatedMapTestingList;                          		// 0x024C (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	int                                                NumAutomatedMapTestingCycles;                     		// 0x025C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                NumberOfMatchesPlayed;                            		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                NumMapListCyclesDone;                             		// 0x0264 (0x0004) [0x0000000000000000]              
	struct FString                                     AutomatedTestingExecCommandToRunAtStartMatch;     		// 0x0268 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AutomatedMapTestingTransitionMap;                 		// 0x0278 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SentinelTaskDescription;                          		// 0x0288 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SentinelTaskParameter;                            		// 0x0298 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SentinelTagDesc;                                  		// 0x02A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class APlayerController*                           SentinelPC;                                       		// 0x02B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FVector >                           SentinelTravelArray;                              		// 0x02C0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                SentinelNavigationIdx;                            		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SentinelIdx;                                      		// 0x02D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumRotationsIncrement;                            		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TravelPointsIncrement;                            		// 0x02DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumMinutesPerMap;                                 		// 0x02E0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           CommandsToRunAtEachTravelTheWorldNode;            		// 0x02E4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CommandStringToExec;                              		// 0x02F4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 209 ];

		return pClassPointer;
	};

	bool CheckForSentinelRun ( );
	void StartMatch ( );
	struct FString GetNextAutomatedTestingMap ( );
	void IncrementNumberOfMatchesPlayed ( );
	void IncrementAutomatedTestingMapIndex ( );
	void CloseAutomatedMapTestTimer ( );
	void StartAutomatedMapTestTimerWorker ( );
	void eventStartAutomatedMapTestTimer ( );
	void DoMemoryTracking ( );
	void DoTimeBasedSentinelStatGathering ( );
	void DoSentinel_ViewDependentMemoryAtSpecificLocation ( struct FVector* InLocation, struct FRotator* InRotation );
	void DoSentinel_PerfAtSpecificLocation ( struct FVector* InLocation, struct FRotator* InRotation );
	void DoSentinel_MemoryAtSpecificLocation ( struct FVector InLocation, struct FRotator InRotation );
	void GetTravelLocations ( struct FName LevelName, class APlayerController* PC, TArray< struct FVector >* TravelPoints );
	void HandlePerLoadedMapAudioStats ( );
	void DoSentinelActionPerLoadedMap ( );
	void DoTravelTheWorld ( );
	void EndSentinelRun ( unsigned char RunResult );
	void AddSentinelPerTimePeriodStats ( struct FVector InLocation, struct FRotator InRotation );
	void BeginSentinelRun ( struct FString TaskDescription, struct FString TaskParameter, struct FString TagDesc );
	void InitializeOptions ( struct FString Options );
	void eventTimer ( );
	void eventPostBeginPlay ( );
};



// Class Engine.CoverGroup ( Property size: 3 iter: 8) 
// Class name index: 5023 
// 0x0018 (0x0258 - 0x0240)
class ACoverGroup : public AInfo
{
public:
	TArray< struct FActorReference >                   CoverLinkRefs;                                    		// 0x0240 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              AutoSelectRadius;                                 		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoSelectHeight;                                 		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 211 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void ToggleGroup ( );
	void DisableGroup ( );
	void EnableGroup ( );
};



// Class Engine.FileWriter ( Property size: 5 iter: 10) 
// Class name index: 5025 
// 0x0020 (0x0260 - 0x0240)
class AFileWriter : public AInfo
{
public:
	struct FPointer                                    ArchivePtr;                                       		// 0x0240 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FString                                     Filename;                                         		// 0x0248 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      FileType;                                         		// 0x0258 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bFlushEachWrite : 1;                              		// 0x025C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWantsAsyncWrites : 1;                            		// 0x025C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 213 ];

		return pClassPointer;
	};

	void eventDestroyed ( );
	void Logf ( struct FString logString );
	void CloseFile ( );
	bool OpenFile ( struct FString InFilename, unsigned char InFileType, struct FString InExtension, unsigned long bUnique, unsigned long bIncludeTimeStamp );
};



// Class Engine.FileLog ( Property size: 0 iter: 2) 
// Class name index: 5027 
// 0x0000 (0x0260 - 0x0260)
class AFileLog : public AFileWriter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 215 ];

		return pClassPointer;
	};

	void CloseLog ( );
	void OpenLog ( struct FString LogFilename, struct FString extension, unsigned long bUnique );
};



// Class Engine.GameInfo ( Property size: 102 iter: 271) 
// Class name index: 5029 
// 0x024C (0x048C - 0x0240)
class AGameInfo : public AInfo
{
public:
	unsigned long                                      bRestartLevel : 1;                                		// 0x0240 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPauseable : 1;                                   		// 0x0240 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bTeamGame : 1;                                    		// 0x0240 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bGameEnded : 1;                                   		// 0x0240 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bOverTime : 1;                                    		// 0x0240 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDelayedStart : 1;                                		// 0x0240 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bWaitingToStartMatch : 1;                         		// 0x0240 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bChangeLevels : 1;                                		// 0x0240 (0x0004) [0x0000000000044000] [0x00000080] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bAlreadyChanged : 1;                              		// 0x0240 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bAdminCanPause : 1;                               		// 0x0240 (0x0004) [0x0000000000044000] [0x00000200] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bGameRestarted : 1;                               		// 0x0240 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bLevelChange : 1;                                 		// 0x0240 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bKickLiveIdlers : 1;                              		// 0x0240 (0x0004) [0x0000000000044000] [0x00001000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bUsingArbitration : 1;                            		// 0x0240 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bHasArbitratedHandshakeBegun : 1;                 		// 0x0240 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bNeedsEndGameHandshake : 1;                       		// 0x0240 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bIsEndGameHandshakeComplete : 1;                  		// 0x0240 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bHasEndGameHandshakeBegun : 1;                    		// 0x0240 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bFixedPlayerStart : 1;                            		// 0x0240 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bDoFearCostFallOff : 1;                           		// 0x0240 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bUseSeamlessTravel : 1;                           		// 0x0240 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bHasNetworkError : 1;                             		// 0x0240 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bRequiresPushToTalk : 1;                          		// 0x0240 (0x0004) [0x0000000000000002] [0x00400000] ( CPF_Const )
	unsigned long                                      bIsStandbyCheckingEnabled : 1;                    		// 0x0240 (0x0004) [0x0000000000004000] [0x00800000] ( CPF_Config )
	unsigned long                                      bIsStandbyCheckingOn : 1;                         		// 0x0240 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bHasStandbyCheatTriggered : 1;                    		// 0x0240 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bIsStartSpotRequired : 1;                         		// 0x0240 (0x0004) [0x0000000000000000] [0x04000000] 
	struct FString                                     CauseEventCommand;                                		// 0x0244 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BugLocString;                                     		// 0x0254 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BugRotString;                                     		// 0x0264 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APlayerController* >                 PendingArbitrationPCs;                            		// 0x0274 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APlayerController* >                 ArbitrationPCs;                                   		// 0x0284 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ArbitrationHandshakeTimeout;                      		// 0x0294 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              GameDifficulty;                                   		// 0x0298 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                GoreLevel;                                        		// 0x029C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              GameSpeed;                                        		// 0x02A0 (0x0004) [0x0000000000000000]              
	class UClass*                                      DefaultPawnClass;                                 		// 0x02A4 (0x0008) [0x0000000000000000]              
	class UClass*                                      HUDType;                                          		// 0x02AC (0x0008) [0x0000000000000000]              
	class UClass*                                      SecondaryHUDType;                                 		// 0x02B4 (0x0008) [0x0000000000000000]              
	int                                                MaxSpectators;                                    		// 0x02BC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxSpectatorsAllowed;                             		// 0x02C0 (0x0004) [0x0000000000000000]              
	int                                                NumSpectators;                                    		// 0x02C4 (0x0004) [0x0000000000000000]              
	int                                                MaxPlayers;                                       		// 0x02C8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxPlayersAllowed;                                		// 0x02CC (0x0004) [0x0000000000000000]              
	int                                                NumPlayers;                                       		// 0x02D0 (0x0004) [0x0000000000000000]              
	int                                                NumBots;                                          		// 0x02D4 (0x0004) [0x0000000000000000]              
	int                                                NumTravellingPlayers;                             		// 0x02D8 (0x0004) [0x0000000000000000]              
	int                                                CurrentID;                                        		// 0x02DC (0x0004) [0x0000000000000000]              
	struct FString                                     DefaultPlayerName;                                		// 0x02E0 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GameName;                                         		// 0x02F0 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              FearCostFallOff;                                  		// 0x0300 (0x0004) [0x0000000000000000]              
	int                                                GoalScore;                                        		// 0x0304 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxLives;                                         		// 0x0308 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TimeLimit;                                        		// 0x030C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UClass*                                      DeathMessageClass;                                		// 0x0310 (0x0008) [0x0000000000000000]              
	class UClass*                                      GameMessageClass;                                 		// 0x0318 (0x0008) [0x0000000000000000]              
	class AMutator*                                    BaseMutator;                                      		// 0x0320 (0x0008) [0x0000000000000000]              
	class UClass*                                      AccessControlClass;                               		// 0x0328 (0x0008) [0x0000000000000000]              
	class AAccessControl*                              AccessControl;                                    		// 0x0330 (0x0008) [0x0000000000000000]              
	class UClass*                                      BroadcastHandlerClass;                            		// 0x0338 (0x0008) [0x0000000000000000]              
	class ABroadcastHandler*                           BroadcastHandler;                                 		// 0x0340 (0x0008) [0x0000000000000000]              
	class UClass*                                      AutoTestManagerClass;                             		// 0x0348 (0x0008) [0x0000000000000000]              
	class AAutoTestManager*                            MyAutoTestManager;                                		// 0x0350 (0x0008) [0x0000000000000000]              
	class UClass*                                      PlayerControllerClass;                            		// 0x0358 (0x0008) [0x0000000000000000]              
	class UClass*                                      PlayerReplicationInfoClass;                       		// 0x0360 (0x0008) [0x0000000000000000]              
	class UClass*                                      GameReplicationInfoClass;                         		// 0x0368 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AGameReplicationInfo*                        GameReplicationInfo;                              		// 0x0370 (0x0008) [0x0000000000000000]              
	class ACrowdPopulationManagerBase*                 PopulationManager;                                		// 0x0378 (0x0008) [0x0000000000000000]              
	class UClass*                                      PopulationManagerClass;                           		// 0x0380 (0x0008) [0x0000000000000000]              
	float                                              MaxIdleTime;                                      		// 0x0388 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxTimeMargin;                                    		// 0x038C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              TimeMarginSlack;                                  		// 0x0390 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MinTimeMargin;                                    		// 0x0394 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< class APlayerReplicationInfo* >            InactivePRIArray;                                 		// 0x0398 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FScriptDelegate >                   Pausers;                                          		// 0x03A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x03B8 (0x0008) [0x0000000000000000]              
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x03C0 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x03C8 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UClass*                                      OnlineStatsWriteClass;                            		// 0x03D0 (0x0008) [0x0000000000000000]              
	int                                                LeaderboardId;                                    		// 0x03D8 (0x0004) [0x0000000000000000]              
	int                                                ArbitratedLeaderboardId;                          		// 0x03DC (0x0004) [0x0000000000000000]              
	class ACoverReplicator*                            CoverReplicatorBase;                              		// 0x03E0 (0x0008) [0x0000000000000000]              
	class UClass*                                      OnlineGameSettingsClass;                          		// 0x03E8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     ServerOptions;                                    		// 0x03F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                AdjustedNetSpeed;                                 		// 0x0400 (0x0004) [0x0000000000000000]              
	float                                              LastNetSpeedUpdateTime;                           		// 0x0404 (0x0004) [0x0000000000000000]              
	int                                                TotalNetBandwidth;                                		// 0x0408 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MinDynamicBandwidth;                              		// 0x040C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxDynamicBandwidth;                              		// 0x0410 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              StandbyRxCheatTime;                               		// 0x0414 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StandbyTxCheatTime;                               		// 0x0418 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                BadPingThreshold;                                 		// 0x041C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PercentMissingForRxStandby;                       		// 0x0420 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PercentMissingForTxStandby;                       		// 0x0424 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PercentForBadPing;                                		// 0x0428 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              JoinInProgressStandbyWaitTime;                    		// 0x042C (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UMaterial*                                   StreamingPauseIcon;                               		// 0x0430 (0x0008) [0x0000000000000000]              
	TArray< struct FGameClassShortName >               GameInfoClassAliases;                             		// 0x0438 (0x0010) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultGameType;                                  		// 0x0448 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FGameTypePrefix >                   DefaultMapPrefixes;                               		// 0x0458 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FGameTypePrefix >                   CustomMapPrefixes;                                		// 0x0468 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                AnimTreePoolSize;                                 		// 0x0478 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FScriptDelegate                             __CanUnpause__Delegate;                           		// 0x047C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0480 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 217 ];

		return pClassPointer;
	};

	void ClearOnlineDelegates ( );
	void InitCrowdPopulationManager ( );
	void eventOnEngineHasLoaded ( );
	void OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void eventStandbyCheatDetected ( unsigned char StandbyType );
	void EnableStandbyCheatDetection ( unsigned long bIsEnabled );
	void BeginBVT ( struct FString TagDesc );
	bool CheckForSentinelRun ( );
	bool ShouldAutoContinueToNextRound ( );
	bool IsDoingASentinelRun ( );
	bool IsCheckingForMemLeaks ( );
	bool IsCheckingForFragmentation ( );
	bool IsAutomatedPerfTesting ( );
	void SetBandwidthLimit ( float AsyncIOBandwidthLimit );
	void DoTravelTheWorld ( );
	void TellClientsToTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo );
	void TellClientsPartyHostIsLeaving ( struct FUniqueNetId PartyHostPlayerId );
	void TellClientsToReturnToPartyHost ( );
	void OnServerCreateComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void RegisterServer ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode );
	void ClearAutoLoginDelegates ( );
	bool ProcessServerLogin ( );
	void eventMatineeCancelled ( );
	void RecalculateSkillRating ( );
	void UpdateGameplayMuteList ( class APlayerController* PC );
	void NotifyArbitratedMatchEnd ( );
	bool MatchIsInProgress ( );
	void ArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void RegisterServerForArbitration ( );
	void StartArbitratedMatch ( );
	void StartArbitrationRegistration ( );
	void ProcessClientRegistrationCompletion ( class APlayerController* PC, unsigned long bWasSuccessful );
	void UpdateGameSettingsCounts ( );
	void SetSeamlessTravelViewTarget ( class APlayerController* PC );
	void eventHandleSeamlessTravelPlayer ( class AController** C );
	void UpdateGameSettings ( );
	void eventPostSeamlessTravel ( );
	void SwapPlayerControllers ( class APlayerController* OldPC, class APlayerController* NewPC );
	void eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	void OverridePRI ( class APlayerController* PC, class APlayerReplicationInfo* OldPRI );
	bool FindInactivePRI ( class APlayerController* PC );
	void AddInactivePRI ( class APlayerReplicationInfo* PRI, class APlayerController* PC );
	void eventPostCommitMapChange ( );
	void eventPreCommitMapChange ( struct FString PreviousMapName, struct FString NextMapName );
	bool AllowPausing ( class APlayerController* PC );
	bool AllowCheats ( class APlayerController* P );
	bool AllowMutator ( struct FString MutatorClassName );
	bool PlayerCanRestart ( class APlayerController* aPlayer );
	bool PlayerCanRestartGame ( class APlayerController* aPlayer );
	void DriverLeftVehicle ( class AVehicle* V, class APawn* P );
	bool CanLeaveVehicle ( class AVehicle* V, class APawn* P );
	void DriverEnteredVehicle ( class AVehicle* V, class APawn* P );
	void ModifyScoreKill ( class AController* Killer, class AController* Other );
	void ScoreKill ( class AController* Killer, class AController* Other );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score );
	void AddObjectiveScore ( class APlayerReplicationInfo* Scorer, int Score );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	bool ShouldSpawnAtStartSpot ( class AController* Player );
	void EndLogging ( struct FString Reason );
	void GameEventsPoll ( );
	void EndOnlineGame ( );
	void PerformEndGameHandling ( );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void WriteOnlinePlayerScores ( );
	void WriteOnlineStats ( );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool CheckModifiedEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void eventBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type );
	void eventBroadcast ( class AActor* Sender, struct FString msg, struct FName Type );
	void RestartGame ( );
	bool GetTravelType ( );
	struct FString GetNextMap ( );
	void SendPlayer ( class APlayerController* aPlayer, struct FString URL );
	unsigned char PickTeam ( unsigned char Current, class AController* C );
	bool ChangeTeam ( class AController* Other, int N, unsigned long bNewTeam );
	void ChangeName ( class AController* Other, struct FString S, unsigned long bNameChange );
	void DiscardInventory ( class APawn* Other, class AController* Killer );
	bool PickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup );
	bool ShouldRespawn ( class APickupFactory* Other );
	bool CheckRelevance ( class AActor* Other );
	void ReduceDamage ( class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum );
	bool CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget );
	void KickBan ( struct FString S );
	void Kick ( struct FString S );
	void BroadcastDeathMessage ( class AController* Killer, class AController* Other, class UClass* DamageType );
	bool PreventDeath ( class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType );
	void SetPlayerDefaults ( class APawn* PlayerPawn );
	void Mutate ( struct FString MutateString, class APlayerController* Sender );
	void eventAddDefaultInventory ( class APawn* P );
	void eventAcceptInventory ( class APawn* PlayerPawn );
	void UnregisterPlayer ( class APlayerController* PC );
	void Logout ( class AController* Exiting );
	void eventPreExit ( );
	int CalculatedNetSpeed ( );
	void UpdateNetSpeeds ( );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void UpdateBestNextHosts ( );
	int BestNextHostSort ( class APlayerController* A, class APlayerController* B );
	void GenericPlayerInitialization ( class AController* C );
	void ReplicateStreamingStatus ( class APlayerController* PC );
	class UClass* GetDefaultPlayerClass ( class AController* C );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot );
	void RestartPlayer ( class AController* NewPlayer );
	void StartBots ( );
	void StartHumans ( );
	void OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void StartOnlineGame ( );
	void StartMatch ( );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage );
	class APlayerController* SpawnPlayerController ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
	int GetNextPlayerID ( );
	bool AtCapacity ( unsigned long bSpectator, struct FString PlayerName );
	void RejectLogin ( class UPlayer* InPlayer, struct FString Error );
	void ResumeLogin ( class UPlayer* InPlayer );
	class UPlayer* PauseLogin ( );
	void eventPreLogin ( struct FString Options, struct FString Address, struct FUniqueNetId UniqueId, unsigned long bSupportsAuth, struct FString* ErrorMessage );
	bool RequiresPassword ( );
	class APlayerController* ProcessClientTravel ( struct FGuid NextMapGuid, unsigned long bSeamless, unsigned long bAbsolute, struct FString* URL );
	void ProcessServerTravel ( struct FString URL, unsigned long bAbsolute );
	void RemoveMutator ( class AMutator* MutatorToRemove );
	void AddMutator ( struct FString mutname, unsigned long bUserAdded );
	void eventNotifyPendingConnectionLost ( );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	class UClass* eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal );
	struct FString eventGetDefaultGameClassPath ( struct FString MapName, struct FString Options, struct FString Portal );
	int GetIntOption ( struct FString Options, struct FString ParseString, int CurrentValue );
	bool HasOption ( struct FString Options, struct FString InKey );
	struct FString ParseOption ( struct FString Options, struct FString InKey );
	void GetKeyValue ( struct FString Pair, struct FString* Key, struct FString* Value );
	bool GrabOption ( struct FString* Options, struct FString* Result );
	void SetGameSpeed ( float T );
	void DebugPause ( );
	void ForceClearUnpauseDelegates ( class AActor* PauseActor );
	void eventClearPause ( );
	bool SetPause ( class APlayerController* PC, struct FScriptDelegate CanUnpauseDelegate );
	bool CanUnpause ( );
	int GetNumPlayers ( );
	struct FString GetNetworkNumber ( );
	void InitGameReplicationInfo ( );
	void eventForceKickPlayer ( class APlayerController* PC, struct FString KickReason );
	void eventKickIdler ( class APlayerController* PC );
	void eventGameEnding ( );
	void NotifyNavigationChanged ( class ANavigationPoint* N );
	void DoNavFearCostFallOff ( );
	bool ShouldStartInCinematicMode ( int* OutHidePlayer, int* OutHideHud, int* OutDisableMovement, int* OutDisableTurning, int* OutDisableInput );
	void eventTimer ( );
	void ResetLevel ( );
	bool ShouldReset ( class AActor* ActorToReset );
	void Reset ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void eventPostBeginPlay ( );
	class ACoverReplicator* GetCoverReplicator ( );
	void eventPreBeginPlay ( );
	bool GetMapCommonPackageName ( struct FString* InFilename, struct FString* OutCommonPackageName );
	bool GetSupportedGameTypes ( unsigned long bCheckExt, struct FString* InFilename, struct FGameTypePrefix* OutGameType );
};



// Class Engine.Mutator ( Property size: 3 iter: 29) 
// Class name index: 5031 
// 0x001C (0x025C - 0x0240)
class AMutator : public AInfo
{
public:
	class AMutator*                                    NextMutator;                                      		// 0x0240 (0x0008) [0x0000000000000000]              
	TArray< struct FString >                           GroupNames;                                       		// 0x0248 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUserAdded : 1;                                   		// 0x0258 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 219 ];

		return pClassPointer;
	};

	void NetDamage ( int OriginalDamage, class APawn* injured, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum );
	void ScoreKill ( class AController* Killer, class AController* Killed );
	void ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score );
	bool PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	bool OverridePickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup, unsigned char* bAllowPickup );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool HandleRestartGame ( );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	void GetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	void InitMutator ( struct FString Options, struct FString* ErrorMessage );
	void DriverLeftVehicle ( class AVehicle* V, class APawn* P );
	bool CanLeaveVehicle ( class AVehicle* V, class APawn* P );
	void DriverEnteredVehicle ( class AVehicle* V, class APawn* P );
	void NotifyLogin ( class AController* NewPlayer );
	void NotifyLogout ( class AController* Exiting );
	bool CheckReplacement ( class AActor* Other );
	bool CheckRelevance ( class AActor* Other );
	bool IsRelevant ( class AActor* Other );
	bool AlwaysKeep ( class AActor* Other );
	void AddMutator ( class AMutator* M );
	void ModifyPlayer ( class APawn* Other );
	void ModifyLogin ( struct FString* Portal, struct FString* Options );
	void Mutate ( struct FString MutateString, class APlayerController* Sender );
	void eventDestroyed ( );
	bool MutatorIsAllowed ( );
	void eventPreBeginPlay ( );
};



// Class Engine.PotentialClimbWatcher ( Property size: 0 iter: 1) 
// Class name index: 5033 
// 0x0000 (0x0240 - 0x0240)
class APotentialClimbWatcher : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 221 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
};



// Class Engine.Route ( Property size: 5 iter: 10) 
// Class name index: 5035 
// 0x0024 (0x0264 - 0x0240)
class ARoute : public AInfo
{
public:
	struct FPointer                                    VfTable_IEditorLinkSelectionInterface;            		// 0x0240 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      RouteType;                                        		// 0x0248 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FActorReference >                   RouteList;                                        		// 0x024C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              FudgeFactor;                                      		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RouteIndexOffset;                                 		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 223 ];

		return pClassPointer;
	};

	int MoveOntoRoutePath ( class APawn* P, unsigned char RouteDirection, float DistFudgeFactor );
	int ResolveRouteIndex ( int Idx, unsigned char RouteDirection, unsigned char* out_bComplete, unsigned char* out_bReverse );
};



// Class Engine.WindPointSource ( Property size: 1 iter: 1) 
// Class name index: 5037 
// 0x0008 (0x0248 - 0x0240)
class AWindPointSource : public AInfo
{
public:
	class UWindPointSourceComponent*                   Component;                                        		// 0x0240 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 225 ];

		return pClassPointer;
	};

};



// Class Engine.Inventory ( Property size: 15 iter: 27) 
// Class name index: 4840 
// 0x0074 (0x02B4 - 0x0240)
class AInventory : public AActor
{
public:
	class AInventory*                                  Inventory;                                        		// 0x0240 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class AInventoryManager*                           InvManager;                                       		// 0x0248 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     ItemName;                                         		// 0x0250 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bDropOnDeath : 1;                                 		// 0x0260 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDelayedSpawn : 1;                                		// 0x0260 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPredictRespawns : 1;                             		// 0x0260 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              RespawnTime;                                      		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDesireability;                                 		// 0x0268 (0x0004) [0x0000000000000000]              
	struct FString                                     PickupMessage;                                    		// 0x026C (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class USoundCue*                                   PickupSound;                                      		// 0x027C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PickupForce;                                      		// 0x0284 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      DroppedPickupClass;                               		// 0x0294 (0x0008) [0x0000000000000000]              
	class UPrimitiveComponent*                         DroppedPickupMesh;                                		// 0x029C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPrimitiveComponent*                         PickupFactoryMesh;                                		// 0x02A4 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    DroppedPickupParticles;                           		// 0x02AC (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 227 ];

		return pClassPointer;
	};

	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
	bool DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	void ItemRemovedFromInvManager ( );
	void ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	void AnnouncePickup ( class APawn* Other );
	void GiveTo ( class APawn* Other );
	float DetourWeight ( class APawn* Other, float PathWeight );
	float BotDesireability ( class AActor* PickupHolder, class APawn* P, class AController* C );
	void eventDestroyed ( );
	struct FString GetHumanReadableName ( );
};



// Class Engine.Weapon ( Property size: 26 iter: 113) 
// Class name index: 5040 
// 0x00D0 (0x0384 - 0x02B4)
class AWeapon : public AInventory
{
public:
	unsigned char                                      CurrentFireMode;                                  		// 0x02B4 (0x0001) [0x0000000000000000]              
	TArray< struct FName >                             FiringStatesArray;                                		// 0x02B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            WeaponFireTypes;                                  		// 0x02C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            WeaponProjectiles;                                		// 0x02D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< float >                                    FireInterval;                                     		// 0x02E8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    Spread;                                           		// 0x02F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    InstantHitDamage;                                 		// 0x0308 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    InstantHitMomentum;                               		// 0x0318 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            InstantHitDamageTypes;                            		// 0x0328 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              EquipTime;                                        		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PutDownTime;                                      		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FireOffset;                                       		// 0x0340 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWeaponPutDown : 1;                               		// 0x034C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanThrow : 1;                                    		// 0x034C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bWasOptionalSet : 1;                              		// 0x034C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bWasDoNotActivate : 1;                            		// 0x034C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bInstantHit : 1;                                  		// 0x034C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bMeleeWeapon : 1;                                 		// 0x034C (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              WeaponRange;                                      		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMeshComponent*                              Mesh;                                             		// 0x0354 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              DefaultAnimSpeed;                                 		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Priority;                                         		// 0x0360 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class AAIController*                               AIController;                                     		// 0x0364 (0x0008) [0x0000000000000000]              
	TArray< unsigned char >                            ShouldFireOnRelease;                              		// 0x036C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              AIRating;                                         		// 0x037C (0x0004) [0x0000000000000000]              
	float                                              CachedMaxRange;                                   		// 0x0380 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 229 ];

		return pClassPointer;
	};

	float GetTargetDistance ( );
	void CacheAIController ( );
	void WeaponIsDown ( );
	bool StillFiring ( unsigned char FireMode );
	bool ShouldRefire ( );
	void NotifyWeaponFinishedFiring ( unsigned char FireMode );
	void NotifyWeaponFired ( unsigned char FireMode );
	void HandleFinishedFiring ( );
	bool TryPutDown ( );
	struct FVector eventGetPhysicalFireStartLoc ( struct FVector AimDir );
	struct FVector eventGetMuzzleLoc ( );
	void CustomFire ( );
	class AProjectile* ProjectileFire ( );
	void ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits );
	void InstantFire ( );
	bool PassThroughDamage ( class AActor* HitActor );
	struct FImpactInfo CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, TArray< struct FImpactInfo >* ImpactList );
	class AActor* GetTraceOwner ( );
	float eventGetTraceRange ( );
	struct FRotator GetAdjustedAim ( struct FVector StartFireLoc );
	void FireAmmunition ( );
	void FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication );
	void SetCurrentFireMode ( unsigned char FiringModeNum );
	void SendToFiringState ( unsigned char FireModeNum );
	void ForceEndFire ( );
	void EndFire ( unsigned char FireModeNum );
	void ServerStopFire ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	void BeginFire ( unsigned char FireModeNum );
	void ServerStartFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate );
	void DetachWeapon ( );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	void ClearFlashLocation ( );
	void SetFlashLocation ( struct FVector HitLocation );
	void ClearFlashCount ( );
	void IncrementFlashCount ( );
	void WeaponEmpty ( );
	bool DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	void PutDownWeapon ( );
	void Activate ( );
	void TimeWeaponEquipping ( );
	void TimeWeaponPutDown ( );
	void RefireCheckTimer ( );
	void TimeWeaponFiring ( unsigned char FireModeNum );
	float GetFireInterval ( unsigned char FireModeNum );
	void StopFireEffects ( unsigned char FireModeNum );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void StopWeaponAnimation ( );
	void PlayWeaponAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, class USkeletalMeshComponent* SkelMesh );
	class UAnimNodeSequence* GetWeaponAnimNodeSeq ( );
	bool FireOnRelease ( );
	bool CanAttack ( class AActor* Other );
	float GetWeaponRating ( );
	float GetAIRating ( );
	float MaxRange ( );
	struct FRotator AddSpread ( struct FRotator BaseAim );
	class UClass* GetProjectileClass ( );
	void ClearPendingFire ( int FireMode );
	void SetPendingFire ( int FireMode );
	bool PendingFire ( int FireMode );
	int GetPendingFireLength ( );
	bool HasAnyAmmo ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	int AddAmmo ( int Amount );
	void ConsumeAmmo ( unsigned char FireModeNum );
	void GetWeaponDebug ( TArray< struct FString >* DebugInfo );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	bool DenyClientWeaponSet ( );
	bool eventIsFiring ( );
	void ClientWeaponThrown ( );
	bool CanThrow ( );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
	bool DoOverridePrevWeapon ( );
	bool DoOverrideNextWeapon ( );
	void HolderDied ( );
	void ItemRemovedFromInvManager ( );
	void eventDestroyed ( );
};



// Class Engine.InventoryManager ( Property size: 5 iter: 36) 
// Class name index: 5042 
// 0x002C (0x026C - 0x0240)
class AInventoryManager : public AActor
{
public:
	class AInventory*                                  InventoryChain;                                   		// 0x0240 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class AWeapon*                                     PendingWeapon;                                    		// 0x0248 (0x0008) [0x0000000000000000]              
	class AWeapon*                                     LastAttemptedSwitchToWeapon;                      		// 0x0250 (0x0008) [0x0000000000000000]              
	unsigned long                                      bMustHoldWeapon : 1;                              		// 0x0258 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< int >                                      PendingFire;                                      		// 0x025C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 231 ];

		return pClassPointer;
	};

	void UpdateController ( );
	void ClientWeaponSet ( class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void ChangedWeapon ( );
	void ClearPendingWeapon ( );
	bool CancelWeaponChange ( );
	void SetPendingWeapon ( class AWeapon* DesiredWeapon );
	void InternalSetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void ServerSetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void SetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void NextWeapon ( );
	void PrevWeapon ( );
	void SwitchToBestWeapon ( unsigned long bForceADifferentWeapon );
	class AWeapon* GetBestWeapon ( unsigned long bForceADifferentWeapon );
	float GetWeaponRatingFor ( class AWeapon* W );
	void DrawHUD ( class AHUD* H );
	void OwnerDied ( );
	void eventDiscardInventory ( );
	void RemoveFromInventory ( class AInventory* ItemToRemove );
	bool AddInventory ( class AInventory* NewItem, unsigned long bDoNotActivate );
	class AInventory* CreateInventory ( class UClass* NewInventoryItemClass, unsigned long bDoNotActivate );
	class AInventory* eventFindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass );
	bool HandlePickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	void eventDestroyed ( );
	void SetupFor ( class APawn* P );
	void InventoryActors ( class UClass* BaseClass, class AInventory** Inv );
	void ClearAllPendingFire ( class AWeapon* InWeapon );
	bool IsPendingFire ( class AWeapon* InWeapon, int InFiringMode );
	void ClearPendingFire ( class AWeapon* InWeapon, int InFiringMode );
	void SetPendingFire ( class AWeapon* InWeapon, int InFiringMode );
	int GetPendingFireLength ( class AWeapon* InWeapon );
	void eventPostBeginPlay ( );
};



// Class Engine.Keypoint ( Property size: 1 iter: 1) 
// Class name index: 5044 
// 0x0008 (0x0248 - 0x0240)
class AKeypoint : public AActor
{
public:
	class USpriteComponent*                            SpriteComp;                                       		// 0x0240 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 233 ];

		return pClassPointer;
	};

};



// Class Engine.TargetPoint ( Property size: 2 iter: 2) 
// Class name index: 5046 
// 0x000C (0x0254 - 0x0248)
class ATargetPoint : public AKeypoint
{
public:
	class UTexture2D*                                  SpawnSpriteTexture;                               		// 0x0248 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                SpawnRefCount;                                    		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 235 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialInstanceActor ( Property size: 1 iter: 1) 
// Class name index: 5048 
// 0x0008 (0x0248 - 0x0240)
class AMaterialInstanceActor : public AActor
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x0240 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 237 ];

		return pClassPointer;
	};

};



// Class Engine.MatineeActor ( Property size: 11 iter: 15) 
// Class name index: 5050 
// 0x00E0 (0x0320 - 0x0240)
class AMatineeActor : public AActor
{
public:
	class USeqAct_Interp*                              InterpAction;                                     		// 0x0240 (0x0008) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	unsigned long                                      bIsPlaying : 1;                                   		// 0x0248 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bReversePlayback : 1;                             		// 0x0248 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bPaused : 1;                                      		// 0x0248 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      AllAIGroupsInitialized : 1;                       		// 0x0248 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	float                                              PlayRate;                                         		// 0x024C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              Position;                                         		// 0x0250 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FName                                       AIGroupNames[ 0xA ];                              		// 0x0254 (0x0050) [0x0000000000000020]              ( CPF_Net )
	class APawn*                                       AIGroupPawns[ 0xA ];                              		// 0x02A4 (0x0050) [0x0000000000000020]              ( CPF_Net )
	int                                                AIGroupInitStage[ 0xA ];                          		// 0x02F4 (0x0028) [0x0000000000002000]              ( CPF_Transient )
	float                                              ClientSidePositionErrorTolerance;                 		// 0x031C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 239 ];

		return pClassPointer;
	};

	void CheckPriorityRefresh ( );
	void eventUpdate ( );
	void AddAIGroupActor ( class UInterpGroupInstAI* AIGroupInst );
};



// Class Engine.NavigationPoint ( Property size: 58 iter: 81) 
// Class name index: 5052 
// 0x0118 (0x0358 - 0x0240)
class ANavigationPoint : public AActor
{
public:
	unsigned long                                      bEndPoint : 1;                                    		// 0x0240 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTransientEndPoint : 1;                           		// 0x0240 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHideEditorPaths : 1;                             		// 0x0240 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bCanReach : 1;                                    		// 0x0240 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bBlocked : 1;                                     		// 0x0240 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bOneWayPath : 1;                                  		// 0x0240 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNeverUseStrafing : 1;                            		// 0x0240 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bAlwaysUseStrafing : 1;                           		// 0x0240 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bForceNoStrafing : 1;                             		// 0x0240 (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      bAutoBuilt : 1;                                   		// 0x0240 (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bSpecialMove : 1;                                 		// 0x0240 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bNoAutoConnect : 1;                               		// 0x0240 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bNotBased : 1;                                    		// 0x0240 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bPathsChanged : 1;                                		// 0x0240 (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bDestinationOnly : 1;                             		// 0x0240 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bSourceOnly : 1;                                  		// 0x0240 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bSpecialForced : 1;                               		// 0x0240 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bMustBeReachable : 1;                             		// 0x0240 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bBlockable : 1;                                   		// 0x0240 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bFlyingPreferred : 1;                             		// 0x0240 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bMayCausePain : 1;                                		// 0x0240 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bAlreadyVisited : 1;                              		// 0x0240 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bVehicleDestination : 1;                          		// 0x0240 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bMakeSourceOnly : 1;                              		// 0x0240 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bMustTouchToReach : 1;                            		// 0x0240 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bCanWalkOnToReach : 1;                            		// 0x0240 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bBuildLongPaths : 1;                              		// 0x0240 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bBlockedForVehicles : 1;                          		// 0x0240 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bPreferredVehiclePath : 1;                        		// 0x0240 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bHasCrossLevelPaths : 1;                          		// 0x0240 (0x0004) [0x0000000000000002] [0x20000000] ( CPF_Const )
	unsigned long                                      bShouldSaveForCheckpoint : 1;                     		// 0x0240 (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	struct FNavigationOctreeObject                     NavOctreeObject;                                  		// 0x0244 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UReachSpec* >                        PathList;                                         		// 0x0280 (0x0010) [0x0000000004620003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FActorReference >                   EditorProscribedPaths;                            		// 0x0290 (0x0010) [0x0000000000600000]              ( CPF_NeedCtorLink )
	TArray< struct FActorReference >                   EditorForcedPaths;                                		// 0x02A0 (0x0010) [0x0000000000600000]              ( CPF_NeedCtorLink )
	TArray< struct FActorReference >                   Volumes;                                          		// 0x02B0 (0x0010) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	int                                                visitedWeight;                                    		// 0x02C0 (0x0004) [0x0000000000000000]              
	int                                                bestPathWeight;                                   		// 0x02C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            nextNavigationPoint;                              		// 0x02C8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            nextOrdered;                                      		// 0x02D0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            prevOrdered;                                      		// 0x02D8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            previousPath;                                     		// 0x02E0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                Cost;                                             		// 0x02E8 (0x0004) [0x0000000000000000]              
	int                                                ExtraCost;                                        		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TransientCost;                                    		// 0x02F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                FearCost;                                         		// 0x02F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FDebugNavCost >                     CostArray;                                        		// 0x02F8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ADroppedPickup*                              InventoryCache;                                   		// 0x0308 (0x0008) [0x0000000000000000]              
	float                                              InventoryDist;                                    		// 0x0310 (0x0004) [0x0000000000000000]              
	float                                              LastDetourWeight;                                 		// 0x0314 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0318 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FCylinder                                   MaxPathSize;                                      		// 0x0320 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FGuid                                       NavGuid;                                          		// 0x0328 (0x0010) [0x0000000000220003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class USpriteComponent*                            GoodSprite;                                       		// 0x0338 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class USpriteComponent*                            BadSprite;                                        		// 0x0340 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                NetworkID;                                        		// 0x0348 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class APawn*                                       AnchoredPawn;                                     		// 0x034C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastAnchoredPawnTime;                             		// 0x0354 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 241 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
	void ApplyCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void eventShutDown ( );
	void OnToggle ( class USeqAct_Toggle* inAction );
	bool IsOnDifferentNetwork ( class ANavigationPoint* Nav );
	bool GetAllNavInRadius ( class AActor* ChkActor, struct FVector ChkPoint, float Radius, unsigned long bSkipBlocked, int inNetworkID, struct FCylinder MinSize, TArray< class ANavigationPoint* >* out_NavList );
	class ANavigationPoint* GetNearestNavToPoint ( class AActor* ChkActor, struct FVector ChkPoint, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList );
	class ANavigationPoint* GetNearestNavToActor ( class AActor* ChkActor, class UClass* RequiredClass, TArray< class ANavigationPoint* > ExcludeList, float MinDist );
	bool ProceedWithMove ( class APawn* Other );
	bool eventSuggestMovePreparation ( class APawn* Other );
	float eventDetourWeight ( class APawn* Other, float PathWeight );
	bool eventAccept ( class AActor* Incoming, class AActor* Source );
	int eventSpecialCost ( class APawn* Seeker, class UReachSpec* Path );
	bool CanTeleport ( class AActor* A );
	bool IsUsableAnchorFor ( class APawn* P );
	class UReachSpec* GetReachSpecTo ( class ANavigationPoint* Nav, class UClass* SpecClass );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
};



// Class Engine.CoverLink ( Property size: 34 iter: 93) 
// Class name index: 5054 
// 0x0099 (0x03F1 - 0x0358)
class ACoverLink : public ANavigationPoint
{
public:
	unsigned long                                      GLOBAL_bUseSlotMarkers : 1;                       		// 0x0358 (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bDisabled : 1;                                    		// 0x0358 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bClaimAllSlots : 1;                               		// 0x0358 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAutoSort : 1;                                    		// 0x0358 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAutoAdjust : 1;                                  		// 0x0358 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCircular : 1;                                    		// 0x0358 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bLooped : 1;                                      		// 0x0358 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x0358 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDynamicCover : 1;                                		// 0x0358 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bFractureOnTouch : 1;                             		// 0x0358 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bDebug_FireLinks : 1;                             		// 0x0358 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bDebug_ExposedLinks : 1;                          		// 0x0358 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bDebug_CoverGen : 1;                              		// 0x0358 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bDoAutoSlotDensityFixup : 1;                      		// 0x0358 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	float                                              LeanTraceDist;                                    		// 0x035C (0x0004) [0x0000000000000000]              
	TArray< struct FCoverSlot >                        Slots;                                            		// 0x0360 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FDynamicLinkInfo >                  DynamicLinkInfos;                                 		// 0x0370 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APawn* >                             Claims;                                           		// 0x0380 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              InvalidateDistance;                               		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFireLinkDist;                                  		// 0x0394 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CircularOrigin;                                   		// 0x0398 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              CircularRadius;                                   		// 0x03A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AlignDist;                                        		// 0x03A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AutoCoverSlotInterval;                            		// 0x03AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StandHeight;                                      		// 0x03B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MidHeight;                                        		// 0x03B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     StandingLeanOffset;                               		// 0x03B8 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     CrouchLeanOffset;                                 		// 0x03C4 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     PopupOffset;                                      		// 0x03D0 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              SlipDist;                                         		// 0x03DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TurnDist;                                         		// 0x03E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DangerScale;                                      		// 0x03E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ACoverLink*                                  NextCoverLink;                                    		// 0x03E8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      LocationDescription;                              		// 0x03F0 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 243 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
	unsigned char GetLocationDescription ( int SlotIdx );
	struct FString eventGetDebugString ( int SlotIdx );
	int AddCoverSlot ( struct FVector SlotLocation, struct FRotator SlotRotation, int SlotIdx, unsigned long bForceSlotUpdate, class AScout* Scout );
	void BreakFracturedMeshes ( struct FVector Origin, float Radius, float RBStrength, class UClass* DamageType );
	bool GetSwatTurnTarget ( int SlotIdx, int Direction, struct FCoverInfo* out_Info );
	void eventShutDown ( );
	void ApplyCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	void OnToggle ( class USeqAct_Toggle* inAction );
	bool IsEnabled ( );
	bool AutoAdjustSlot ( int SlotIdx, unsigned long bOnlyCheckLeans );
	void OnModifyCover ( class USeqAct_ModifyCover* Action );
	void eventSetSlotPlayerOnly ( int SlotIdx, unsigned long bInPlayerOnly );
	void NotifySlotOwnerCoverDisabled ( int SlotIdx, unsigned long bAIOnly );
	void eventSetSlotEnabled ( int SlotIdx, unsigned long bEnable );
	void eventSetDisabled ( unsigned long bNewDisabled );
	void GetSlotActions ( int SlotIdx, TArray< unsigned char >* Actions );
	bool HasFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned long bAllowFallbackLinks );
	bool GetFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned char ChkAction, unsigned char ChkType, int* out_FireLinkIdx, TArray< int >* out_Items );
	bool AllowLeftTransition ( int SlotIdx );
	bool AllowRightTransition ( int SlotIdx );
	int GetSlotIdxToRight ( int SlotIdx, int Cnt );
	int GetSlotIdxToLeft ( int SlotIdx, int Cnt );
	bool IsRightEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans );
	bool IsLeftEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans );
	bool IsEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans );
	bool FindSlots ( struct FVector CheckLocation, float MaxDistance, int* LeftSlotIdx, int* RightSlotIdx );
	bool IsStationarySlot ( int SlotIdx );
	bool IsValidClaimBetween ( class APawn* ChkClaim, int StartSlotIdx, int EndSlotIdx, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck );
	bool IsValidClaim ( class APawn* ChkClaim, int SlotIdx, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck );
	bool eventUnClaim ( class APawn* OldClaim, int SlotIdx, unsigned long bUnclaimAll );
	bool eventClaim ( class APawn* NewClaim, int SlotIdx );
	void eventSetInvalidUntil ( int SlotIdx, float TimeToBecomeValid );
	bool IsExposedTo ( int SlotIdx, struct FCoverInfo ChkSlot, float* out_ExposedScale );
	struct FVector GetSlotViewPoint ( int SlotIdx, unsigned char Type, unsigned char Action );
	struct FRotator GetSlotRotation ( int SlotIdx, unsigned long bForceUseOffset );
	struct FVector GetSlotLocation ( int SlotIdx, unsigned long bForceUseOffset );
	void UnPackFireLinkInteractionInfo ( unsigned char PackedByte, unsigned char* SrcType, unsigned char* SrcAction, unsigned char* DestType, unsigned char* DestAction );
	unsigned char PackFireLinkInteractionInfo ( unsigned char SrcType, unsigned char SrcAction, unsigned char DestType, unsigned char DestAction );
	bool GetFireLinkTargetCoverInfo ( int SlotIdx, int FireLinkIdx, unsigned char ArrayID, struct FCoverInfo* out_Info );
};



// Class Engine.DoorMarker ( Property size: 8 iter: 15) 
// Class name index: 5056 
// 0x0018 (0x0370 - 0x0358)
class ADoorMarker : public ANavigationPoint
{
public:
	class AInterpActor*                                MyDoor;                                           		// 0x0358 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DoorType;                                         		// 0x0360 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      DoorTrigger;                                      		// 0x0364 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWaitUntilCompletelyOpened : 1;                   		// 0x036C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitiallyClosed : 1;                             		// 0x036C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockedWhenClosed : 1;                           		// 0x036C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDoorOpen : 1;                                    		// 0x036C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bTempDisabledCollision : 1;                       		// 0x036C (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 245 ];

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
	bool ProceedWithMove ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void MoverClosed ( );
	void MoverOpened ( );
	void eventPostBeginPlay ( );
};



// Class Engine.DynamicAnchor ( Property size: 1 iter: 1) 
// Class name index: 5058 
// 0x0008 (0x0360 - 0x0358)
class ADynamicAnchor : public ANavigationPoint
{
public:
	class AController*                                 CurrentUser;                                      		// 0x0358 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 247 ];

		return pClassPointer;
	};

};



// Class Engine.Ladder ( Property size: 2 iter: 3) 
// Class name index: 5060 
// 0x0010 (0x0368 - 0x0358)
class ALadder : public ANavigationPoint
{
public:
	class ALadderVolume*                               MyLadder;                                         		// 0x0358 (0x0008) [0x0000000000000000]              
	class ALadder*                                     LadderList;                                       		// 0x0360 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 249 ];

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
};



// Class Engine.AutoLadder ( Property size: 0 iter: 0) 
// Class name index: 5062 
// 0x0000 (0x0368 - 0x0368)
class AAutoLadder : public ALadder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 251 ];

		return pClassPointer;
	};

};



// Class Engine.LiftCenter ( Property size: 6 iter: 10) 
// Class name index: 5064 
// 0x0028 (0x0380 - 0x0358)
class ALiftCenter : public ANavigationPoint
{
public:
	class AInterpActor*                                MyLift;                                           		// 0x0358 (0x0008) [0x0000000000000000]              
	float                                              MaxDist2D;                                        		// 0x0360 (0x0004) [0x0000000000000000]              
	struct FVector                                     LiftOffset;                                       		// 0x0364 (0x000C) [0x0000000000000000]              
	unsigned long                                      bJumpLift : 1;                                    		// 0x0370 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              CollisionHeight;                                  		// 0x0374 (0x0004) [0x0000000000000000]              
	class ATrigger*                                    LiftTrigger;                                      		// 0x0378 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 253 ];

		return pClassPointer;
	};

	bool ProceedWithMove ( class APawn* Other );
	bool eventSuggestMovePreparation ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventPostBeginPlay ( );
};



// Class Engine.LiftExit ( Property size: 2 iter: 5) 
// Class name index: 5066 
// 0x000C (0x0364 - 0x0358)
class ALiftExit : public ANavigationPoint
{
public:
	class ALiftCenter*                                 MyLiftCenter;                                     		// 0x0358 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bExitOnly : 1;                                    		// 0x0360 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 255 ];

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
	void WaitForLift ( class APawn* Other );
	bool CanBeReachedFromLiftBy ( class APawn* Other );
};



// Class Engine.PathNode ( Property size: 0 iter: 1) 
// Class name index: 5068 
// 0x0000 (0x0358 - 0x0358)
class APathNode : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 257 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
};



// Class Engine.VolumePathNode ( Property size: 2 iter: 2) 
// Class name index: 5070 
// 0x0008 (0x0360 - 0x0358)
class AVolumePathNode : public APathNode
{
public:
	float                                              StartingRadius;                                   		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartingHeight;                                   		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 259 ];

		return pClassPointer;
	};

};



// Class Engine.PickupFactory ( Property size: 11 iter: 37) 
// Class name index: 5072 
// 0x002C (0x0384 - 0x0358)
class APickupFactory : public ANavigationPoint
{
public:
	unsigned long                                      bOnlyReplicateHidden : 1;                         		// 0x0358 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPickupHidden : 1;                                		// 0x0358 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bPredictRespawns : 1;                             		// 0x0358 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsSuperItem : 1;                                 		// 0x0358 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bRespawnPaused : 1;                               		// 0x0358 (0x0004) [0x0000000000000000] [0x00000010] 
	class UClass*                                      InventoryType;                                    		// 0x035C (0x0008) [0x0000000000000020]              ( CPF_Net )
	float                                              RespawnEffectTime;                                		// 0x0364 (0x0004) [0x0000000000000000]              
	float                                              MaxDesireability;                                 		// 0x0368 (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         PickupMesh;                                       		// 0x036C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class APickupFactory*                              ReplacementFactory;                               		// 0x0374 (0x0008) [0x0000000000000000]              
	class APickupFactory*                              OriginalFactory;                                  		// 0x037C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 261 ];

		return pClassPointer;
	};

	bool DelayRespawn ( );
	void eventDestroyed ( );
	void SetPickupVisible ( );
	void SetPickupHidden ( );
	void RespawnEffect ( );
	float GetRespawnTime ( );
	void RecheckValidTouch ( );
	void PickedUpBy ( class APawn* P );
	void GiveTo ( class APawn* P );
	bool ReadyToPickup ( float MaxWait );
	void SpawnCopyFor ( class APawn* Recipient );
	float eventDetourWeight ( class APawn* Other, float PathWeight );
	void StartSleeping ( );
	void SetRespawn ( );
	bool CheckForErrors ( );
	void Reset ( );
	void SetPickupMesh ( );
	void ShutDown ( );
	void eventSetInitialState ( );
	void InitializePickup ( );
	void eventPreBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};



// Class Engine.PlayerStart ( Property size: 6 iter: 8) 
// Class name index: 5074 
// 0x0010 (0x0368 - 0x0358)
class APlayerStart : public ANavigationPoint
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0358 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPrimaryStart : 1;                                		// 0x0358 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBestStart : 1;                                   		// 0x0358 (0x0004) [0x0000000000000000] [0x00000004] 
	int                                                TeamIndex;                                        		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Score;                                            		// 0x0360 (0x0004) [0x0000000000000000]              
	int                                                SelectionIndex;                                   		// 0x0364 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 263 ];

		return pClassPointer;
	};

	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void OnToggle ( class USeqAct_Toggle* Action );
};



// Class Engine.PortalMarker ( Property size: 1 iter: 2) 
// Class name index: 5076 
// 0x0008 (0x0360 - 0x0358)
class APortalMarker : public ANavigationPoint
{
public:
	class APortalTeleporter*                           MyPortal;                                         		// 0x0358 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 265 ];

		return pClassPointer;
	};

	bool CanTeleport ( class AActor* A );
};



// Class Engine.Pylon ( Property size: 43 iter: 56) 
// Class name index: 5078 
// 0x0118 (0x0470 - 0x0358)
class APylon : public ANavigationPoint
{
public:
	struct FPointer                                    VfTable_IEditorLinkSelectionInterface;            		// 0x0358 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IInterface_NavigationHandle;              		// 0x0360 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    NavMeshPtr;                                       		// 0x0368 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    ObstacleMesh;                                     		// 0x0370 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    DynamicObstacleMesh;                              		// 0x0378 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    WorkingSetPtr;                                    		// 0x0380 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    PathObjectsThatAffectThisPylon;                   		// 0x0388 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FVector >                           NextPassSeedList;                                 		// 0x0390 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FOctreeElementId                            OctreeId;                                         		// 0x03A0 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    OctreeIWasAddedTo;                                		// 0x03AC (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class APylon*                                      NextPylon;                                        		// 0x03B4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	TArray< class AVolume* >                           ExpansionVolumes;                                 		// 0x03BC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ExpansionRadius;                                  		// 0x03CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxExpansionRadius;                               		// 0x03D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UDrawPylonRadiusComponent*                   PylonRadiusPreview;                               		// 0x03D4 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bImportedMesh : 1;                                		// 0x03DC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseExpansionSphereOverride : 1;                  		// 0x03DC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNeedsCostCheck : 1;                              		// 0x03DC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bPylonInHighLevelPath : 1;                        		// 0x03DC (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bUseRecast : 1;                                   		// 0x03DC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAllowRecastGenerator : 1;                        		// 0x03DC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bDrawEdgePolys : 1;                               		// 0x03DC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDrawPolyBounds : 1;                              		// 0x03DC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bRenderInShowPaths : 1;                           		// 0x03DC (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDrawWalkableSurface : 1;                         		// 0x03DC (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bDrawObstacleSurface : 1;                         		// 0x03DC (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bSolidObstaclesInGame : 1;                        		// 0x03DC (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bBuildThisPylon : 1;                              		// 0x03DC (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bDisabled : 1;                                    		// 0x03DC (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bForceObstacleMeshCollision : 1;                  		// 0x03DC (0x0004) [0x0000000000000000] [0x00004000] 
	struct FVector                                     ExpansionSphereCenter;                            		// 0x03E0 (0x000C) [0x0000000000000000]              
	class UNavMeshRenderingComponent*                  RenderingComp;                                    		// 0x03EC (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USpriteComponent*                            BrokenSprite;                                     		// 0x03F4 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< class APylon* >                            ImposterPylons;                                   		// 0x03FC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AActor* >                            OnBuild_DisableCollisionForThese;                 		// 0x040C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class AActor* >                            OnBuild_EnableCollisionForThese;                  		// 0x041C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MaxPolyHeight_Optional;                           		// 0x042C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      NavMeshGenerator;                                 		// 0x0430 (0x0001) [0x0000000000000000]              
	TArray< struct FKAggregateGeom >                   VoxelFilterBounds;                                		// 0x0434 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FMatrix >                           VoxelFilterTM;                                    		// 0x0444 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                DebugEdgeCount;                                   		// 0x0454 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DebugPathExtent;                                  		// 0x0458 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     DebugPathStartLocation;                           		// 0x0464 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 267 ];

		return pClassPointer;
	};

	bool CanReachPylon ( class APylon* DestPylon, class AController* C );
	void OnToggle ( class USeqAct_Toggle* Action );
	bool eventIsEnabled ( );
	void eventSetEnabled ( unsigned long bEnabled );
	void PostBeginPlay ( );
	void eventNotifyPathChanged ( );
	void VerifyTopLevelConnections ( );
	struct FVector GetTestPathExtent ( );
	void FlushDynamicEdges ( );
	void UpdateMeshForPreExistingNavMeshObstacles ( );
	void OnPylonStatusChange ( );
};



// Class Engine.AISwitchablePylon ( Property size: 1 iter: 4) 
// Class name index: 5080 
// 0x0004 (0x0474 - 0x0470)
class AAISwitchablePylon : public APylon
{
public:
	unsigned long                                      bOpen : 1;                                        		// 0x0470 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 269 ];

		return pClassPointer;
	};

	bool eventIsEnabled ( );
	void eventSetEnabled ( unsigned long bEnabled );
	void PostBeginPlay ( );
};



// Class Engine.DynamicPylon ( Property size: 1 iter: 6) 
// Class name index: 5082 
// 0x0004 (0x0474 - 0x0470)
class ADynamicPylon : public APylon
{
public:
	unsigned long                                      bMoving : 1;                                      		// 0x0470 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 271 ];

		return pClassPointer;
	};

	void eventStoppedMoving ( );
	void eventStartedMoving ( );
	void FlushDynamicEdges ( );
	void RebuildDynamicEdges ( );
	void PostBeginPlay ( );
};



// Class Engine.Teleporter ( Property size: 11 iter: 17) 
// Class name index: 5084 
// 0x002C (0x0384 - 0x0358)
class ATeleporter : public ANavigationPoint
{
public:
	struct FString                                     URL;                                              		// 0x0358 (0x0010) [0x0000000000400021]              ( CPF_Edit | CPF_Net | CPF_NeedCtorLink )
	struct FName                                       ProductRequired;                                  		// 0x0368 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bChangesVelocity : 1;                             		// 0x0370 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bChangesYaw : 1;                                  		// 0x0370 (0x0004) [0x0000000000000021] [0x00000002] ( CPF_Edit | CPF_Net )
	unsigned long                                      bReversesX : 1;                                   		// 0x0370 (0x0004) [0x0000000000000021] [0x00000004] ( CPF_Edit | CPF_Net )
	unsigned long                                      bReversesY : 1;                                   		// 0x0370 (0x0004) [0x0000000000000021] [0x00000008] ( CPF_Edit | CPF_Net )
	unsigned long                                      bReversesZ : 1;                                   		// 0x0370 (0x0004) [0x0000000000000021] [0x00000010] ( CPF_Edit | CPF_Net )
	unsigned long                                      bEnabled : 1;                                     		// 0x0370 (0x0004) [0x0000000000000021] [0x00000020] ( CPF_Edit | CPF_Net )
	unsigned long                                      bCanTeleportVehicles : 1;                         		// 0x0370 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	struct FVector                                     TargetVelocity;                                   		// 0x0374 (0x000C) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              LastFired;                                        		// 0x0380 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 273 ];

		return pClassPointer;
	};

	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventPostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool eventAccept ( class AActor* Incoming, class AActor* Source );
	void eventPostBeginPlay ( );
	bool CanTeleport ( class AActor* A );
};



// Class Engine.Note ( Property size: 1 iter: 1) 
// Class name index: 5086 
// 0x0010 (0x0250 - 0x0240)
class ANote : public AActor
{
public:
	struct FString                                     Text;                                             		// 0x0240 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 275 ];

		return pClassPointer;
	};

};



// Class Engine.Projectile ( Property size: 19 iter: 40) 
// Class name index: 5088 
// 0x005C (0x029C - 0x0240)
class AProjectile : public AActor
{
public:
	float                                              Speed;                                            		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxSpeed;                                         		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSwitchToZeroCollision : 1;                       		// 0x0248 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBlockedByInstigator : 1;                         		// 0x0248 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bBegunPlay : 1;                                   		// 0x0248 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRotationFollowsVelocity : 1;                     		// 0x0248 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIgnoreFoliageTouch : 1;                          		// 0x0248 (0x0004) [0x0000000000000000] [0x00000010] 
	class AActor*                                      ZeroCollider;                                     		// 0x024C (0x0008) [0x0000000000000000]              
	class UPrimitiveComponent*                         ZeroColliderComponent;                            		// 0x0254 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              Damage;                                           		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageRadius;                                     		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MomentumTransfer;                                 		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      MyDamageType;                                     		// 0x0268 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   SpawnSound;                                       		// 0x0270 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ImpactSound;                                      		// 0x0278 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AController*                                 InstigatorController;                             		// 0x0280 (0x0008) [0x0000000000000000]              
	class AActor*                                      ImpactedActor;                                    		// 0x0288 (0x0008) [0x0000000000000000]              
	float                                              NetCullDistanceSquared;                           		// 0x0290 (0x0004) [0x0000000000000000]              
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0294 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 277 ];

		return pClassPointer;
	};

	void ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation );
	float GetRange ( );
	float StaticGetTimeToLocation ( struct FVector TargetLoc, struct FVector StartLoc, class AController* RequestedBy );
	float GetTimeToLocation ( struct FVector TargetLoc );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool IsStationary ( );
	void RandSpin ( float spinRate );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void eventEncroachedBy ( class AActor* Other );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool HurtRadius ( float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool ProjectileHurtRadius ( struct FVector HurtOrigin, struct FVector HitNormal );
	void Reset ( );
	bool CanSplash ( );
	unsigned char GetTeamNum ( );
	void Init ( struct FVector Direction );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	bool eventEncroachingOn ( class AActor* Other );
};



// Class Engine.RigidBodyBase ( Property size: 0 iter: 0) 
// Class name index: 5090 
// 0x0000 (0x0240 - 0x0240)
class ARigidBodyBase : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 279 ];

		return pClassPointer;
	};

};



// Class Engine.SceneCaptureActor ( Property size: 1 iter: 2) 
// Class name index: 5092 
// 0x0008 (0x0248 - 0x0240)
class ASceneCaptureActor : public AActor
{
public:
	class USceneCaptureComponent*                      SceneCapture;                                     		// 0x0240 (0x0008) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 281 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};



// Class Engine.SceneCapture2DActor ( Property size: 1 iter: 1) 
// Class name index: 5094 
// 0x0008 (0x0250 - 0x0248)
class ASceneCapture2DActor : public ASceneCaptureActor
{
public:
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x0248 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 283 ];

		return pClassPointer;
	};

};



// Class Engine.SceneCapture2DSpecificActor ( Property size: 1 iter: 1) 
// Class name index: 5096 
// 0x0008 (0x0250 - 0x0248)
class ASceneCapture2DSpecificActor : public ASceneCaptureActor
{
public:
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x0248 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 285 ];

		return pClassPointer;
	};

};



// Class Engine.SceneCaptureCubeMapActor ( Property size: 2 iter: 2) 
// Class name index: 5098 
// 0x0010 (0x0258 - 0x0248)
class ASceneCaptureCubeMapActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x0248 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   CubeMaterialInst;                                 		// 0x0250 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 287 ];

		return pClassPointer;
	};

};



// Class Engine.SceneCaptureReflectActor ( Property size: 2 iter: 2) 
// Class name index: 5100 
// 0x0010 (0x0258 - 0x0248)
class ASceneCaptureReflectActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x0248 (0x0008) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   ReflectMaterialInst;                              		// 0x0250 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 289 ];

		return pClassPointer;
	};

};



// Class Engine.SceneCapturePortalActor ( Property size: 0 iter: 0) 
// Class name index: 5102 
// 0x0000 (0x0258 - 0x0258)
class ASceneCapturePortalActor : public ASceneCaptureReflectActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 291 ];

		return pClassPointer;
	};

};



// Class Engine.PortalTeleporter ( Property size: 7 iter: 12) 
// Class name index: 5104 
// 0x001C (0x0274 - 0x0258)
class APortalTeleporter : public ASceneCapturePortalActor
{
public:
	class APortalTeleporter*                           SisterPortal;                                     		// 0x0258 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureResolutionX;                               		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureResolutionY;                               		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class APortalMarker*                               MyMarker;                                         		// 0x0268 (0x0008) [0x0000000000000000]              
	unsigned long                                      bMovablePortal : 1;                               		// 0x0270 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysTeleportNonPawns : 1;                      		// 0x0270 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCanTeleportVehicles : 1;                         		// 0x0270 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 293 ];

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
	class UTextureRenderTarget2D* CreatePortalTexture ( );
	struct FVector TransformHitLocation ( struct FVector HitLocation );
	struct FVector TransformVectorDir ( struct FVector V );
	bool TransformActor ( class AActor* A );
};



// Class Engine.StaticMeshActorBase ( Property size: 0 iter: 0) 
// Class name index: 5106 
// 0x0000 (0x0240 - 0x0240)
class AStaticMeshActorBase : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 295 ];

		return pClassPointer;
	};

};



// Class Engine.StaticMeshActor ( Property size: 7 iter: 8) 
// Class name index: 5108 
// 0x000D (0x024D - 0x0240)
class AStaticMeshActor : public AStaticMeshActorBase
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0240 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bDisableAutoBaseOnProcBuilding : 1;               		// 0x0248 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProxy : 1;                                       		// 0x0248 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bHiddenByProxy : 1;                               		// 0x0248 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      OldCastShadow : 1;                                		// 0x0248 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      OldAcceptsLights : 1;                             		// 0x0248 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      OldCollisionType;                                 		// 0x024C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 297 ];

		return pClassPointer;
	};

	void eventPreBeginPlay ( );
};



// Class Engine.StaticMeshCollectionActor ( Property size: 2 iter: 2) 
// Class name index: 5110 
// 0x0014 (0x0254 - 0x0240)
class AStaticMeshCollectionActor : public AStaticMeshActorBase
{
public:
	TArray< class UStaticMeshComponent* >              StaticMeshComponents;                             		// 0x0240 (0x0010) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                MaxStaticMeshComponents;                          		// 0x0250 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 299 ];

		return pClassPointer;
	};

};



// Class Engine.StaticMeshActorBasedOnExtremeContent ( Property size: 3 iter: 6) 
// Class name index: 5112 
// 0x0028 (0x0268 - 0x0240)
class AStaticMeshActorBasedOnExtremeContent : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0240 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	TArray< struct FSMMaterialSetterDatum >            ExtremeContent;                                   		// 0x0248 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSMMaterialSetterDatum >            NonExtremeContent;                                		// 0x0258 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 301 ];

		return pClassPointer;
	};

	void SetMaterialBasedOnExtremeContent ( );
	void eventPostBeginPlay ( );
};



// Class Engine.Trigger ( Property size: 3 iter: 12) 
// Class name index: 5114 
// 0x0010 (0x0250 - 0x0240)
class ATrigger : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0240 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bRecentlyTriggered : 1;                           		// 0x0248 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              AITriggerDelay;                                   		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 303 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	bool StopsProjectile ( class AProjectile* P );
	void UnTrigger ( );
	void NotifyTriggered ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPostBeginPlay ( );
};



// Class Engine.Trigger_PawnsOnly ( Property size: 0 iter: 0) 
// Class name index: 5116 
// 0x0000 (0x0250 - 0x0250)
class ATrigger_PawnsOnly : public ATrigger
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 305 ];

		return pClassPointer;
	};

};



// Class Engine.ActorComponent ( Property size: 7 iter: 11) 
// Class name index: 5118 
// 0x0015 (0x0085 - 0x0070)
class UActorComponent : public UComponent
{
public:
	struct FPointer                                    Scene;                                            		// 0x0070 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class AActor*                                      Owner;                                            		// 0x0078 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bAttached : 1;                                    		// 0x0080 (0x0004) [0x0000000000003002] [0x00000001] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bTickInEditor : 1;                                		// 0x0080 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bNeedsReattach : 1;                               		// 0x0080 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bNeedsUpdateTransform : 1;                        		// 0x0080 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned char                                      TickGroup;                                        		// 0x0084 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 307 ];

		return pClassPointer;
	};

	void DetachFromAny ( );
	void ForceUpdate ( unsigned long bTransformOnly );
	void SetComponentRBFixed ( unsigned long bFixed );
	void SetTickGroup ( unsigned char NewTickGroup );
};



// Class Engine.AudioComponent ( Property size: 77 iter: 92) 
// Class name index: 5120 
// 0x021B (0x02A0 - 0x0085)
class UAudioComponent : public UActorComponent
{
public:
	class USoundCue*                                   SoundCue;                                         		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundNode*                                  CueFirstNode;                                     		// 0x0090 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FAudioComponentParam >              InstanceParameters;                               		// 0x0098 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bUseOwnerLocation : 1;                            		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoPlay : 1;                                    		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAutoDestroy : 1;                                 		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bStopWhenOwnerDestroyed : 1;                      		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShouldRemainActiveIfDropped : 1;                 		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWasOccluded : 1;                                 		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bWasPlaying : 1;                                  		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bAllowSpatialization : 1;                         		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bFinished : 1;                                    		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bApplyRadioFilter : 1;                            		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bRadioFilterSelected : 1;                         		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bPreviewComponent : 1;                            		// 0x00A8 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bIgnoreForFlushing : 1;                           		// 0x00A8 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	float                                              StereoBleed;                                      		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LFEBleed;                                         		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bEQFilterApplied : 1;                             		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bAlwaysPlay : 1;                                  		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsUISound : 1;                                   		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsMusic : 1;                                     		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bReverb : 1;                                      		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bCenterChannelOnly : 1;                           		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	TArray< struct FPointer >                          WaveInstances;                                    		// 0x00B8 (0x0010) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            SoundNodeData;                                    		// 0x00C8 (0x0010) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00D8 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AudioComponent.SoundNodeOffsetMap
	struct FMultiMap_Mirror                            SoundNodeResetWaveMap;                            		// 0x0120 (0x0048) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    Listener;                                         		// 0x0168 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	float                                              PlaybackTime;                                     		// 0x0170 (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	class APortalVolume*                               PortalVolume;                                     		// 0x0174 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FVector                                     Location;                                         		// 0x017C (0x000C) [0x0000000000201000]              ( CPF_Native )
	struct FVector                                     ComponentLocation;                                		// 0x0188 (0x000C) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	class AActor*                                      LastOwner;                                        		// 0x0194 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              SubtitlePriority;                                 		// 0x019C (0x0004) [0x0000000000001000]              ( CPF_Native )
	float                                              FadeInStartTime;                                  		// 0x01A0 (0x0004) [0x0000000000000000]              
	float                                              FadeInStopTime;                                   		// 0x01A4 (0x0004) [0x0000000000000000]              
	float                                              FadeInTargetVolume;                               		// 0x01A8 (0x0004) [0x0000000000000000]              
	float                                              FadeOutStartTime;                                 		// 0x01AC (0x0004) [0x0000000000000000]              
	float                                              FadeOutStopTime;                                  		// 0x01B0 (0x0004) [0x0000000000000000]              
	float                                              FadeOutTargetVolume;                              		// 0x01B4 (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeStartTime;                            		// 0x01B8 (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeStopTime;                             		// 0x01BC (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeTargetVolume;                         		// 0x01C0 (0x0004) [0x0000000000000000]              
	float                                              CurrAdjustVolumeTargetVolume;                     		// 0x01C4 (0x0004) [0x0000000000000000]              
	class USoundNode*                                  CurrentNotifyBufferFinishedHook;                  		// 0x01C8 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     CurrentLocation;                                  		// 0x01D0 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     CurrentVelocity;                                  		// 0x01DC (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVolume;                                    		// 0x01E8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentPitch;                                     		// 0x01EC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentHighFrequencyGain;                         		// 0x01F0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                CurrentUseSpatialization;                         		// 0x01F4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                CurrentNotifyOnLoop;                              		// 0x01F8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              OmniRadius;                                       		// 0x01FC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVolumeMultiplier;                          		// 0x0200 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentPitchMultiplier;                           		// 0x0204 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentHighFrequencyGainMultiplier;               		// 0x0208 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVoiceCenterChannelVolume;                  		// 0x020C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentRadioFilterVolume;                         		// 0x0210 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentRadioFilterVolumeThreshold;                		// 0x0214 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     LastUpdateTime;                                   		// 0x0218 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              SourceInteriorVolume;                             		// 0x0220 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              SourceInteriorLPF;                                		// 0x0224 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentInteriorVolume;                            		// 0x0228 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentInteriorLPF;                               		// 0x022C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     LastLocation;                                     		// 0x0230 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FInteriorSettings                           LastInteriorSettings;                             		// 0x023C (0x0024) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                LastReverbVolumeIndex;                            		// 0x0260 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              VolumeMultiplier;                                 		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HighFrequencyGainMultiplier;                      		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionCheckInterval;                           		// 0x0270 (0x0004) [0x0000000000000000]              
	float                                              LastOcclusionCheckTime;                           		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDrawSoundRadiusComponent*                   PreviewSoundRadius;                               		// 0x0278 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FScriptDelegate                             __OnAudioFinished__Delegate;                      		// 0x0280 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0284 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnQueueSubtitles__Delegate;                     		// 0x0290 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0294 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 309 ];

		return pClassPointer;
	};

	void eventOcclusionChanged ( unsigned long bNowOccluded );
	void OnQueueSubtitles ( TArray< struct FSubtitleCue > Subtitles, float CueDuration );
	void OnAudioFinished ( class UAudioComponent* AC );
	void ResetToDefaults ( );
	void SetWaveParameter ( struct FName InName, class USoundNodeWave* InWave );
	void SetFloatParameter ( struct FName InName, float InFloat );
	void AdjustVolume ( float AdjustVolumeDuration, float AdjustVolumeLevel );
	void FadeOut ( float FadeOutDuration, float FadeVolumeLevel );
	void FadeIn ( float FadeInDuration, float FadeVolumeLevel );
	bool IsFadingOut ( );
	bool IsFadingIn ( );
	bool IsPlaying ( );
	void Stop ( );
	void Play ( );
};



// Class Engine.SplineAudioComponent ( Property size: 3 iter: 4) 
// Class name index: 5122 
// 0x0018 (0x02B8 - 0x02A0)
class USplineAudioComponent : public UAudioComponent
{
public:
	float                                              ListenerScopeRadius;                              		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ClosestPointOnSplineIndex;                        		// 0x02A4 (0x0004) [0x0000000000000000]              
	TArray< struct FInterpPointOnSpline >              Points;                                           		// 0x02A8 (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 311 ];

		return pClassPointer;
	};

};



// Class Engine.MultiCueSplineAudioComponent ( Property size: 2 iter: 3) 
// Class name index: 5124 
// 0x0014 (0x02CC - 0x02B8)
class UMultiCueSplineAudioComponent : public USplineAudioComponent
{
public:
	TArray< struct FMultiCueSplineSoundSlot >          SoundSlots;                                       		// 0x02B8 (0x0010) [0x0000000000500001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                CurrentSlotIndex;                                 		// 0x02C8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 313 ];

		return pClassPointer;
	};

};



// Class Engine.SimpleSplineAudioComponent ( Property size: 10 iter: 11) 
// Class name index: 5126 
// 0x0038 (0x02F0 - 0x02B8)
class USimpleSplineAudioComponent : public USplineAudioComponent
{
public:
	unsigned long                                      bAttenuateWithLPF : 1;                            		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              LPFRadiusMin;                                     		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LPFRadiusMax;                                     		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              dBAttenuationAtMax;                               		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlattenAttenuationRadius;                         		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DistanceAlgorithm;                                		// 0x02CC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusMin;                                        		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusMax;                                        		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSplineSoundSlot >                  SoundSlots;                                       		// 0x02D8 (0x0010) [0x0000000000500001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundNode*                                  NotifyBufferFinishedHook;                         		// 0x02E8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 315 ];

		return pClassPointer;
	};

};



// Class Engine.SimpleSplineNonLoopAudioComponent ( Property size: 10 iter: 10) 
// Class name index: 5128 
// 0x0028 (0x0318 - 0x02F0)
class USimpleSplineNonLoopAudioComponent : public USimpleSplineAudioComponent
{
public:
	float                                              DelayMin;                                         		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DelayMax;                                         		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMin;                                         		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMax;                                         		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMin;                                        		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMax;                                        		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentSlotIndex;                                 		// 0x0308 (0x0004) [0x0000000000000000]              
	float                                              UsedVolumeModulation;                             		// 0x030C (0x0004) [0x0000000000000000]              
	float                                              UsedPitchModulation;                              		// 0x0310 (0x0004) [0x0000000000000000]              
	float                                              NextSoundTime;                                    		// 0x0314 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 317 ];

		return pClassPointer;
	};

};



// Class Engine.HeightFogComponent ( Property size: 7 iter: 8) 
// Class name index: 5130 
// 0x001F (0x00A4 - 0x0085)
class UHeightFogComponent : public UActorComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0088 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              Height;                                           		// 0x008C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Density;                                          		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LightBrightness;                                  		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LightColor;                                       		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ExtinctionDistance;                               		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StartDistance;                                    		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 319 ];

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bSetEnabled );
};



// Class Engine.PrimitiveComponent ( Property size: 107 iter: 158) 
// Class name index: 5132 
// 0x01B3 (0x0238 - 0x0085)
class UPrimitiveComponent : public UActorComponent
{
public:
	int                                                Tag;                                              		// 0x0088 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FBoxSphereBounds                            Bounds;                                           		// 0x008C (0x001C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    SceneInfo;                                        		// 0x00A8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                DetachFence;                                      		// 0x00B0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              LocalToWorldDeterminant;                          		// 0x00B4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00B8 (0x0008) MISSED OFFSET
	struct FMatrix                                     LocalToWorld;                                     		// 0x00C0 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                MotionBlurInfoIndex;                              		// 0x0100 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          DecalList;                                        		// 0x0104 (0x0010) [0x0000000001001002]              ( CPF_Const | CPF_Native )
	TArray< class UDecalComponent* >                   DecalsToReattach;                                 		// 0x0114 (0x0010) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UPrimitiveComponent*                         ShadowParent;                                     		// 0x0124 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPrimitiveComponent*                         ReplacementPrimitive;                             		// 0x012C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UFogVolumeDensityComponent*                  FogVolumeComponent;                               		// 0x0134 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class ULightComponent*                             OverrideLightComponent;                           		// 0x013C (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0144 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  PreviousLightEnvironment;                         		// 0x014C (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              MinDrawDistance;                                  		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MassiveLODDistance;                               		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDrawDistance;                                  		// 0x015C (0x0004) [0x0000000000800003]              ( CPF_Edit | CPF_Const | CPF_NoExport )
	float                                              CachedMaxDrawDistance;                            		// 0x0160 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              MotionBlurInstanceScale;                          		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CullDistance;                                     		// 0x0168 (0x0004) [0x0000000020800002]              ( CPF_Const | CPF_NoExport | CPF_Deprecated )
	float                                              CachedCullDistance;                               		// 0x016C (0x0004) [0x0000000020020000]              ( CPF_EditConst | CPF_Deprecated )
	unsigned char                                      DepthPriorityGroup;                               		// 0x0170 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ViewOwnerDepthPriorityGroup;                      		// 0x0171 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      DetailMode;                                       		// 0x0172 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RBChannel;                                        		// 0x0173 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RBDominanceGroup;                                 		// 0x0174 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PreviewEnvironmentShadowing;                      		// 0x0175 (0x0001) [0x0000000000000000]              
	unsigned long                                      bUseViewOwnerDepthPriorityGroup : 1;              		// 0x0178 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bAllowCullDistanceVolume : 1;                     		// 0x0178 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      HiddenGame : 1;                                   		// 0x0178 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      HiddenEditor : 1;                                 		// 0x0178 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOwnerNoSee : 1;                                  		// 0x0178 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOnlyOwnerSee : 1;                                		// 0x0178 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreOwnerHidden : 1;                           		// 0x0178 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseAsOccluder : 1;                               		// 0x0178 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bAllowApproximateOcclusion : 1;                   		// 0x0178 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bFirstFrameOcclusion : 1;                         		// 0x0178 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIgnoreNearPlaneIntersection : 1;                 		// 0x0178 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bSelectable : 1;                                  		// 0x0178 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bForceMipStreaming : 1;                           		// 0x0178 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDecals : 1;                               		// 0x0178 (0x0004) [0x0000000020000002] [0x00002000] ( CPF_Const | CPF_Deprecated )
	unsigned long                                      bAcceptsDecalsDuringGameplay : 1;                 		// 0x0178 (0x0004) [0x0000000020000002] [0x00004000] ( CPF_Const | CPF_Deprecated )
	unsigned long                                      bAcceptsStaticDecals : 1;                         		// 0x0178 (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDynamicDecals : 1;                        		// 0x0178 (0x0004) [0x0000000000000003] [0x00010000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsRefreshingDecals : 1;                          		// 0x0178 (0x0004) [0x0000000000003002] [0x00020000] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bAllowDecalAutomaticReAttach : 1;                 		// 0x0178 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bUsePerInstanceHitProxies : 1;                    		// 0x0178 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bOutlined : 1;                                    		// 0x0178 (0x0004) [0x0000000000000003] [0x00100000] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastShadow : 1;                                   		// 0x0178 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bForceDirectLightMap : 1;                         		// 0x0178 (0x0004) [0x0000000000000002] [0x00400000] ( CPF_Const )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x0178 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bCastStaticShadow : 1;                            		// 0x0178 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bSelfShadowOnly : 1;                              		// 0x0178 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bNoModSelfShadow : 1;                             		// 0x0178 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bAcceptsDynamicDominantLightShadows : 1;          		// 0x0178 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bCastHiddenShadow : 1;                            		// 0x0178 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bCastShadowAsTwoSided : 1;                        		// 0x0178 (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bAcceptsLights : 1;                               		// 0x0178 (0x0004) [0x0000000000000003] [0x40000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDynamicLights : 1;                        		// 0x0178 (0x0004) [0x0000000000000003] [0x80000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseOnePassLightingOnTranslucency : 1;            		// 0x017C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsePrecomputedShadows : 1;                       		// 0x017C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasExplicitShadowParent : 1;                     		// 0x017C (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bAllowAmbientOcclusion : 1;                       		// 0x017C (0x0004) [0x0000000020000000] [0x00000008] ( CPF_Deprecated )
	unsigned long                                      CollideActors : 1;                                		// 0x017C (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      AlwaysCheckCollision : 1;                         		// 0x017C (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      BlockActors : 1;                                  		// 0x017C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockZeroExtent : 1;                              		// 0x017C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockNonZeroExtent : 1;                           		// 0x017C (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      CanBlockCamera : 1;                               		// 0x017C (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockRigidBody : 1;                               		// 0x017C (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBlockFootPlacement : 1;                          		// 0x017C (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableAllRigidBody : 1;                         		// 0x017C (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSkipRBGeomCreation : 1;                          		// 0x017C (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x017C (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFluidDrain : 1;                                  		// 0x017C (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFluidTwoWay : 1;                                 		// 0x017C (0x0004) [0x0000000000000003] [0x00010000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreRadialImpulse : 1;                         		// 0x017C (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bIgnoreRadialForce : 1;                           		// 0x017C (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bIgnoreForceField : 1;                            		// 0x017C (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x017C (0x0004) [0x0000000000000003] [0x00100000] ( CPF_Edit | CPF_Const )
	unsigned long                                      AlwaysLoadOnClient : 1;                           		// 0x017C (0x0004) [0x0000000000000002] [0x00200000] ( CPF_Const )
	unsigned long                                      AlwaysLoadOnServer : 1;                           		// 0x017C (0x0004) [0x0000000000000002] [0x00400000] ( CPF_Const )
	unsigned long                                      bIgnoreHiddenActorsMembership : 1;                		// 0x017C (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      AbsoluteTranslation : 1;                          		// 0x017C (0x0004) [0x0000000000000003] [0x01000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      AbsoluteRotation : 1;                             		// 0x017C (0x0004) [0x0000000000000003] [0x02000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      AbsoluteScale : 1;                                		// 0x017C (0x0004) [0x0000000000000003] [0x04000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowShadowFade : 1;                             		// 0x017C (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bSupportedOnMobile : 1;                           		// 0x017C (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bWasSNFiltered : 1;                               		// 0x017C (0x0004) [0x0000000000003002] [0x20000000] ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      OctreeNodes;                                      		// 0x0180 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FColor                                      OutlineColor;                                     		// 0x0190 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                TranslucencySortPriority;                         		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                VisibilityId;                                     		// 0x0198 (0x0004) [0x0000000000200000]              
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x019C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRBCollisionChannelContainer                RBCollideWithChannels;                            		// 0x01A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPhysicalMaterial*                           PhysMaterialOverride;                             		// 0x01A4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class URB_BodyInstance*                            BodyInstance;                                     		// 0x01AC (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData01[ 0xC ];                             		// 0x01B4 (0x000C) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                              		// 0x01C0 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     Translation;                                      		// 0x0200 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    Rotation;                                         		// 0x020C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Scale;                                            		// 0x0218 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Scale3D;                                          		// 0x021C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoundsScale;                                      		// 0x0228 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LastSubmitTime;                                   		// 0x022C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LastRenderTime;                                   		// 0x0230 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ScriptRigidBodyCollisionThreshold;                		// 0x0234 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 321 ];

		return pClassPointer;
	};

	unsigned char ClosestPointOnComponentToComponent ( class UPrimitiveComponent** OtherComponent, struct FVector* PointOnComponentA, struct FVector* PointOnComponentB );
	unsigned char ClosestPointOnComponentToPoint ( struct FVector* POI, struct FVector* Extent, struct FVector* OutPointA, struct FVector* OutPointB );
	struct FRotator GetRotation ( );
	struct FVector GetPosition ( );
	void SetAbsolute ( unsigned long NewAbsoluteTranslation, unsigned long NewAbsoluteRotation, unsigned long NewAbsoluteScale );
	void SetScale3D ( struct FVector NewScale3D );
	void SetScale ( float NewScale );
	void SetRotation ( struct FRotator NewRotation );
	void SetTranslation ( struct FVector NewTranslation );
	void SetActorCollision ( unsigned long NewCollideActors, unsigned long NewBlockActors, unsigned long NewAlwaysCheckCollision );
	void SetTraceBlocking ( unsigned long NewBlockZeroExtent, unsigned long NewBlockNonZeroExtent );
	void SetViewOwnerDepthPriorityGroup ( unsigned long bNewUseViewOwnerDepthPriorityGroup, unsigned char NewViewOwnerDepthPriorityGroup );
	void SetOutlineColor ( struct FColor NewColor );
	void SetOutlined ( unsigned long bNewVal );
	void SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup );
	void SetLightingChannels ( struct FLightingChannelContainer NewLightingChannels );
	void SetCullDistance ( float NewCullDistance );
	void SetLightEnvironment ( class ULightEnvironmentComponent* NewLightEnvironment );
	void SetShadowParent ( class UPrimitiveComponent* NewShadowParent );
	void SetIgnoreOwnerHidden ( unsigned long bNewIgnoreOwnerHidden );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetOwnerNoSee ( unsigned long bNewOwnerNoSee );
	void SetHidden ( unsigned long NewHidden );
	bool ShouldComponentAddToScene ( );
	void SetRBDominanceGroup ( unsigned char InDomGroup );
	class URB_BodyInstance* GetRootBodyInstance ( );
	void SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial );
	void InitRBPhys ( );
	void SetNotifyRigidBodyCollision ( unsigned long bNewNotifyRigidBodyCollision );
	void SetRBChannel ( unsigned char Channel );
	void SetRBCollisionChannels ( struct FRBCollisionChannelContainer Channels );
	void SetRBCollidesWithChannel ( unsigned char Channel, unsigned long bNewCollides );
	void SetBlockRigidBody ( unsigned long bNewBlockRigidBody );
	bool RigidBodyIsAwake ( struct FName BoneName );
	void PutRigidBodyToSleep ( struct FName BoneName );
	void WakeRigidBody ( struct FName BoneName );
	void SetRBRotation ( struct FRotator NewRot, struct FName BoneName );
	void SetRBPosition ( struct FVector NewPos, struct FName BoneName );
	void RetardRBLinearVelocity ( struct FVector RetardDir, float VelScale );
	void SetRBAngularVelocity ( struct FVector NewAngVel, unsigned long bAddToCurrent );
	void SetRBLinearVelocity ( struct FVector NewVel, unsigned long bAddToCurrent );
	void AddTorque ( struct FVector Torque, struct FName BoneName );
	void AddRadialForce ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff );
	void AddForce ( struct FVector Force, struct FVector Position, struct FName BoneName );
	void AddRadialImpulse ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff, unsigned long bVelChange );
	void AddImpulse ( struct FVector Impulse, struct FVector Position, struct FName BoneName, unsigned long bVelChange );
};



// Class Engine.ArrowComponent ( Property size: 4 iter: 4) 
// Class name index: 5134 
// 0x0014 (0x024C - 0x0238)
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ArrowColor;                                       		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ArrowSize;                                        		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTreatAsASprite : 1;                              		// 0x0240 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FName                                       SpriteCategoryName;                               		// 0x0244 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 323 ];

		return pClassPointer;
	};

};



// Class Engine.BrushComponent ( Property size: 6 iter: 7) 
// Class name index: 5136 
// 0x0074 (0x02AC - 0x0238)
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                            		// 0x0238 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FKAggregateGeom                             BrushAggGeom;                                     		// 0x0240 (0x004C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    BrushPhysDesc;                                    		// 0x028C (0x0008) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FKCachedConvexData_Mirror                   CachedPhysBrushData;                              		// 0x0294 (0x0010) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                CachedPhysBrushDataVersion;                       		// 0x02A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bBlockComplexCollisionTrace : 1;                  		// 0x02A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 325 ];

		return pClassPointer;
	};

};



// Class Engine.CameraConeComponent ( Property size: 0 iter: 0) 
// Class name index: 5138 
// 0x0000 (0x0238 - 0x0238)
class UCameraConeComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 327 ];

		return pClassPointer;
	};

};



// Class Engine.CylinderComponent ( Property size: 6 iter: 7) 
// Class name index: 5140 
// 0x0010 (0x0248 - 0x0238)
class UCylinderComponent : public UPrimitiveComponent
{
public:
	float                                              CollisionHeight;                                  		// 0x0238 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	float                                              CollisionRadius;                                  		// 0x023C (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	struct FColor                                      CylinderColor;                                    		// 0x0240 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bDrawBoundingBox : 1;                             		// 0x0244 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bDrawNonColliding : 1;                            		// 0x0244 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bAlwaysRenderIfSelected : 1;                      		// 0x0244 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 329 ];

		return pClassPointer;
	};

	void SetCylinderSize ( float NewRadius, float NewHeight );
};



// Class Engine.DrawBoxComponent ( Property size: 6 iter: 6) 
// Class name index: 5142 
// 0x001C (0x0254 - 0x0238)
class UDrawBoxComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      BoxColor;                                         		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   BoxMaterial;                                      		// 0x023C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BoxExtent;                                        		// 0x0244 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireBox : 1;                                 		// 0x0250 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitBox : 1;                                  		// 0x0250 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDrawOnlyIfSelected : 1;                          		// 0x0250 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 331 ];

		return pClassPointer;
	};

};



// Class Engine.DrawCapsuleComponent ( Property size: 7 iter: 7) 
// Class name index: 5144 
// 0x0018 (0x0250 - 0x0238)
class UDrawCapsuleComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CapsuleColor;                                     		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   CapsuleMaterial;                                  		// 0x023C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CapsuleHeight;                                    		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CapsuleRadius;                                    		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireCapsule : 1;                             		// 0x024C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitCapsule : 1;                              		// 0x024C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDrawOnlyIfSelected : 1;                          		// 0x024C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 333 ];

		return pClassPointer;
	};

};



// Class Engine.DrawConeComponent ( Property size: 4 iter: 4) 
// Class name index: 5146 
// 0x0010 (0x0248 - 0x0238)
class UDrawConeComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ConeColor;                                        		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeRadius;                                       		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeAngle;                                        		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ConeSides;                                        		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 335 ];

		return pClassPointer;
	};

};



// Class Engine.DrawCylinderComponent ( Property size: 10 iter: 10) 
// Class name index: 5148 
// 0x0024 (0x025C - 0x0238)
class UDrawCylinderComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CylinderColor;                                    		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   CylinderMaterial;                                 		// 0x023C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderRadius;                                   		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderTopRadius;                                		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderHeight;                                   		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderHeightOffset;                             		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CylinderSides;                                    		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireCylinder : 1;                            		// 0x0258 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitCylinder : 1;                             		// 0x0258 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDrawOnlyIfSelected : 1;                          		// 0x0258 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 337 ];

		return pClassPointer;
	};

};



// Class Engine.DrawFrustumComponent ( Property size: 6 iter: 6) 
// Class name index: 5150 
// 0x001C (0x0254 - 0x0238)
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      FrustumColor;                                     		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumAngle;                                     		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumAspectRatio;                               		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumStartDist;                                 		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumEndDist;                                   		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    Texture;                                          		// 0x024C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 339 ];

		return pClassPointer;
	};

};



// Class Engine.DrawQuadComponent ( Property size: 3 iter: 3) 
// Class name index: 5152 
// 0x0010 (0x0248 - 0x0238)
class UDrawQuadComponent : public UPrimitiveComponent
{
public:
	class UTexture*                                    Texture;                                          		// 0x0238 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Width;                                            		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Height;                                           		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 341 ];

		return pClassPointer;
	};

};



// Class Engine.DrawSphereComponent ( Property size: 7 iter: 7) 
// Class name index: 5154 
// 0x0018 (0x0250 - 0x0238)
class UDrawSphereComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      SphereColor;                                      		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   SphereMaterial;                                   		// 0x023C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereRadius;                                     		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SphereSides;                                      		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireSphere : 1;                              		// 0x024C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitSphere : 1;                               		// 0x024C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDrawOnlyIfSelected : 1;                          		// 0x024C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 343 ];

		return pClassPointer;
	};

};



// Class Engine.DrawPylonRadiusComponent ( Property size: 0 iter: 0) 
// Class name index: 5156 
// 0x0000 (0x0250 - 0x0250)
class UDrawPylonRadiusComponent : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 345 ];

		return pClassPointer;
	};

};



// Class Engine.DrawSoundRadiusComponent ( Property size: 0 iter: 0) 
// Class name index: 5158 
// 0x0000 (0x0250 - 0x0250)
class UDrawSoundRadiusComponent : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 347 ];

		return pClassPointer;
	};

};



// Class Engine.LevelGridVolumeRenderingComponent ( Property size: 0 iter: 0) 
// Class name index: 5160 
// 0x0000 (0x0238 - 0x0238)
class ULevelGridVolumeRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 349 ];

		return pClassPointer;
	};

};



// Class Engine.LineBatchComponent ( Property size: 5 iter: 5) 
// Class name index: 5162 
// 0x0034 (0x026C - 0x0238)
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    FPrimitiveDrawInterfaceVfTable;                   		// 0x0238 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    FPrimitiveDrawInterfaceView;                      		// 0x0240 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< struct FPointer >                          BatchedLines;                                     		// 0x0248 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          BatchedPoints;                                    		// 0x0258 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              DefaultLifeTime;                                  		// 0x0268 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 351 ];

		return pClassPointer;
	};

};



// Class Engine.ModelComponent ( Property size: 5 iter: 5) 
// Class name index: 5164 
// 0x0030 (0x0268 - 0x0238)
class UModelComponent : public UPrimitiveComponent
{
public:
	class UObject*                                     Model;                                            		// 0x0238 (0x0008) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	int                                                ZoneIndex;                                        		// 0x0240 (0x0004) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	int                                                ComponentIndex;                                   		// 0x0244 (0x0004) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	TArray< struct FPointer >                          Nodes;                                            		// 0x0248 (0x0010) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	TArray< struct FPointer >                          Elements;                                         		// 0x0258 (0x0010) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 353 ];

		return pClassPointer;
	};

};



// Class Engine.SpriteComponent ( Property size: 8 iter: 11) 
// Class name index: 5166 
// 0x0028 (0x0260 - 0x0238)
class USpriteComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                           		// 0x0238 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsScreenSizeScaled : 1;                          		// 0x0240 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ScreenSize;                                       		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              U;                                                		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UL;                                               		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              V;                                                		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VL;                                               		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SpriteCategoryName;                               		// 0x0258 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 355 ];

		return pClassPointer;
	};

	void SetSpriteAndUV ( class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL );
	void SetUV ( int NewU, int NewUL, int NewV, int NewVL );
	void SetSprite ( class UTexture2D* NewSprite );
};



// Class Engine.RadialBlurComponent ( Property size: 10 iter: 18) 
// Class name index: 5168 
// 0x006B (0x00F0 - 0x0085)
class URadialBlurComponent : public UActorComponent
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x0088 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      DepthPriorityGroup;                               		// 0x0090 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlurScale;                                        		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlurFalloffExponent;                              		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlurOpacity;                                      		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxCullDistance;                                  		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DistanceFalloffExponent;                          		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bRenderAsVelocity : 1;                            		// 0x00A8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnabled : 1;                                     		// 0x00A8 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00AC (0x0004) MISSED OFFSET
	struct FMatrix                                     LocalToWorld;                                     		// 0x00B0 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 357 ];

		return pClassPointer;
	};

	void OnUpdatePropertyBlurOpacity ( );
	void OnUpdatePropertyBlurFalloffExponent ( );
	void OnUpdatePropertyBlurScale ( );
	void SetEnabled ( unsigned long bInEnabled );
	void SetBlurOpacity ( float InBlurOpacity );
	void SetBlurFalloffExponent ( float InBlurFalloffExponent );
	void SetBlurScale ( float InBlurScale );
	void SetMaterial ( class UMaterialInterface* InMaterial );
};



// Class Engine.SceneCaptureComponent ( Property size: 18 iter: 21) 
// Class name index: 5170 
// 0x004B (0x00D0 - 0x0085)
class USceneCaptureComponent : public UActorComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnablePostProcess : 1;                           		// 0x0088 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableFog : 1;                                   		// 0x0088 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseMainScenePostProcessSettings : 1;             		// 0x0088 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSkipUpdateIfTextureUsersOccluded : 1;            		// 0x0088 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSkipUpdateIfOwnerOccluded : 1;                   		// 0x0088 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bSkipRenderingDepthPrepass : 1;                   		// 0x0088 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	struct FColor                                      ClearColor;                                       		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ViewMode;                                         		// 0x0090 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                SceneLOD;                                         		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrameRate;                                        		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPostProcessChain*                           PostProcess;                                      		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxUpdateDist;                                    		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxViewDistanceOverride;                          		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxStreamingUpdateDist;                           		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    CaptureInfo;                                      		// 0x00B0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    ViewState;                                        		// 0x00B8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          PostProcessProxies;                               		// 0x00C0 (0x0010) [0x0000000001203002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 359 ];

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bEnable );
	void SetFrameRate ( float NewFrameRate );
};



// Class Engine.SceneCapture2DComponent ( Property size: 7 iter: 9) 
// Class name index: 5172 
// 0x00A0 (0x0170 - 0x00D0)
class USceneCapture2DComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x00D0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FieldOfView;                                      		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              NearPlane;                                        		// 0x00DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FarPlane;                                         		// 0x00E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateMatrices : 1;                              		// 0x00E4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00E8 (0x0008) MISSED OFFSET
	struct FMatrix                                     ViewMatrix;                                       		// 0x00F0 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMatrix                                     ProjMatrix;                                       		// 0x0130 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 361 ];

		return pClassPointer;
	};

	void SetView ( struct FVector NewLocation, struct FRotator NewRotation );
	void SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane );
};



// Class Engine.SceneCapture2DSpecificComponent ( Property size: 2 iter: 2) 
// Class name index: 5174 
// 0x0018 (0x0188 - 0x0170)
class USceneCapture2DSpecificComponent : public USceneCapture2DComponent
{
public:
	TArray< class AActor* >                            ShownActorFilter;                                 		// 0x0170 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FPointer                                    ShownActorPrimitiveFilter;                        		// 0x0180 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 363 ];

		return pClassPointer;
	};

};



// Class Engine.SceneCapture2DHitMaskComponent ( Property size: 9 iter: 12) 
// Class name index: 5176 
// 0x002C (0x00FC - 0x00D0)
class USceneCapture2DHitMaskComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x00D0 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class USkeletalMeshComponent*                      SkeletalMeshComp;                                 		// 0x00D8 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                MaterialIndex;                                    		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                ForceLOD;                                         		// 0x00E4 (0x0004) [0x0000000000000000]              
	int                                                HitMaskCullDistance;                              		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              FadingStartTimeSinceHit;                          		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              FadingPercentage;                                 		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              FadingDurationTime;                               		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              FadingIntervalTime;                               		// 0x00F8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 365 ];

		return pClassPointer;
	};

	void SetFadingStartTimeSinceHit ( float InFadingStartTimeSinceHit );
	void SetCaptureParameters ( struct FVector InMaskPosition, float InMaskRadius, struct FVector InStartupPosition, unsigned long bOnlyWhenFacing );
	void SetCaptureTargetTexture ( class UTextureRenderTarget2D* InTextureTarget );
};



// Class Engine.SceneCaptureCubeMapComponent ( Property size: 4 iter: 4) 
// Class name index: 5178 
// 0x001C (0x00EC - 0x00D0)
class USceneCaptureCubeMapComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                    		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              NearPlane;                                        		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FarPlane;                                         		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WorldLocation;                                    		// 0x00E0 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 367 ];

		return pClassPointer;
	};

};



// Class Engine.SceneCapturePortalComponent ( Property size: 3 iter: 4) 
// Class name index: 5180 
// 0x0014 (0x00E4 - 0x00D0)
class USceneCapturePortalComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x00D0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ScaleFOV;                                         		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      ViewDestination;                                  		// 0x00DC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 369 ];

		return pClassPointer;
	};

	void SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest );
};



// Class Engine.SceneCaptureReflectComponent ( Property size: 2 iter: 2) 
// Class name index: 5182 
// 0x000C (0x00DC - 0x00D0)
class USceneCaptureReflectComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleFOV;                                         		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 371 ];

		return pClassPointer;
	};

};



// Class Engine.WindDirectionalSourceComponent ( Property size: 5 iter: 5) 
// Class name index: 5184 
// 0x001B (0x00A0 - 0x0085)
class UWindDirectionalSourceComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneProxy;                                       		// 0x0088 (0x0008) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              Strength;                                         		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Phase;                                            		// 0x0094 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              Frequency;                                        		// 0x0098 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              Speed;                                            		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 373 ];

		return pClassPointer;
	};

};



// Class Engine.WindPointSourceComponent ( Property size: 2 iter: 2) 
// Class name index: 5186 
// 0x000C (0x00AC - 0x00A0)
class UWindPointSourceComponent : public UWindDirectionalSourceComponent
{
public:
	class UDrawSphereComponent*                        PreviewRadiusComponent;                           		// 0x00A0 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              Radius;                                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 375 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactory ( Property size: 8 iter: 9) 
// Class name index: 5188 
// 0x003C (0x009C - 0x0060)
class UActorFactory : public UObject
{
public:
	class UClass*                                      GameplayActorClass;                               		// 0x0060 (0x0008) [0x0000000000000000]              
	struct FString                                     MenuName;                                         		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MenuPriority;                                     		// 0x0078 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                AlternateMenuPriority;                            		// 0x007C (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	struct FString                                     NewActorClassName;                                		// 0x0080 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      NewActorClass;                                    		// 0x0090 (0x0008) [0x0000000000000000]              
	unsigned long                                      bPlaceable : 1;                                   		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bShowInEditorQuickMenu : 1;                       		// 0x0098 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 377 ];

		return pClassPointer;
	};

	void eventPostCreateActor ( class AActor* NewActor, class USeqAct_ActorFactory* ActorFactoryData );
};



// Class Engine.ActorFactoryActor ( Property size: 1 iter: 1) 
// Class name index: 5190 
// 0x0008 (0x00A4 - 0x009C)
class UActorFactoryActor : public UActorFactory
{
public:
	class UClass*                                      ActorClass;                                       		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 379 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryAI ( Property size: 6 iter: 6) 
// Class name index: 5192 
// 0x0038 (0x00D4 - 0x009C)
class UActorFactoryAI : public UActorFactory
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PawnClass;                                        		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PawnName;                                         		// 0x00AC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bGiveDefaultInventory : 1;                        		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UClass* >                            InventoryList;                                    		// 0x00C0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                TeamIndex;                                        		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 381 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryAmbientSound ( Property size: 1 iter: 1) 
// Class name index: 5194 
// 0x0008 (0x00A4 - 0x009C)
class UActorFactoryAmbientSound : public UActorFactory
{
public:
	class USoundCue*                                   AmbientSoundCue;                                  		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 383 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryAmbientSoundMovable ( Property size: 0 iter: 0) 
// Class name index: 5196 
// 0x0000 (0x00A4 - 0x00A4)
class UActorFactoryAmbientSoundMovable : public UActorFactoryAmbientSound
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 385 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryAmbientSoundSimple ( Property size: 1 iter: 1) 
// Class name index: 5198 
// 0x0008 (0x00A4 - 0x009C)
class UActorFactoryAmbientSoundSimple : public UActorFactory
{
public:
	class USoundNodeWave*                              SoundNodeWave;                                    		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 387 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryAmbientSoundNonLoop ( Property size: 0 iter: 0) 
// Class name index: 5200 
// 0x0000 (0x00A4 - 0x00A4)
class UActorFactoryAmbientSoundNonLoop : public UActorFactoryAmbientSoundSimple
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 389 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryAmbientSoundSimpleToggleable ( Property size: 0 iter: 0) 
// Class name index: 5202 
// 0x0000 (0x00A4 - 0x00A4)
class UActorFactoryAmbientSoundSimpleToggleable : public UActorFactoryAmbientSoundSimple
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 391 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryAmbientSoundNonLoopingToggleable ( Property size: 0 iter: 0) 
// Class name index: 5204 
// 0x0000 (0x00A4 - 0x00A4)
class UActorFactoryAmbientSoundNonLoopingToggleable : public UActorFactoryAmbientSoundSimpleToggleable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 393 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryApexDestructible ( Property size: 4 iter: 4) 
// Class name index: 5206 
// 0x0014 (0x00B0 - 0x009C)
class UActorFactoryApexDestructible : public UActorFactory
{
public:
	unsigned long                                      bStartAwake : 1;                                  		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      RBChannel;                                        		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UApexDestructibleAsset*                      DestructibleAsset;                                		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 395 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryArchetype ( Property size: 1 iter: 1) 
// Class name index: 5208 
// 0x0008 (0x00A4 - 0x009C)
class UActorFactoryArchetype : public UActorFactory
{
public:
	class AActor*                                      ArchetypeActor;                                   		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 397 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryCoverLink ( Property size: 0 iter: 0) 
// Class name index: 5210 
// 0x0000 (0x009C - 0x009C)
class UActorFactoryCoverLink : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 399 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryDominantDirectionalLight ( Property size: 0 iter: 0) 
// Class name index: 5212 
// 0x0000 (0x009C - 0x009C)
class UActorFactoryDominantDirectionalLight : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 401 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryDominantDirectionalLightMovable ( Property size: 0 iter: 0) 
// Class name index: 5214 
// 0x0000 (0x009C - 0x009C)
class UActorFactoryDominantDirectionalLightMovable : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 403 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryDynamicSM ( Property size: 8 iter: 8) 
// Class name index: 5216 
// 0x0019 (0x00B5 - 0x009C)
class UActorFactoryDynamicSM : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoEncroachCheck : 1;                             		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockRigidBody : 1;                              		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      CollisionType;                                    		// 0x00B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 405 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryMover ( Property size: 0 iter: 0) 
// Class name index: 5218 
// 0x0003 (0x00B8 - 0x00B5)
class UActorFactoryMover : public UActorFactoryDynamicSM
{
public:
//	 LastOffset: b5
//	 Class Propsize: b8

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 407 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryRigidBody ( Property size: 10 iter: 10) 
// Class name index: 5220 
// 0x002F (0x00E4 - 0x00B5)
class UActorFactoryRigidBody : public UActorFactoryDynamicSM
{
public:
	unsigned long                                      bStartAwake : 1;                                  		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLocalSpaceInitialVelocity : 1;                   		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableStayUprightSpring : 1;                     		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FVector                                     InitialVelocity;                                  		// 0x00BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UDistributionVector*                         AdditionalVelocity;                               		// 0x00C8 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDistributionVector*                         InitialAngularVelocity;                           		// 0x00D0 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      RBChannel;                                        		// 0x00D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightTorqueFactor;                          		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightMaxTorque;                             		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 409 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryEmitter ( Property size: 1 iter: 1) 
// Class name index: 5222 
// 0x0008 (0x00A4 - 0x009C)
class UActorFactoryEmitter : public UActorFactory
{
public:
	class UParticleSystem*                             ParticleSystem;                                   		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 411 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryFracturedStaticMesh ( Property size: 2 iter: 2) 
// Class name index: 5224 
// 0x0014 (0x00B0 - 0x009C)
class UActorFactoryFracturedStaticMesh : public UActorFactory
{
public:
	class UFracturedStaticMesh*                        FracturedStaticMesh;                              		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 413 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryLensFlare ( Property size: 1 iter: 1) 
// Class name index: 5226 
// 0x0008 (0x00A4 - 0x009C)
class UActorFactoryLensFlare : public UActorFactory
{
public:
	class ULensFlare*                                  LensFlareObject;                                  		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 415 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryLight ( Property size: 0 iter: 0) 
// Class name index: 5228 
// 0x0000 (0x009C - 0x009C)
class UActorFactoryLight : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 417 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryPathNode ( Property size: 0 iter: 0) 
// Class name index: 5230 
// 0x0000 (0x009C - 0x009C)
class UActorFactoryPathNode : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 419 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryPhysicsAsset ( Property size: 9 iter: 9) 
// Class name index: 5232 
// 0x002C (0x00C8 - 0x009C)
class UActorFactoryPhysicsAsset : public UActorFactory
{
public:
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartAwake : 1;                                  		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x00AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x00AC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x00AC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x00AC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FVector                                     InitialVelocity;                                  		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x00BC (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 421 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryPlayerStart ( Property size: 0 iter: 0) 
// Class name index: 5234 
// 0x0000 (0x009C - 0x009C)
class UActorFactoryPlayerStart : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 423 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryPylon ( Property size: 0 iter: 0) 
// Class name index: 5236 
// 0x0000 (0x009C - 0x009C)
class UActorFactoryPylon : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 425 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactorySkeletalMesh ( Property size: 3 iter: 3) 
// Class name index: 5238 
// 0x0018 (0x00B4 - 0x009C)
class UActorFactorySkeletalMesh : public UActorFactory
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    AnimSet;                                          		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimSequenceName;                                 		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 427 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryStaticMesh ( Property size: 2 iter: 2) 
// Class name index: 5240 
// 0x0014 (0x00B0 - 0x009C)
class UActorFactoryStaticMesh : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 429 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryTrigger ( Property size: 0 iter: 0) 
// Class name index: 5242 
// 0x0000 (0x009C - 0x009C)
class UActorFactoryTrigger : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 431 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryVehicle ( Property size: 1 iter: 1) 
// Class name index: 5244 
// 0x0008 (0x00A4 - 0x009C)
class UActorFactoryVehicle : public UActorFactory
{
public:
	class UClass*                                      VehicleClass;                                     		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 433 ];

		return pClassPointer;
	};

};



// Class Engine.AkBank ( Property size: 2 iter: 4) 
// Class name index: 5246 
// 0x0004 (0x0064 - 0x0060)
class UAkBank : public UObject
{
public:
	unsigned long                                      AutoLoad : 1;                                     		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      GenerateDefinition : 1;                           		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 435 ];

		return pClassPointer;
	};

	void UnloadBank ( );
	void LoadBank ( );
};



// Class Engine.AkBaseSoundObject ( Property size: 0 iter: 0) 
// Class name index: 5248 
// 0x0000 (0x0060 - 0x0060)
class UAkBaseSoundObject : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 437 ];

		return pClassPointer;
	};

};



// Class Engine.AkEvent ( Property size: 1 iter: 1) 
// Class name index: 5250 
// 0x0008 (0x0068 - 0x0060)
class UAkEvent : public UAkBaseSoundObject
{
public:
	class UAkBank*                                     RequiredBank;                                     		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 439 ];

		return pClassPointer;
	};

};



// Class Engine.SoundCue ( Property size: 15 iter: 17) 
// Class name index: 905 
// 0x00A8 (0x0108 - 0x0060)
class USoundCue : public UAkBaseSoundObject
{
public:
	struct FName                                       SoundClass;                                       		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SoundClassName;                                   		// 0x0068 (0x0001) [0x0000000000000000]              
	unsigned long                                      bDebug : 1;                                       		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class USoundNode*                                  FirstNode;                                        		// 0x0070 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0078 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.SoundCue.EditorData
	float                                              MaxAudibleDistance;                               		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              VolumeMultiplier;                                 		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x00CC (0x0004) [0x0000000000000000]              
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FaceFXGroupName;                                  		// 0x00D8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FaceFXAnimName;                                   		// 0x00E8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                MaxConcurrentPlayCount;                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentPlayCount;                                 		// 0x00FC (0x0004) [0x0000000000202002]              ( CPF_Const | CPF_Transient )
	struct FName                                       SoundGroup;                                       		// 0x0100 (0x0008) [0x0000000020000000]              ( CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 441 ];

		return pClassPointer;
	};

	float GetCueDuration ( );
};



// Class Engine.BookMark ( Property size: 3 iter: 3) 
// Class name index: 5253 
// 0x0028 (0x0088 - 0x0060)
class UBookMark : public UObject
{
public:
	struct FVector                                     Location;                                         		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    Rotation;                                         		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FString >                           HiddenLevels;                                     		// 0x0078 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 443 ];

		return pClassPointer;
	};

};



// Class Engine.BookMark2D ( Property size: 2 iter: 2) 
// Class name index: 5255 
// 0x000C (0x006C - 0x0060)
class UBookMark2D : public UObject
{
public:
	float                                              Zoom2D;                                           		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FIntPoint                                   Location;                                         		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 445 ];

		return pClassPointer;
	};

};



// Class Engine.KismetBookMark ( Property size: 1 iter: 1) 
// Class name index: 5257 
// 0x0010 (0x007C - 0x006C)
class UKismetBookMark : public UBookMark2D
{
public:
	struct FString                                     BookMarkSequencePathName;                         		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 447 ];

		return pClassPointer;
	};

};



// Class Engine.Canvas ( Property size: 19 iter: 69) 
// Class name index: 3978 
// 0x0068 (0x00C8 - 0x0060)
class UCanvas : public UObject
{
public:
	class UFont*                                       Font;                                             		// 0x0060 (0x0008) [0x0000000000000000]              
	float                                              OrgX;                                             		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              OrgY;                                             		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              ClipX;                                            		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              ClipY;                                            		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              CurX;                                             		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CurY;                                             		// 0x007C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CurZ;                                             		// 0x0080 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CurYL;                                            		// 0x0084 (0x0004) [0x0000000000000000]              
	struct FColor                                      DrawColor;                                        		// 0x0088 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCenter : 1;                                      		// 0x008C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNoSmooth : 1;                                    		// 0x008C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                SizeX;                                            		// 0x0090 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x0094 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                DepthSortKey;                                     		// 0x0098 (0x0004) [0x0000000000000000]              
	struct FPointer                                    Canvas;                                           		// 0x009C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    SceneView;                                        		// 0x00A4 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00AC (0x0004) MISSED OFFSET
	struct FPlane                                      ColorModulate;                                    		// 0x00B0 (0x0010) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture;                                   		// 0x00C0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 449 ];

		return pClassPointer;
	};

	void DrawDebugGraph ( struct FString Title, float ValueX, float ValueY, float UL_X, float UL_Y, float W, float H, struct FVector2D RangeX, struct FVector2D RangeY );
	void DrawTextureDoubleLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Spacing, float Width, struct FColor LineColor, struct FColor AltLineColor, class UTexture* Tex, float U, float V, float UL, float VL );
	void DrawTextureLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Width, struct FColor LineColor, class UTexture* LineTexture, float U, float V, float UL, float VL );
	void Draw2DLine ( float X1, float Y1, float X2, float Y2, struct FColor LineColor );
	void SetDrawColorStruct ( struct FColor C );
	void SetDrawColor ( unsigned char R, unsigned char G, unsigned char B, unsigned char A );
	void DrawBox ( float Width, float Height );
	void DrawRect ( float RectX, float RectY, class UTexture* Tex );
	void DrawIcon ( struct FCanvasIcon Icon, float X, float Y, float Scale );
	void DrawScaledIcon ( struct FCanvasIcon Icon, float X, float Y, struct FVector Scale );
	struct FCanvasIcon MakeIcon ( class UTexture* Texture, float U, float V, float UL, float VL );
	void DrawBlendedTile ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, unsigned char Blend );
	void DrawTexture ( class UTexture* Tex, float Scale );
	void PopMaskRegion ( );
	void PushMaskRegion ( float X, float Y, float XL, float YL );
	void SetClip ( float X, float Y );
	void SetOrigin ( float X, float Y );
	void SetPos ( float PosX, float PosY, float PosZ );
	class UFont* eventGetDefaultCanvasFont ( );
	void Reset ( unsigned long bKeepOrigin );
	void Flush ( );
	void PopTransform ( );
	void PushTranslationMatrix ( struct FVector TranslationVector );
	void DeProject ( struct FVector2D ScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection );
	struct FVector Project ( struct FVector Location );
	void DrawText ( struct FString Text, unsigned long CR, float XScale, float YScale, struct FFontRenderInfo* RenderInfo );
	void TextSize ( struct FString String, float XScale, float YScale, float* XL, float* YL );
	void StrLen ( struct FString String, float* XL, float* YL );
	struct FFontRenderInfo CreateFontRenderInfo ( unsigned long bClipText, unsigned long bEnableShadow, struct FLinearColor GlowColor, struct FVector2D GlowOuterRadius, struct FVector2D GlowInnerRadius );
	void DrawTris ( class UTexture* Tex, TArray< struct FCanvasUVTri > Triangles, struct FColor InColor );
	void DrawTileStretched ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor, unsigned long bStretchHorizontally, unsigned long bStretchVertically, float ScalingFactor );
	void DrawTimer ( class UTexture* Tex, float StartTime, float TotalTime, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor, unsigned char Blend );
	void DrawRotatedMaterialTile ( class UMaterialInterface* Mat, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY );
	void DrawRotatedTile ( class UTexture* Tex, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY );
	void DrawMaterialTile ( class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL, unsigned long bClipTile );
	void PreOptimizeDrawTiles ( int Num, class UTexture* Tex, unsigned char Blend );
	void DrawTile ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor, unsigned long ClipTile, unsigned char Blend );
	int TopDepthSortKey ( );
	void PopDepthSortKey ( );
	void PushDepthSortKey ( int Key );
	void DisableFullBatchOptimization ( );
	void EnableFullBatchOptimization ( );
};



// Class Engine.Channel ( Property size: 0 iter: 0) 
// Class name index: 5260 
// 0x0040 (0x00A0 - 0x0060)
class UChannel : public UObject
{
public:
//	 LastOffset: 60
//	 Class Propsize: a0
	unsigned char                                      UnknownData00[ 0x40 ];                            		// 0x0060 (0x0040) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 451 ];

		return pClassPointer;
	};

};



// Class Engine.ActorChannel ( Property size: 0 iter: 0) 
// Class name index: 5262 
// 0x007C (0x011C - 0x00A0)
class UActorChannel : public UChannel
{
public:
//	 LastOffset: a0
//	 Class Propsize: 11c
	unsigned char                                      UnknownData00[ 0x7C ];                            		// 0x00A0 (0x007C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 453 ];

		return pClassPointer;
	};

};



// Class Engine.ControlChannel ( Property size: 0 iter: 0) 
// Class name index: 5264 
// 0x0014 (0x00B4 - 0x00A0)
class UControlChannel : public UChannel
{
public:
//	 LastOffset: a0
//	 Class Propsize: b4
	unsigned char                                      UnknownData00[ 0x14 ];                            		// 0x00A0 (0x0014) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 455 ];

		return pClassPointer;
	};

};



// Class Engine.FileChannel ( Property size: 0 iter: 0) 
// Class name index: 5266 
// 0x0224 (0x02C4 - 0x00A0)
class UFileChannel : public UChannel
{
public:
//	 LastOffset: a0
//	 Class Propsize: 2c4
	unsigned char                                      UnknownData00[ 0x224 ];                           		// 0x00A0 (0x0224) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 457 ];

		return pClassPointer;
	};

};



// Class Engine.VoiceChannel ( Property size: 0 iter: 0) 
// Class name index: 5268 
// 0x0010 (0x00B0 - 0x00A0)
class UVoiceChannel : public UChannel
{
public:
//	 LastOffset: a0
//	 Class Propsize: b0
	unsigned char                                      UnknownData00[ 0x10 ];                            		// 0x00A0 (0x0010) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 459 ];

		return pClassPointer;
	};

};



// Class Engine.Controller ( Property size: 63 iter: 196) 
// Class name index: 5270 
// 0x01EC (0x042C - 0x0240)
class AController : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavigationHandle;              		// 0x0240 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class APawn*                                       Pawn;                                             		// 0x0248 (0x0008) [0x0000000004000020]              ( CPF_Net | CPF_EditInline )
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                            		// 0x0250 (0x0008) [0x0000000004000020]              ( CPF_Net | CPF_EditInline )
	int                                                PlayerNum;                                        		// 0x0258 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class AController*                                 NextController;                                   		// 0x025C (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIsPlayer : 1;                                    		// 0x0264 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bGodMode : 1;                                     		// 0x0264 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSoaking : 1;                                     		// 0x0264 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSlowerZAcquire : 1;                              		// 0x0264 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bNotifyPostLanded : 1;                            		// 0x0264 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bNotifyApex : 1;                                  		// 0x0264 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bOverrideSearchStart : 1;                         		// 0x0264 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bAdvancedTactics : 1;                             		// 0x0264 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bCanDoSpecial : 1;                                		// 0x0264 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bAdjusting : 1;                                   		// 0x0264 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bPreparingMove : 1;                               		// 0x0264 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bForceStrafe : 1;                                 		// 0x0264 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bLOSflag : 1;                                     		// 0x0264 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bSkipExtraLOSChecks : 1;                          		// 0x0264 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bNotifyFallingHitWall : 1;                        		// 0x0264 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bEarlyOutOfSighTestsForSameType : 1;              		// 0x0264 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bPreciseDestination : 1;                          		// 0x0264 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bSeeFriendly : 1;                                 		// 0x0264 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bUsingPathLanes : 1;                              		// 0x0264 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned char                                      bFire;                                            		// 0x0268 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bAltFire;                                         		// 0x0269 (0x0001) [0x0000000000000004]              ( CPF_Input )
	float                                              MinHitWall;                                       		// 0x026C (0x0004) [0x0000000000000000]              
	class UClass*                                      NavigationHandleClass;                            		// 0x0270 (0x0008) [0x0000000000000000]              
	class UNavigationHandle*                           NavigationHandle;                                 		// 0x0278 (0x0008) [0x0000000004000000]              ( CPF_EditInline )
	struct FVector                                     OverrideSearchStart;                              		// 0x0280 (0x000C) [0x0000000000000000]              
	float                                              MoveTimer;                                        		// 0x028C (0x0004) [0x0000000000000000]              
	class AActor*                                      MoveTarget;                                       		// 0x0290 (0x0008) [0x0000000000000000]              
	struct FBasedPosition                              DestinationPosition;                              		// 0x0298 (0x0038) [0x0000000000000000]              
	struct FBasedPosition                              FocalPosition;                                    		// 0x02D0 (0x0038) [0x0000000000000000]              
	class AActor*                                      Focus;                                            		// 0x0308 (0x0008) [0x0000000000000000]              
	class AActor*                                      GoalList[ 0x4 ];                                  		// 0x0310 (0x0020) [0x0000000000000000]              
	struct FBasedPosition                              AdjustPosition;                                   		// 0x0330 (0x0038) [0x0000000000000000]              
	class ANavigationPoint*                            StartSpot;                                        		// 0x0368 (0x0008) [0x0000000000000000]              
	TArray< class ANavigationPoint* >                  RouteCache;                                       		// 0x0370 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UReachSpec*                                  CurrentPath;                                      		// 0x0380 (0x0008) [0x0000000000000000]              
	class UReachSpec*                                  NextRoutePath;                                    		// 0x0388 (0x0008) [0x0000000000000000]              
	struct FVector                                     CurrentPathDir;                                   		// 0x0390 (0x000C) [0x0000000000000000]              
	class AActor*                                      RouteGoal;                                        		// 0x039C (0x0008) [0x0000000000000000]              
	float                                              RouteDist;                                        		// 0x03A4 (0x0004) [0x0000000000000000]              
	float                                              LastRouteFind;                                    		// 0x03A8 (0x0004) [0x0000000000000000]              
	class AInterpActor*                                PendingMover;                                     		// 0x03AC (0x0008) [0x0000000000000000]              
	class AActor*                                      FailedMoveTarget;                                 		// 0x03B4 (0x0008) [0x0000000000000000]              
	int                                                MoveFailureCount;                                 		// 0x03BC (0x0004) [0x0000000000000000]              
	float                                              GroundPitchTime;                                  		// 0x03C0 (0x0004) [0x0000000000000000]              
	class APawn*                                       ShotTarget;                                       		// 0x03C4 (0x0008) [0x0000000000000000]              
	class AActor*                                      LastFailedReach;                                  		// 0x03CC (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              FailedReachTime;                                  		// 0x03D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     FailedReachLocation;                              		// 0x03D8 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              SightCounter;                                     		// 0x03E4 (0x0004) [0x0000000000000000]              
	float                                              SightCounterInterval;                             		// 0x03E8 (0x0004) [0x0000000000000000]              
	float                                              InUseNodeCostMultiplier;                          		// 0x03EC (0x0004) [0x0000000000000000]              
	int                                                HighJumpNodeCostModifier;                         		// 0x03F0 (0x0004) [0x0000000000000000]              
	float                                              MaxMoveTowardPawnTargetTime;                      		// 0x03F4 (0x0004) [0x0000000000000000]              
	class APawn*                                       Enemy;                                            		// 0x03F8 (0x0008) [0x0000000000000000]              
	TArray< struct FVisiblePortalInfo >                VisiblePortals;                                   		// 0x0400 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LaneOffset;                                       		// 0x0410 (0x0004) [0x0000000000000000]              
	struct FRotator                                    OldBasedRotation;                                 		// 0x0414 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     NavMeshPath_SearchExtent_Modifier;                		// 0x0420 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 461 ];

		return pClassPointer;
	};

	bool eventGeneratePathToLocation ( struct FVector Goal, float WithinDistance, unsigned long bAllowPartialPath );
	bool eventGeneratePathToActor ( class AActor* Goal, float WithinDistance, unsigned long bAllowPartialPath );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void InitNavigationHandle ( );
	void ReadyForLift ( );
	void SendMessage ( class APlayerReplicationInfo* Recipient, struct FName MessageType, float Wait, class UClass* DamageType );
	void eventCurrentLevelUnloaded ( );
	bool eventIsInCombat ( unsigned long bForceCheck );
	bool eventIsSpectating ( );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void NotifyAddInventory ( class AInventory* NewItem );
	void OnModifyHealth ( class USeqAct_ModifyHealth* Action );
	bool NotifyCoverClaimViolation ( class AController* NewClaim, class ACoverLink* Link, int SlotIdx );
	void eventNotifyCoverAdjusted ( );
	void NotifyCoverDisabled ( class ACoverLink* Link, int SlotIdx, unsigned long bAdjacentIdx );
	void OnSetVelocity ( class USeqAct_SetVelocity* Action );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	void OnToggleGodMode ( class USeqAct_ToggleGodMode* inAction );
	void OnAttachToActor ( class USeqAct_AttachToActor* Action );
	void OnTeleport ( class USeqAct_Teleport* Action );
	bool IsDead ( );
	struct FString GetHumanReadableName ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void StopLatentExecution ( );
	bool InLatentExecution ( int LatentActionNumber );
	void eventReachedPreciseDestination ( );
	void eventNotifyMissedJump ( );
	void eventNotifyJumpApex ( );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	void eventNotifyFallingHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor );
	bool eventNotifyHeadVolumeChange ( class APhysicsVolume* NewVolume );
	void eventNotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	bool LandingShake ( );
	bool IsAimingAt ( class AActor* ATarget, float Epsilon );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	bool eventHandlePathObstruction ( class AActor* BlockedBy );
	void UnderLift ( class ALiftCenter* Lift );
	bool eventMoverFinished ( );
	void WaitForMover ( class AInterpActor* M );
	bool eventAllowDetourTo ( class ANavigationPoint* N );
	void eventMayFall ( unsigned long bFloor, struct FVector FloorNormal );
	void EndClimbLadder ( );
	void eventLongFall ( );
	void WaitForLanding ( float waitDuration );
	bool PickWallAdjust ( struct FVector HitNormal );
	void eventMoveUnreachable ( struct FVector AttemptedDest, class AActor* AttemptedTarget );
	bool ActorReachable ( class AActor* anActor );
	bool PointReachable ( struct FVector aPoint );
	class AActor* FindPathToIntercept ( class APawn* P, class AActor* InRouteGoal, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	class ANavigationPoint* FindRandomDest ( );
	class AActor* FindPathTowardNearest ( class UClass* GoalClass, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	class AActor* FindPathToward ( class AActor* anActor, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	class AActor* FindPathTo ( struct FVector aPoint, int MaxPathLength, unsigned long bReturnPartial );
	void FinishRotation ( );
	void eventSetupSpecialPathAbilities ( );
	void MoveToward ( class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, unsigned long bUseStrafing, unsigned long bShouldWalk );
	void MoveToDirectNonPathPos ( struct FVector NewDestination, class AActor* ViewFocus, float DestinationOffset, unsigned long bShouldWalk );
	void MoveTo ( struct FVector NewDestination, class AActor* ViewFocus, float DestinationOffset, unsigned long bShouldWalk );
	void eventEnemyNotVisible ( );
	void eventSeeMonster ( class APawn* Seen );
	void eventSeePlayer ( class APawn* Seen );
	void eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FName NoiseType );
	class APawn* PickTarget ( class UClass* TargetClass, struct FVector FireDir, struct FVector projStart, float MaxRange, float* bestAim, float* bestDist );
	bool CanSeeByPoints ( struct FVector ViewLocation, struct FVector TestLocation, struct FRotator ViewRotation );
	bool CanSee ( class APawn* Other );
	bool LineOfSightTo ( class AActor* Other, struct FVector chkLocation, unsigned long bTryAlternateTargetLoc );
	void NotifyChangedWeapon ( class AWeapon* PrevWeapon, class AWeapon* NewWeapon );
	void ClientSwitchToBestWeapon ( unsigned long bForceNewWeapon );
	void SwitchToBestWeapon ( unsigned long bForceNewWeapon );
	void ReceiveProjectileWarning ( class AProjectile* Proj );
	void ReceiveWarning ( class APawn* shooter, float projSpeed, struct FVector FireDir );
	void InstantWarnTarget ( class AActor* InTarget, class AWeapon* FiredWeapon, struct FVector FireDir );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void HandlePickup ( class AInventory* Inv );
	void RoundHasEnded ( class AActor* EndRoundFocus );
	void eventStopFiring ( );
	bool FireWeaponAt ( class AActor* inActor );
	float eventRatePickup ( class AActor* PickupHolder, class UClass* inPickup );
	void WarnProjExplode ( class AProjectile* Proj );
	void NotifyProjLanded ( class AProjectile* Proj );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* damageTyp );
	void GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void SetCharacter ( struct FString inCharacter );
	void ServerGivePawn ( );
	void ServerRestartPlayer ( );
	unsigned char GetTeamNum ( );
	void InitPlayerReplicationInfo ( );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void EnemyJustTeleported ( );
	bool BeyondFogDistance ( struct FVector ViewPoint, struct FVector OtherPoint );
	void Restart ( unsigned long bVehicleTransition );
	void CleanupPRI ( );
	void eventDestroyed ( );
	void eventNotifyPostLanded ( );
	bool GamePlayEndedState ( );
	void PawnDied ( class APawn* inPawn );
	void eventUnPossess ( );
	void eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition );
	void OnPossess ( class USeqAct_Possess* inAction );
	void eventReplicatedEvent ( struct FName VarName );
	void ClientSetRotation ( struct FRotator NewRotation, unsigned long bResetCamera );
	void ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation );
	void Reset ( );
	void eventPostBeginPlay ( );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventNotifyPathChanged ( );
	struct FVector GetAdjustLocation ( );
	void SetAdjustLocation ( struct FVector NewLoc, unsigned long bAdjust, unsigned long bOffsetFromBase );
	struct FVector GetDestinationPosition ( );
	void SetDestinationPosition ( struct FVector Dest, unsigned long bOffsetFromBase );
	struct FVector GetFocalPoint ( );
	void SetFocalPoint ( struct FVector FP, unsigned long bOffsetFromBase );
	void RouteCache_RemoveIndex ( int InIndex, int Count );
	void RouteCache_RemoveItem ( class ANavigationPoint* Nav );
	void RouteCache_InsertItem ( class ANavigationPoint* Nav, int Idx );
	void RouteCache_AddItem ( class ANavigationPoint* Nav );
	void RouteCache_Empty ( );
	bool IsLocalController ( );
	bool IsLocalPlayerController ( );
};



// Class Engine.PlayerController ( Property size: 112 iter: 536) 
// Class name index: 5272 
// 0x02F8 (0x0724 - 0x042C)
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                           		// 0x042C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class ACamera*                                     PlayerCamera;                                     		// 0x0434 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      CameraClass;                                      		// 0x043C (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bFrozen : 1;                                      		// 0x0444 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPressedJump : 1;                                 		// 0x0444 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDoubleJump : 1;                                  		// 0x0444 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUpdatePosition : 1;                              		// 0x0444 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bUpdating : 1;                                    		// 0x0444 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bNeverSwitchOnPickup : 1;                         		// 0x0444 (0x0004) [0x0000000000044000] [0x00000020] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCheatFlying : 1;                                 		// 0x0444 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bCameraPositionLocked : 1;                        		// 0x0444 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bShortConnectTimeOut : 1;                         		// 0x0444 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bPendingDestroy : 1;                              		// 0x0444 (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bWasSpeedHack : 1;                                		// 0x0444 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bWasSaturated : 1;                                		// 0x0444 (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bAimingHelp : 1;                                  		// 0x0444 (0x0004) [0x0000000000044000] [0x00001000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCameraCut : 1;                                   		// 0x0444 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bClientSimulatingViewTarget : 1;                  		// 0x0444 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bHasVoiceHandshakeCompleted : 1;                  		// 0x0444 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bCinematicMode : 1;                               		// 0x0444 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bInteractiveMode : 1;                             		// 0x0444 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bCinemaDisableInputMove : 1;                      		// 0x0444 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bCinemaDisableInputLook : 1;                      		// 0x0444 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bIgnoreNetworkMessages : 1;                       		// 0x0444 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bShowKismetDrawText : 1;                          		// 0x0444 (0x0004) [0x0000000000004000] [0x00200000] ( CPF_Config )
	unsigned long                                      bReplicateAllPawns : 1;                           		// 0x0444 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bIsUsingStreamingVolumes : 1;                     		// 0x0444 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bIsExternalUIOpen : 1;                            		// 0x0444 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bIsControllerConnected : 1;                       		// 0x0444 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bCheckSoundOcclusion : 1;                         		// 0x0444 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bDebugCameraAnims : 1;                            		// 0x0444 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bBlockCameraAnimsFromOverridingPostProcess : 1;   		// 0x0444 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bLogHearSoundOverflow : 1;                        		// 0x0444 (0x0004) [0x0000000000044000] [0x20000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCheckRelevancyThroughPortals : 1;                		// 0x0444 (0x0004) [0x0000000000044000] [0x40000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bDebugClientAdjustPosition : 1;                   		// 0x0444 (0x0004) [0x0000000000000001] [0x80000000] ( CPF_Edit )
	float                                              MaxResponseTime;                                  		// 0x0448 (0x0004) [0x0000000000000000]              
	float                                              WaitDelay;                                        		// 0x044C (0x0004) [0x0000000000000000]              
	class APawn*                                       AcknowledgedPawn;                                 		// 0x0450 (0x0008) [0x0000000000000000]              
	unsigned char                                      DoubleClickDir;                                   		// 0x0458 (0x0001) [0x0000000000000000]              
	unsigned char                                      bIgnoreMoveInput;                                 		// 0x0459 (0x0001) [0x0000000000000000]              
	unsigned char                                      bIgnoreLookInput;                                 		// 0x045A (0x0001) [0x0000000000000000]              
	unsigned char                                      bRun;                                             		// 0x045B (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bDuck;                                            		// 0x045C (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      NetPlayerIndex;                                   		// 0x045D (0x0001) [0x0000000000200002]              ( CPF_Const )
	class AActor*                                      ViewTarget;                                       		// 0x0460 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class APlayerReplicationInfo*                      RealViewTarget;                                   		// 0x0468 (0x0008) [0x0000000000000000]              
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                          		// 0x0470 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UInterpTrackInstDirector*                    PreviousControllingDirTrackInst;                  		// 0x0478 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              FOVAngle;                                         		// 0x0480 (0x0004) [0x0000000000000000]              
	float                                              DesiredFOV;                                       		// 0x0484 (0x0004) [0x0000000000000000]              
	float                                              DefaultFOV;                                       		// 0x0488 (0x0004) [0x0000000000000000]              
	float                                              LODDistanceFactor;                                		// 0x048C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FRotator                                    TargetViewRotation;                               		// 0x0490 (0x000C) [0x0000000000000020]              ( CPF_Net )
	float                                              TargetEyeHeight;                                  		// 0x049C (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    BlendedTargetViewRotation;                        		// 0x04A0 (0x000C) [0x0000000000000000]              
	class AHUD*                                        myHUD;                                            		// 0x04AC (0x0008) [0x0000000000000000]              
	class AHUD*                                        mySecondaryHUD;                                   		// 0x04B4 (0x0008) [0x0000000000000000]              
	class UClass*                                      SavedMoveClass;                                   		// 0x04BC (0x0008) [0x0000000000000000]              
	class USavedMove*                                  SavedMoves;                                       		// 0x04C4 (0x0008) [0x0000000000000000]              
	class USavedMove*                                  FreeMoves;                                        		// 0x04CC (0x0008) [0x0000000000000000]              
	class USavedMove*                                  PendingMove;                                      		// 0x04D4 (0x0008) [0x0000000000000000]              
	struct FVector                                     LastAckedAccel;                                   		// 0x04DC (0x000C) [0x0000000000000000]              
	float                                              CurrentTimeStamp;                                 		// 0x04E8 (0x0004) [0x0000000000000000]              
	float                                              LastUpdateTime;                                   		// 0x04EC (0x0004) [0x0000000000000000]              
	float                                              ServerTimeStamp;                                  		// 0x04F0 (0x0004) [0x0000000000000000]              
	float                                              TimeMargin;                                       		// 0x04F4 (0x0004) [0x0000000000000000]              
	float                                              ClientUpdateTime;                                 		// 0x04F8 (0x0004) [0x0000000000000000]              
	float                                              MaxTimeMargin;                                    		// 0x04FC (0x0004) [0x0000000000000000]              
	float                                              LastActiveTime;                                   		// 0x0500 (0x0004) [0x0000000000000000]              
	int                                                ClientCap;                                        		// 0x0504 (0x0004) [0x0000000000000000]              
	float                                              DynamicPingThreshold;                             		// 0x0508 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              LastPingUpdate;                                   		// 0x050C (0x0004) [0x0000000000000000]              
	float                                              LastSpeedHackLog;                                 		// 0x0510 (0x0004) [0x0000000000000000]              
	struct FClientAdjustment                           PendingAdjustment;                                		// 0x0514 (0x0038) [0x0000000000000000]              
	int                                                GroundPitch;                                      		// 0x054C (0x0004) [0x0000000000000000]              
	class UCheatManager*                               CheatManager;                                     		// 0x0550 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UClass*                                      CheatClass;                                       		// 0x0558 (0x0008) [0x0000000000000000]              
	class UPlayerInput*                                PlayerInput;                                      		// 0x0560 (0x0008) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class UClass*                                      InputClass;                                       		// 0x0568 (0x0008) [0x0000000000000000]              
	struct FVector                                     FailedPathStart;                                  		// 0x0570 (0x000C) [0x0000000000000002]              ( CPF_Const )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x057C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FString                                     ForceFeedbackManagerClassName;                    		// 0x0584 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UForceFeedbackManager*                       ForceFeedbackManager;                             		// 0x0594 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UInteraction* >                      Interactions;                                     		// 0x059C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      VoiceMuteList;                                    		// 0x05AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      GameplayVoiceMuteList;                            		// 0x05BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      VoicePacketFilter;                                		// 0x05CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FConnectedPeerInfo >                ConnectedPeers;                                   		// 0x05DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      BestNextHostPeers;                                		// 0x05EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineGameSearch*                           MigratedSearchToJoin;                             		// 0x05FC (0x0008) [0x0000000000000000]              
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x0604 (0x0008) [0x0000000000000000]              
	class UOnlineVoiceInterface*                       VoiceInterface;                                   		// 0x060C (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0614 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UUIDataStore_OnlinePlayerData*               OnlinePlayerData;                                 		// 0x061C (0x0008) [0x0000000000000000]              
	float                                              InteractDistance;                                 		// 0x0624 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       DelayedJoinSessionName;                           		// 0x0628 (0x0008) [0x0000000000000000]              
	TArray< struct FInputMatchRequest >                InputRequests;                                    		// 0x0630 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LastBroadcastTime;                                		// 0x0640 (0x0004) [0x0000000000000000]              
	struct FString                                     LastBroadcastString[ 0x4 ];                       		// 0x0644 (0x0040) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             PendingMapChangeLevelNames;                       		// 0x0684 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ACoverReplicator*                            MyCoverReplicator;                                		// 0x0694 (0x0008) [0x0000000000000000]              
	TArray< struct FDebugTextInfo >                    DebugTextList;                                    		// 0x069C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              SpectatorCameraSpeed;                             		// 0x06AC (0x0004) [0x0000000000000000]              
	class UNetConnection*                              PendingSwapConnection;                            		// 0x06B0 (0x0008) [0x0000000000200002]              ( CPF_Const )
	float                                              MinRespawnDelay;                                  		// 0x06B8 (0x0004) [0x0000000000000000]              
	int                                                MaxConcurrentHearSounds;                          		// 0x06BC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< class UAudioComponent* >                   HearSoundActiveComponents;                        		// 0x06C0 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UAudioComponent* >                   HearSoundPoolComponents;                          		// 0x06D0 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class AActor* >                            HiddenActors;                                     		// 0x06E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              LastSpectatorStateSynchTime;                      		// 0x06F0 (0x0004) [0x0000000000000000]              
	struct FScriptDelegate                             __OnMissingPeersUnregistered__Delegate;           		// 0x06F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x06F8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __CanUnpause__Delegate;                           		// 0x0704 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0708 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __InputMatchDelegate__Delegate;                   		// 0x0714 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x0718 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 463 ];

		return pClassPointer;
	};

	void eventSetMatineeConstantCameraAnim ( unsigned long bOn, unsigned char Type, float Rate );
	bool eventNotifyDisconnect ( struct FString Command );
	void ReceivedGameClass ( class UClass* GameClass );
	void LogOutBugItAIGoToLogFile ( struct FString InScreenShotDesc, struct FString InGoString, struct FString InLocString );
	void LogOutBugItGoToLogFile ( struct FString InScreenShotDesc, struct FString InGoString, struct FString InLocString );
	void DisableDebugAI ( );
	void eventOnEngineInitialTick ( );
	void BugItStringCreator ( struct FVector* ViewLocation, struct FRotator* ViewRotation, struct FString* GoString, struct FString* LocString );
	void BugItAI ( struct FString ScreenShotDescription );
	void LogLoc ( );
	void BugIt ( struct FString ScreenShotDescription );
	void BugItWorker ( struct FVector TheLocation, struct FRotator TheRotation );
	void BugItGoString ( struct FString TheLocation, struct FString TheRotation );
	void BugItGo ( float X, float Y, float Z, int Pitch, int Yaw, int Roll );
	bool HasPeerConnection ( struct FUniqueNetId* PeerNetId );
	void OnSetSoundMode ( class USeqAct_SetSoundMode* Action );
	void eventClientSpawnCameraLensEffect ( class UClass* LensEffectEmitterClass );
	void DebugCameraAnims ( );
	void eventClientStopCameraAnim ( class UCameraAnim* AnimToStop, unsigned long bImmediate );
	void eventClientPlayCameraAnim ( class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, unsigned char Space, struct FRotator CustomPlaySpace );
	void OnCameraShake ( class USeqAct_CameraShake* inAction );
	void ClientStopCameraShake ( class UCameraShake* Shake );
	void ClientPlayCameraShake ( class UCameraShake* Shake, float Scale, unsigned long bTryForceFeedback, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot );
	void DoForceFeedbackForScreenShake ( class UCameraShake* ShakeData, float ShakeScale );
	void InputMatchDelegate ( );
	void Sentinel_PostAcquireTravelTheWorldPoints ( );
	void Sentinel_PreAcquireTravelTheWorldPoints ( );
	void Sentinel_SetupForGamebasedTravelTheWorld ( );
	void OnFlyThroughHasEnded ( class USeqAct_FlyThroughHasEnded* inAction );
	bool eventGetAchievementProgression ( int AchievementId, float* CurrentValue, float* MaxValue );
	struct FString GetPartyGameTypeName ( );
	struct FString GetPartyMapName ( );
	bool IsPartyLeader ( );
	void eventClientAddTextureStreamingLoc ( struct FVector InLoc, float Duration, unsigned long bOverrideLocation );
	void eventClientPrestreamTextures ( class AActor* ForcedActor, float ForceDuration, unsigned long bEnableStreaming, int CinematicTextureGroups );
	void eventClientSetForceMipLevelsToBeResident ( class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups );
	void ClientControlMovieTexture ( class UTextureMovie* MovieTexture, unsigned char Mode );
	int GetSplitscreenPlayerCount ( );
	class APlayerReplicationInfo* GetSplitscreenPlayerByIndex ( int PlayerIndex );
	bool IsSplitscreenPlayer ( int* out_SplitscreenPlayerIndex );
	bool IsPrimaryPlayer ( );
	void ServerNotifyPartyHostLeaving ( struct FUniqueNetId PartyHostPlayerId );
	void ClientNotifyPartyHostLeaving ( struct FUniqueNetId PartyHostPlayerId );
	void ClientReturnToParty ( struct FUniqueNetId RequestingPlayerId );
	void OnJoinTravelToSessionComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void PreJoinUpdateGameSettings ( struct FName SessionName, class UOnlineGameSettings* GameSettings );
	void ClientTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo );
	void PathClear ( );
	void PathChild ( int Cnt );
	void PathStep ( int Cnt );
	void eventSoakPause ( class APawn* P );
	void IncrementNumberOfMatchesPlayed ( );
	bool CanViewUserCreatedContent ( );
	void ClientEndOnlineGame ( );
	void ClientStartOnlineGame ( );
	void ServerRegisterClientStatGuid ( struct FString StatGuid );
	void OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful );
	void ClientRegisterHostStatGuid ( struct FString StatGuid );
	void eventRemoveAllDebugStrings ( );
	void eventRemoveDebugText ( class AActor* SrcActor );
	void eventAddDebugText ( struct FString DebugText, class AActor* SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, unsigned long bSkipOverwriteCheck, unsigned long bAbsoluteLocation, unsigned long bKeepAttachedToActor, class UFont* InFont );
	void DrawDebugTextList ( class UCanvas* Canvas, float RenderDelta );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void ClientStartNetworkedVoice ( );
	void ClientStopNetworkedVoice ( );
	void ClientSetHostUniqueId ( struct FUniqueNetId InHostId );
	void ClientWriteLeaderboardStats ( class UClass* OnlineStatsWriteClass, unsigned long bIsIncomplete );
	void ClientWriteOnlinePlayerScores ( int LeaderboardId );
	void ClientArbitratedMatchEnded ( );
	void NotifyNotEnoughSpaceInInvite ( );
	void NotifyNotAllPlayersCanJoinInvite ( );
	void NotifyInviteFailed ( );
	void OnInviteJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	struct FString ModifyClientURL ( struct FString URL );
	void OnDestroyForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnEndForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClearInviteDelegates ( );
	bool CanAllPlayersPlayOnline ( );
	bool InviteHasEnoughSpace ( class UOnlineGameSettings* InviteSettings );
	void OnGameInviteAccepted ( struct FOnlineGameSearchResult* InviteResult );
	void ServerRegisteredForArbitration ( unsigned long bWasSuccessful );
	void OnArbitrationRegisterComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClientRegisterForArbitration ( );
	void eventClientWasKicked ( );
	bool IsShowingSubtitles ( );
	void SetShowSubtitles ( unsigned long bValue );
	void eventNotifyDirectorControl ( unsigned long bNowControlling, class USeqAct_Interp* CurrentMatinee );
	void eventServerUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void eventServerMutePlayer ( struct FUniqueNetId PlayerNetId );
	void GameplayUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void GameplayMutePlayer ( struct FUniqueNetId PlayerNetId );
	void eventClientUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void eventClientMutePlayer ( struct FUniqueNetId PlayerNetId );
	void ClientVoiceHandshakeComplete ( );
	class APlayerController* GetPlayerControllerFromNetId ( struct FUniqueNetId PlayerNetId );
	void ClientSetOnlineStatus ( );
	void SeamlessTravelFrom ( class APlayerController* OldPC );
	void SeamlessTravelTo ( class APlayerController* NewPC );
	void eventGetSeamlessTravelActorList ( unsigned long bToEntry, TArray< class AActor* >* ActorList );
	bool IsPlayerMuted ( struct FUniqueNetId* Sender );
	class UUIInteraction* GetUIController ( );
	void SaveActorConfig ( struct FName actorName );
	void SaveClassConfig ( struct FString ClassName );
	void ClientWaitForLevelsVisible ( class USeqAct_WaitForLevelsVisible* inAction );
	void eventClientSetBlockOnAsyncLoading ( );
	void eventClientFlushLevelStreaming ( );
	void eventClientCancelPendingMapChange ( );
	void eventClientCommitMapChange ( );
	void DelayedPrepareMapChange ( );
	void eventClientPrepareMapChange ( struct FName LevelName, unsigned long bFirst, unsigned long bLast );
	void eventServerUpdateLevelVisibility ( struct FName PackageName, unsigned long bIsVisible );
	void ClientUpdateLevelStreamingStatus ( struct FName PackageName, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad );
	void eventLevelStreamingStatusChanged ( class ULevelStreaming* LevelObject, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad );
	void eventClientForceGarbageCollection ( );
	void OnConsoleCommand ( class USeqAct_ConsoleCommand* inAction );
	void ResetPlayerMovementInput ( );
	bool eventIsLookInputIgnored ( );
	void IgnoreLookInput ( unsigned long bNewLookInput );
	bool eventIsMoveInputIgnored ( );
	void IgnoreMoveInput ( unsigned long bNewMoveInput );
	void ClientSetCinematicMode ( unsigned long bInCinematicMode, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsHUD );
	void SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons );
	void OnToggleCinematicMode ( class USeqAct_ToggleCinematicMode* Action );
	bool IsForceFeedbackAllowed ( );
	void eventClientStopForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform );
	void eventClientPlayForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform, class AActor* FFWaveformInstigator );
	void eventPlayRumble ( class UAnimNotify_Rumble* TheAnimNotify );
	void OnForceFeedback ( class USeqAct_ForceFeedback* Action );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void ShowGameState ( );
	void ShowPlayerState ( );
	void ServerRemoteEvent ( struct FName EventName );
	void RE ( struct FName EventName );
	void RemoteEvent ( struct FName EventName );
	void ListCE ( );
	void ListConsoleEvents ( );
	void CE ( struct FName EventName );
	void CauseEvent ( struct FName EventName );
	void ServerCauseEvent ( struct FName EventName );
	void OnToggleHUD ( class USeqAct_ToggleHUD* inAction );
	void OnSetCameraTarget ( class USeqAct_SetCameraTarget* inAction );
	void ClientClearKismetText ( struct FVector2D MessageOffset );
	void ClientDrawKismetText ( struct FKismetDrawTextInfo DrawTextInfo, float DisplayTime );
	void OnDrawText ( class USeqAct_DrawText* inAction );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void ClientIgnoreLookInput ( unsigned long bIgnore );
	void ClientIgnoreMoveInput ( unsigned long bIgnore );
	void OnToggleInput ( class USeqAct_ToggleInput* inAction );
	void eventAdjustHUDRenderSize ( int FullScreenSizeX, int FullScreenSizeY, int* X, int* Y, int* SizeX, int* SizeY );
	void DrawHUD ( class AHUD* H );
	bool CanRestartPlayer ( );
	void ServerViewSelf ( struct FViewTargetTransitionParams TransitionParams );
	void ViewAPlayer ( int Dir );
	class APlayerReplicationInfo* GetNextViewablePlayer ( int Dir );
	void ServerViewPrevPlayer ( );
	void ServerViewNextPlayer ( );
	void ServerSetSpectatorLocation ( struct FVector NewLoc );
	bool IsSpectating ( );
	void AdjustPlayerWalkingMoveAccel ( struct FVector* newAccel );
	void CheckJumpOrDuck ( );
	struct FRotator eventLimitViewRotation ( struct FRotator ViewRotation, float ViewPitchMin, float ViewPitchMax );
	void ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation );
	void UpdateRotation ( float DeltaTime );
	void ViewShake ( float DeltaTime );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void eventSpawnPlayerCamera ( );
	void ServerVerifyViewTarget ( );
	class AActor* GetViewTarget ( );
	void eventClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams );
	void SetViewTargetWithBlend ( class AActor* NewViewTarget, float BlendTime, unsigned char BlendFunc, float BlendExp, unsigned long bLockOutgoing );
	void SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	bool IsLocalController ( );
	bool IsLocalPlayerController ( );
	float eventGetFOVAngle ( );
	void AdjustFOV ( float DeltaTime );
	bool eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor );
	float AimHelpDot ( unsigned long bInstantHit );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void eventCameraTransitionFinished ( );
	void eventCameraLookAtFinished ( class USeqAct_CameraLookAt* Action );
	bool AimingHelp ( unsigned long bInstantHit );
	void PlayerMove ( float DeltaTime );
	void eventPlayerTick ( float DeltaTime );
	void NotifyChangedWeapon ( class AWeapon* PreviousWeapon, class AWeapon* NewWeapon );
	void ClientGameEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void ClientRestart ( class APawn* NewPawn );
	void EnterStartState ( );
	void ForceSingleNetUpdateFor ( class AActor* Target );
	bool HasClientLoadedCurrentWorld ( );
	void eventNotifyLoadedWorld ( struct FName WorldPackageName, unsigned long bFinalDest );
	void eventServerNotifyLoadedWorld ( struct FName WorldPackageName );
	void Restart ( unsigned long bVehicleTransition );
	void eventClientSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title, unsigned long bIgnoreFutureNetworkMessages );
	void SwitchLevel ( struct FString URL );
	void ServerChangeTeam ( int N );
	void ChangeTeam ( struct FString TeamName );
	void SwitchTeam ( );
	void ServerChangeName ( struct FString S );
	void SetName ( struct FString S );
	void ServerSuicide ( );
	void Suicide ( );
	bool TriggerInteracted ( );
	bool FindVehicleToDrive ( );
	bool PerformedUseAction ( );
	void ServerUse ( );
	void Use ( );
	void GetTriggerUseList ( float interactDistanceToCheck, float crosshairDist, float minDot, unsigned long bUsuableOnly, TArray< class ATrigger* >* out_useList );
	void StopAltFire ( unsigned char FireModeNum );
	void StartAltFire ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void NextWeapon ( );
	void PrevWeapon ( );
	void ServerThrowWeapon ( );
	void ThrowWeapon ( );
	void UTrace ( );
	void ServerUTrace ( );
	void eventConditionalPause ( unsigned long bDesiredPauseState );
	void ServerPause ( );
	void Pause ( );
	bool IsPaused ( );
	bool SetPause ( unsigned long bPause, struct FScriptDelegate CanUnpauseDelegate );
	bool CanUnpause ( );
	void ClientPauseRumble ( unsigned long bShouldPauseRumble );
	void PauseRumbleForAllPlayers ( unsigned long bShouldPauseRumble );
	void LocalTravel ( struct FString URL );
	void RestartLevel ( );
	void ServerSpeech ( struct FName Type, int Index, struct FString Callsign );
	void Speech ( struct FName Type, int Index, struct FString Callsign );
	void ServerRestartGame ( );
	void HandleWalking ( );
	void ServerUpdateCamera ( struct FVector CamLoc, int CamPitchAndYaw );
	void CallServerMove ( class USavedMove* NewMove, struct FVector ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove );
	void ReplicateMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot );
	int CompressAccel ( int C );
	class USavedMove* GetFreeMove ( );
	void ClientUpdatePosition ( );
	void ClearAckedMoves ( );
	void ServerUpdatePing ( int NewPing );
	void UpdateStateFromAdjustment ( struct FName NewState );
	void LongClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ );
	bool SkipPositionUpdateForRM ( );
	void UpdatePing ( float TimeStamp );
	void ClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase );
	void ClientAckGoodMove ( float TimeStamp );
	void ClientCapBandwidth ( int Cap );
	void ShortClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase );
	void VeryShortClientAdjustPosition ( float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase );
	void MoveAutonomous ( float DeltaTime, unsigned char CompressedFlags, struct FVector newAccel, struct FRotator DeltaRot );
	void ProcessMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot );
	void ProcessDrive ( float InForward, float InStrafe, float InUp, unsigned long InJump );
	void ServerDrive ( float InForward, float InStrafe, float aUp, unsigned long InJump, int View );
	void eventSendClientAdjustment ( );
	void ServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View );
	void ServerMoveHandleClientError ( float TimeStamp, struct FVector Accel, struct FVector ClientLoc );
	float GetServerMoveDeltaTime ( float TimeStamp );
	void OldServerMove ( float OldTimeStamp, unsigned char OldAccelX, unsigned char OldAccelY, unsigned char OldAccelZ, unsigned char OldMoveFlags );
	void DualServerMove ( float TimeStamp0, struct FVector InAccel0, unsigned char PendingFlags, int View0, float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View );
	void ForceDeathUpdate ( );
	bool UsingFirstPersonCamera ( );
	void eventClientSetCameraFade ( unsigned long bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime, unsigned long bFadeAudio );
	void eventResetCameraMode ( );
	void SetCameraMode ( struct FName NewCamMode );
	void ClientSetCameraMode ( struct FName NewCamMode );
	void ServerCamera ( struct FName NewMode );
	void Camera ( struct FName NewMode );
	void eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	void ServerTeamSay ( struct FString msg );
	void TeamSay ( struct FString msg );
	void ClientAdminMessage ( struct FString msg );
	void ServerSay ( struct FString msg );
	void Say ( struct FString msg );
	bool AllowTextMessage ( struct FString msg );
	void ServerMutate ( struct FString MutateString );
	void Mutate ( struct FString MutateString );
	void FOV ( float F );
	void ResetFOV ( );
	void SetFOV ( float NewFOV );
	void FixFOV ( );
	void eventDestroyed ( );
	void CleanupPawn ( );
	void eventClearOnlineDelegates ( );
	void OnPartyMembersInfoChanged ( struct FString PlayerName, struct FUniqueNetId PlayerID, int CustomData1, int CustomData2, int CustomData3, int CustomData4 );
	void OnPartyMemberListChanged ( unsigned long bJoinedOrLeft, struct FString PlayerName, struct FUniqueNetId PlayerID );
	void RegisterOnlineDelegates ( );
	void PlayBeepSound ( );
	void eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type, float MsgLifeTime );
	void SpeakTTS ( struct FString S, class APlayerReplicationInfo* PRI );
	void TeamTalk ( );
	void Talk ( );
	class USoundCue* CreateTTSSoundCue ( struct FString StrToSpeak, class APlayerReplicationInfo* PRI );
	bool AllowTTSMessageFrom ( class APlayerReplicationInfo* PRI );
	bool CanCommunicate ( );
	void eventClientMessage ( struct FString S, struct FName Type, float MsgLifeTime );
	void ClientPlayActorFaceFXAnim ( class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay );
	void eventKismet_ClientStopSound ( class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime );
	void eventKismet_ClientPlaySound ( class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, unsigned long bSuppressSubtitles, unsigned long bSuppressSpatialization );
	bool IsClosestLocalPlayerToActor ( class AActor* TheActor );
	void eventWwiseClientHearSound ( class UAkEvent* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded );
	void eventClientHearSound ( class USoundCue* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded );
	class UAudioComponent* GetPooledAudioComponent ( class USoundCue* ASound, class AActor* SourceActor, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation );
	void HearSoundFinished ( class UAudioComponent* AC );
	void eventClientPlaySound ( class USoundCue* ASound );
	void eventReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void CleanupPRI ( );
	void HandlePickup ( class AInventory* Inv );
	void ClientSetSecondaryHUD ( class UClass* newHUDType );
	void ClientSetHUD ( class UClass* newHUDType );
	void PawnDied ( class APawn* P );
	void eventUnPossess ( );
	void ServerAcknowledgePossession ( class APawn* P );
	void AcknowledgePossession ( class APawn* P );
	void eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void GivePawn ( class APawn* NewPawn );
	void AskForPawn ( );
	void ClientGotoState ( struct FName NewState, struct FName NewLabel );
	void SetTiltActive ( unsigned long bActive );
	bool IsMouseAvailable ( );
	bool IsKeyboardAvailable ( );
	void SetUseTiltForwardAndBack ( unsigned long bActive );
	void SetOnlyUseControllerTiltInput ( unsigned long bActive );
	void SetControllerTiltActive ( unsigned long bActive );
	bool IsControllerTiltActive ( );
	void SetRumbleScale ( float ScaleBy );
	void ReloadProfileSettings ( );
	void UnregisterStandardPlayerDataStores ( );
	void UnregisterPlayerDataStores ( );
	void RegisterStandardPlayerDataStores ( );
	void RegisterCustomPlayerDataStores ( );
	void RegisterPlayerDataStores ( );
	void ClientInitializeDataStores ( );
	void eventInitInputSystem ( );
	class UOnlineSubsystem* GetOnlineSubsystem ( );
	void PostControllerIdChange ( );
	void PreControllerIdChange ( );
	void CleanOutSavedMoves ( );
	void ClientReset ( );
	void Reset ( );
	void SpawnDefaultHUD ( );
	void EnableCheats ( );
	void AddCheats ( unsigned long bForce );
	void eventKickWarning ( );
	void ServerGivePawn ( );
	void ServerShortTimeout ( );
	void ResetTimeMargin ( );
	void eventPreRender ( class UCanvas* Canvas );
	void OnJoinMigratedGame ( struct FName SessionName, unsigned long bWasSuccessful );
	void PeerDesignatedAsClient ( struct FName SessionName );
	void OnUnregisterPlayerCompleteForJoinMigrate ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful );
	void eventPeerReceivedMigratedSession ( struct FUniqueNetId FromPeerNetId, struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo );
	void TellPeerToTravelToSession ( struct FUniqueNetId ToPeerNetId, struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo, int PlatformSpecificInfoSize );
	void TellPeerToTravel ( struct FUniqueNetId ToPeerNetId );
	void PeerTravelAsHost ( float TravelCountdownTimer, struct FString URL );
	struct FString GetNewPeerHostURL ( );
	void PeerDesignatedAsHost ( struct FName SessionName );
	class UClass* GetCurrentSearchClass ( );
	void OnHostMigratedOnlineGame ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnUnregisterPlayerCompleteForHostMigrate ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful );
	bool RemoveMissingPeersFromSession ( struct FName SessionName, struct FScriptDelegate UnregisterDelegate );
	class APlayerReplicationInfo* GetPRIFromNetId ( struct FUniqueNetId PlayerID );
	void OnMissingPeersUnregistered ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful );
	void GetRegisteredPlayersInSession ( struct FName SessionName, TArray< struct FUniqueNetId >* OutRegisteredPlayers );
	void NotifyHostMigrationStarted ( );
	bool eventMigrateNewHost ( );
	bool IsBestHostPeer ( struct FUniqueNetId PeerNetId );
	void eventNotifyPeerDisconnectHost ( struct FUniqueNetId PeerNetId );
	void ClientUpdateBestNextHosts ( struct FUniqueNetId* SortedNextHosts, unsigned char NumEntries );
	void ServerRemovePeer ( struct FUniqueNetId PeerNetId );
	void ServerAddPeer ( struct FUniqueNetId PeerNetId, unsigned char NatType );
	void eventRemovePeer ( struct FUniqueNetId PeerNetId );
	void eventAddPeer ( struct FUniqueNetId PeerNetId, unsigned char NatType );
	int FindConnectedPeerIndex ( struct FUniqueNetId PeerNetId );
	void eventReceivedPlayer ( );
	void eventPostBeginPlay ( );
	class ACoverReplicator* SpawnCoverReplicator ( );
	bool CanUnpauseControllerConnected ( );
	void OnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	bool CanUnpauseExternalUI ( );
	void OnExternalUIChanged ( unsigned long bIsOpening );
	void ForceClearUnpauseDelegates ( );
	void DisableActorHeadTracking ( class AActor* TargetActor );
	void EnableActorHeadTracking ( class AActor* TargetActor, struct FName* TrackControllerName, class UClass** ActorClassesToLookAt, unsigned long bLookAtPawns, float MinLookAtTime, float MaxLookAtTime, float MaxInterestTime, float LookAtActorRadius, struct FName* TargetBoneNames );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void CleanUpAudioComponents ( );
	int FindStairRotation ( float DeltaTime );
	bool CheckSpeedHack ( float DeltaTime );
	void eventServerProcessConvolve ( struct FString C, int H );
	void eventClientConvolve ( struct FString C, int H );
	void SetAudioGroupVolume ( struct FName GroupName, float Volume );
	void SetAllowMatureLanguage ( unsigned long bAllowMatureLanguge );
	struct FString PasteFromClipboard ( );
	void CopyToClipboard ( struct FString Text );
	struct FString GetDefaultURL ( struct FString Option );
	void UpdateURL ( struct FString NewOption, struct FString NewValue, unsigned long bSave1Default );
	void eventClientTravel ( struct FString URL, unsigned char TravelType, unsigned long bSeamless, struct FGuid MapPackageGuid );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	struct FString GetServerNetworkAddress ( );
	struct FString GetPlayerNetworkAddress ( );
	void SetNetSpeed ( int NewSpeed );
};



// Class Engine.CheatManager ( Property size: 2 iter: 102) 
// Class name index: 5274 
// 0x0020 (0x0080 - 0x0060)
class UCheatManager : public UObject
{
public:
	struct FString                                     ViewingFrom;                                      		// 0x0060 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OwnCamera;                                        		// 0x0070 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 465 ];

		return pClassPointer;
	};

	void OnGoogleSubscriptionAddComplete ( struct FPlatformInterfaceDelegateResult* Result );
	void SubscribeToChairChannel ( );
	void OnGoogleSubscriptionsComplete ( struct FPlatformInterfaceDelegateResult* Result );
	void OnGoogleFriendsComplete ( struct FPlatformInterfaceDelegateResult* Result );
	void GoogleRevoke ( );
	void OnGoogleAuthComplete ( struct FPlatformInterfaceDelegateResult* Result );
	void GoogleAuth ( );
	void AnalyticsEndSession ( );
	void AnalyticsStartSession ( );
	void GetAnalyticsUserId ( );
	void SetAnalyticsUserId ( struct FString UserId );
	void SendAnalyticsCachedEvents ( );
	void SendAnalyticsCurrencyGivenEvent ( struct FString GameCurrencyType, int GameCurrencyAmount );
	void SendAnalyticsCurrencyPurchaseEvent ( struct FString GameCurrencyType, int GameCurrencyAmount, struct FString RealCurrencyType, float RealMoneyCost, struct FString PaymentProvider );
	void SendAnalyticsItemPurchaseEvent ( struct FString ItemId, struct FString Currency, int PerItemCost, int ItemQuantity );
	void SendAnalyticsUserAttributeEvent ( struct FString AttributeName, struct FString AttributeValue );
	void SendAnalyticsEvent ( struct FString EventName, struct FString AttributeName, struct FString AttributeValue );
	void OnRequestComplete ( class UHttpRequestInterface* OriginalRequest, class UHttpResponseInterface* Response, unsigned long bDidSucceed );
	void TestHttp ( struct FString Verb, struct FString Payload, struct FString URL, unsigned long bSendParallelRequest );
	void OnDeleteUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename );
	void DebugDeleteUserFile ( struct FString UserId, struct FString Filename );
	void OnReadUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename );
	void DebugReadUserFile ( struct FString UserId, struct FString Filename );
	void OnWriteUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename );
	void DebugWriteUserFile ( struct FString UserId, struct FString Filename );
	void OnEnumerateUserFilesComplete ( unsigned long bWasSuccessful, struct FString UserId );
	void DebugQueryUserFiles ( struct FString UserId );
	void OnReceivedLocalNotificationDebug ( unsigned long bWasAppActive, struct FNotificationInfo* Notification );
	void DebugNotification ( struct FString MessageBody, int SecondsFromNow );
	void DrawLocationXYZ ( float X, float Y, float Z );
	void DrawLocation ( struct FVector Loc );
	void DumpCoverStats ( );
	void DebugEmsDownload ( );
	void DebugDeleteTitleFiles ( );
	void OnSaveComplete ( unsigned long bWasSuccessful, struct FString Filename );
	void DebugSaveTitleFile ( struct FString Filename );
	void OnLoadComplete ( unsigned long bWasSuccessful, struct FString Filename );
	void OnDownloadComplete ( unsigned long bWasSuccessful, struct FString Filename );
	void DebugDownloadTitleFile ( struct FString Filename, unsigned long bFromCache );
	void DebugIniLocPatcher ( );
	void ToggleAILogging ( );
	void VerifyNavMeshCoverRefs ( );
	void PrintNavMeshObstacles ( );
	void PrintAllPathObjectEdges ( );
	void NavMeshVerification ( float interval );
	void DrawUnsupportingEdges ( struct FString PawnClassName );
	void VerifyNavMeshObjects ( );
	void LogParticleActivateSystemCalls ( unsigned long bShouldLog );
	void LogPlaySoundCalls ( unsigned long bShouldLog );
	void InitCheatManager ( );
	void VerbosePathDebug ( );
	void TestPylonConnectivity ( );
	void TestNavMeshPath ( unsigned long bDrawPath );
	void SetOnlineDebugLevel ( int DebugLevel );
	void TestLevel ( );
	void StreamLevelOut ( struct FName PackageName );
	void OnlyLoadLevel ( struct FName PackageName );
	void StreamLevelIn ( struct FName PackageName );
	void SetLevelStreamingStatus ( struct FName PackageName, unsigned long bShouldBeLoaded, unsigned long bShouldBeVisible );
	void AllWeapons ( );
	void Loaded ( );
	void ViewClass ( class UClass* aClass );
	void ViewBot ( );
	void ViewActor ( struct FName actorName );
	void ViewPlayer ( struct FString S );
	void ViewSelf ( unsigned long bQuiet );
	void RememberSpot ( );
	void FractureAllMeshesToMaximizeMemoryUsage ( );
	void FractureAllMeshes ( );
	void DestroyFractures ( float Radius );
	void SuspendAI ( );
	void PlayersOnly ( );
	class AWeapon* GiveWeapon ( struct FString WeaponClassStr );
	void Summon ( struct FString ClassName );
	void Avatar ( struct FName ClassName );
	void KillPawns ( );
	void KillAllPawns ( class UClass* aClass );
	void KillAll ( class UClass* aClass );
	void SetSpeed ( float F );
	void SetGravity ( float F );
	void SetJumpZ ( float F );
	void Slomo ( float T );
	void God ( );
	void AllAmmo ( );
	void Ghost ( );
	void Walk ( );
	void Fly ( );
	void Amphibious ( );
	void EndPath ( );
	void ChangeSize ( float F );
	void Teleport ( );
	void KillViewedActor ( );
	void WriteToLog ( struct FString Param );
	void FreezeFrame ( float Delay );
	void ListDynamicActors ( );
	void DebugPause ( );
	void EditAIByTrace ( );
	void DebugAI ( struct FName Category );
	void FXStop ( class UClass* aClass );
	void FXPlay ( class UClass* aClass, struct FString FXAnimPath );
};



// Class Engine.Client ( Property size: 4 iter: 4) 
// Class name index: 124 
// 0x0018 (0x0078 - 0x0060)
class UClient : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0060 (0x0008) MISSED OFFSET
	float                                              MinDesiredFrameRate;                              		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DisplayGamma;                                     		// 0x006C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InitialButtonRepeatDelay;                         		// 0x0070 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ButtonRepeatDelay;                                		// 0x0074 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 467 ];

		return pClassPointer;
	};

};



// Class Engine.ClipPadEntry ( Property size: 2 iter: 2) 
// Class name index: 5278 
// 0x0020 (0x0080 - 0x0060)
class UClipPadEntry : public UObject
{
public:
	struct FString                                     Title;                                            		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Text;                                             		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 473 ];

		return pClassPointer;
	};

};



// Class Engine.CloudSaveSystem ( Property size: 9 iter: 43) 
// Class name index: 5280 
// 0x0084 (0x00E4 - 0x0060)
class UCloudSaveSystem : public UObject
{
public:
	class UCloudSaveSystemKVSInterface*                KeyValueStore;                                    		// 0x0060 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0068 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UCloudSaveSystemDataBlobStoreInterface*      DataBlobStore;                                    		// 0x0070 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x0078 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< struct FGetSaveDataCallbackStruct >        OnGetSaveDataCallbacks;                           		// 0x0080 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FSetSaveDataCallbackStruct >        OnSetSaveDataCallbacks;                           		// 0x0090 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             DeleteSaveDataCallback;                           		// 0x00A0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x00A4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	int                                                ActiveSlotForDelete;                              		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FSaveSlotOperation >                ActiveSaveSlotOperations;                         		// 0x00B4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGetSaveDataCallback__Delegate;                		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x00C8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __SaveSystemCallback__Delegate;                   		// 0x00D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x00D8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 475 ];

		return pClassPointer;
	};

	bool GetKeyValue ( int SaveSlot, struct FString KeyName, unsigned char Type, struct FPlatformInterfaceDelegateResult* Value );
	bool GetDataStoreIDAndBlobNameForSaveSlot ( int SaveSlot, struct FString* DataStoreID, struct FString* DataBlobName );
	bool SetKeyValue ( int SaveSlot, struct FString KeyName, struct FPlatformInterfaceData* Value );
	bool InternalSetSaveSlotKeyValues ( int SaveSlot, struct FString DataStoreID, struct FString SaveDataBlobName );
	bool SetSaveSlotKeyValues ( struct FString DataStoreID, struct FString SaveDataBlobName, int* SaveSlot );
	void OnDeleteSaveDataComplete ( unsigned long bWasSucessfull, struct FString StorageID, struct FString BlobName, struct FString Error );
	bool DeleteSaveData ( int SaveSlot, struct FScriptDelegate InDeleteSaveDataCallback );
	void OnSetSaveDataComplete ( unsigned long bWasSucessfull, struct FString StorageID, struct FString BlobName, struct FString Error );
	void SetSaveData ( int SaveSlot, struct FScriptDelegate InSetSaveDataCallback, TArray< unsigned char >* SaveDataBlob );
	void OnGetSaveDataComplete ( unsigned long bWasSuccessful, struct FString StorageID, struct FString BlobName, struct FString Error, TArray< unsigned char >* DataBlob );
	void GetSaveData ( int SaveSlot, struct FScriptDelegate OnGetSaveDataCallback );
	void Init ( class UCloudSaveSystemKVSInterface* InKeyValueStore, class UCloudSaveSystemDataBlobStoreInterface* InDataBlobStore, int VersionNumber );
	class UObject* DeserializeObject ( class UClass* ObjectClass, unsigned char VersionSupport, int DataVersion, TArray< unsigned char >* Data );
	void SerializeObject ( class UObject* ObjectToSerialize, int DataVersion, TArray< unsigned char >* Data );
	bool AreAnySlotOperationsActive ( );
	bool IsDeleteOperationActive ( );
	bool IsOperationActiveForSlot ( int SlotIndex );
	bool WriteNumSaveSlots ( int NumSaveSlots );
	int DoesSaveSlotKeyValueDataAlreadyExist ( struct FString DataStoreID, struct FString DataBlobName );
	bool GetNumberOfSaveSlots ( int* NumSaveSlots );
	void SaveSystemCallback ( unsigned long bWasSuccessful, int SaveSlot, struct FString Error );
	void OnGetSaveDataCallback ( unsigned long bWasSuccessful, int SaveSlot, struct FString Error, TArray< unsigned char >* DataBlob );
};



// Class Engine.CodecMovie ( Property size: 1 iter: 1) 
// Class name index: 5282 
// 0x0004 (0x0064 - 0x0060)
class UCodecMovie : public UObject
{
public:
	float                                              PlaybackDuration;                                 		// 0x0060 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 477 ];

		return pClassPointer;
	};

};



// Class Engine.CodecMovieBink ( Property size: 0 iter: 0) 
// Class name index: 5284 
// 0x0038 (0x009C - 0x0064)
class UCodecMovieBink : public UCodecMovie
{
public:
//	 LastOffset: 64
//	 Class Propsize: 9c
	unsigned char                                      UnknownData00[ 0x38 ];                            		// 0x0064 (0x0038) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 479 ];

		return pClassPointer;
	};

};



// Class Engine.CodecMovieFallback ( Property size: 1 iter: 1) 
// Class name index: 5286 
// 0x0004 (0x0068 - 0x0064)
class UCodecMovieFallback : public UCodecMovie
{
public:
	float                                              CurrentTime;                                      		// 0x0064 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 481 ];

		return pClassPointer;
	};

};



// Class Engine.CurveEdPresetCurve ( Property size: 2 iter: 3) 
// Class name index: 5288 
// 0x0020 (0x0080 - 0x0060)
class UCurveEdPresetCurve : public UObject
{
public:
	struct FString                                     CurveName;                                        		// 0x0060 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FPresetGeneratedPoint >             Points;                                           		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 483 ];

		return pClassPointer;
	};

};



// Class Engine.CustomPropertyItemHandler ( Property size: 0 iter: 0) 
// Class name index: 5290 
// 0x0000 (0x0060 - 0x0060)
class UCustomPropertyItemHandler : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 485 ];

		return pClassPointer;
	};

};



// Class Engine.DamageType ( Property size: 14 iter: 15) 
// Class name index: 5292 
// 0x0030 (0x0090 - 0x0060)
class UDamageType : public UObject
{
public:
	unsigned long                                      bArmorStops : 1;                                  		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCausedByWorld : 1;                               		// 0x0060 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bExtraMomentumZ : 1;                              		// 0x0060 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCausesFracture : 1;                              		// 0x0060 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRadialDamageVelChange : 1;                       		// 0x0060 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              KDamageImpulse;                                   		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KDeathVel;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KDeathUpKick;                                     		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialDamageImpulse;                              		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VehicleDamageScaling;                             		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              VehicleMomentumScaling;                           		// 0x0078 (0x0004) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      DamagedFFWaveform;                                		// 0x007C (0x0008) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      KilledFFWaveform;                                 		// 0x0084 (0x0008) [0x0000000000000000]              
	float                                              FracturedMeshDamage;                              		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 487 ];

		return pClassPointer;
	};

	float VehicleDamageScalingFor ( class AVehicle* V );
};



// Class Engine.KillZDamageType ( Property size: 0 iter: 0) 
// Class name index: 5294 
// 0x0000 (0x0090 - 0x0090)
class UKillZDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 489 ];

		return pClassPointer;
	};

};



// Class Engine.DistributionFloatConstant ( Property size: 1 iter: 1) 
// Class name index: 5296 
// 0x0004 (0x0080 - 0x007C)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                         		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 491 ];

		return pClassPointer;
	};

};



// Class Engine.DistributionFloatParameterBase ( Property size: 6 iter: 7) 
// Class name index: 5298 
// 0x0019 (0x0099 - 0x0080)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                    		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinInput;                                         		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInput;                                         		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinOutput;                                        		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxOutput;                                        		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParamMode;                                        		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 493 ];

		return pClassPointer;
	};

};



// Class Engine.DistributionFloatConstantCurve ( Property size: 1 iter: 1) 
// Class name index: 5300 
// 0x0014 (0x0090 - 0x007C)
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                    		// 0x007C (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 495 ];

		return pClassPointer;
	};

};



// Class Engine.DistributionFloatUniform ( Property size: 2 iter: 2) 
// Class name index: 5302 
// 0x0008 (0x0084 - 0x007C)
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                              		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Max;                                              		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 497 ];

		return pClassPointer;
	};

};



// Class Engine.DistributionFloatUniformCurve ( Property size: 1 iter: 1) 
// Class name index: 5304 
// 0x0014 (0x0090 - 0x007C)
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                    		// 0x007C (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 499 ];

		return pClassPointer;
	};

};



// Class Engine.DistributionFloatUniformRange ( Property size: 5 iter: 5) 
// Class name index: 5306 
// 0x0014 (0x0090 - 0x007C)
class UDistributionFloatUniformRange : public UDistributionFloat
{
public:
	float                                              MaxHigh;                                          		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxLow;                                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinHigh;                                          		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinLow;                                           		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMirrorMaxMin : 1;                                		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 501 ];

		return pClassPointer;
	};

};



// Class Engine.DistributionVectorConstant ( Property size: 3 iter: 3) 
// Class name index: 5308 
// 0x0011 (0x008D - 0x007C)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                         		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLockAxes : 1;                                    		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      LockedAxes;                                       		// 0x008C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 503 ];

		return pClassPointer;
	};

};



// Class Engine.DistributionVectorParameterBase ( Property size: 6 iter: 6) 
// Class name index: 5310 
// 0x003E (0x00CB - 0x008D)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	struct FName                                       ParameterName;                                    		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinInput;                                         		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxInput;                                         		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinOutput;                                        		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxOutput;                                        		// 0x00BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParamModes[ 0x3 ];                                		// 0x00C8 (0x0003) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 505 ];

		return pClassPointer;
	};

};



// Class Engine.DistributionVectorConstantCurve ( Property size: 3 iter: 3) 
// Class name index: 5312 
// 0x0019 (0x0095 - 0x007C)
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                    		// 0x007C (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bLockAxes : 1;                                    		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      LockedAxes;                                       		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 507 ];

		return pClassPointer;
	};

};



// Class Engine.DistributionVectorUniform ( Property size: 6 iter: 6) 
// Class name index: 5314 
// 0x0020 (0x009C - 0x007C)
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                              		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Min;                                              		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLockAxes : 1;                                    		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseExtremes : 1;                                 		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      LockedAxes;                                       		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MirrorFlags[ 0x3 ];                               		// 0x0099 (0x0003) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 509 ];

		return pClassPointer;
	};

};



// Class Engine.DistributionVectorUniformCurve ( Property size: 6 iter: 6) 
// Class name index: 5316 
// 0x001D (0x0099 - 0x007C)
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                    		// 0x007C (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bLockAxes1 : 1;                                   		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLockAxes2 : 1;                                   		// 0x0090 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseExtremes : 1;                                 		// 0x0090 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      LockedAxes[ 0x2 ];                                		// 0x0094 (0x0002) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MirrorFlags[ 0x3 ];                               		// 0x0096 (0x0003) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 511 ];

		return pClassPointer;
	};

};



// Class Engine.DistributionVectorUniformRange ( Property size: 4 iter: 4) 
// Class name index: 5318 
// 0x0030 (0x00AC - 0x007C)
class UDistributionVectorUniformRange : public UDistributionVector
{
public:
	struct FVector                                     MaxHigh;                                          		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxLow;                                           		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinHigh;                                          		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinLow;                                           		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 513 ];

		return pClassPointer;
	};

};



// Class Engine.Download ( Property size: 0 iter: 0) 
// Class name index: 5320 
// 0x0A44 (0x0AA4 - 0x0060)
class UDownload : public UObject
{
public:
//	 LastOffset: 60
//	 Class Propsize: aa4
	unsigned char                                      UnknownData00[ 0xA44 ];                           		// 0x0060 (0x0A44) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 515 ];

		return pClassPointer;
	};

};



// Class Engine.ChannelDownload ( Property size: 0 iter: 0) 
// Class name index: 5322 
// 0x0008 (0x0AAC - 0x0AA4)
class UChannelDownload : public UDownload
{
public:
//	 LastOffset: aa4
//	 Class Propsize: aac
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0AA4 (0x0008) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 517 ];

		return pClassPointer;
	};

};



// Class Engine.EdCoordSystem ( Property size: 2 iter: 2) 
// Class name index: 5324 
// 0x0050 (0x00B0 - 0x0060)
class UEdCoordSystem : public UObject
{
public:
	struct FMatrix                                     M;                                                		// 0x0060 (0x0040) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Desc;                                             		// 0x00A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 519 ];

		return pClassPointer;
	};

};



// Class Engine.EditorLinkSelectionInterface ( Property size: 0 iter: 0) 
// Class name index: 5326 
// 0x0000 (0x0060 - 0x0060)
class UEditorLinkSelectionInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 521 ];

		return pClassPointer;
	};

};



// Class Engine.EngineTypes ( Property size: 0 iter: 29) 
// Class name index: 5328 
// 0x0000 (0x0060 - 0x0060)
class UEngineTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 523 ];

		return pClassPointer;
	};

};



// Class Engine.FaceFXAnimSet ( Property size: 7 iter: 7) 
// Class name index: 5330 
// 0x0054 (0x00B4 - 0x0060)
class UFaceFXAnimSet : public UObject
{
public:
	class UFaceFXAsset*                                DefaultFaceFXAsset;                               		// 0x0060 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    InternalFaceFXAnimSet;                            		// 0x0068 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXAnimSetBytes;                            		// 0x0070 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXMiniSessionBytes;                        		// 0x0080 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class USoundCue* >                         ReferencedSoundCues;                              		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UAkEvent* >                          ReferencedAkEvents;                               		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumLoadErrors;                                    		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 525 ];

		return pClassPointer;
	};

};



// Class Engine.FaceFXAsset ( Property size: 9 iter: 11) 
// Class name index: 5332 
// 0x0074 (0x00D4 - 0x0060)
class UFaceFXAsset : public UObject
{
public:
	class USkeletalMesh*                               DefaultSkelMesh;                                  		// 0x0060 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    FaceFXActor;                                      		// 0x0068 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXActorBytes;                              		// 0x0070 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< unsigned char >                            RawFaceFXSessionBytes;                            		// 0x0080 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UMorphTargetSet* >                   PreviewMorphSets;                                 		// 0x0090 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UFaceFXAnimSet* >                    MountedFaceFXAnimSets;                            		// 0x00A0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class USoundCue* >                         ReferencedSoundCues;                              		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UAkEvent* >                          ReferencedAkEvents;                               		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumLoadErrors;                                    		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 527 ];

		return pClassPointer;
	};

	void UnmountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet );
	void MountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet );
};



// Class Engine.Font ( Property size: 13 iter: 20) 
// Class name index: 5334 
// 0x0140 (0x01A0 - 0x0060)
class UFont : public UObject
{
public:
	TArray< struct FFontCharacter >                    Characters;                                       		// 0x0060 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UTexture2D* >                        Textures;                                         		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0080 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.Font.CharRemap
	int                                                IsRemapped;                                       		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              EmScale;                                          		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Ascent;                                           		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Descent;                                          		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Leading;                                          		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Kerning;                                          		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FFontImportOptionsData                      ImportOptions;                                    		// 0x00E0 (0x00A8) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                NumCharacters;                                    		// 0x0188 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      MaxCharHeight;                                    		// 0x018C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              ScalingFactor;                                    		// 0x019C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 529 ];

		return pClassPointer;
	};

	void GetStringHeightAndWidth ( struct FString* InString, int* Height, int* Width );
	float GetMaxCharHeight ( );
	float GetAuthoredViewportHeight ( float ViewportHeight );
	float GetScalingFactor ( float HeightTest );
	int GetResolutionPageIndex ( float HeightTest );
};



// Class Engine.MultiFont ( Property size: 1 iter: 2) 
// Class name index: 5336 
// 0x0010 (0x01B0 - 0x01A0)
class UMultiFont : public UFont
{
public:
	TArray< float >                                    ResolutionTestTable;                              		// 0x01A0 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 531 ];

		return pClassPointer;
	};

	int GetResolutionTestTableIndex ( float HeightTest );
};



// Class Engine.FontImportOptions ( Property size: 1 iter: 3) 
// Class name index: 5338 
// 0x00A8 (0x0108 - 0x0060)
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                             		// 0x0060 (0x00A8) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 533 ];

		return pClassPointer;
	};

};



// Class Engine.ForceFeedbackManager ( Property size: 7 iter: 10) 
// Class name index: 5340 
// 0x0020 (0x0080 - 0x0060)
class UForceFeedbackManager : public UObject
{
public:
	unsigned long                                      bAllowsForceFeedback : 1;                         		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsPaused : 1;                                    		// 0x0060 (0x0004) [0x0000000000000000] [0x00000002] 
	class UForceFeedbackWaveform*                      FFWaveform;                                       		// 0x0064 (0x0008) [0x0000000000000000]              
	int                                                CurrentSample;                                    		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              ElapsedTime;                                      		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              ScaleAllWaveformsBy;                              		// 0x0074 (0x0004) [0x0000000000000000]              
	class AActor*                                      WaveformInstigator;                               		// 0x0078 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 535 ];

		return pClassPointer;
	};

	void PauseWaveform ( unsigned long bPause );
	void StopForceFeedbackWaveform ( class UForceFeedbackWaveform* WaveForm );
	void PlayForceFeedbackWaveform ( class UForceFeedbackWaveform* WaveForm, class AActor* WaveInstigator );
};



// Class Engine.ForceFeedbackWaveform ( Property size: 4 iter: 6) 
// Class name index: 5342 
// 0x001C (0x007C - 0x0060)
class UForceFeedbackWaveform : public UObject
{
public:
	unsigned long                                      bIsLooping : 1;                                   		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FWaveformSample >                   Samples;                                          		// 0x0064 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              WaveformFalloffStartDistance;                     		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxWaveformDistance;                              		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 537 ];

		return pClassPointer;
	};

};



// Class Engine.GameplayEvents ( Property size: 13 iter: 28) 
// Class name index: 5344 
// 0x0160 (0x01C0 - 0x0060)
class UGameplayEvents : public UObject
{
public:
	struct FPointer                                    Archive;                                          		// 0x0060 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FString                                     StatsFileName;                                    		// 0x0068 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FGameplayEventsHeader                       Header;                                           		// 0x0078 (0x0030) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FGameSessionInformation                     CurrentSessionInfo;                               		// 0x00A8 (0x0088) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPlayerInformation >                PlayerList;                                       		// 0x0130 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FTeamInformation >                  TeamList;                                         		// 0x0140 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FGameplayEventMetaData >            SupportedEvents;                                  		// 0x0150 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FWeaponClassEventData >             WeaponClassArray;                                 		// 0x0160 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FDamageClassEventData >             DamageClassArray;                                 		// 0x0170 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FProjectileClassEventData >         ProjectileClassArray;                             		// 0x0180 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPawnClassEventData >               PawnClassArray;                                   		// 0x0190 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ActorArray;                                       		// 0x01A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           SoundCueArray;                                    		// 0x01B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 539 ];

		return pClassPointer;
	};

	struct FString eventGetFilename ( );
	void CloseStatsFile ( );
	bool OpenStatsFile ( struct FString Filename );
};



// Class Engine.GameplayEventsReader ( Property size: 1 iter: 16) 
// Class name index: 5346 
// 0x0010 (0x01D0 - 0x01C0)
class UGameplayEventsReader : public UGameplayEvents
{
public:
	TArray< class UGameplayEventsHandler* >            RegisteredHandlers;                               		// 0x01C0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 541 ];

		return pClassPointer;
	};

	float GetSessionDuration ( );
	float GetSessionEnd ( );
	float GetSessionStart ( );
	struct FString GetSessionTimestamp ( );
	int GetPlatform ( );
	int GetTitleID ( );
	struct FString GetSessionID ( );
	void ProcessStreamEnd ( );
	void ProcessStream ( );
	void ProcessStreamStart ( );
	void eventUnregisterHandler ( class UGameplayEventsHandler* ExistingHandler );
	void eventRegisterHandler ( class UGameplayEventsHandler* NewHandler );
	bool SerializeHeader ( );
	void CloseStatsFile ( );
	bool OpenStatsFile ( struct FString Filename );
};



// Class Engine.GameplayEventsWriterBase ( Property size: 1 iter: 71) 
// Class name index: 5348 
// 0x0008 (0x01C8 - 0x01C0)
class UGameplayEventsWriterBase : public UGameplayEvents
{
public:
	class AGameInfo*                                   Game;                                             		// 0x01C0 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 543 ];

		return pClassPointer;
	};

	int RecordCoverLinkFireLinks ( class ACoverLink* Link, class AController* Player );
	void RecordAIPathFail ( class AController* AI, struct FString Reason, struct FVector Dest );
	void LogSystemPollEvents ( );
	void LogProjectileIntEvent ( int EventID, class AController* Player, class UClass* Proj, int Value );
	void LogDamageEvent ( int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount );
	void LogWeaponIntEvent ( int EventID, class AController* Player, class UClass* WeaponClass, int Value );
	void LogPlayerPlayerEvent ( int EventID, class AController* Player, class AController* Target );
	void LogPlayerKillDeath ( int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead );
	void LogAllPlayerPositionsEvent ( int EventID );
	void LogPlayerLoginChange ( int EventID, class AController* Player, struct FString PlayerName, struct FUniqueNetId PlayerID, unsigned long bSplitScreen );
	void LogPlayerSpawnEvent ( int EventID, class AController* Player, class UClass* PawnClass, int TeamID );
	void LogPlayerStringEvent ( int EventID, class AController* Player, struct FString EventString );
	void LogPlayerFloatEvent ( int EventID, class AController* Player, float Value );
	void LogPlayerIntEvent ( int EventID, class AController* Player, int Value );
	void LogTeamStringEvent ( int EventID, class ATeamInfo* Team, struct FString Value );
	void LogTeamFloatEvent ( int EventID, class ATeamInfo* Team, float Value );
	void LogTeamIntEvent ( int EventID, class ATeamInfo* Team, int Value );
	void LogGamePositionEvent ( int EventID, float Value, struct FVector* Position );
	void LogGameFloatEvent ( int EventID, float Value );
	void LogGameStringEvent ( int EventID, struct FString Value );
	void LogGameIntEvent ( int EventID, int Value );
	void EndLogging ( );
	void ResetLogging ( float HeartbeatDelta );
	void StartLogging ( float HeartbeatDelta );
	int eventGetPlaylistId ( );
	int eventGetGameTypeId ( );
	void Poll ( );
	void eventStopPolling ( );
	void eventStartPolling ( float HearbeatDelta );
	bool IsSessionInProgress ( );
};



// Class Engine.GameplayEventsUploadAnalytics ( Property size: 0 iter: 24) 
// Class name index: 5350 
// 0x0000 (0x01C8 - 0x01C8)
class UGameplayEventsUploadAnalytics : public UGameplayEventsWriterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 545 ];

		return pClassPointer;
	};

	int RecordCoverLinkFireLinks ( class ACoverLink* Link, class AController* Player );
	void RecordAIPathFail ( class AController* AI, struct FString Reason, struct FVector Dest );
	class UGenericParamListStatEntry* GetGenericParamListEntry ( );
	void LogProjectileIntEvent ( int EventID, class AController* Player, class UClass* Proj, int Value );
	void LogDamageEvent ( int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount );
	void LogWeaponIntEvent ( int EventID, class AController* Player, class UClass* WeaponClass, int Value );
	void LogPlayerPlayerEvent ( int EventID, class AController* Player, class AController* Target );
	void LogPlayerKillDeath ( int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead );
	void LogAllPlayerPositionsEvent ( int EventID );
	void LogPlayerLoginChange ( int EventID, class AController* Player, struct FString PlayerName, struct FUniqueNetId PlayerID, unsigned long bSplitScreen );
	void LogPlayerSpawnEvent ( int EventID, class AController* Player, class UClass* PawnClass, int TeamID );
	void LogPlayerStringEvent ( int EventID, class AController* Player, struct FString EventString );
	void LogPlayerFloatEvent ( int EventID, class AController* Player, float Value );
	void LogPlayerIntEvent ( int EventID, class AController* Player, int Value );
	void LogTeamStringEvent ( int EventID, class ATeamInfo* Team, struct FString Value );
	void LogTeamFloatEvent ( int EventID, class ATeamInfo* Team, float Value );
	void LogTeamIntEvent ( int EventID, class ATeamInfo* Team, int Value );
	void LogGamePositionEvent ( int EventID, float Value, struct FVector* Position );
	void LogGameFloatEvent ( int EventID, float Value );
	void LogGameStringEvent ( int EventID, struct FString Value );
	void LogGameIntEvent ( int EventID, int Value );
	void EndLogging ( );
	void ResetLogging ( float HeartbeatDelta );
	void StartLogging ( float HeartbeatDelta );
};



// Class Engine.GameplayEventsWriter ( Property size: 0 iter: 30) 
// Class name index: 5352 
// 0x0000 (0x01C8 - 0x01C8)
class UGameplayEventsWriter : public UGameplayEventsWriterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 547 ];

		return pClassPointer;
	};

	int RecordCoverLinkFireLinks ( class ACoverLink* Link, class AController* Player );
	void RecordAIPathFail ( class AController* AI, struct FString Reason, struct FVector Dest );
	class UGenericParamListStatEntry* GetGenericParamListEntry ( );
	void LogSystemPollEvents ( );
	void LogProjectileIntEvent ( int EventID, class AController* Player, class UClass* Proj, int Value );
	void LogDamageEvent ( int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount );
	void LogWeaponIntEvent ( int EventID, class AController* Player, class UClass* WeaponClass, int Value );
	void LogPlayerPlayerEvent ( int EventID, class AController* Player, class AController* Target );
	void LogPlayerKillDeath ( int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead );
	void LogAllPlayerPositionsEvent ( int EventID );
	void LogPlayerLoginChange ( int EventID, class AController* Player, struct FString PlayerName, struct FUniqueNetId PlayerID, unsigned long bSplitScreen );
	void LogPlayerSpawnEvent ( int EventID, class AController* Player, class UClass* PawnClass, int TeamID );
	void LogPlayerStringEvent ( int EventID, class AController* Player, struct FString EventString );
	void LogPlayerFloatEvent ( int EventID, class AController* Player, float Value );
	void LogPlayerIntEvent ( int EventID, class AController* Player, int Value );
	void LogTeamStringEvent ( int EventID, class ATeamInfo* Team, struct FString Value );
	void LogTeamFloatEvent ( int EventID, class ATeamInfo* Team, float Value );
	void LogTeamIntEvent ( int EventID, class ATeamInfo* Team, int Value );
	void LogGamePositionEvent ( int EventID, float Value, struct FVector* Position );
	void LogGameFloatEvent ( int EventID, float Value );
	void LogGameStringEvent ( int EventID, struct FString Value );
	void LogGameIntEvent ( int EventID, int Value );
	void EndLogging ( );
	void ResetLogging ( float HeartbeatDelta );
	void StartLogging ( float HeartbeatDelta );
	bool SerializeFooter ( );
	bool SerializeHeader ( );
	void CloseStatsFile ( );
	bool OpenStatsFile ( struct FString Filename );
	int ResolvePlayerIndex ( class AController* Player );
};



// Class Engine.GameplayEventsHandler ( Property size: 3 iter: 9) 
// Class name index: 5354 
// 0x0028 (0x0088 - 0x0060)
class UGameplayEventsHandler : public UObject
{
public:
	TArray< int >                                      EventIDFilter;                                    		// 0x0060 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FGameStatGroup >                    GroupFilter;                                      		// 0x0070 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UGameplayEventsReader*                       Reader;                                           		// 0x0080 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 549 ];

		return pClassPointer;
	};

	void RemoveFilter ( int EventID );
	void AddFilter ( int EventID );
	void eventResolveGroupFilters ( );
	void eventPostProcessStream ( );
	void eventPreProcessStream ( );
	void SetReader ( class UGameplayEventsReader* NewReader );
};



// Class Engine.GenericParamListStatEntry ( Property size: 2 iter: 11) 
// Class name index: 5356 
// 0x0010 (0x0070 - 0x0060)
class UGenericParamListStatEntry : public UObject
{
public:
	struct FPointer                                    StatEvent;                                        		// 0x0060 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UGameplayEventsWriter*                       Writer;                                           		// 0x0068 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 551 ];

		return pClassPointer;
	};

	void CommitToDisk ( );
	bool GetString ( struct FName ParamName, struct FString* out_string );
	bool GetVector ( struct FName ParamName, struct FVector* out_vector );
	bool GetInt ( struct FName ParamName, int* out_int );
	bool GetFloat ( struct FName ParamName, float* out_Float );
	void AddString ( struct FName ParamName, struct FString Value );
	void AddVector ( struct FName ParamName, struct FVector Value );
	void AddInt ( struct FName ParamName, int Value );
	void AddFloat ( struct FName ParamName, float Value );
};



// Class Engine.GuidCache ( Property size: 0 iter: 0) 
// Class name index: 5358 
// 0x0058 (0x00B8 - 0x0060)
class UGuidCache : public UObject
{
public:
//	 LastOffset: 60
//	 Class Propsize: b8
	unsigned char                                      UnknownData00[ 0x58 ];                            		// 0x0060 (0x0058) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 553 ];

		return pClassPointer;
	};

};



// Class Engine.H7LightmassEnvironmentSphereInterface ( Property size: 0 iter: 2) 
// Class name index: 5360 
// 0x0000 (0x0060 - 0x0060)
class UH7LightmassEnvironmentSphereInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 555 ];

		return pClassPointer;
	};

	bool GetLightmassData ( struct FH7LightmassEnvironmentSphereData* Data );
};



// Class Engine.HttpBaseInterface ( Property size: 0 iter: 7) 
// Class name index: 5362 
// 0x0000 (0x0060 - 0x0060)
class UHttpBaseInterface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 557 ];

		return pClassPointer;
	};

	void GetContent ( TArray< unsigned char >* Content );
	struct FString GetURL ( );
	int GetContentLength ( );
	struct FString GetContentType ( );
	struct FString GetURLParameter ( struct FString ParameterName );
	TArray< struct FString > GetHeaders ( );
	struct FString GetHeader ( struct FString HeaderName );
};



// Class Engine.HttpRequestInterface ( Property size: 1 iter: 10) 
// Class name index: 5364 
// 0x0010 (0x0070 - 0x0060)
class UHttpRequestInterface : public UHttpBaseInterface
{
public:
	struct FScriptDelegate                             __OnProcessRequestComplete__Delegate;             		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0064 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 559 ];

		return pClassPointer;
	};

	class UHttpRequestInterface* SetProcessRequestCompleteDelegate ( struct FScriptDelegate ProcessRequestCompleteDelegate );
	void OnProcessRequestComplete ( class UHttpRequestInterface* OriginalRequest, class UHttpResponseInterface* InHttpResponse, unsigned long bDidSucceed );
	bool ProcessRequest ( );
	class UHttpRequestInterface* SetHeader ( struct FString HeaderName, struct FString HeaderValue );
	class UHttpRequestInterface* SetContentAsString ( struct FString ContentString );
	class UHttpRequestInterface* SetContent ( TArray< unsigned char >* ContentPayload );
	class UHttpRequestInterface* SetURL ( struct FString URL );
	class UHttpRequestInterface* SetVerb ( struct FString Verb );
	struct FString GetVerb ( );
};



// Class Engine.HttpResponseInterface ( Property size: 0 iter: 2) 
// Class name index: 5366 
// 0x0000 (0x0060 - 0x0060)
class UHttpResponseInterface : public UHttpBaseInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 561 ];

		return pClassPointer;
	};

	struct FString GetContentAsString ( );
	int GetResponseCode ( );
};



// Class Engine.IniLocPatcher ( Property size: 8 iter: 26) 
// Class name index: 5368 
// 0x0068 (0x00C8 - 0x0060)
class UIniLocPatcher : public UObject
{
public:
	TArray< struct FIniLocFileEntry >                  Files;                                            		// 0x0060 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bRequestEmsFileList : 1;                          		// 0x0070 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	int                                                MaxCachedFileAge;                                 		// 0x0074 (0x0004) [0x0000000000004000]              ( CPF_Config )
	class UOnlineTitleFileInterface*                   TitleFileInterface;                               		// 0x0078 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0080 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineTitleFileCacheInterface*              TitleFileCacheInterface;                          		// 0x0088 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x0090 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< struct FScriptDelegate >                   ReadTitleFileCompleteDelegates;                   		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadTitleFileComplete__Delegate;              		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x00AC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnAllTitleFilesCompleted__Delegate;             		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x00BC (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 563 ];

		return pClassPointer;
	};

	struct FString UpdateLocFileName ( struct FString Filename );
	void ClearCachedFiles ( );
	void ClearReadFileDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	void AddReadFileDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	void AddFileToDownload ( struct FString Filename );
	void ProcessIniLocFile ( struct FString Filename, unsigned long bIsUnicode, TArray< unsigned char >* FileData );
	void CheckForAllFilesComplete ( );
	void TriggerDownloadCompleteDelegates ( unsigned long bSuccess, struct FString Filename );
	void OnFileCacheSaveComplete ( unsigned long bWasSuccessful, struct FString Filename );
	void OnFileCacheLoadComplete ( unsigned long bWasSuccessful, struct FString Filename );
	void OnDownloadFileComplete ( unsigned long bWasSuccessful, struct FString Filename );
	void StartLoadingFiles ( );
	void OnRequestTitleFileListComplete ( unsigned long bWasSuccessful, struct FString ResultStr );
	void DownloadFiles ( );
	void Init ( );
	void OnAllTitleFilesCompleted ( );
	void OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename );
};



// Class Engine.Interface_NavigationHandle ( Property size: 0 iter: 1) 
// Class name index: 5370 
// 0x0000 (0x0060 - 0x0060)
class UInterface_NavigationHandle : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 565 ];

		return pClassPointer;
	};

	void eventNotifyPathChanged ( );
};



// Class Engine.Interface_Speaker ( Property size: 0 iter: 1) 
// Class name index: 5372 
// 0x0000 (0x0060 - 0x0060)
class UInterface_Speaker : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 567 ];

		return pClassPointer;
	};

	void eventSpeak ( class USoundCue* Cue );
};



// Class Engine.InterpCurveEdSetup ( Property size: 2 iter: 4) 
// Class name index: 5374 
// 0x0014 (0x0074 - 0x0060)
class UInterpCurveEdSetup : public UObject
{
public:
	TArray< struct FCurveEdTab >                       Tabs;                                             		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ActiveTab;                                        		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 569 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrack ( Property size: 17 iter: 20) 
// Class name index: 5376 
// 0x0060 (0x00C0 - 0x0060)
class UInterpTrack : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;                  		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    CurveEdVTable;                                    		// 0x0068 (0x0008) [0x0000000000801000]              ( CPF_Native | CPF_NoExport )
	TArray< class UInterpTrack* >                      SubTracks;                                        		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSubTrackGroup >                    SubTrackGroups;                                   		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSupportedSubTrackInfo >            SupportedSubTracks;                               		// 0x0090 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      TrackInstClass;                                   		// 0x00A0 (0x0008) [0x0000000000000000]              
	unsigned char                                      ActiveCondition;                                  		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     TrackTitle;                                       		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bOnePerGroup : 1;                                 		// 0x00BC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDirGroupOnly : 1;                                		// 0x00BC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDisableTrack : 1;                                		// 0x00BC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsAnimControlTrack : 1;                          		// 0x00BC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSubTrackOnly : 1;                                		// 0x00BC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bVisible : 1;                                     		// 0x00BC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsSelected : 1;                                  		// 0x00BC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bIsRecording : 1;                                 		// 0x00BC (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bIsCollapsed : 1;                                 		// 0x00BC (0x0004) [0x0000000000000000] [0x00000100] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 571 ];

		return pClassPointer;
	};

};



// Class Engine.JsonObject ( Property size: 4 iter: 17) 
// Class name index: 5378 
// 0x00B0 (0x0110 - 0x0060)
class UJsonObject : public UObject
{
public:
	struct FMap_Mirror                                 ValueMap;                                         		// 0x0060 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 ObjectMap;                                        		// 0x00A8 (0x0048) [0x0000000000001000]              ( CPF_Native )
	TArray< struct FString >                           ValueArray;                                       		// 0x00F0 (0x0010) [0x0000000000001000]              ( CPF_Native )
	TArray< class UJsonObject* >                       ObjectArray;                                      		// 0x0100 (0x0010) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 573 ];

		return pClassPointer;
	};

	class UJsonObject* DecodeJson ( struct FString Str );
	struct FString EncodeJson ( class UJsonObject* Root );
	void SetBoolValue ( struct FString Key, unsigned long Value );
	void SetFloatValue ( struct FString Key, float Value );
	void SetIntValue ( struct FString Key, int Value );
	void SetStringValue ( struct FString Key, struct FString Value );
	void SetObject ( struct FString Key, class UJsonObject* Object );
	bool GetBoolValue ( struct FString Key );
	float GetFloatValue ( struct FString Key );
	int GetIntValue ( struct FString Key );
	bool HasKey ( struct FString Key );
	struct FString GetStringValue ( struct FString Key );
	class UJsonObject* GetObject ( struct FString Key );
};



// Class Engine.KMeshProps ( Property size: 2 iter: 7) 
// Class name index: 5380 
// 0x0058 (0x00B8 - 0x0060)
class UKMeshProps : public UObject
{
public:
	struct FVector                                     COMNudge;                                         		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FKAggregateGeom                             AggGeom;                                          		// 0x006C (0x004C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 575 ];

		return pClassPointer;
	};

};



// Class Engine.LevelBase ( Property size: 0 iter: 0) 
// Class name index: 5382 
// 0x0070 (0x00D0 - 0x0060)
class ULevelBase : public UObject
{
public:
//	 LastOffset: 60
//	 Class Propsize: d0
	unsigned char                                      UnknownData00[ 0x70 ];                            		// 0x0060 (0x0070) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 577 ];

		return pClassPointer;
	};

};



// Class Engine.Level ( Property size: 2 iter: 2) 
// Class name index: 5384 
// 0x03E0 (0x04B0 - 0x00D0)
class ULevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData00[ 0x108 ];                           		// 0x00D0 (0x0108) MISSED OFFSET
	float                                              LightmapTotalSize;                                		// 0x01D8 (0x0004) [0x0000000000020002]              ( CPF_Const | CPF_EditConst )
	float                                              ShadowmapTotalSize;                               		// 0x01DC (0x0004) [0x0000000000020002]              ( CPF_Const | CPF_EditConst )
//	 LastOffset: 1e0
//	 Class Propsize: 4b0
	unsigned char                                      UnknownData01[ 0x2D0 ];                           		// 0x01E0 (0x02D0) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 579 ];

		return pClassPointer;
	};

};



// Class Engine.PendingLevel ( Property size: 0 iter: 0) 
// Class name index: 5388 
// 0x004C (0x011C - 0x00D0)
class UPendingLevel : public ULevelBase
{
public:
//	 LastOffset: d0
//	 Class Propsize: 11c
	unsigned char                                      UnknownData00[ 0x4C ];                            		// 0x00D0 (0x004C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 583 ];

		return pClassPointer;
	};

};



// Class Engine.DemoPlayPendingLevel ( Property size: 0 iter: 0) 
// Class name index: 5390 
// 0x0000 (0x011C - 0x011C)
class UDemoPlayPendingLevel : public UPendingLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 585 ];

		return pClassPointer;
	};

};



// Class Engine.NetPendingLevel ( Property size: 0 iter: 0) 
// Class name index: 5392 
// 0x0000 (0x011C - 0x011C)
class UNetPendingLevel : public UPendingLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 587 ];

		return pClassPointer;
	};

};



// Class Engine.LevelStreaming ( Property size: 25 iter: 25) 
// Class name index: 5394 
// 0x00B0 (0x0110 - 0x0060)
class ULevelStreaming : public UObject
{
public:
	struct FName                                       PackageName;                                      		// 0x0060 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class ULevel*                                      LoadedLevel;                                      		// 0x0068 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     Offset;                                           		// 0x0070 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x007C (0x0004) MISSED OFFSET
	struct FMatrix                                     LevelTransform;                                   		// 0x0080 (0x0040) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     OldOffset;                                        		// 0x00C0 (0x000C) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIsVisible : 1;                                   		// 0x00CC (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasLoadRequestPending : 1;                       		// 0x00CC (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasUnloadRequestPending : 1;                     		// 0x00CC (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBeVisibleInEditor : 1;                     		// 0x00CC (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBoundingBoxVisible : 1;                          		// 0x00CC (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bLocked : 1;                                      		// 0x00CC (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsFullyStatic : 1;                               		// 0x00CC (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsSurviving : 1;                                 		// 0x00CC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bShouldBeLoaded : 1;                              		// 0x00CC (0x0004) [0x0000000000002002] [0x00000100] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBeVisible : 1;                             		// 0x00CC (0x0004) [0x0000000000002002] [0x00000200] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x00CC (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bDrawOnLevelStatusMap : 1;                        		// 0x00CC (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bIsRequestingUnloadAndRemoval : 1;                		// 0x00CC (0x0004) [0x0000000000002002] [0x00001000] ( CPF_Const | CPF_Transient )
	struct FColor                                      DrawColor;                                        		// 0x00D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class ALevelStreamingVolume* >             EditorStreamingVolumes;                           		// 0x00D4 (0x0010) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	float                                              MinTimeBetweenVolumeUnloadRequests;               		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastVolumeUnloadRequestTime;                      		// 0x00E8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FString >                           Keywords;                                         		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ALevelGridVolume*                            EditorGridVolume;                                 		// 0x00FC (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                GridPosition[ 0x3 ];                              		// 0x0104 (0x000C) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 589 ];

		return pClassPointer;
	};

};



// Class Engine.LevelStreamingAlwaysLoaded ( Property size: 1 iter: 1) 
// Class name index: 5396 
// 0x0004 (0x0114 - 0x0110)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:
	unsigned long                                      bIsProceduralBuildingLODLevel : 1;                		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 591 ];

		return pClassPointer;
	};

};



// Class Engine.LevelStreamingDistance ( Property size: 2 iter: 2) 
// Class name index: 5398 
// 0x0010 (0x0120 - 0x0110)
class ULevelStreamingDistance : public ULevelStreaming
{
public:
	struct FVector                                     Origin;                                           		// 0x0110 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistance;                                      		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 593 ];

		return pClassPointer;
	};

};



// Class Engine.LevelStreamingKismet ( Property size: 0 iter: 0) 
// Class name index: 5400 
// 0x0000 (0x0110 - 0x0110)
class ULevelStreamingKismet : public ULevelStreaming
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 595 ];

		return pClassPointer;
	};

};



// Class Engine.LevelStreamingPersistent ( Property size: 0 iter: 0) 
// Class name index: 5402 
// 0x0000 (0x0110 - 0x0110)
class ULevelStreamingPersistent : public ULevelStreaming
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 597 ];

		return pClassPointer;
	};

};



// Class Engine.LightmappedSurfaceCollection ( Property size: 2 iter: 2) 
// Class name index: 5404 
// 0x0018 (0x0078 - 0x0060)
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                      SourceModel;                                      		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< int >                                      Surfaces;                                         		// 0x0068 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 599 ];

		return pClassPointer;
	};

};



// Class Engine.LightmassLevelSettings ( Property size: 13 iter: 13) 
// Class name index: 5406 
// 0x0030 (0x0090 - 0x0060)
class ULightmassLevelSettings : public UObject
{
public:
	int                                                NumIndirectLightingBounces;                       		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      EnvironmentColor;                                 		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnvironmentIntensity;                             		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmissiveBoost;                                    		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DiffuseBoost;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpecularBoost;                                    		// 0x0074 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseAmbientOcclusion : 1;                         		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bVisualizeAmbientOcclusion : 1;                   		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              DirectIlluminationOcclusionFraction;              		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IndirectIlluminationOcclusionFraction;            		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionExponent;                                		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FullyOccludedSamplesFraction;                     		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxOcclusionDistance;                             		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 601 ];

		return pClassPointer;
	};

};



// Class Engine.LightmassPrimitiveSettingsObject ( Property size: 1 iter: 1) 
// Class name index: 5408 
// 0x001C (0x007C - 0x0060)
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                		// 0x0060 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 603 ];

		return pClassPointer;
	};

};



// Class Engine.MapInfo ( Property size: 0 iter: 0) 
// Class name index: 5410 
// 0x0000 (0x0060 - 0x0060)
class UMapInfo : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 605 ];

		return pClassPointer;
	};

};



// Class Engine.Model ( Property size: 0 iter: 0) 
// Class name index: 5412 
// 0x0C18 (0x0C78 - 0x0060)
class UModel : public UObject
{
public:
//	 LastOffset: 60
//	 Class Propsize: c78
	unsigned char                                      UnknownData00[ 0xC18 ];                           		// 0x0060 (0x0C18) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 607 ];

		return pClassPointer;
	};

};



// Class Engine.MusicTrackDataStructures ( Property size: 0 iter: 1) 
// Class name index: 5414 
// 0x0000 (0x0060 - 0x0060)
class UMusicTrackDataStructures : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 609 ];

		return pClassPointer;
	};

};



// Class Engine.NavigationMeshBase ( Property size: 0 iter: 0) 
// Class name index: 5416 
// 0x0310 (0x0370 - 0x0060)
class UNavigationMeshBase : public UObject
{
public:
//	 LastOffset: 60
//	 Class Propsize: 370
	unsigned char                                      UnknownData00[ 0x310 ];                           		// 0x0060 (0x0310) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 611 ];

		return pClassPointer;
	};

};



// Class Engine.NetDriver ( Property size: 16 iter: 16) 
// Class name index: 5418 
// 0x0188 (0x01F0 - 0x0068)
class UNetDriver : public USubsystem
{
public:
	unsigned char                                      UnknownData00[ 0x34 ];                            		// 0x0068 (0x0034) MISSED OFFSET
	float                                              ConnectionTimeout;                                		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InitialConnectTimeout;                            		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              KeepAliveTime;                                    		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RelevantTimeout;                                  		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SpawnPrioritySeconds;                             		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ServerTravelPause;                                		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxClientRate;                                    		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxInternetClientRate;                            		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NetServerMaxTickRate;                             		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bClampListenServerTickRate : 1;                   		// 0x00C0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      AllowDownloads : 1;                               		// 0x00C4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      AllowPeerConnections : 1;                         		// 0x00C8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      AllowPeerVoice : 1;                               		// 0x00CC (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned char                                      UnknownData01[ 0x20 ];                            		// 0x00D0 (0x0020) MISSED OFFSET
	int                                                MaxDownloadSize;                                  		// 0x00F0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FString >                           DownloadManagers;                                 		// 0x00F4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x9C ];                            		// 0x0104 (0x009C) MISSED OFFSET
	struct FString                                     NetConnectionClassName;                           		// 0x01A0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
//	 LastOffset: 1b0
//	 Class Propsize: 1f0
	unsigned char                                      UnknownData03[ 0x40 ];                            		// 0x01B0 (0x0040) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 613 ];

		return pClassPointer;
	};

};



// Class Engine.DemoRecDriver ( Property size: 4 iter: 4) 
// Class name index: 5422 
// 0x00E8 (0x02D8 - 0x01F0)
class UDemoRecDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData00[ 0x2C ];                            		// 0x01F0 (0x002C) MISSED OFFSET
	struct FString                                     DemoSpectatorClass;                               		// 0x021C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x98 ];                            		// 0x022C (0x0098) MISSED OFFSET
	int                                                MaxRewindPoints;                                  		// 0x02C4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x02C8 (0x0004) MISSED OFFSET
	float                                              RewindPointInterval;                              		// 0x02CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NumRecentRewindPoints;                            		// 0x02D0 (0x0004) [0x0000000000004000]              ( CPF_Config )
//	 LastOffset: 2d4
//	 Class Propsize: 2d8
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x02D4 (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 632 ];

		return pClassPointer;
	};

};



// Class Engine.ObjectReferencer ( Property size: 1 iter: 1) 
// Class name index: 5425 
// 0x0010 (0x0070 - 0x0060)
class UObjectReferencer : public UObject
{
public:
	TArray< class UObject* >                           ReferencedObjects;                                		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 638 ];

		return pClassPointer;
	};

};



// Class Engine.OnlineAuthInterface ( Property size: 0 iter: 66) 
// Class name index: 5427 
// 0x0000 (0x0060 - 0x0060)
class UOnlineAuthInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 640 ];

		return pClassPointer;
	};

	bool GetServerAddr ( int* OutServerIP, int* OutServerPort );
	bool GetServerUniqueId ( struct FUniqueNetId* OutServerUID );
	bool FindLocalServerAuthSession ( class UPlayer* ClientConnection, struct FLocalAuthSession* OutSessionInfo );
	bool FindServerAuthSession ( class UPlayer* ServerConnection, struct FAuthSession* OutSessionInfo );
	bool FindLocalClientAuthSession ( class UPlayer* ServerConnection, struct FLocalAuthSession* OutSessionInfo );
	bool FindClientAuthSession ( class UPlayer* ClientConnection, struct FAuthSession* OutSessionInfo );
	void AllLocalServerAuthSessions ( struct FLocalAuthSession* OutSessionInfo );
	void AllServerAuthSessions ( struct FAuthSession* OutSessionInfo );
	void AllLocalClientAuthSessions ( struct FLocalAuthSession* OutSessionInfo );
	void AllClientAuthSessions ( struct FAuthSession* OutSessionInfo );
	void EndAllRemoteServerAuthSessions ( );
	void EndAllLocalServerAuthSessions ( );
	void EndRemoteServerAuthSession ( struct FUniqueNetId ServerUID, int ServerIP );
	void EndLocalServerAuthSession ( struct FUniqueNetId ClientUID, int ClientIP );
	bool VerifyServerAuthSession ( struct FUniqueNetId ServerUID, int ServerIP, int AuthTicketUID );
	bool CreateServerAuthSession ( struct FUniqueNetId ClientUID, int ClientIP, int ClientPort, int* OutAuthTicketUID );
	void EndAllRemoteClientAuthSessions ( );
	void EndAllLocalClientAuthSessions ( );
	void EndRemoteClientAuthSession ( struct FUniqueNetId ClientUID, int ClientIP );
	void EndLocalClientAuthSession ( struct FUniqueNetId ServerUID, int ServerIP, int ServerPort );
	bool VerifyClientAuthSession ( struct FUniqueNetId ClientUID, int ClientIP, int ClientPort, int AuthTicketUID );
	bool CreateClientAuthSession ( struct FUniqueNetId ServerUID, int ServerIP, int ServerPort, unsigned long bSecure, int* OutAuthTicketUID );
	bool SendServerAuthRetryRequest ( );
	bool SendClientAuthEndSessionRequest ( class UPlayer* ClientConnection );
	bool SendServerAuthResponse ( class UPlayer* ClientConnection, int AuthTicketUID );
	bool SendClientAuthResponse ( int AuthTicketUID );
	bool SendServerAuthRequest ( struct FUniqueNetId ServerUID );
	bool SendClientAuthRequest ( class UPlayer* ClientConnection, struct FUniqueNetId ClientUID );
	void ClearServerConnectionCloseDelegate ( struct FScriptDelegate ServerConnectionCloseDelegate );
	void AddServerConnectionCloseDelegate ( struct FScriptDelegate ServerConnectionCloseDelegate );
	void OnServerConnectionClose ( class UPlayer* ServerConnection );
	void ClearClientConnectionCloseDelegate ( struct FScriptDelegate ClientConnectionCloseDelegate );
	void AddClientConnectionCloseDelegate ( struct FScriptDelegate ClientConnectionCloseDelegate );
	void OnClientConnectionClose ( class UPlayer* ClientConnection );
	void ClearServerAuthRetryRequestDelegate ( struct FScriptDelegate ServerAuthRetryRequestDelegate );
	void AddServerAuthRetryRequestDelegate ( struct FScriptDelegate ServerAuthRetryRequestDelegate );
	void OnServerAuthRetryRequest ( class UPlayer* ClientConnection );
	void ClearClientAuthEndSessionRequestDelegate ( struct FScriptDelegate ClientAuthEndSessionRequestDelegate );
	void AddClientAuthEndSessionRequestDelegate ( struct FScriptDelegate ClientAuthEndSessionRequestDelegate );
	void OnClientAuthEndSessionRequest ( class UPlayer* ServerConnection );
	void ClearServerAuthCompleteDelegate ( struct FScriptDelegate ServerAuthCompleteDelegate );
	void AddServerAuthCompleteDelegate ( struct FScriptDelegate ServerAuthCompleteDelegate );
	void OnServerAuthComplete ( unsigned long bSuccess, struct FUniqueNetId ServerUID, class UPlayer* ServerConnection, struct FString ExtraInfo );
	void ClearClientAuthCompleteDelegate ( struct FScriptDelegate ClientAuthCompleteDelegate );
	void AddClientAuthCompleteDelegate ( struct FScriptDelegate ClientAuthCompleteDelegate );
	void OnClientAuthComplete ( unsigned long bSuccess, struct FUniqueNetId ClientUID, class UPlayer* ClientConnection, struct FString ExtraInfo );
	void ClearServerAuthResponseDelegate ( struct FScriptDelegate ServerAuthResponseDelegate );
	void AddServerAuthResponseDelegate ( struct FScriptDelegate ServerAuthResponseDelegate );
	void OnServerAuthResponse ( struct FUniqueNetId ServerUID, int ServerIP, int AuthTicketUID );
	void ClearClientAuthResponseDelegate ( struct FScriptDelegate ClientAuthResponseDelegate );
	void AddClientAuthResponseDelegate ( struct FScriptDelegate ClientAuthResponseDelegate );
	void OnClientAuthResponse ( struct FUniqueNetId ClientUID, int ClientIP, int AuthTicketUID );
	void ClearServerAuthRequestDelegate ( struct FScriptDelegate ServerAuthRequestDelegate );
	void AddServerAuthRequestDelegate ( struct FScriptDelegate ServerAuthRequestDelegate );
	void OnServerAuthRequest ( class UPlayer* ClientConnection, struct FUniqueNetId ClientUID, int ClientIP, int ClientPort );
	void ClearClientAuthRequestDelegate ( struct FScriptDelegate ClientAuthRequestDelegate );
	void AddClientAuthRequestDelegate ( struct FScriptDelegate ClientAuthRequestDelegate );
	void OnClientAuthRequest ( struct FUniqueNetId ServerUID, int ServerIP, int ServerPort, unsigned long bSecure );
	void ClearAuthReadyDelegate ( struct FScriptDelegate AuthReadyDelegate );
	void AddAuthReadyDelegate ( struct FScriptDelegate AuthReadyDelegate );
	void OnAuthReady ( );
	bool IsReady ( );
};



// Class Engine.OnlineMatchmakingStats ( Property size: 0 iter: 3) 
// Class name index: 5429 
// 0x0000 (0x0060 - 0x0060)
class UOnlineMatchmakingStats : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 642 ];

		return pClassPointer;
	};

	void StopTimer ( struct FMMStats_Timer* Timer );
	void StartTimer ( struct FMMStats_Timer* Timer );
};



// Class Engine.OnlinePlayerStorage ( Property size: 7 iter: 42) 
// Class name index: 5431 
// 0x0034 (0x0094 - 0x0060)
class UOnlinePlayerStorage : public UObject
{
public:
	int                                                VersionNumber;                                    		// 0x0060 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                VersionSettingsId;                                		// 0x0064 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SaveCountSettingId;                               		// 0x0068 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FOnlineProfileSetting >             ProfileSettings;                                  		// 0x006C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSettingsPropertyPropertyMetaData > ProfileMappings;                                  		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      AsyncState;                                       		// 0x008C (0x0001) [0x0000000000000002]              ( CPF_Const )
	int                                                DeviceID;                                         		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 644 ];

		return pClassPointer;
	};

	void SetDefaultVersionNumber ( );
	int GetVersionNumber ( );
	void AppendVersionToSettings ( );
	void eventSetToDefaults ( );
	void AddSettingFloat ( int SettingId );
	void AddSettingInt ( int SettingId );
	bool GetRangedProfileSettingValue ( int ProfileId, float* OutValue );
	bool SetRangedProfileSettingValue ( int ProfileId, float NewValue );
	bool GetProfileSettingRange ( int ProfileId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt );
	bool GetProfileSettingMappingIds ( int ProfileId, TArray< int >* Ids );
	bool GetProfileSettingMappingType ( int ProfileId, unsigned char* OutType );
	bool SetProfileSettingValueFloat ( int ProfileSettingId, float Value );
	bool SetProfileSettingValueInt ( int ProfileSettingId, int Value );
	bool SetProfileSettingValueId ( int ProfileSettingId, int Value );
	bool GetProfileSettingValueFloat ( int ProfileSettingId, float* Value );
	bool GetProfileSettingValueInt ( int ProfileSettingId, int* Value );
	bool GetProfileSettingValueFromListIndex ( int ProfileSettingId, int ListIndex, int* Value );
	bool GetProfileSettingValueId ( int ProfileSettingId, int* ValueId, int* ListIndex );
	bool SetProfileSettingValue ( int ProfileSettingId, struct FString* NewValue );
	bool SetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* NewValue );
	bool GetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* Value );
	bool GetProfileSettingValues ( int ProfileSettingId, TArray< struct FName >* Values );
	struct FName GetProfileSettingValueName ( int ProfileSettingId );
	bool GetProfileSettingValue ( int ProfileSettingId, int ValueMapID, struct FString* Value );
	bool IsProfileSettingIdMapped ( int ProfileSettingId );
	int FindDefaultProfileMappingIndexByName ( struct FName ProfileSettingName );
	int FindProfileMappingIndexByName ( struct FName ProfileSettingName );
	int FindProfileMappingIndex ( int ProfileSettingId );
	int FindProfileSettingIndex ( int ProfileSettingId );
	struct FString GetProfileSettingColumnHeader ( int ProfileSettingId );
	struct FName GetProfileSettingName ( int ProfileSettingId );
	bool GetProfileSettingId ( struct FName ProfileSettingName, int* ProfileSettingId );
};



// Class Engine.OnlineProfileSettings ( Property size: 3 iter: 25) 
// Class name index: 5433 
// 0x0030 (0x00C4 - 0x0094)
class UOnlineProfileSettings : public UOnlinePlayerStorage
{
public:
	TArray< int >                                      ProfileSettingIds;                                		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FOnlineProfileSetting >             DefaultSettings;                                  		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FIdToStringMapping >                OwnerMappings;                                    		// 0x00B4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 646 ];

		return pClassPointer;
	};

	void eventModifyAvailableProfileSettings ( );
	void AppendVersionToReadIds ( );
	void eventSetToDefaults ( );
	bool GetProfileSettingDefaultFloat ( int ProfileSettingId, float* DefaultFloat );
	bool GetProfileSettingDefaultInt ( int ProfileSettingId, int* DefaultInt );
	bool GetProfileSettingDefaultId ( int ProfileSettingId, int* DefaultId, int* ListIndex );
};



// Class Engine.OnlineStats ( Property size: 1 iter: 3) 
// Class name index: 5435 
// 0x0010 (0x0070 - 0x0060)
class UOnlineStats : public UObject
{
public:
	TArray< struct FStringIdToStringMapping >          ViewIdMappings;                                   		// 0x0060 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 648 ];

		return pClassPointer;
	};

	struct FName GetViewName ( int ViewId );
	bool GetViewId ( struct FName ViewName, int* ViewId );
};



// Class Engine.OnlineStatsRead ( Property size: 8 iter: 20) 
// Class name index: 5437 
// 0x0050 (0x00C0 - 0x0070)
class UOnlineStatsRead : public UOnlineStats
{
public:
	int                                                ViewId;                                           		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                SortColumnId;                                     		// 0x0074 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ColumnIds;                                        		// 0x0078 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                TotalRowsInView;                                  		// 0x0088 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FOnlineStatsRow >                   Rows;                                             		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FColumnMetaData >                   ColumnMappings;                                   		// 0x009C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ViewName;                                         		// 0x00AC (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                TitleId;                                          		// 0x00BC (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 650 ];

		return pClassPointer;
	};

	int GetRankForPlayer ( struct FUniqueNetId PlayerID );
	void AddPlayer ( struct FString PlayerName, struct FUniqueNetId PlayerID );
	bool IsStatZero ( struct FUniqueNetId PlayerID, int StatColumnNo );
	bool GetStatValueForPlayerAsString ( struct FUniqueNetId PlayerID, int StatColumnNo, struct FString* StatValue );
	bool SetFloatStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, float StatValue );
	bool GetFloatStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, float* StatValue );
	bool SetIntStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, int StatValue );
	bool GetIntStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, int* StatValue );
	void eventOnReadComplete ( );
};



// Class Engine.OnlineStatsWrite ( Property size: 6 iter: 15) 
// Class name index: 5439 
// 0x0054 (0x00C4 - 0x0070)
class UOnlineStatsWrite : public UOnlineStats
{
public:
	TArray< struct FStringIdToStringMapping >          StatMappings;                                     		// 0x0070 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FSettingsProperty >                 Properties;                                       		// 0x0080 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      ViewIds;                                          		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      ArbitratedViewIds;                                		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RatingId;                                         		// 0x00B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FScriptDelegate                             __OnStatsWriteComplete__Delegate;                 		// 0x00B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00B8 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 652 ];

		return pClassPointer;
	};

	void DecrementIntStat ( int StatId, int DecBy );
	void DecrementFloatStat ( int StatId, float DecBy );
	void IncrementIntStat ( int StatId, int IncBy );
	void IncrementFloatStat ( int StatId, float IncBy );
	void SetIntStat ( int StatId, int Value );
	void SetFloatStat ( int StatId, float Value );
	struct FName GetStatName ( int StatId );
	bool GetStatId ( struct FName StatName, int* StatId );
	void OnStatsWriteComplete ( );
};



// Class Engine.OnlineSubsystem ( Property size: 25 iter: 92) 
// Class name index: 5441 
// 0x015C (0x01BC - 0x0060)
class UOnlineSubsystem : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UOnlineAccountInterface*                     AccountInterface;                                 		// 0x0068 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0070 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePlayerInterface*                      PlayerInterface;                                  		// 0x0078 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x0080 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePlayerInterfaceEx*                    PlayerInterfaceEx;                                		// 0x0088 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData02[ 0x8 ];                             		// 0x0090 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineSystemInterface*                      SystemInterface;                                  		// 0x0098 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData03[ 0x8 ];                             		// 0x00A0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x00A8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData04[ 0x8 ];                             		// 0x00B0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineContentInterface*                     ContentInterface;                                 		// 0x00B8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData05[ 0x8 ];                             		// 0x00C0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineVoiceInterface*                       VoiceInterface;                                   		// 0x00C8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData06[ 0x8 ];                             		// 0x00D0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineStatsInterface*                       StatsInterface;                                   		// 0x00D8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData07[ 0x8 ];                             		// 0x00E0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineNewsInterface*                        NewsInterface;                                    		// 0x00E8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData08[ 0x8 ];                             		// 0x00F0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePartyChatInterface*                   PartyChatInterface;                               		// 0x00F8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData09[ 0x8 ];                             		// 0x0100 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineTitleFileInterface*                   TitleFileInterface;                               		// 0x0108 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData10[ 0x8 ];                             		// 0x0110 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineTitleFileCacheInterface*              TitleFileCacheInterface;                          		// 0x0118 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData11[ 0x8 ];                             		// 0x0120 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UUserCloudFileInterface*                     UserCloudInterface;                               		// 0x0128 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData12[ 0x8 ];                             		// 0x0130 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class USharedCloudFileInterface*                   SharedCloudInterface;                             		// 0x0138 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData13[ 0x8 ];                             		// 0x0140 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineSocialInterface*                      SocialInterface;                                  		// 0x0148 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData14[ 0x8 ];                             		// 0x0150 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineAuthInterface*                        AuthInterface;                                    		// 0x0158 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData15[ 0x8 ];                             		// 0x0160 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< struct FNamedInterface >                   NamedInterfaces;                                  		// 0x0168 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FNamedInterfaceDef >                NamedInterfaceDefs;                               		// 0x0178 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FNamedSession >                     Sessions;                                         		// 0x0188 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bUseBuildIdOverride : 1;                          		// 0x0198 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	int                                                BuildIdOverride;                                  		// 0x019C (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     IniLocPatcherClassName;                           		// 0x01A0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UIniLocPatcher*                              Patcher;                                          		// 0x01B0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              AsyncMinCompletionTime;                           		// 0x01B8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 654 ];

		return pClassPointer;
	};

	void SetDebugSpewLevel ( int DebugSpewLevel );
	void DumpVoiceRegistration ( );
	void DumpSessionState ( );
	void DumpGameSettings ( class UOnlineGameSettings* GameSettings );
	int GetNumSupportedLogins ( );
	int GetBuildUniqueId ( );
	struct FUniqueNetId eventGetPlayerUniqueNetIdFromIndex ( int UserIndex );
	bool StringToUniqueNetId ( struct FString UniqueNetIdString, struct FUniqueNetId* out_UniqueId );
	struct FString UniqueNetIdToString ( struct FUniqueNetId* IdToConvert );
	class UObject* eventGetNamedInterface ( struct FName InterfaceName );
	void eventSetNamedInterface ( struct FName InterfaceName, class UObject* NewInterface );
	bool eventSetSharedCloudInterface ( class UObject* InCloudInterface );
	bool eventSetUserCloudInterface ( class UObject* InCloudInterface );
	bool eventSetAuthInterface ( class UObject* InAuthInterface );
	bool eventSetSocialInterface ( class UObject* InSocialInterface );
	bool eventSetTitleFileCacheInterface ( class UObject* NewInterface );
	bool eventSetTitleFileInterface ( class UObject* NewInterface );
	bool eventSetPartyChatInterface ( class UObject* NewInterface );
	bool eventSetNewsInterface ( class UObject* NewInterface );
	bool eventSetStatsInterface ( class UObject* NewInterface );
	bool eventSetVoiceInterface ( class UObject* NewInterface );
	bool eventSetContentInterface ( class UObject* NewInterface );
	bool eventSetGameInterface ( class UObject* NewInterface );
	bool eventSetSystemInterface ( class UObject* NewInterface );
	bool eventSetPlayerInterfaceEx ( class UObject* NewInterface );
	bool eventSetPlayerInterface ( class UObject* NewInterface );
	bool eventSetAccountInterface ( class UObject* NewInterface );
	void eventExit ( );
	bool eventPostInit ( );
	bool eventInit ( );
};



// Class Engine.PackageMapLevel ( Property size: 0 iter: 0) 
// Class name index: 5443 
// 0x0008 (0x0108 - 0x0100)
class UPackageMapLevel : public UPackageMap
{
public:
//	 LastOffset: 100
//	 Class Propsize: 108
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0100 (0x0008) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 656 ];

		return pClassPointer;
	};

};



// Class Engine.PackageMapSeekFree ( Property size: 0 iter: 0) 
// Class name index: 5445 
// 0x0000 (0x0108 - 0x0108)
class UPackageMapSeekFree : public UPackageMapLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 658 ];

		return pClassPointer;
	};

};



// Class Engine.PatchScriptCommandlet ( Property size: 0 iter: 0) 
// Class name index: 5447 
// 0x0008 (0x00BC - 0x00B4)
class UPatchScriptCommandlet : public UCommandlet
{
public:
//	 LastOffset: b4
//	 Class Propsize: bc
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00B4 (0x0008) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 660 ];

		return pClassPointer;
	};

};



// Class Engine.PlatformInterfaceBase ( Property size: 2 iter: 20) 
// Class name index: 5449 
// 0x0020 (0x0080 - 0x0060)
class UPlatformInterfaceBase : public UObject
{
public:
	TArray< struct FDelegateArray >                    AllDelegates;                                     		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __PlatformInterfaceDelegate__Delegate;            		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0074 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 662 ];

		return pClassPointer;
	};

	void ClearDelegate ( int DelegateType, struct FScriptDelegate InDelegate );
	void AddDelegate ( int DelegateType, struct FScriptDelegate InDelegate );
	class UGoogleIntegration* GetGoogleIntegration ( );
	class UInAppMessageBase* GetInAppMessageInterface ( );
	class UAppNotificationsBase* GetAppNotificationsInterface ( );
	class UTwitterIntegrationBase* GetTwitterIntegration ( );
	class UAnalyticEventsBase* GetAnalyticEventsInterface ( );
	class UMicroTransactionBase* GetMicroTransactionInterface ( );
	class UInGameAdManager* GetInGameAdManager ( );
	class UFacebookIntegration* GetFacebookIntegration ( );
	class UCloudStorageBase* GetLocalStorageInterface ( );
	class UCloudStorageBase* GetCloudStorageInterface ( );
	void CallDelegates ( int DelegateType, struct FPlatformInterfaceDelegateResult* DelegateResult );
	void PlatformInterfaceDelegate ( struct FPlatformInterfaceDelegateResult* Result );
};



// Class Engine.MicroTransactionBase ( Property size: 3 iter: 11) 
// Class name index: 5451 
// 0x0030 (0x00B0 - 0x0080)
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray< struct FPurchaseInfo >                     AvailableProducts;                                		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastError;                                        		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     LastErrorSolution;                                		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 664 ];

		return pClassPointer;
	};

	int eventGetProductIndex ( struct FString Identifier );
	bool eventBeginPurchase ( int Index );
	bool eventIsAllowedToMakePurchases ( );
	bool eventQueryForAvailablePurchases ( );
	void eventInit ( );
};



// Class Engine.MicroTransactionProxy ( Property size: 0 iter: 0) 
// Class name index: 5453 
// 0x0000 (0x00B0 - 0x00B0)
class UMicroTransactionProxy : public UMicroTransactionBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 666 ];

		return pClassPointer;
	};

};



// Class Engine.Player ( Property size: 9 iter: 10) 
// Class name index: 5455 
// 0x002C (0x008C - 0x0060)
class UPlayer : public UObject
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class APlayerController*                           Actor;                                            		// 0x0068 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CurrentNetSpeed;                                  		// 0x0070 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ConfiguredInternetSpeed;                          		// 0x0074 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                ConfiguredLanSpeed;                               		// 0x0078 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              PP_DesaturationMultiplier;                        		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_HighlightsMultiplier;                          		// 0x0080 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_MidTonesMultiplier;                            		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_ShadowsMultiplier;                             		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 668 ];

		return pClassPointer;
	};

	void SwitchController ( class APlayerController* PC );
};



// Class Engine.LocalPlayer ( Property size: 27 iter: 62) 
// Class name index: 5457 
// 0x03A0 (0x042C - 0x008C)
class ULocalPlayer : public UPlayer
{
public:
	struct FPointer                                    VfTable_FObserverInterface;                       		// 0x008C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	int                                                ControllerId;                                     		// 0x0094 (0x0004) [0x0000000000000000]              
	class UGameViewportClient*                         ViewportClient;                                   		// 0x0098 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   Origin;                                           		// 0x00A0 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   Size;                                             		// 0x00A8 (0x0008) [0x0000000000000000]              
	class UPostProcessChain*                           PlayerPostProcess;                                		// 0x00B0 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class UPostProcessChain* >                 PlayerPostProcessChains;                          		// 0x00B8 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bForceDefaultPostProcessChain : 1;                		// 0x00C8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bWantToResetToMapDefaultPP : 1;                   		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSentSplitJoin : 1;                               		// 0x00C8 (0x0004) [0x0000000000022002] [0x00000004] ( CPF_Const | CPF_Transient | CPF_EditConst )
	unsigned long                                      bPendingServerAuth : 1;                           		// 0x00C8 (0x0004) [0x0000000000000000] [0x00000008] 
	struct FPointer                                    ViewState;                                        		// 0x00CC (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    ViewState2;                                       		// 0x00D4 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FSynchronizedActorVisibilityHistory         ActorVisibilityHistory;                           		// 0x00DC (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     LastViewLocation;                                 		// 0x00EC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FCurrentPostProcessVolumeInfo               CurrentPPInfo;                                    		// 0x00F8 (0x0170) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FCurrentPostProcessVolumeInfo               LevelPPInfo;                                      		// 0x0268 (0x0170) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPostProcessSettingsOverride >      ActivePPOverrides;                                		// 0x03D8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      AspectRatioAxisConstraint;                        		// 0x03E8 (0x0001) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     LastMap;                                          		// 0x03EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UTranslationContext*                         TagContext;                                       		// 0x03FC (0x0008) [0x0000000000000000]              
	class UOnlineAuthInterface*                        CachedAuthInt;                                    		// 0x0404 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x040C (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	float                                              ServerAuthTimestamp;                              		// 0x0414 (0x0004) [0x0000000000000000]              
	int                                                ServerAuthTimeout;                                		// 0x0418 (0x0004) [0x0000000000000000]              
	int                                                ServerAuthRetryCount;                             		// 0x041C (0x0004) [0x0000000000000000]              
	int                                                MaxServerAuthRetryCount;                          		// 0x0420 (0x0004) [0x0000000000000000]              
	struct FUniqueNetId                                ServerAuthUID;                                    		// 0x0424 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 670 ];

		return pClassPointer;
	};

	void Cleanup ( unsigned long bExit );
	void eventExit ( );
	void eventNotifyServerConnectionClose ( );
	void eventViewportClosed ( );
	void StaticOnServerConnectionClose ( class UPlayer* ServerConnection );
	void OnServerConnectionClose ( class UPlayer* ServerConnection );
	void ServerAuthFailure ( );
	void eventServerAuthTimedOut ( );
	void OnServerAuthComplete ( unsigned long bSuccess, struct FUniqueNetId ServerUID, class UPlayer* ServerConnection, struct FString ExtraInfo );
	void ProcessServerAuthResponse ( struct FUniqueNetId ServerUID, int ServerIP, int AuthTicketUID );
	void ProcessClientAuthEndSessionRequest ( class UPlayer* ServerConnection );
	void ProcessClientAuthRequest ( struct FUniqueNetId ServerUID, int ServerIP, int ServerPort, unsigned long bSecure );
	void eventNotifyServerConnectionOpen ( );
	struct FString eventGetNickname ( );
	struct FUniqueNetId eventGetUniqueNetId ( );
	struct FVector2D FastProject ( struct FVector WorldLoc );
	void FastDeProject ( struct FVector2D RelativeScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection );
	struct FVector2D Project ( struct FVector WorldLoc );
	void DeProject ( struct FVector2D RelativeScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection );
	void TouchPlayerPostProcessChain ( );
	class UPostProcessChain* GetPostProcessChain ( int InIndex );
	bool RemoveAllPostProcessingChains ( );
	bool RemovePostProcessingChain ( int InIndex );
	bool InsertPostProcessingChain ( class UPostProcessChain* InChain, int InIndex, unsigned long bInClone );
	class UTranslationContext* GetTranslationContext ( );
	void SetControllerId ( int NewControllerId );
	void ClearPostProcessSettingsOverride ( float BlendOutTime );
	void OverridePostProcessSettingsCurve ( struct FPostProcessSettings OverrideSettings, struct FInterpCurveFloat* Curve );
	void OverridePostProcessSettings ( struct FPostProcessSettings OverrideSettings, float BlendInTime );
	bool GetActorVisibility ( class AActor* TestActor );
	void SendSplitJoin ( );
	bool SpawnPlayActor ( struct FString URL, struct FString* OutError );
};



// Class Engine.NetConnection ( Property size: 1 iter: 1) 
// Class name index: 5459 
// 0xB034 (0xB0C0 - 0x008C)
class UNetConnection : public UPlayer
{
public:
	unsigned char                                      UnknownData00[ 0xAFE4 ];                          		// 0x008C (0xAFE4) MISSED OFFSET
	TArray< class UChildConnection* >                  Children;                                         		// 0xB070 (0x0010) [0x0000000000602000]              ( CPF_Transient | CPF_NeedCtorLink )
//	 LastOffset: b080
//	 Class Propsize: b0c0
	unsigned char                                      UnknownData01[ 0x40 ];                            		// 0xB080 (0x0040) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 672 ];

		return pClassPointer;
	};

};



// Class Engine.ChildConnection ( Property size: 1 iter: 1) 
// Class name index: 5462 
// 0x0008 (0xB0C8 - 0xB0C0)
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                           		// 0xB0C0 (0x0008) [0x0000000000202002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 676 ];

		return pClassPointer;
	};

};



// Class Engine.DemoRecConnection ( Property size: 0 iter: 0) 
// Class name index: 5464 
// 0x0000 (0xB0C0 - 0xB0C0)
class UDemoRecConnection : public UNetConnection
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 679 ];

		return pClassPointer;
	};

};



// Class Engine.Polys ( Property size: 0 iter: 0) 
// Class name index: 5466 
// 0x0018 (0x0078 - 0x0060)
class UPolys : public UObject
{
public:
//	 LastOffset: 60
//	 Class Propsize: 78
	unsigned char                                      UnknownData00[ 0x18 ];                            		// 0x0060 (0x0018) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 681 ];

		return pClassPointer;
	};

};



// Class Engine.PostProcessChain ( Property size: 1 iter: 2) 
// Class name index: 5468 
// 0x0010 (0x0070 - 0x0060)
class UPostProcessChain : public UObject
{
public:
	TArray< class UPostProcessEffect* >                Effects;                                          		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 683 ];

		return pClassPointer;
	};

	class UPostProcessEffect* FindPostProcessEffect ( struct FName EffectName );
};



// Class Engine.PostProcessEffect ( Property size: 12 iter: 12) 
// Class name index: 5470 
// 0x0025 (0x0085 - 0x0060)
class UPostProcessEffect : public UObject
{
public:
	unsigned long                                      bShowInEditor : 1;                                		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShowInGame : 1;                                  		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseWorldSettings : 1;                            		// 0x0060 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAffectsLightingOnly : 1;                         		// 0x0060 (0x0004) [0x0000000000000000] [0x00000008] 
	struct FName                                       EffectName;                                       		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                NodePosY;                                         		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                NodePosX;                                         		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                DrawWidth;                                        		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                DrawHeight;                                       		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                OutDrawY;                                         		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                InDrawY;                                          		// 0x0080 (0x0004) [0x0000000000000000]              
	unsigned char                                      SceneDPG;                                         		// 0x0084 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 685 ];

		return pClassPointer;
	};

};



// Class Engine.AmbientOcclusionEffect ( Property size: 21 iter: 22) 
// Class name index: 5472 
// 0x005F (0x00E4 - 0x0085)
class UAmbientOcclusionEffect : public UPostProcessEffect
{
public:
	struct FLinearColor                                OcclusionColor;                                   		// 0x0088 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionPower;                                   		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionScale;                                   		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionBias;                                    		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinOcclusion;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      SSAO2 : 1;                                        		// 0x00A8 (0x0004) [0x0000000020000000] [0x00000001] ( CPF_Deprecated )
	unsigned long                                      bAngleBasedSSAO : 1;                              		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              OcclusionRadius;                                  		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionAttenuation;                             		// 0x00B0 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	unsigned char                                      OcclusionQuality;                                 		// 0x00B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionFadeoutMinDistance;                      		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionFadeoutMaxDistance;                      		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HaloDistanceThreshold;                            		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HaloDistanceScale;                                		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HaloOcclusion;                                    		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EdgeDistanceThreshold;                            		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EdgeDistanceScale;                                		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FilterDistanceScale;                              		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FilterSize;                                       		// 0x00D8 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              HistoryConvergenceTime;                           		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HistoryWeightConvergenceTime;                     		// 0x00E0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 687 ];

		return pClassPointer;
	};

};



// Class Engine.BlurEffect ( Property size: 1 iter: 1) 
// Class name index: 5474 
// 0x0007 (0x008C - 0x0085)
class UBlurEffect : public UPostProcessEffect
{
public:
	int                                                BlurKernelSize;                                   		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 689 ];

		return pClassPointer;
	};

};



// Class Engine.DOFEffect ( Property size: 9 iter: 10) 
// Class name index: 5476 
// 0x002F (0x00B4 - 0x0085)
class UDOFEffect : public UPostProcessEffect
{
public:
	float                                              FalloffExponent;                                  		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlurKernelSize;                                   		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxNearBlurAmount;                                		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinBlurAmount;                                    		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFarBlurAmount;                                 		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FocusType;                                        		// 0x009C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusInnerRadius;                                 		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusDistance;                                    		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FocusPosition;                                    		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 691 ];

		return pClassPointer;
	};

};



// Class Engine.DOFAndBloomEffect ( Property size: 10 iter: 12) 
// Class name index: 5478 
// 0x0028 (0x00DC - 0x00B4)
class UDOFAndBloomEffect : public UDOFEffect
{
public:
	float                                              BloomScale;                                       		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomThreshold;                                   		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BloomTint;                                        		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomScreenBlendThreshold;                        		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SceneMultiplier;                                  		// 0x00C4 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              BlurBloomKernelSize;                              		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableReferenceDOF : 1;                          		// 0x00CC (0x0004) [0x0000000020000000] [0x00000001] ( CPF_Deprecated )
	unsigned char                                      DepthOfFieldType;                                 		// 0x00D0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DepthOfFieldQuality;                              		// 0x00D1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  BokehTexture;                                     		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 693 ];

		return pClassPointer;
	};

};



// Class Engine.DOFBloomMotionBlurEffect ( Property size: 5 iter: 5) 
// Class name index: 5480 
// 0x0014 (0x00F0 - 0x00DC)
class UDOFBloomMotionBlurEffect : public UDOFAndBloomEffect
{
public:
	float                                              MaxVelocity;                                      		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlurAmount;                                 		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      FullMotionBlur : 1;                               		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              CameraRotationThreshold;                          		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraTranslationThreshold;                       		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 695 ];

		return pClassPointer;
	};

};



// Class Engine.UberPostProcessEffect ( Property size: 24 iter: 26) 
// Class name index: 5482 
// 0x0094 (0x0184 - 0x00F0)
class UUberPostProcessEffect : public UDOFBloomMotionBlurEffect
{
public:
	struct FVector                                     SceneShadows;                                     		// 0x00F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneHighLights;                                  		// 0x00FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneMidTones;                                    		// 0x0108 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SceneDesaturation;                                		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneColorize;                                    		// 0x0118 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TonemapperType;                                   		// 0x0124 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PostProcessAAType;                                		// 0x0125 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              TonemapperRange;                                  		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TonemapperToeFactor;                              		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TonemapperScale;                                  		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlurSoftEdgeKernelSize;                     		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableImageGrain : 1;                            		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bScaleEffectsWithViewSize : 1;                    		// 0x0138 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableHDRTonemapper : 1;                         		// 0x0138 (0x0004) [0x0000000020000000] [0x00000004] ( CPF_Deprecated )
	float                                              SceneImageGrainScale;                             		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomWeightSmall;                                 		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomWeightMedium;                                		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomWeightLarge;                                 		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomSizeScaleSmall;                              		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomSizeScaleMedium;                             		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomSizeScaleLarge;                              		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EdgeDetectionThreshold;                           		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLUTBlender                                 PreviousLUTBlender;                               		// 0x015C (0x0024) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              SceneHDRTonemapperScale;                          		// 0x0180 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 697 ];

		return pClassPointer;
	};

};



// Class Engine.DwTriovizImplEffect ( Property size: 0 iter: 0) 
// Class name index: 5484 
// 0x0003 (0x0088 - 0x0085)
class UDwTriovizImplEffect : public UPostProcessEffect
{
public:
//	 LastOffset: 85
//	 Class Propsize: 88

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 699 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialEffect ( Property size: 1 iter: 1) 
// Class name index: 5486 
// 0x000B (0x0090 - 0x0085)
class UMaterialEffect : public UPostProcessEffect
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 701 ];

		return pClassPointer;
	};

};



// Class Engine.MotionBlurEffect ( Property size: 5 iter: 5) 
// Class name index: 5488 
// 0x0017 (0x009C - 0x0085)
class UMotionBlurEffect : public UPostProcessEffect
{
public:
	float                                              MaxVelocity;                                      		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlurAmount;                                 		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      FullMotionBlur : 1;                               		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              CameraRotationThreshold;                          		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraTranslationThreshold;                       		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 703 ];

		return pClassPointer;
	};

};



// Class Engine.PrimitiveComponentFactory ( Property size: 8 iter: 8) 
// Class name index: 5490 
// 0x0004 (0x0064 - 0x0060)
class UPrimitiveComponentFactory : public UObject
{
public:
	unsigned long                                      CollideActors : 1;                                		// 0x0060 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockActors : 1;                                  		// 0x0060 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockZeroExtent : 1;                              		// 0x0060 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockNonZeroExtent : 1;                           		// 0x0060 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockRigidBody : 1;                               		// 0x0060 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      HiddenGame : 1;                                   		// 0x0060 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      HiddenEditor : 1;                                 		// 0x0060 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      CastShadow : 1;                                   		// 0x0060 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 705 ];

		return pClassPointer;
	};

};



// Class Engine.MeshComponentFactory ( Property size: 1 iter: 1) 
// Class name index: 5492 
// 0x0010 (0x0074 - 0x0064)
class UMeshComponentFactory : public UPrimitiveComponentFactory
{
public:
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x0064 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 707 ];

		return pClassPointer;
	};

};



// Class Engine.StaticMeshComponentFactory ( Property size: 1 iter: 1) 
// Class name index: 5494 
// 0x0008 (0x007C - 0x0074)
class UStaticMeshComponentFactory : public UMeshComponentFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 709 ];

		return pClassPointer;
	};

};



// Class Engine.ReachSpec ( Property size: 18 iter: 23) 
// Class name index: 5496 
// 0x0068 (0x00C8 - 0x0060)
class UReachSpec : public UObject
{
public:
	struct FPointer                                    NavOctreeObject;                                  		// 0x0060 (0x0008) [0x0000000000023002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_EditConst )
	int                                                Distance;                                         		// 0x0068 (0x0004) [0x0000000000000000]              
	struct FVector                                     Direction;                                        		// 0x006C (0x000C) [0x0000000000000000]              
	class ANavigationPoint*                            Start;                                            		// 0x0078 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FActorReference                             End;                                              		// 0x0080 (0x0018) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                CollisionRadius;                                  		// 0x0098 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                CollisionHeight;                                  		// 0x009C (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                reachFlags;                                       		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                MaxLandingVelocity;                               		// 0x00A4 (0x0004) [0x0000000000000000]              
	unsigned char                                      bPruned;                                          		// 0x00A8 (0x0001) [0x0000000000000000]              
	unsigned char                                      PathColorIndex;                                   		// 0x00A9 (0x0001) [0x0000000000000000]              
	unsigned long                                      bAddToNavigationOctree : 1;                       		// 0x00AC (0x0004) [0x0000000000020002] [0x00000001] ( CPF_Const | CPF_EditConst )
	unsigned long                                      bCanCutCorners : 1;                               		// 0x00AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCheckForObstructions : 1;                        		// 0x00AC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSkipPrune : 1;                                   		// 0x00AC (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bDisabled : 1;                                    		// 0x00AC (0x0004) [0x0000000000020001] [0x00000010] ( CPF_Edit | CPF_EditConst )
	TArray< class UClass* >                            PruneSpecList;                                    		// 0x00B0 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class AActor*                                      BlockedBy;                                        		// 0x00C0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 711 ];

		return pClassPointer;
	};

	bool IsBlockedFor ( class APawn* P );
	struct FVector GetDirection ( );
	class ANavigationPoint* GetEnd ( );
	int CostFor ( class APawn* P );
};



// Class Engine.AdvancedReachSpec ( Property size: 0 iter: 0) 
// Class name index: 5498 
// 0x0000 (0x00C8 - 0x00C8)
class UAdvancedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 713 ];

		return pClassPointer;
	};

};



// Class Engine.CeilingReachSpec ( Property size: 0 iter: 0) 
// Class name index: 5500 
// 0x0000 (0x00C8 - 0x00C8)
class UCeilingReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 715 ];

		return pClassPointer;
	};

};



// Class Engine.ForcedReachSpec ( Property size: 0 iter: 0) 
// Class name index: 5502 
// 0x0000 (0x00C8 - 0x00C8)
class UForcedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 717 ];

		return pClassPointer;
	};

};



// Class Engine.CoverSlipReachSpec ( Property size: 1 iter: 1) 
// Class name index: 5504 
// 0x0001 (0x00C9 - 0x00C8)
class UCoverSlipReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x00C8 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 719 ];

		return pClassPointer;
	};

};



// Class Engine.FloorToCeilingReachSpec ( Property size: 0 iter: 0) 
// Class name index: 5506 
// 0x0000 (0x00C8 - 0x00C8)
class UFloorToCeilingReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 721 ];

		return pClassPointer;
	};

};



// Class Engine.MantleReachSpec ( Property size: 1 iter: 1) 
// Class name index: 5508 
// 0x0004 (0x00CC - 0x00C8)
class UMantleReachSpec : public UForcedReachSpec
{
public:
	unsigned long                                      bClimbUp : 1;                                     		// 0x00C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 723 ];

		return pClassPointer;
	};

};



// Class Engine.SlotToSlotReachSpec ( Property size: 1 iter: 1) 
// Class name index: 5510 
// 0x0001 (0x00C9 - 0x00C8)
class USlotToSlotReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x00C8 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 725 ];

		return pClassPointer;
	};

};



// Class Engine.SwatTurnReachSpec ( Property size: 1 iter: 1) 
// Class name index: 5512 
// 0x0001 (0x00C9 - 0x00C8)
class USwatTurnReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x00C8 (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 727 ];

		return pClassPointer;
	};

};



// Class Engine.WallTransReachSpec ( Property size: 0 iter: 0) 
// Class name index: 5514 
// 0x0000 (0x00C8 - 0x00C8)
class UWallTransReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 729 ];

		return pClassPointer;
	};

};



// Class Engine.LadderReachSpec ( Property size: 0 iter: 0) 
// Class name index: 5516 
// 0x0000 (0x00C8 - 0x00C8)
class ULadderReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 731 ];

		return pClassPointer;
	};

};



// Class Engine.ProscribedReachSpec ( Property size: 0 iter: 0) 
// Class name index: 5518 
// 0x0000 (0x00C8 - 0x00C8)
class UProscribedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 733 ];

		return pClassPointer;
	};

};



// Class Engine.TeleportReachSpec ( Property size: 0 iter: 0) 
// Class name index: 5520 
// 0x0000 (0x00C8 - 0x00C8)
class UTeleportReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 735 ];

		return pClassPointer;
	};

};



// Class Engine.SavedMove ( Property size: 30 iter: 42) 
// Class name index: 5522 
// 0x00B8 (0x0118 - 0x0060)
class USavedMove : public UObject
{
public:
	class USavedMove*                                  NextMove;                                         		// 0x0060 (0x0008) [0x0000000000000000]              
	float                                              TimeStamp;                                        		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              Delta;                                            		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned long                                      bRun : 1;                                         		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDuck : 1;                                        		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPressedJump : 1;                                 		// 0x0070 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDoubleJump : 1;                                  		// 0x0070 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bPreciseDestination : 1;                          		// 0x0070 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bForceRMVelocity : 1;                             		// 0x0070 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bForceMaxAccel : 1;                               		// 0x0070 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bRootMotionFromInterpCurve : 1;                   		// 0x0070 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned char                                      DoubleClickMove;                                  		// 0x0074 (0x0001) [0x0000000000000000]              
	unsigned char                                      SavedPhysics;                                     		// 0x0075 (0x0001) [0x0000000000000000]              
	unsigned char                                      RootMotionMode;                                   		// 0x0076 (0x0001) [0x0000000000000000]              
	struct FVector                                     StartLocation;                                    		// 0x0078 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartRelativeLocation;                            		// 0x0084 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartVelocity;                                    		// 0x0090 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartFloor;                                       		// 0x009C (0x000C) [0x0000000000000000]              
	struct FVector                                     SavedLocation;                                    		// 0x00A8 (0x000C) [0x0000000000000000]              
	struct FVector                                     SavedVelocity;                                    		// 0x00B4 (0x000C) [0x0000000000000000]              
	struct FVector                                     SavedRelativeLocation;                            		// 0x00C0 (0x000C) [0x0000000000000000]              
	struct FVector                                     RMVelocity;                                       		// 0x00CC (0x000C) [0x0000000000000000]              
	struct FVector                                     Acceleration;                                     		// 0x00D8 (0x000C) [0x0000000000000000]              
	struct FRotator                                    Rotation;                                         		// 0x00E4 (0x000C) [0x0000000000000000]              
	class AActor*                                      StartBase;                                        		// 0x00F0 (0x0008) [0x0000000000000000]              
	class AActor*                                      EndBase;                                          		// 0x00F8 (0x0008) [0x0000000000000000]              
	float                                              CustomTimeDilation;                               		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              AccelDotThreshold;                                		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              RootMotionInterpCurrentTime;                      		// 0x0108 (0x0004) [0x0000000000000000]              
	struct FVector                                     RootMotionInterpCurveLastValue;                   		// 0x010C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 737 ];

		return pClassPointer;
	};

	struct FString GetDebugString ( );
	unsigned char SetFlags ( unsigned char Flags, class APlayerController* PC );
	unsigned char CompressedFlags ( );
	void ResetMoveFor ( class APawn* P );
	void PrepMoveFor ( class APawn* P );
	void SetMoveFor ( class APlayerController* P, float DeltaTime, struct FVector newAccel, unsigned char InDoubleClick );
	bool CanCombineWith ( class USavedMove* NewMove, class APawn* inPawn, float MaxDelta );
	void SetInitialPosition ( class APawn* P );
	struct FVector GetStartLocation ( );
	bool IsImportantMove ( struct FVector CompareAccel );
	void PostUpdate ( class APlayerController* P );
	void Clear ( );
};



// Class Engine.SaveGameSummary ( Property size: 2 iter: 2) 
// Class name index: 5524 
// 0x0018 (0x0078 - 0x0060)
class USaveGameSummary : public UObject
{
public:
	struct FName                                       BaseLevel;                                        		// 0x0060 (0x0008) [0x0000000000000000]              
	struct FString                                     Description;                                      		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 739 ];

		return pClassPointer;
	};

};



// Class Engine.ScriptViewportClient ( Property size: 1 iter: 1) 
// Class name index: 5526 
// 0x0008 (0x0068 - 0x0060)
class UScriptViewportClient : public UObject
{
public:
	struct FPointer                                    VfTable_FViewportClient;                          		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 741 ];

		return pClassPointer;
	};

};



// Class Engine.GameViewportClient ( Property size: 35 iter: 104) 
// Class name index: 5528 
// 0x0138 (0x01A0 - 0x0068)
class UGameViewportClient : public UScriptViewportClient
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x0068 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    Viewport;                                         		// 0x0070 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    ViewportFrame;                                    		// 0x0078 (0x0008) [0x0000000000000002]              ( CPF_Const )
	TArray< class UInteraction* >                      GlobalInteractions;                               		// 0x0080 (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )
	class UClass*                                      UIControllerClass;                                		// 0x0090 (0x0008) [0x0000000000000000]              
	class UUIInteraction*                              UIController;                                     		// 0x0098 (0x0008) [0x0000000000000000]              
	class UConsole*                                    ViewportConsole;                                  		// 0x00A0 (0x0008) [0x0000000000000000]              
	struct FExportShowFlags_Mirror                     ShowFlags;                                        		// 0x00A8 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     LoadingMessage;                                   		// 0x00B8 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SavingMessage;                                    		// 0x00C8 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ConnectingMessage;                                		// 0x00D8 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PausedMessage;                                    		// 0x00E8 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PrecachingMessage;                                		// 0x00F8 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bShowTitleSafeZone : 1;                           		// 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisplayHardwareMouseCursor : 1;                  		// 0x0108 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bOverrideDiffuseAndSpecular : 1;                  		// 0x0108 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsPlayInEditorViewport : 1;                      		// 0x0108 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bShowSystemMouseCursor : 1;                       		// 0x0108 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bDisableWorldRendering : 1;                       		// 0x0108 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bCapturedWorldRendering : 1;                      		// 0x0108 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bDebugNoGFxUI : 1;                                		// 0x0108 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	struct FTitleSafeZoneArea                          TitleSafeZone;                                    		// 0x010C (0x0010) [0x0000000000000000]              
	TArray< struct FSplitscreenData >                  SplitscreenInfo;                                  		// 0x011C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      DesiredSplitscreenType;                           		// 0x012C (0x0001) [0x0000000000000000]              
	unsigned char                                      ActiveSplitscreenType;                            		// 0x012D (0x0001) [0x0000000000000000]              
	unsigned char                                      Default2PSplitType;                               		// 0x012E (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      Default3PSplitType;                               		// 0x012F (0x0001) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     ProgressMessage[ 0x2 ];                           		// 0x0130 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              ProgressTimeOut;                                  		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              ProgressFadeTime;                                 		// 0x0154 (0x0004) [0x0000000000000000]              
	TArray< struct FDebugDisplayProperty >             DebugProperties;                                  		// 0x0158 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    ScaleformInteraction;                             		// 0x0168 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FScriptDelegate                             __HandleInputKey__Delegate;                       		// 0x0170 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0174 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __HandleInputAxis__Delegate;                      		// 0x0180 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0184 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __HandleInputChar__Delegate;                      		// 0x0190 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0194 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 743 ];

		return pClassPointer;
	};

	void eventSetHardwareMouseCursorVisibility ( unsigned long bIsVisible );
	void DebugSetUISystemEnabled ( unsigned long bOldUISystemActive, unsigned long bGFxUISystemActive );
	bool IsScaleformEnabled ( );
	void DisableScaleform ( );
	void EnableScaleform ( );
	void BecomePrimaryPlayer ( int PlayerIndex );
	void OnPrimaryPlayerSwitch ( class ULocalPlayer* OldPrimaryPlayer, class ULocalPlayer* NewPrimaryPlayer );
	void FixupOwnerReferences ( TArray< int > IDMappings );
	class ULocalPlayer* GetPlayerOwner ( int PlayerIndex );
	void ClearProgressMessages ( );
	void SetProgressTime ( float T );
	void NotifyConnectionError ( unsigned char MessageType, struct FString Message, struct FString Title );
	void eventSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title, unsigned long bIgnoreFutureNetworkMessages );
	int RemoveLocalPlayer ( class ULocalPlayer* ExistingPlayer );
	int AddLocalPlayer ( class ULocalPlayer* NewPlayer );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void DrawTransitionMessage ( class UCanvas* Canvas, struct FString Message );
	void DrawTransition ( class UCanvas* Canvas );
	void DisplayProgressMessage ( class UCanvas* Canvas );
	void eventPostRender ( class UCanvas* Canvas );
	void DrawTitleSafeArea ( class UCanvas* Canvas );
	void eventTick ( float DeltaTime );
	bool CalculateDeadZoneForAllSides ( class ULocalPlayer* LPlayer, class UCanvas* Canvas, unsigned long bUseMaxPercent, float* fTopSafeZone, float* fBottomSafeZone, float* fLeftSafeZone, float* fRightSafeZone );
	void CalculateSafeZoneValues ( class UCanvas* Canvas, int LocalPlayerIndex, unsigned long bUseMaxPercent, float* out_Horizontal, float* out_Vertical );
	void GetPixelSizeOfScreen ( class UCanvas* Canvas, int LocalPlayerIndex, float* out_Width, float* out_Height );
	bool HasRightSafeZone ( int LocalPlayerIndex );
	bool HasLeftSafeZone ( int LocalPlayerIndex );
	bool HasBottomSafeZone ( int LocalPlayerIndex );
	bool HasTopSafeZone ( int LocalPlayerIndex );
	int ConvertLocalPlayerToGamePlayerIndex ( class ULocalPlayer* LPlayer );
	void eventGetSubtitleRegion ( struct FVector2D* MinPos, struct FVector2D* MaxPos );
	void eventLayoutPlayers ( );
	void UpdateActiveSplitscreenType ( );
	unsigned char GetSplitscreenConfiguration ( );
	void SetSplitscreenConfiguration ( unsigned char SplitType );
	void eventGameSessionEnded ( );
	int eventInsertInteraction ( class UInteraction* NewInteraction, int InIndex );
	bool CreateInitialPlayer ( struct FString* OutError );
	bool eventInit ( struct FString* OutError );
	class ULocalPlayer* eventFindPlayerByControllerId ( int ControllerId );
	bool eventRemovePlayer ( class ULocalPlayer* ExPlayer );
	class ULocalPlayer* eventCreatePlayer ( int ControllerId, unsigned long bSpawnActor, struct FString* OutError );
	void SetMouse ( int X, int Y );
	void ForceUpdateMouseCursor ( unsigned long bSetCursor );
	void NotifySplitscreenLayoutChanged ( );
	void SetCustomInteractionObject ( class UInteraction* InInteraction );
	class UClass* GetCustomInteractionClass ( int InIndex );
	int GetNumCustomInteractions ( );
	bool ShouldForceFullscreenViewport ( );
	struct FVector2D GetMousePosition ( );
	void SetClientMouseLockedToWindow ( unsigned long IsLocked );
	bool IsClientMouseLockedToWindow ( );
	bool IsBorderlessViewport ( );
	bool IsFullScreenViewport ( );
	void GetViewportSize ( struct FVector2D* out_ViewportSize );
	struct FString ConsoleCommand ( struct FString Command );
	bool HandleInputChar ( int ControllerId, struct FString Unicode );
	bool HandleInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	bool HandleInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
};



// Class Engine.Selection ( Property size: 0 iter: 0) 
// Class name index: 5530 
// 0x002C (0x008C - 0x0060)
class USelection : public UObject
{
public:
//	 LastOffset: 60
//	 Class Propsize: 8c
	unsigned char                                      UnknownData00[ 0x2C ];                            		// 0x0060 (0x002C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 745 ];

		return pClassPointer;
	};

};



// Class Engine.ServerCommandlet ( Property size: 0 iter: 0) 
// Class name index: 5532 
// 0x0000 (0x00B4 - 0x00B4)
class UServerCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 747 ];

		return pClassPointer;
	};

};



// Class Engine.Settings ( Property size: 4 iter: 67) 
// Class name index: 5534 
// 0x0040 (0x00A0 - 0x0060)
class USettings : public UObject
{
public:
	TArray< struct FLocalizedStringSetting >           LocalizedSettings;                                		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSettingsProperty >                 Properties;                                       		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FLocalizedStringSettingMetaData >   LocalizedSettingsMappings;                        		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSettingsPropertyPropertyMetaData > PropertyMappings;                                 		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 749 ];

		return pClassPointer;
	};

	void UpdateFromURL ( class AGameInfo* Game, struct FString* URL );
	void BuildURL ( struct FString* URL );
	void AppendContextsToURL ( struct FString* URL );
	void AppendPropertiesToURL ( struct FString* URL );
	void AppendDataBindingsToURL ( struct FString* URL );
	void GetQoSAdvertisedStringSettings ( TArray< struct FLocalizedStringSetting >* QoSSettings );
	void GetQoSAdvertisedProperties ( TArray< struct FSettingsProperty >* QoSProps );
	bool GetRangedPropertyValue ( int PropertyId, float* OutValue );
	bool SetRangedPropertyValue ( int PropertyId, float NewValue );
	bool GetPropertyRange ( int PropertyId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt );
	bool GetPropertyMappingType ( int PropertyId, unsigned char* OutType );
	bool HasStringSetting ( int SettingId );
	bool HasProperty ( int PropertyId );
	void UpdateProperties ( unsigned long bShouldAddIfMissing, TArray< struct FSettingsProperty >* Props );
	void UpdateStringSettings ( unsigned long bShouldAddIfMissing, TArray< struct FLocalizedStringSetting >* Settings );
	unsigned char GetPropertyType ( int PropertyId );
	bool GetPropertyValueId ( int PropertyId, int* ValueId );
	bool SetPropertyValueId ( int PropertyId, int ValueId );
	bool GetStringProperty ( int PropertyId, struct FString* Value );
	void SetStringProperty ( int PropertyId, struct FString Value );
	bool GetIntProperty ( int PropertyId, int* Value );
	void SetIntProperty ( int PropertyId, int Value );
	bool GetFloatProperty ( int PropertyId, float* Value );
	void SetFloatProperty ( int PropertyId, float Value );
	bool SetPropertyFromStringByName ( struct FName PropertyName, struct FString* NewValue );
	struct FString GetPropertyAsStringByName ( struct FName PropertyName );
	struct FString GetPropertyAsString ( int PropertyId );
	struct FString GetPropertyColumnHeader ( int PropertyId );
	struct FName GetPropertyName ( int PropertyId );
	bool GetPropertyId ( struct FName PropertyName, int* PropertyId );
	bool SetStringSettingValueFromStringByName ( struct FName StringSettingName, struct FString* NewValue );
	struct FName GetStringSettingValueNameByName ( struct FName StringSettingName );
	struct FName GetStringSettingValueName ( int StringSettingId, int ValueIndex );
	bool IsWildcardStringSetting ( int StringSettingId );
	struct FString GetStringSettingColumnHeader ( int StringSettingId );
	struct FName GetStringSettingName ( int StringSettingId );
	bool GetStringSettingId ( struct FName StringSettingName, int* StringSettingId );
	bool GetStringSettingValueByName ( struct FName StringSettingName, int* ValueIndex );
	void SetStringSettingValueByName ( struct FName StringSettingName, int ValueIndex, unsigned long bShouldAutoAdd );
	bool GetStringSettingValueNames ( int StringSettingId, TArray< struct FIdToStringMapping >* Values );
	bool IncrementStringSettingValue ( int StringSettingId, int Direction, unsigned long bShouldWrap );
	bool GetStringSettingValue ( int StringSettingId, int* ValueIndex );
	void SetStringSettingValue ( int StringSettingId, int ValueIndex, unsigned long bShouldAutoAdd );
	void GetSettingsDataDateTime ( struct FSettingsData* Data, int* OutInt1, int* OutInt2 );
	void GetSettingsDataBlob ( struct FSettingsData* Data, TArray< unsigned char >* OutBlob );
	int GetSettingsDataInt ( struct FSettingsData* Data );
	float GetSettingsDataFloat ( struct FSettingsData* Data );
	void EmptySettingsData ( struct FSettingsData* Data );
	void SetSettingsData ( struct FSettingsData* Data, struct FSettingsData* Data2Copy );
	void SetSettingsDataBlob ( struct FSettingsData* Data, TArray< unsigned char >* InBlob );
	void SetSettingsDataDateTime ( int InInt1, int InInt2, struct FSettingsData* Data );
	void SetSettingsDataInt ( int InInt, struct FSettingsData* Data );
	void SetSettingsDataFloat ( float InFloat, struct FSettingsData* Data );
};



// Class Engine.OnlineGameSearch ( Property size: 14 iter: 26) 
// Class name index: 5536 
// 0x00AC (0x014C - 0x00A0)
class UOnlineGameSearch : public USettings
{
public:
	int                                                MaxSearchResults;                                 		// 0x00A0 (0x0004) [0x0000000000000000]              
	struct FLocalizedStringSetting                     Query;                                            		// 0x00A4 (0x000C) [0x0000000000000000]              
	unsigned long                                      bIsLanQuery : 1;                                  		// 0x00B0 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesArbitration : 1;                             		// 0x00B0 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bIsSearchInProgress : 1;                          		// 0x00B0 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	class UClass*                                      GameSettingsClass;                                		// 0x00B4 (0x0008) [0x0000000000000000]              
	TArray< struct FOnlineGameSearchResult >           Results;                                          		// 0x00BC (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FOverrideSkill                              ManualSkillOverride;                              		// 0x00CC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FNamedObjectProperty >              NamedProperties;                                  		// 0x0100 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FOnlineGameSearchQuery                      FilterQuery;                                      		// 0x0110 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AdditionalSearchCriteria;                         		// 0x0130 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PingBucketSize;                                   		// 0x0140 (0x0004) [0x0000000000000000]              
	int                                                NumPingProbes;                                    		// 0x0144 (0x0004) [0x0000000000000000]              
	int                                                MaxPingBytes;                                     		// 0x0148 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 751 ];

		return pClassPointer;
	};

	void eventSortSearchResults ( );
	void SetSkillOverride ( int LeaderboardId, TArray< struct FUniqueNetId >* Players );
};



// Class Engine.OnlineGameSettings ( Property size: 26 iter: 26) 
// Class name index: 5538 
// 0x0044 (0x00E4 - 0x00A0)
class UOnlineGameSettings : public USettings
{
public:
	int                                                NumPublicConnections;                             		// 0x00A0 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumPrivateConnections;                            		// 0x00A4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumOpenPublicConnections;                         		// 0x00A8 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumOpenPrivateConnections;                        		// 0x00AC (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	struct FQWord                                      ServerNonce;                                      		// 0x00B0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bShouldAdvertise : 1;                             		// 0x00B8 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bIsLanMatch : 1;                                  		// 0x00B8 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesStats : 1;                                   		// 0x00B8 (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowJoinInProgress : 1;                         		// 0x00B8 (0x0004) [0x0000000040000000] [0x00000008] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowInvites : 1;                                		// 0x00B8 (0x0004) [0x0000000040000000] [0x00000010] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesPresence : 1;                                		// 0x00B8 (0x0004) [0x0000000040000000] [0x00000020] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowJoinViaPresence : 1;                        		// 0x00B8 (0x0004) [0x0000000040000000] [0x00000040] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowJoinViaPresenceFriendsOnly : 1;             		// 0x00B8 (0x0004) [0x0000000040000000] [0x00000080] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesArbitration : 1;                             		// 0x00B8 (0x0004) [0x0000000040000000] [0x00000100] ( CPF_EditInlineNotify )
	unsigned long                                      bAntiCheatProtected : 1;                          		// 0x00B8 (0x0004) [0x0000000040000000] [0x00000200] ( CPF_EditInlineNotify )
	unsigned long                                      bWasFromInvite : 1;                               		// 0x00B8 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bIsDedicated : 1;                                 		// 0x00B8 (0x0004) [0x0000000040000000] [0x00000800] ( CPF_EditInlineNotify )
	unsigned long                                      bHasSkillUpdateInProgress : 1;                    		// 0x00B8 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bShouldShrinkArbitratedSessions : 1;              		// 0x00B8 (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bGameStarted : 1;                                 		// 0x00B8 (0x0004) [0x0000000000000000] [0x00004000] 
	struct FString                                     OwningPlayerName;                                 		// 0x00BC (0x0010) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FUniqueNetId                                OwningPlayerId;                                   		// 0x00CC (0x0008) [0x0000000000000000]              
	int                                                PingInMs;                                         		// 0x00D4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              MatchQuality;                                     		// 0x00D8 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	unsigned char                                      GameState;                                        		// 0x00DC (0x0001) [0x0000000040000002]              ( CPF_Const | CPF_EditInlineNotify )
	int                                                BuildUniqueId;                                    		// 0x00E0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 753 ];

		return pClassPointer;
	};

};



// Class Engine.ShaderCache ( Property size: 0 iter: 0) 
// Class name index: 5540 
// 0x005C (0x00BC - 0x0060)
class UShaderCache : public UObject
{
public:
//	 LastOffset: 60
//	 Class Propsize: bc
	unsigned char                                      UnknownData00[ 0x5C ];                            		// 0x0060 (0x005C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 755 ];

		return pClassPointer;
	};

};



// Class Engine.ShadowMap1D ( Property size: 0 iter: 0) 
// Class name index: 5542 
// 0x005C (0x00BC - 0x0060)
class UShadowMap1D : public UObject
{
public:
//	 LastOffset: 60
//	 Class Propsize: bc
	unsigned char                                      UnknownData00[ 0x5C ];                            		// 0x0060 (0x005C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 757 ];

		return pClassPointer;
	};

};



// Class Engine.ShadowMap2D ( Property size: 7 iter: 7) 
// Class name index: 5544 
// 0x0038 (0x0098 - 0x0060)
class UShadowMap2D : public UObject
{
public:
	class UShadowMapTexture2D*                         Texture;                                          		// 0x0060 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FVector2D                                   CoordinateScale;                                  		// 0x0068 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FVector2D                                   CoordinateBias;                                   		// 0x0070 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FGuid                                       LightGuid;                                        		// 0x0078 (0x0010) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIsShadowFactorTexture : 1;                       		// 0x0088 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	class UInstancedStaticMeshComponent*               Component;                                        		// 0x008C (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                InstanceIndex;                                    		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 759 ];

		return pClassPointer;
	};

};



// Class Engine.SmokeTestCommandlet ( Property size: 0 iter: 0) 
// Class name index: 5546 
// 0x0000 (0x00B4 - 0x00B4)
class USmokeTestCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 761 ];

		return pClassPointer;
	};

};



// Class Engine.SpeechRecognition ( Property size: 10 iter: 13) 
// Class name index: 5548 
// 0x00B0 (0x0110 - 0x0060)
class USpeechRecognition : public UObject
{
public:
	struct FString                                     Language;                                         		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ConfidenceThreshhold;                             		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRecogVocabulary >                  Vocabularies;                                     		// 0x0074 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            VoiceData;                                        		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            WorkingVoiceData;                                 		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            UserData;                                         		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRecogUserData                              InstanceData[ 0x4 ];                              		// 0x00B4 (0x0050) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bDirty : 1;                                       		// 0x0104 (0x0004) [0x0000000000202000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInitialised : 1;                                 		// 0x0104 (0x0004) [0x0000000000202000] [0x00000002] ( CPF_Transient )
	struct FPointer                                    FnxVoiceData;                                     		// 0x0108 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 763 ];

		return pClassPointer;
	};

};



// Class Engine.StaticMesh ( Property size: 22 iter: 22) 
// Class name index: 5550 
// 0x01A0 (0x0200 - 0x0060)
class UStaticMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x10 ];                            		// 0x0060 (0x0010) MISSED OFFSET
	TArray< struct FStaticMeshLODInfo >                LODInfo;                                          		// 0x0070 (0x0010) [0x0000000000001041]              ( CPF_Edit | CPF_EditConstArray | CPF_Native )
	float                                              LODDistanceRatio;                                 		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LODMaxRange;                                      		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData01[ 0x10 ];                            		// 0x0088 (0x0010) MISSED OFFSET
	int                                                LightMapResolution;                               		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LightMapCoordinateIndex;                          		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData02[ 0x58 ];                            		// 0x00A0 (0x0058) MISSED OFFSET
	class URB_BodySetup*                               BodySetup;                                        		// 0x00F8 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x0100 (0x003C) MISSED OFFSET
	unsigned long                                      UseSimpleLineCollision : 1;                       		// 0x013C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseSimpleBoxCollision : 1;                        		// 0x0140 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseSimpleRigidBodyCollision : 1;                  		// 0x0144 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseFullPrecisionUVs : 1;                          		// 0x0148 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUsedForInstancing : 1;                           		// 0x014C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                ConsolePreallocateInstanceCount;                  		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseMaximumStreamingTexelRatio : 1;               		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPartitionForEdgeGeometry : 1;                    		// 0x0158 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCanBecomeDynamic : 1;                            		// 0x015C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x0160 (0x0004) MISSED OFFSET
	unsigned long                                      bStripComplexCollisionForConsole : 1;             		// 0x0164 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPerLODStaticLightingForInstancing : 1;           		// 0x0168 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSkipLightmapLODShrink : 1;                       		// 0x016C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              StreamingDistanceMultiplier;                      		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData05[ 0x28 ];                            		// 0x0174 (0x0028) MISSED OFFSET
	class UInstancedFoliageSettings*                   FoliageDefaultSettings;                           		// 0x019C (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	struct FString                                     SourceFilePath;                                   		// 0x01A4 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     SourceFileTimestamp;                              		// 0x01B4 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
//	 LastOffset: 1c4
//	 Class Propsize: 200
	unsigned char                                      UnknownData06[ 0x3C ];                            		// 0x01C4 (0x003C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 765 ];

		return pClassPointer;
	};

};



// Class Engine.Surface ( Property size: 0 iter: 2) 
// Class name index: 5571 
// 0x0000 (0x0060 - 0x0060)
class USurface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 786 ];

		return pClassPointer;
	};

	float GetSurfaceHeight ( );
	float GetSurfaceWidth ( );
};



// Class Engine.MaterialInterface ( Property size: 106 iter: 124) 
// Class name index: 5573 
// 0x0204 (0x0264 - 0x0060)
class UMaterialInterface : public USurface
{
public:
	struct FRenderCommandFence_Mirror                  ParentRefFence;                                   		// 0x0060 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FLightmassMaterialInterfaceSettings         LightmassSettings;                                		// 0x0064 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     PreviewMesh;                                      		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FGuid                                       LightingGuid;                                     		// 0x0090 (0x0010) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bHasQualitySwitch : 1;                            		// 0x00A0 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bAutoFlattenMobile : 1;                           		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAutoFlattenMobileNormalTexture : 1;              		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bMobileAllowFog : 1;                              		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bGenerateSubUV : 1;                               		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseMobileSpecular : 1;                           		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bUseMobileVertexSpecular : 1;                     		// 0x00A0 (0x0004) [0x0000000020000000] [0x00000040] ( CPF_Deprecated )
	unsigned long                                      bUseMobilePixelSpecular : 1;                      		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bMobileRimFading : 1;                             		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUseMobileBumpOffset : 1;                         		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bLockColorBlending : 1;                           		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bUseMobileUniformColorMultiply : 1;               		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bUseMobileVertexColorMultiply : 1;                		// 0x00A0 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bUseMobileDetailNormal : 1;                       		// 0x00A0 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bBaseTextureTransformed : 1;                      		// 0x00A0 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bEmissiveTextureTransformed : 1;                  		// 0x00A0 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bNormalTextureTransformed : 1;                    		// 0x00A0 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bMaskTextureTransformed : 1;                      		// 0x00A0 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bDetailTextureTransformed : 1;                    		// 0x00A0 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bUseMobileWaveVertexMovement : 1;                 		// 0x00A0 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bMobileEnableBounceLight : 1;                     		// 0x00A0 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bUseMobileLandscapeMonochromeLayerBlending : 1;   		// 0x00A0 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	struct FColor                                      FlattenBackgroundColor;                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    MobileBaseTexture;                                		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    FlattenedTexture;                                 		// 0x00B0 (0x0008) [0x0000000020200000]              ( CPF_Deprecated )
	unsigned char                                      MobileBaseTextureTexCoordsSource;                 		// 0x00B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MobileAmbientOcclusionSource;                     		// 0x00B9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MobileSpecularMask;                               		// 0x00BA (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MobileEmissiveColorSource;                        		// 0x00BB (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MobileEmissiveMaskSource;                         		// 0x00BC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MobileEnvironmentMaskSource;                      		// 0x00BD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MobileEnvironmentBlendMode;                       		// 0x00BE (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MobileRimLightingMaskSource;                      		// 0x00BF (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MobileMaskTextureTexCoordsSource;                 		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MobileAlphaValueSource;                           		// 0x00C1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MobileDetailTextureTexCoordsSource;               		// 0x00C2 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MobileTextureBlendFactorSource;                   		// 0x00C3 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MobileColorMultiplySource;                        		// 0x00C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    MobileNormalTexture;                              		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              SubUVFrameRate;                                   		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubUVFrameCountAlongAxes;                         		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SubUVFrameSize;                                   		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                MobileSpecularColor;                              		// 0x00DC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileSpecularPower;                              		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    MobileEmissiveTexture;                            		// 0x00F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                MobileEmissiveColor;                              		// 0x00F8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    MobileEnvironmentTexture;                         		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileEnvironmentAmount;                          		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                MobileEnvironmentColor;                           		// 0x0114 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileEnvironmentFresnelAmount;                   		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileEnvironmentFresnelExponent;                 		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileRimLightingStrength;                        		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileRimLightingExponent;                        		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                MobileRimLightingColor;                           		// 0x0134 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileBumpOffsetReferencePlane;                   		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileBumpOffsetHeightRatio;                      		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    MobileMaskTexture;                                		// 0x014C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileOpacityMultiplier;                          		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    MobileDetailTexture;                              		// 0x0158 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    MobileDetailTexture2;                             		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    MobileDetailTexture3;                             		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                DefaultUniformColor;                              		// 0x0170 (0x0010) [0x0000000020000000]              ( CPF_Deprecated )
	struct FLinearColor                                MobileDefaultUniformColor;                        		// 0x0180 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              TransformCenterX;                                 		// 0x0190 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              MobileTransformCenterX;                           		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TransformCenterY;                                 		// 0x0198 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              MobileTransformCenterY;                           		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PannerSpeedX;                                     		// 0x01A0 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              MobilePannerSpeedX;                               		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PannerSpeedY;                                     		// 0x01A8 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              MobilePannerSpeedY;                               		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotateSpeed;                                      		// 0x01B0 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              MobileRotateSpeed;                                		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FixedScaleX;                                      		// 0x01B8 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              MobileFixedScaleX;                                		// 0x01BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FixedScaleY;                                      		// 0x01C0 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              MobileFixedScaleY;                                		// 0x01C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SineScaleX;                                       		// 0x01C8 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              MobileSineScaleX;                                 		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SineScaleY;                                       		// 0x01D0 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              MobileSineScaleY;                                 		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SineScaleFrequencyMultipler;                      		// 0x01D8 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              MobileSineScaleFrequencyMultipler;                		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FixedOffsetX;                                     		// 0x01E0 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              MobileFixedOffsetX;                               		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FixedOffsetY;                                     		// 0x01E8 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              MobileFixedOffsetY;                               		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileTangentVertexFrequencyMultiplier;           		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileVerticalFrequencyMultiplier;                		// 0x01F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileMaxVertexMovementAmplitude;                 		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileSwayFrequencyMultiplier;                    		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileSwayMaxAngle;                               		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MobileDirectionalLightDirection;                  		// 0x0204 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileDirectionalLightBrightness;                 		// 0x0210 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MobileDirectionalLightColor;                      		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MobileBounceLightDirection;                       		// 0x0218 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileBounceLightBrightness;                      		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MobileBounceLightColor;                           		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MobileSkyLightBrightness;                         		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MobileSkyLightColor;                              		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MobileLandscapeLayerNames[ 0x4 ];                 		// 0x0234 (0x0020) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      MobileLandscapeMonochomeLayerColors[ 0x4 ];       		// 0x0254 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 788 ];

		return pClassPointer;
	};

	void SetForceMipLevelsToBeResident ( unsigned long OverrideForceMiplevelsToBeResident, unsigned long bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups );
	bool GetMobileVectorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue );
	bool GetMobileTextureParameterValue ( struct FName ParameterName, class UTexture** OutValue );
	bool GetMobileScalarParameterValue ( struct FName ParameterName, float* OutValue );
	bool GetGroupName ( struct FName ParameterName, struct FName* GroupName );
	bool GetLinearColorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveLinearColor* OutValue );
	bool GetLinearColorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue );
	bool GetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector* OutValue );
	bool GetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue );
	bool GetTextureParameterValue ( struct FName ParameterName, class UTexture** OutValue );
	bool GetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* OutValue );
	bool GetScalarParameterValue ( struct FName ParameterName, float* OutValue );
	bool GetFontParameterValue ( struct FName ParameterName, class UFont** OutFontValue, int* OutFontPage );
	bool GetParameterDesc ( struct FName ParameterName, struct FString* OutDesc );
	class UPhysicalMaterial* GetPhysicalMaterial ( );
	class UMaterial* GetMaterial ( );
};



// Class Engine.RB_BodySetup ( Property size: 16 iter: 19) 
// Class name index: 5583 
// 0x0060 (0x0118 - 0x00B8)
class URB_BodySetup : public UKMeshProps
{
public:
	unsigned char                                      SleepFamily;                                      		// 0x00B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x00BC (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bFixed : 1;                                       		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNoCollision : 1;                                 		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockZeroExtent : 1;                             		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bBlockNonZeroExtent : 1;                          		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bEnableContinuousCollisionDetection : 1;          		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAlwaysFullAnimWeight : 1;                        		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bConsiderForBounds : 1;                           		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MassScale;                                        		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPointer >                          CollisionGeom;                                    		// 0x00D4 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FVector >                           CollisionGeomScale3D;                             		// 0x00E4 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FVector >                           PreCachedPhysScale;                               		// 0x00F4 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FKCachedConvexData >                PreCachedPhysData;                                		// 0x0104 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                PreCachedPhysDataVersion;                         		// 0x0114 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 798 ];

		return pClassPointer;
	};

};



// Class Engine.InstancedFoliageSettings ( Property size: 62 iter: 63) 
// Class name index: 5586 
// 0x0068 (0x00C8 - 0x0060)
class UInstancedFoliageSettings : public UObject
{
public:
	float                                              Density;                                          		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleMinX;                                        		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleMinY;                                        		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleMinZ;                                        		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleMaxX;                                        		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleMaxY;                                        		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleMaxZ;                                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      LockScaleX : 1;                                   		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      LockScaleY : 1;                                   		// 0x0080 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      LockScaleZ : 1;                                   		// 0x0080 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      AlignToNormal : 1;                                		// 0x0080 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      RandomYaw : 1;                                    		// 0x0080 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      UniformScale : 1;                                 		// 0x0080 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      ReapplyDensity : 1;                               		// 0x0080 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      ReapplyRadius : 1;                                		// 0x0080 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      ReapplyAlignToNormal : 1;                         		// 0x0080 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      ReapplyRandomYaw : 1;                             		// 0x0080 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      ReapplyScaleX : 1;                                		// 0x0080 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      ReapplyScaleY : 1;                                		// 0x0080 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      ReapplyScaleZ : 1;                                		// 0x0080 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      ReapplyRandomPitchAngle : 1;                      		// 0x0080 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      ReapplyGroundSlope : 1;                           		// 0x0080 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      ReapplyHeight : 1;                                		// 0x0080 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      ReapplyLandscapeLayer : 1;                        		// 0x0080 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      ReapplyZOffset : 1;                               		// 0x0080 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      CastShadow : 1;                                   		// 0x0080 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x0080 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bCastStaticShadow : 1;                            		// 0x0080 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bSelfShadowOnly : 1;                              		// 0x0080 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bNoModSelfShadow : 1;                             		// 0x0080 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bAcceptsDynamicDominantLightShadows : 1;          		// 0x0080 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bCastHiddenShadow : 1;                            		// 0x0080 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bCastShadowAsTwoSided : 1;                        		// 0x0080 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bAcceptsLights : 1;                               		// 0x0080 (0x0004) [0x0000000000000003] [0x04000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDynamicLights : 1;                        		// 0x0080 (0x0004) [0x0000000000000003] [0x08000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseOnePassLightingOnTranslucency : 1;            		// 0x0080 (0x0004) [0x0000000000000003] [0x10000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsePrecomputedShadows : 1;                       		// 0x0080 (0x0004) [0x0000000000000003] [0x20000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCollideActors : 1;                               		// 0x0080 (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      bBlockActors : 1;                                 		// 0x0080 (0x0004) [0x0000000000000001] [0x80000000] ( CPF_Edit )
	unsigned long                                      bBlockNonZeroExtent : 1;                          		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBlockZeroExtent : 1;                             		// 0x0084 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      IsSelected : 1;                                   		// 0x0084 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      ShowNothing : 1;                                  		// 0x0084 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      ShowPaintSettings : 1;                            		// 0x0084 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      ShowInstanceSettings : 1;                         		// 0x0084 (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              AlignMaxAngle;                                    		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomPitchAngle;                                 		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GroundSlope;                                      		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightMin;                                        		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightMax;                                        		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LandscapeLayer;                                   		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZOffsetMin;                                       		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZOffsetMax;                                       		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxInstancesPerCluster;                           		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxClusterRadius;                                 		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReapplyDensityAmount;                             		// 0x00B4 (0x0004) [0x0000000000000000]              
	int                                                StartCullDistance;                                		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EndCullDistance;                                  		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CullOption;                                       		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DetailMode;                                       		// 0x00C1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                DisplayOrder;                                     		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 801 ];

		return pClassPointer;
	};

};



// Class Engine.FracturedStaticMesh ( Property size: 27 iter: 28) 
// Class name index: 5590 
// 0x00E0 (0x02E0 - 0x0200)
class UFracturedStaticMesh : public UStaticMesh
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0200 (0x0004) MISSED OFFSET
	float                                              CoreMeshScale;                                    		// 0x0204 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      UnknownData01[ 0x30 ];                            		// 0x0208 (0x0030) MISSED OFFSET
	unsigned long                                      bSliceUsingCoreCollision : 1;                     		// 0x0238 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UParticleSystem*                             FragmentDestroyEffect;                            		// 0x023C (0x0008) [0x0000000000000000]              
	TArray< class UParticleSystem* >                   FragmentDestroyEffects;                           		// 0x0244 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              FragmentDestroyEffectScale;                       		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FragmentHealthScale;                              		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FragmentMinHealth;                                		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FragmentMaxHealth;                                		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUniformFragmentHealth : 1;                       		// 0x0264 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ChunkLinVel;                                      		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChunkAngVel;                                      		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChunkLinHorizontalScale;                          		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionVelScale;                                		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCompositeChunksExplodeOnImpact : 1;              		// 0x0278 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFixIsolatedChunks : 1;                           		// 0x027C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysBreakOffIsolatedIslands : 1;               		// 0x0280 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSpawnPhysicsChunks : 1;                          		// 0x0284 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ChanceOfPhysicsChunk;                             		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionChanceOfPhysicsChunk;                    		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalPhysicsChunkScaleMin;                       		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalPhysicsChunkScaleMax;                       		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionPhysicsChunkScaleMin;                    		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionPhysicsChunkScaleMax;                    		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinConnectionSupportArea;                         		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          DynamicOutsideMaterial;                           		// 0x02A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LoseChunkOutsideMaterial;                         		// 0x02AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                OutsideMaterialIndex;                             		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
//	 LastOffset: 2b8
//	 Class Propsize: 2e0
	unsigned char                                      UnknownData02[ 0x28 ];                            		// 0x02B8 (0x0028) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 805 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleSystem ( Property size: 42 iter: 53) 
// Class name index: 5593 
// 0x011C (0x017C - 0x0060)
class UParticleSystem : public UObject
{
public:
	unsigned char                                      SystemUpdateMode;                                 		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LODMethod;                                        		// 0x0061 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      OcclusionBoundsMethod;                            		// 0x0062 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpdateTime_FPS;                                   		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpdateTime_Delta;                                 		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              WarmupTime;                                       		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WarmupTickRate;                                   		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UParticleEmitter* >                  Emitters;                                         		// 0x0074 (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UParticleSystemComponent*                    PreviewComponent;                                 		// 0x0084 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FRotator                                    ThumbnailAngle;                                   		// 0x008C (0x000C) [0x0000000000000000]              
	float                                              ThumbnailDistance;                                		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              ThumbnailWarmup;                                  		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLit : 1;                                         		// 0x00A0 (0x0004) [0x0000000020000002] [0x00000001] ( CPF_Const | CPF_Deprecated )
	unsigned long                                      bOrientZAxisTowardCamera : 1;                     		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRegenerateLODDuplicate : 1;                      		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                 		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bShouldResetPeakCounts : 1;                       		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bHasPhysics : 1;                                  		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bUseRealtimeThumbnail : 1;                        		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      ThumbnailImageOutOfDate : 1;                      		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bSkipSpawnCountCheck : 1;                         		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUseDelayRange : 1;                               		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x00A4 (0x0008) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              LODDistanceCheckTime;                             		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    LODDistances;                                     		// 0x00B0 (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	int                                                EditorLODSetting;                                 		// 0x00C0 (0x0004) [0x0000000000000000]              
	TArray< struct FParticleSystemLOD >                LODSettings;                                      		// 0x00C4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FBox                                        FixedRelativeBoundingBox;                         		// 0x00D4 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SecondsBeforeInactive;                            		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FloorMesh;                                        		// 0x00F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     FloorPosition;                                    		// 0x0104 (0x000C) [0x0000000000000000]              
	struct FRotator                                    FloorRotation;                                    		// 0x0110 (0x000C) [0x0000000000000000]              
	float                                              FloorScale;                                       		// 0x011C (0x0004) [0x0000000000000000]              
	struct FVector                                     FloorScale3D;                                     		// 0x0120 (0x000C) [0x0000000000000000]              
	struct FColor                                      BackgroundColor;                                  		// 0x012C (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  ThumbnailImage;                                   		// 0x0130 (0x0008) [0x0000000000000000]              
	float                                              Delay;                                            		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DelayLow;                                         		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MacroUVPosition;                                  		// 0x0140 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MacroUVRadius;                                    		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FBox                                        CustomOcclusionBounds;                            		// 0x0150 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FLODSoloTrack >                     SoloTracking;                                     		// 0x016C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 808 ];

		return pClassPointer;
	};

	float GetMaxLifespan ( float InComponentDelay );
	bool SetLODDistance ( int LODLevelIndex, float InDistance );
	void SetCurrentLODMethod ( unsigned char InMethod );
	float GetLODDistance ( int LODLevelIndex );
	int GetLODLevelCount ( );
	unsigned char GetCurrentLODMethod ( );
};



// Class Engine.Texture ( Property size: 40 iter: 48) 
// Class name index: 825 
// 0x00CC (0x012C - 0x0060)
class UTexture : public USurface
{
public:
	unsigned long                                      SRGB : 1;                                         		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RGBE : 1;                                         		// 0x0060 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsSourceArtUncompressed : 1;                     		// 0x0060 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      CompressionNoAlpha : 1;                           		// 0x0060 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      CompressionNone : 1;                              		// 0x0060 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      CompressionNoMipmaps : 1;                         		// 0x0060 (0x0004) [0x0000000020000000] [0x00000020] ( CPF_Deprecated )
	unsigned long                                      CompressionFullDynamicRange : 1;                  		// 0x0060 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      DeferCompression : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      NeverStream : 1;                                  		// 0x0060 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bDitherMipMapAlpha : 1;                           		// 0x0060 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bPreserveBorderR : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bPreserveBorderG : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bPreserveBorderB : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bPreserveBorderA : 1;                             		// 0x0060 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bNoTiling : 1;                                    		// 0x0060 (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bForcePVRTC4 : 1;                                 		// 0x0060 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bAsyncResourceReleaseHasBeenStarted : 1;          		// 0x0060 (0x0004) [0x0000000000002002] [0x00010000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseCinematicMipLevels : 1;                       		// 0x0060 (0x0004) [0x0000000000002002] [0x00020000] ( CPF_Const | CPF_Transient )
	float                                              UnpackMin[ 0x4 ];                                 		// 0x0064 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              UnpackMax[ 0x4 ];                                 		// 0x0074 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FUntypedBulkData_Mirror                     SourceArt;                                        		// 0x0084 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      CompressionSettings;                              		// 0x00C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Filter;                                           		// 0x00C5 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LODGroup;                                         		// 0x00C6 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CachedLODGroup;                                   		// 0x00C7 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      MipGenSettings;                                   		// 0x00C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBias;                                          		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CachedCombinedLODBias;                            		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumCinematicMipLevels;                            		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     SourceFilePath;                                   		// 0x00D8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     SourceFileTimestamp;                              		// 0x00E8 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FPointer                                    Resource;                                         		// 0x00F8 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FGuid                                       LightingGuid;                                     		// 0x0100 (0x0010) [0x0000000000000002]              ( CPF_Const )
	float                                              AdjustBrightness;                                 		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdjustBrightnessCurve;                            		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdjustVibrance;                                   		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdjustSaturation;                                 		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdjustRGBCurve;                                   		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdjustHue;                                        		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InternalFormatLODBias;                            		// 0x0128 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 838 ];

		return pClassPointer;
	};

};



// Class Engine.Texture2D ( Property size: 35 iter: 43) 
// Class name index: 5624 
// 0x0108 (0x0234 - 0x012C)
class UTexture2D : public UTexture
{
public:
	struct FIndirectArray_Mirror                       Mips;                                             		// 0x012C (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FIndirectArray_Mirror                       CachedPVRTCMips;                                  		// 0x013C (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FIndirectArray_Mirror                       CachedATITCMips;                                  		// 0x014C (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FIndirectArray_Mirror                       CachedETCMips;                                    		// 0x015C (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                CachedFlashMipsMaxResolution;                     		// 0x016C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUntypedBulkData_Mirror                     CachedFlashMips;                                  		// 0x0170 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                SizeX;                                            		// 0x01B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x01B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                OriginalSizeX;                                    		// 0x01B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                OriginalSizeY;                                    		// 0x01BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      Format;                                           		// 0x01C0 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x01C1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x01C2 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsEditorOnly : 1;                                		// 0x01C4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsStreamable : 1;                                		// 0x01C4 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasCancelationPending : 1;                       		// 0x01C4 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasBeenLoadedFromPersistentArchive : 1;          		// 0x01C4 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bForceMiplevelsToBeResident : 1;                  		// 0x01C4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bGlobalForceMipLevelsToBeResident : 1;            		// 0x01C4 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsCompositingSource : 1;                         		// 0x01C4 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasBeenPaintedInEditor : 1;                      		// 0x01C4 (0x0004) [0x0000000000000000] [0x00000080] 
	float                                              ForceMipLevelsToBeResidentTimestamp;              		// 0x01C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       TextureFileCacheName;                             		// 0x01CC (0x0008) [0x0000000000000000]              
	struct FGuid                                       TextureFileCacheGuid;                             		// 0x01D4 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                RequestedMips;                                    		// 0x01E4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ResidentMips;                                     		// 0x01E8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                MipsToRemoveOnCompress;                           		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FThreadSafeCounter                          PendingMipChangeRequestStatus;                    		// 0x01F0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< unsigned char >                            SystemMemoryData;                                 		// 0x01F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FTextureLinkedListMirror                    StreamableTexturesLink;                           		// 0x0204 (0x0018) [0x0000000001201002]              ( CPF_Const | CPF_Native )
	int                                                StreamingIndex;                                   		// 0x021C (0x0004) [0x0000000000202002]              ( CPF_Const | CPF_Transient )
	int                                                MipTailBaseIdx;                                   		// 0x0220 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    ResourceMem;                                      		// 0x0224 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                FirstResourceMemMip;                              		// 0x022C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Timer;                                            		// 0x0230 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 840 ];

		return pClassPointer;
	};

	int CreateListOfTexturesToUnload ( int TotalBytesNeeded, TArray< class UTexture* >* ListOfTexturesToUnload, TArray< class UTexture* >* ListOfTexturesToAvoid, TArray< unsigned char >* OnlyUseTheseTextureGroups );
	int GetBytesUsedForTextureResources ( TArray< class UTexture* >* ListOfTextures );
	int UnloadTextureResources ( TArray< class UTexture* >* ListOfTexturesToUnload );
	int LoadTextureResources ( TArray< class UTexture* >* ListOfTexturesToLoad );
	class UTexture2D* Create ( int InSizeX, int InSizeY, unsigned char InFormat );
	void SetForceMipLevelsToBeResident ( float Seconds, int CinematicTextureGroups );
};



// Class Engine.LightMapTexture2D ( Property size: 0 iter: 0) 
// Class name index: 5626 
// 0x0004 (0x0238 - 0x0234)
class ULightMapTexture2D : public UTexture2D
{
public:
//	 LastOffset: 234
//	 Class Propsize: 238
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0234 (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 842 ];

		return pClassPointer;
	};

};



// Class Engine.ShadowMapTexture2D ( Property size: 1 iter: 1) 
// Class name index: 5628 
// 0x0004 (0x0238 - 0x0234)
class UShadowMapTexture2D : public UTexture2D
{
public:
	int                                                ShadowmapFlags;                                   		// 0x0234 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 844 ];

		return pClassPointer;
	};

};



// Class Engine.TranslationContext ( Property size: 1 iter: 2) 
// Class name index: 5630 
// 0x0010 (0x0070 - 0x0060)
class UTranslationContext : public UObject
{
public:
	TArray< class UTranslatorTag* >                    TranslatorTags;                                   		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 846 ];

		return pClassPointer;
	};

	bool RegisterTranslatorTag ( class UTranslatorTag* InTagHandler );
};



// Class Engine.TranslatorTag ( Property size: 1 iter: 2) 
// Class name index: 5632 
// 0x0008 (0x0068 - 0x0060)
class UTranslatorTag : public UObject
{
public:
	struct FName                                       Tag;                                              		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 848 ];

		return pClassPointer;
	};

	struct FString Translate ( struct FString InArgument );
};



// Class Engine.StringsTag ( Property size: 0 iter: 1) 
// Class name index: 5634 
// 0x0000 (0x0068 - 0x0068)
class UStringsTag : public UTranslatorTag
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 850 ];

		return pClassPointer;
	};

	struct FString Translate ( struct FString InArgument );
};



// Class Engine.UIRoot ( Property size: 1 iter: 20) 
// Class name index: 5636 
// 0x0010 (0x0070 - 0x0060)
class UUIRoot : public UObject
{
public:
	TArray< struct FString >                           BadCapsLocContexts;                               		// 0x0060 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 852 ];

		return pClassPointer;
	};

	struct FString SafeCaps ( struct FString StringToCap );
	class UOnlinePlayerInterfaceEx* GetOnlinePlayerInterfaceEx ( );
	class UOnlinePlayerInterface* GetOnlinePlayerInterface ( );
	class UOnlineGameInterface* GetOnlineGameInterface ( );
	class UUIDataStore* StaticResolveDataStore ( struct FName DataStoreTag, class ULocalPlayer* InPlayerOwner );
	class UGameUISceneClient* GetSceneClient ( );
	class UUIInteraction* GetCurrentUIController ( );
	unsigned char GetInputPlatformType ( class ULocalPlayer* OwningPlayer );
};



// Class Engine.Interaction ( Property size: 4 iter: 16) 
// Class name index: 5638 
// 0x0040 (0x00B0 - 0x0070)
class UInteraction : public UUIRoot
{
public:
	struct FScriptDelegate                             __OnReceivedNativeInputKey__Delegate;             		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0074 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnReceivedNativeInputAxis__Delegate;            		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0084 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnReceivedNativeInputChar__Delegate;            		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0094 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnInitialize__Delegate;                         		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x00A4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 854 ];

		return pClassPointer;
	};

	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyGameSessionEnded ( );
	void Initialized ( );
	void OnInitialize ( );
	void Init ( );
	void eventPostRender ( class UCanvas* Canvas );
	void eventTick ( float DeltaTime );
	bool OnReceivedNativeInputChar ( int ControllerId, struct FString Unicode );
	bool OnReceivedNativeInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	bool OnReceivedNativeInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
};



// Class Engine.UIInteraction ( Property size: 20 iter: 39) 
// Class name index: 5640 
// 0x0124 (0x01D4 - 0x00B0)
class UUIInteraction : public UInteraction
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x00B0 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FGlobalDataStoreClientManager;            		// 0x00B8 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x00C0 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UUIManager*                                  UIManager;                                        		// 0x00C8 (0x0008) [0x0000000000000000]              
	class UClass*                                      UIManagerClass;                                   		// 0x00D0 (0x0008) [0x0000000000000000]              
	class UClass*                                      SceneClientClass;                                 		// 0x00D8 (0x0008) [0x0000000000000000]              
	class UGameUISceneClient*                          SceneClient;                                      		// 0x00E0 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FName >                             SupportedDoubleClickKeys;                         		// 0x00E8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UDataStoreClient*                            DataStoreManager;                                 		// 0x00F8 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bProcessInput : 1;                                		// 0x0100 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	float                                              UIJoystickDeadZone;                               		// 0x0104 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              UIAxisMultiplier;                                 		// 0x0108 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              AxisRepeatDelay;                                  		// 0x010C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MouseButtonRepeatDelay;                           		// 0x0110 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              DoubleClickTriggerSeconds;                        		// 0x0114 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                DoubleClickPixelTolerance;                        		// 0x0118 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FUIKeyRepeatData                            MouseButtonRepeatInfo;                            		// 0x011C (0x0010) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FUIAxisEmulationDefinition >        ConfiguredAxisEmulationDefinitions;               		// 0x012C (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x013C (0x0048) UNKNOWN PROPERTY: MapProperty Engine.UIInteraction.AxisEmulationDefinitions
	struct FUIAxisEmulationData                        AxisInputEmulation[ 0x4 ];                        		// 0x0184 (0x0050) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 856 ];

		return pClassPointer;
	};

	void NotifyGameSessionEnded ( );
	unsigned char eventGetNATType ( );
	int GetConnectedGamepadCount ( TArray< unsigned long > ControllerConnectionStatusOverrides );
	bool IsGamepadConnected ( int ControllerId );
	int GetNumGuestsLoggedIn ( );
	int GetLoggedInPlayerCount ( unsigned long bRequireOnlineLogin );
	bool eventIsLoggedIn ( int ControllerId, unsigned long bRequireOnlineLogin );
	bool eventHasLinkConnection ( );
	unsigned char GetLowestLoginStatusOfControllers ( );
	unsigned char eventGetLoginStatus ( int ControllerId );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	class ULocalPlayer* GetLocalPlayer ( int PlayerIndex );
	class UDataStoreClient* GetDataStoreClient ( );
	int GetPlayerControllerId ( int PlayerIndex );
	int GetPlayerIndex ( int ControllerId );
	int GetPlayerCount ( );
};



// Class Engine.UIManager ( Property size: 0 iter: 6) 
// Class name index: 5642 
// 0x0000 (0x0060 - 0x0060)
class UUIManager : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 858 ];

		return pClassPointer;
	};

	int FindLocalPlayerIndex ( class UPlayer* P );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void eventPauseGame ( unsigned long bDesiredPauseState, int PlayerIndex );
	bool CanUnpauseInternalUI ( );
	class UUIManager* GetUIManager ( );
};



// Class Engine.WaveFormBase ( Property size: 1 iter: 1) 
// Class name index: 5644 
// 0x0008 (0x0068 - 0x0060)
class UWaveFormBase : public UObject
{
public:
	class UForceFeedbackWaveform*                      TheWaveForm;                                      		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 860 ];

		return pClassPointer;
	};

};



// Class Engine.World ( Property size: 0 iter: 0) 
// Class name index: 5646 
// 0x037C (0x03DC - 0x0060)
class UWorld : public UObject
{
public:
//	 LastOffset: 60
//	 Class Propsize: 3dc
	unsigned char                                      UnknownData00[ 0x37C ];                           		// 0x0060 (0x037C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 862 ];

		return pClassPointer;
	};

};



// Class Engine.EnvironmentVolume ( Property size: 3 iter: 4) 
// Class name index: 5648 
// 0x0014 (0x0290 - 0x027C)
class AEnvironmentVolume : public AVolume
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;           		// 0x027C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;             		// 0x0284 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bSplitNavMesh : 1;                                		// 0x028C (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 864 ];

		return pClassPointer;
	};

	void SetSplitNavMesh ( unsigned long bNewValue );
};



// Class Engine.TestSplittingVolume ( Property size: 1 iter: 1) 
// Class name index: 5650 
// 0x0008 (0x0284 - 0x027C)
class ATestSplittingVolume : public AVolume
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;             		// 0x027C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 866 ];

		return pClassPointer;
	};

};



// Class Engine.AIController ( Property size: 7 iter: 18) 
// Class name index: 5652 
// 0x0024 (0x0450 - 0x042C)
class AAIController : public AController
{
public:
	unsigned long                                      bAdjustFromWalls : 1;                             		// 0x042C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bReverseScriptedRoute : 1;                        		// 0x042C (0x0004) [0x0000000000000000] [0x00000002] 
	float                                              Skill;                                            		// 0x0430 (0x0004) [0x0000000000000000]              
	class AActor*                                      ScriptedMoveTarget;                               		// 0x0434 (0x0008) [0x0000000000000000]              
	class ARoute*                                      ScriptedRoute;                                    		// 0x043C (0x0008) [0x0000000000000000]              
	int                                                ScriptedRouteIndex;                               		// 0x0444 (0x0004) [0x0000000000000000]              
	class AActor*                                      ScriptedFocus;                                    		// 0x0448 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 868 ];

		return pClassPointer;
	};

	bool CanFireWeapon ( class AWeapon* Wpn, unsigned char FireModeNum );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyWeaponFired ( class AWeapon* W, unsigned char FireMode );
	void OnAIMoveToActor ( class USeqAct_AIMoveToActor* Action );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void eventSetTeam ( int inTeamIdx );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void Reset ( );
	void eventPreBeginPlay ( );
};



// Class Engine.CrowdAgentBase ( Property size: 1 iter: 2) 
// Class name index: 5654 
// 0x0008 (0x0248 - 0x0240)
class ACrowdAgentBase : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavigationHandle;              		// 0x0240 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 870 ];

		return pClassPointer;
	};

	void eventNotifyPathChanged ( );
};



// Class Engine.CrowdPopulationManagerBase ( Property size: 0 iter: 0) 
// Class name index: 5656 
// 0x0000 (0x0240 - 0x0240)
class ACrowdPopulationManagerBase : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 872 ];

		return pClassPointer;
	};

};



// Class Engine.PathTargetPoint ( Property size: 0 iter: 1) 
// Class name index: 5658 
// 0x0000 (0x0248 - 0x0248)
class APathTargetPoint : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 874 ];

		return pClassPointer;
	};

	bool ShouldBeHiddenBySHOW_NavigationNodes ( );
};



// Class Engine.NavMeshObstacle ( Property size: 3 iter: 12) 
// Class name index: 5660 
// 0x000C (0x024C - 0x0240)
class ANavMeshObstacle : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;           		// 0x0240 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bEnabled : 1;                                     		// 0x0248 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPreserveInternalGeo : 1;                         		// 0x0248 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 876 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct ANavMeshObstacle_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ANavMeshObstacle_FCheckpointRecord* Record );
	void SetEnabled ( unsigned long bInEnabled );
	void OnToggle ( class USeqAct_Toggle* Action );
	void PostBeginPlay ( );
	void UnRegisterObstacle ( );
	void RegisterObstacle ( );
	bool eventGetObstacleBoudingShape ( TArray< struct FVector >* Shape );
};



// Class Engine.PylonSeed ( Property size: 1 iter: 1) 
// Class name index: 5662 
// 0x0008 (0x0248 - 0x0240)
class APylonSeed : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;             		// 0x0240 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 878 ];

		return pClassPointer;
	};

};



// Class Engine.CoverGroupRenderingComponent ( Property size: 0 iter: 0) 
// Class name index: 5664 
// 0x0000 (0x0238 - 0x0238)
class UCoverGroupRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 880 ];

		return pClassPointer;
	};

};



// Class Engine.MeshComponent ( Property size: 1 iter: 7) 
// Class name index: 5666 
// 0x0010 (0x0248 - 0x0238)
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x0238 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 882 ];

		return pClassPointer;
	};

	class UMaterialInstanceTimeVarying* CreateAndSetMaterialInstanceTimeVarying ( int ElementIndex );
	class UMaterialInstanceConstant* CreateAndSetMaterialInstanceConstant ( int ElementIndex );
	void PrestreamTextures ( float Seconds, unsigned long bPrioritizeCharacterTextures, int CinematicTextureGroups );
	int GetNumElements ( );
	void SetMaterial ( int ElementIndex, class UMaterialInterface* Material );
	class UMaterialInterface* GetMaterial ( int ElementIndex );
};



// Class Engine.StaticMeshComponent ( Property size: 23 iter: 30) 
// Class name index: 5668 
// 0x0080 (0x02C8 - 0x0248)
class UStaticMeshComponent : public UMeshComponent
{
public:
	int                                                ForcedLodModel;                                   		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PreviousLODLevel;                                 		// 0x024C (0x0004) [0x0000000000000000]              
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0250 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      WireframeColor;                                   		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIgnoreInstanceForTextureStreaming : 1;           		// 0x025C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOverrideLightMapResolution : 1;                  		// 0x025C (0x0004) [0x0000000020000002] [0x00000002] ( CPF_Const | CPF_Deprecated )
	unsigned long                                      bOverrideLightMapRes : 1;                         		// 0x025C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	int                                                OverriddenLightMapResolution;                     		// 0x0260 (0x0004) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	int                                                OverriddenLightMapRes;                            		// 0x0264 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              OverriddenLODMaxRange;                            		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StreamingDistanceMultiplier;                      		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubDivisionStepSize;                              		// 0x0270 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bUseSubDivisions : 1;                             		// 0x0274 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bForceStaticDecals : 1;                           		// 0x0274 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bCanHighlightSelectedSections : 1;                		// 0x0274 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bUseSimpleLightmapModifications : 1;              		// 0x0274 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	class UTexture*                                    SimpleLightmapModificationTexture;                		// 0x0278 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SimpleLightmapModificationFunction;               		// 0x0280 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNeverBecomeDynamic : 1;                          		// 0x0284 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FGuid >                             IrrelevantLights;                                 		// 0x0288 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FStaticMeshComponentLODInfo >       LODData;                                          		// 0x0298 (0x0010) [0x0000000080001002]              ( CPF_Const | CPF_Native | CPF_RepNotify | CPF_Interp | CPF_NonTransactional )
	int                                                VertexPositionVersionNumber;                      		// 0x02A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                		// 0x02AC (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 884 ];

		return pClassPointer;
	};

	bool CanBecomeDynamic ( );
	void SetForceStaticDecals ( unsigned long bInForceStaticDecals );
	void DisableRBCollisionWithSMC ( class UPrimitiveComponent* OtherSMC, unsigned long bDisabled );
	bool SetStaticMesh ( class UStaticMesh* NewMesh, unsigned long bForce );
};



// Class Engine.CoverMeshComponent ( Property size: 6 iter: 7) 
// Class name index: 5670 
// 0x0038 (0x0300 - 0x02C8)
class UCoverMeshComponent : public UStaticMeshComponent
{
public:
	TArray< struct FCoverMeshes >                      Meshes;                                           		// 0x02C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     LocationOffset;                                   		// 0x02D8 (0x000C) [0x0000000000000000]              
	class UStaticMesh*                                 AutoAdjustOn;                                     		// 0x02E4 (0x0008) [0x0000000000000000]              
	class UStaticMesh*                                 AutoAdjustOff;                                    		// 0x02EC (0x0008) [0x0000000000000000]              
	class UStaticMesh*                                 Disabled;                                         		// 0x02F4 (0x0008) [0x0000000000000000]              
	unsigned long                                      bShowWhenNotSelected : 1;                         		// 0x02FC (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 886 ];

		return pClassPointer;
	};

};



// Class Engine.NavMeshRenderingComponent ( Property size: 0 iter: 0) 
// Class name index: 5672 
// 0x0000 (0x0238 - 0x0238)
class UNavMeshRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 888 ];

		return pClassPointer;
	};

};



// Class Engine.PathRenderingComponent ( Property size: 0 iter: 0) 
// Class name index: 5674 
// 0x0000 (0x0238 - 0x0238)
class UPathRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 890 ];

		return pClassPointer;
	};

};



// Class Engine.RouteRenderingComponent ( Property size: 0 iter: 0) 
// Class name index: 5676 
// 0x0000 (0x0238 - 0x0238)
class URouteRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 892 ];

		return pClassPointer;
	};

};



// Class Engine.AICommandBase ( Property size: 0 iter: 1) 
// Class name index: 5678 
// 0x0000 (0x0060 - 0x0060)
class UAICommandBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 894 ];

		return pClassPointer;
	};

	int eventGetUtility ( class AAIController* InAI );
};



// Class Engine.AutoNavMeshPathObstacleUnregister ( Property size: 1 iter: 1) 
// Class name index: 5680 
// 0x0010 (0x0070 - 0x0060)
class UAutoNavMeshPathObstacleUnregister : public UObject
{
public:
	class UInterface_NavMeshPathObstacle*              PathObstacleRef;                                  		// 0x0060 (0x0010) [0x0000000000001000]              ( CPF_Native )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0068 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 896 ];

		return pClassPointer;
	};

};



// Class Engine.Interface_NavMeshPathObject ( Property size: 0 iter: 0) 
// Class name index: 5682 
// 0x0000 (0x0060 - 0x0060)
class UInterface_NavMeshPathObject : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 898 ];

		return pClassPointer;
	};

};



// Class Engine.Interface_NavMeshPathSwitch ( Property size: 0 iter: 1) 
// Class name index: 5684 
// 0x0000 (0x0060 - 0x0060)
class UInterface_NavMeshPathSwitch : public UInterface_NavMeshPathObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 900 ];

		return pClassPointer;
	};

	bool eventAIActivateSwitch ( class AAIController* AI );
};



// Class Engine.Interface_NavMeshPathObstacle ( Property size: 0 iter: 1) 
// Class name index: 5686 
// 0x0000 (0x0060 - 0x0060)
class UInterface_NavMeshPathObstacle : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 902 ];

		return pClassPointer;
	};

};



// Class Engine.Interface_PylonGeometryProvider ( Property size: 0 iter: 0) 
// Class name index: 5688 
// 0x0000 (0x0060 - 0x0060)
class UInterface_PylonGeometryProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 904 ];

		return pClassPointer;
	};

};



// Class Engine.Interface_RVO ( Property size: 0 iter: 0) 
// Class name index: 5690 
// 0x0000 (0x0060 - 0x0060)
class UInterface_RVO : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 906 ];

		return pClassPointer;
	};

};



// Class Engine.NavigationHandle ( Property size: 21 iter: 74) 
// Class name index: 5692 
// 0x0140 (0x01A0 - 0x0060)
class UNavigationHandle : public UObject
{
public:
	class APylon*                                      AnchorPylon;                                      		// 0x0060 (0x0008) [0x0000000000000000]              
	struct FPointer                                    AnchorPoly;                                       		// 0x0068 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPathStore                                  PathCache;                                        		// 0x0070 (0x0010) [0x0000000000000000]              
	struct FPointer                                    BestUnfinishedPathPoint;                          		// 0x0080 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    CurrentEdge;                                      		// 0x0088 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    SubGoal_DestPoly;                                 		// 0x0090 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FBasedPosition                              FinalDestination;                                 		// 0x0098 (0x0038) [0x0000000000000000]              
	unsigned long                                      bSkipRouteCacheUpdates : 1;                       		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseORforEvaluateGoal : 1;                        		// 0x00D0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDebugConstraintsAndGoalEvals : 1;                		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUltraVerbosePathDebugging : 1;                   		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bVisualPathDebugging : 1;                         		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDebug_Breadcrumbs : 1;                           		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	class UNavMeshPathConstraint*                      PathConstraintList;                               		// 0x00D4 (0x0008) [0x0000000000000000]              
	class UNavMeshPathGoalEvaluator*                   PathGoalList;                                     		// 0x00DC (0x0008) [0x0000000000000000]              
	struct FNavMeshPathParams                          CachedPathParams;                                 		// 0x00E4 (0x0034) [0x0000000000000000]              
	unsigned char                                      LastPathError;                                    		// 0x0118 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastPathFailTime;                                 		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Breadcrumbs[ 0xA ];                               		// 0x0120 (0x0078) [0x0000000000000000]              
	int                                                BreadCrumbMostRecentIdx;                          		// 0x0198 (0x0004) [0x0000000000000000]              
	float                                              BreadCrumbDistanceInterval;                       		// 0x019C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 908 ];

		return pClassPointer;
	};

	void DrawBreadCrumbs ( unsigned long bPersistent );
	bool StaticGetValidatedAnchorPosition ( struct FVector StartCheckBaseLocation, struct FVector Extent, struct FVector* out_NewAnchorLoc );
	bool GetValidatedAnchorPosition ( struct FVector OverrideStartLoc, struct FVector* out_NewAnchorLoc );
	bool GetAllCoverSlotsInRadius ( struct FVector FromLoc, float Radius, TArray< struct FCoverInfo >* out_CoverList );
	bool PopulatePathfindingParamCache ( );
	struct FVector MoveToDesiredHeightAboveMesh ( struct FVector Point, float Height );
	void CopyMovePointsFromPathCache ( struct FVector FinalDest, TArray< struct FVector >* out_MovePoints );
	float CalculatePathDistance ( struct FVector FinalDest );
	struct FVector GetFirstMoveLocation ( );
	bool IsAnchorInescapable ( );
	void LimitPathCacheDistance ( float MaxDist );
	void GetValidPositionsForBox ( struct FVector pos, float Radius, struct FVector Extent, unsigned long bMustBeReachableFromStartPos, int MaxPositions, float MinRadius, struct FVector ValidBoxAroundStartPos, TArray< struct FVector >* out_ValidPositions );
	void GetAllPolyCentersWithinBounds ( struct FVector pos, struct FVector Extent, TArray< struct FVector >* out_PolyCtrs );
	unsigned char GetCurrentEdgeType ( );
	void ClearCurrentEdge ( );
	struct FString GetCurrentEdgeDebugText ( );
	void PrintPathCacheDebugText ( );
	void DrawPathCache ( struct FVector DrawOffset, unsigned long bPersistent, struct FColor DrawColor );
	bool ActorReachable ( class AActor* A );
	bool PointReachable ( struct FVector Point, struct FVector OverrideStartPoint, unsigned long bAllowHitsInEndCollisionBox );
	bool PointCheck ( struct FVector Pt, struct FVector Extent );
	bool LineCheck ( struct FVector Start, struct FVector End, struct FVector Extent, struct FVector* out_HitLocation, struct FVector* out_HitNormal );
	bool ObstaclePointCheck ( struct FVector Pt, struct FVector Extent );
	bool ObstacleLineCheck ( struct FVector Start, struct FVector End, struct FVector Extent, struct FVector* out_HitLoc, struct FVector* out_HitNorm );
	bool SuggestMovePreparation ( class AController* C, struct FVector* MovePt );
	bool FindPath ( class AActor** out_DestActor, int* out_DestItem );
	bool ComputeValidFinalDestination ( struct FVector* out_ComputedPosition );
	bool SetFinalDestination ( struct FVector FinalDest );
	bool GetNextMoveLocation ( float ArrivalDistance, struct FVector* out_MoveDest );
	class APylon* GetPylonFromPos ( struct FVector Position );
	bool FindPylon ( );
	struct FVector GetBestUnfinishedPathPoint ( );
	bool PathCache_RemoveIndex ( int InIdx, int Count );
	struct FVector PathCache_GetGoalPoint ( );
	bool PathCache_Empty ( );
	int GetPathCacheLength ( );
	class UNavMeshPathGoalEvaluator* CreatePathGoalEvaluator ( class UClass* GoalEvalClass );
	class UNavMeshPathConstraint* CreatePathConstraint ( class UClass* ConstraintClass );
	bool DoesPylonAHaveAPathToPylonB ( class APylon* A, class APylon* B );
	class APylon* BuildFromPylonAToPylonB ( class APylon* A, class APylon* B );
	void AddGoalEvaluator ( class UNavMeshPathGoalEvaluator* Evaluator );
	void AddPathConstraint ( class UNavMeshPathConstraint* Constraint );
	void ClearConstraints ( );
	bool GetNextBreadCrumb ( struct FVector* out_BreadCrumbLoc );
	void UpdateBreadCrumbs ( struct FVector InLocation );
	void CopyPathStoreToPathCache ( struct FPathStore* InStore );
};



// Class Engine.NavMeshGoal_Filter ( Property size: 3 iter: 4) 
// Class name index: 5694 
// 0x000C (0x006C - 0x0060)
class UNavMeshGoal_Filter : public UObject
{
public:
	unsigned long                                      bShowDebug : 1;                                   		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                NumNodesThrownOut;                                		// 0x0064 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumNodesProcessed;                                		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 910 ];

		return pClassPointer;
	};

	struct FString eventGetDumpString ( );
};



// Class Engine.NavMeshGoalFilter_MinPathDistance ( Property size: 1 iter: 2) 
// Class name index: 5696 
// 0x0004 (0x0070 - 0x006C)
class UNavMeshGoalFilter_MinPathDistance : public UNavMeshGoal_Filter
{
public:
	int                                                MinDistancePathShouldBe;                          		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 912 ];

		return pClassPointer;
	};

	bool MustBeLongerPathThan ( class UNavMeshGoal_GenericFilterContainer* FilterContainer, int InMinDistancePathShouldBe );
};



// Class Engine.NavMeshGoalFilter_NotNearOtherAI ( Property size: 1 iter: 2) 
// Class name index: 5698 
// 0x0004 (0x0070 - 0x006C)
class UNavMeshGoalFilter_NotNearOtherAI : public UNavMeshGoal_Filter
{
public:
	float                                              DistanceToCheck;                                  		// 0x006C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 914 ];

		return pClassPointer;
	};

	bool NotNearOtherAI ( class UNavMeshGoal_GenericFilterContainer* FilterContainer, float InDistanceToCheck );
};



// Class Engine.NavMeshGoalFilter_OutOfViewFrom ( Property size: 2 iter: 3) 
// Class name index: 5700 
// 0x0014 (0x0080 - 0x006C)
class UNavMeshGoalFilter_OutOfViewFrom : public UNavMeshGoal_Filter
{
public:
	struct FPointer                                    GoalPoly;                                         		// 0x006C (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FVector                                     OutOfViewLocation;                                		// 0x0074 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 916 ];

		return pClassPointer;
	};

	bool MustBeHiddenFromThisPoint ( class UNavMeshGoal_GenericFilterContainer* FilterContainer, struct FVector InOutOfViewLocation );
};



// Class Engine.NavMeshGoalFilter_OutSideOfDotProductWedge ( Property size: 3 iter: 4) 
// Class name index: 5702 
// 0x001C (0x0088 - 0x006C)
class UNavMeshGoalFilter_OutSideOfDotProductWedge : public UNavMeshGoal_Filter
{
public:
	struct FVector                                     Location;                                         		// 0x006C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     Rotation;                                         		// 0x0078 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              Epsilon;                                          		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 918 ];

		return pClassPointer;
	};

	bool OutsideOfDotProductWedge ( class UNavMeshGoal_GenericFilterContainer* FilterContainer, struct FVector InLocation, struct FRotator InRotation, float InEpsilon );
};



// Class Engine.NavMeshGoalFilter_PolyEncompassesAI ( Property size: 1 iter: 2) 
// Class name index: 5704 
// 0x000C (0x0078 - 0x006C)
class UNavMeshGoalFilter_PolyEncompassesAI : public UNavMeshGoal_Filter
{
public:
	struct FVector                                     OverrideExtentToCheck;                            		// 0x006C (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 920 ];

		return pClassPointer;
	};

	bool MakeSureAIFits ( class UNavMeshGoal_GenericFilterContainer* FilterContainer, struct FVector InOverrideExtentToCheck );
};



// Class Engine.NavMeshPathConstraint ( Property size: 5 iter: 7) 
// Class name index: 5706 
// 0x0018 (0x0078 - 0x0060)
class UNavMeshPathConstraint : public UObject
{
public:
	class UNavMeshPathConstraint*                      NextConstraint;                                   		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                NumNodesProcessed;                                		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                NumThrownOutNodes;                                		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              AddedDirectCost;                                  		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              AddedHeuristicCost;                               		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 922 ];

		return pClassPointer;
	};

	struct FString eventGetDumpString ( );
	void eventRecycle ( );
};



// Class Engine.NavMeshPath_AlongLine ( Property size: 1 iter: 3) 
// Class name index: 5708 
// 0x000C (0x0084 - 0x0078)
class UNavMeshPath_AlongLine : public UNavMeshPathConstraint
{
public:
	struct FVector                                     Direction;                                        		// 0x0078 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 924 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool AlongLine ( class UNavigationHandle* NavHandle, struct FVector Dir );
};



// Class Engine.NavMeshPath_EnforceTwoWayEdges ( Property size: 0 iter: 1) 
// Class name index: 5710 
// 0x0000 (0x0078 - 0x0078)
class UNavMeshPath_EnforceTwoWayEdges : public UNavMeshPathConstraint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 926 ];

		return pClassPointer;
	};

	bool EnforceTwoWayEdges ( class UNavigationHandle* NavHandle );
};



// Class Engine.NavMeshPath_MinDistBetweenSpecsOfType ( Property size: 4 iter: 6) 
// Class name index: 5712 
// 0x0018 (0x0090 - 0x0078)
class UNavMeshPath_MinDistBetweenSpecsOfType : public UNavMeshPathConstraint
{
public:
	float                                              MinDistBetweenEdgeTypes;                          		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FVector                                     InitLocation;                                     		// 0x007C (0x000C) [0x0000000000000000]              
	unsigned char                                      EdgeType;                                         		// 0x0088 (0x0001) [0x0000000000000000]              
	float                                              Penalty;                                          		// 0x008C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 928 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool EnforceMinDist ( class UNavigationHandle* NavHandle, float InMinDist, unsigned char InEdgeType, struct FVector LastLocation, float InPenalty );
};



// Class Engine.NavMeshPath_SameCoverLink ( Property size: 1 iter: 3) 
// Class name index: 5714 
// 0x0008 (0x0080 - 0x0078)
class UNavMeshPath_SameCoverLink : public UNavMeshPathConstraint
{
public:
	class ACoverLink*                                  TestLink;                                         		// 0x0078 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 930 ];

		return pClassPointer;
	};

	void Recycle ( );
	void SameCoverLink ( class UNavigationHandle* NavHandle, class ACoverLink* InLink );
};



// Class Engine.NavMeshPath_Toward ( Property size: 4 iter: 7) 
// Class name index: 5716 
// 0x001C (0x0094 - 0x0078)
class UNavMeshPath_Toward : public UNavMeshPathConstraint
{
public:
	unsigned long                                      bBiasAgainstHighLevelPath : 1;                    		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              OutOfHighLevelPathBias;                           		// 0x007C (0x0004) [0x0000000000000000]              
	class AActor*                                      GoalActor;                                        		// 0x0080 (0x0008) [0x0000000000000000]              
	struct FVector                                     GoalPoint;                                        		// 0x0088 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 932 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool TowardPoint ( class UNavigationHandle* NavHandle, struct FVector Point );
	bool TowardGoal ( class UNavigationHandle* NavHandle, class AActor* Goal );
};



// Class Engine.NavMeshPath_WithinDistanceEnvelope ( Property size: 6 iter: 8) 
// Class name index: 5718 
// 0x001C (0x0094 - 0x0078)
class UNavMeshPath_WithinDistanceEnvelope : public UNavMeshPathConstraint
{
public:
	float                                              MaxDistance;                                      		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDistance;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoft : 1;                                        		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyThrowOutNodesThatLeaveEnvelope : 1;          		// 0x0080 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              SoftStartPenalty;                                 		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EnvelopeTestPoint;                                		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 934 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool StayWithinEnvelopeToLoc ( class UNavigationHandle* NavHandle, struct FVector InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, unsigned long bInSoft, float InSoftStartPenalty, unsigned long bOnlyTossOutSpecsThatLeave );
};



// Class Engine.NavMeshPath_WithinTraversalDist ( Property size: 3 iter: 5) 
// Class name index: 5720 
// 0x000C (0x0084 - 0x0078)
class UNavMeshPath_WithinTraversalDist : public UNavMeshPathConstraint
{
public:
	float                                              MaxTraversalDist;                                 		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoft : 1;                                        		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SoftStartPenalty;                                 		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 936 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool DontExceedMaxDist ( class UNavigationHandle* NavHandle, float InMaxTraversalDist, unsigned long bInSoft );
};



// Class Engine.NavMeshPathGoalEvaluator ( Property size: 7 iter: 10) 
// Class name index: 5722 
// 0x001C (0x007C - 0x0060)
class UNavMeshPathGoalEvaluator : public UObject
{
public:
	class UNavMeshPathGoalEvaluator*                   NextEvaluator;                                    		// 0x0060 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxPathVisits;                                    		// 0x0068 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAlwaysCallEvaluateGoal : 1;                      		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDoPartialAStar : 1;                              		// 0x006C (0x0004) [0x0000000000000000] [0x00000002] 
	int                                                NumNodesThrownOut;                                		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumNodesProcessed;                                		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxOpenListSize;                                  		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 938 ];

		return pClassPointer;
	};

	struct FString eventGetDumpString ( );
	void eventRecycle ( );
};



// Class Engine.NavMeshGoal_At ( Property size: 8 iter: 12) 
// Class name index: 5724 
// 0x0028 (0x00A4 - 0x007C)
class UNavMeshGoal_At : public UNavMeshPathGoalEvaluator
{
public:
	struct FVector                                     Goal;                                             		// 0x007C (0x000C) [0x0000000000000000]              
	float                                              GoalDist;                                         		// 0x0088 (0x0004) [0x0000000000000000]              
	unsigned long                                      bKeepPartial : 1;                                 		// 0x008C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWeightPartialByDist : 1;                         		// 0x008C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bGoalInSamePolyAsAnchor : 1;                      		// 0x008C (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              PartialDistSq;                                    		// 0x0090 (0x0004) [0x0000000000000000]              
	struct FPointer                                    GoalPoly;                                         		// 0x0094 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    PartialGoal;                                      		// 0x009C (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 940 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool AtLocation ( class UNavigationHandle* NavHandle, struct FVector GoalLocation, float Dist, unsigned long bReturnPartial, unsigned long bInWeightPartialByDist );
	bool AtActor ( class UNavigationHandle* NavHandle, class AActor* GoalActor, float Dist, unsigned long bReturnPartial, unsigned long bInWeightPartialByDist );
	void RecycleNative ( );
};



// Class Engine.NavMeshGoal_ClosestActorInList ( Property size: 3 iter: 6) 
// Class name index: 5726 
// 0x0060 (0x00DC - 0x007C)
class UNavMeshGoal_ClosestActorInList : public UNavMeshPathGoalEvaluator
{
public:
	TArray< struct FBiasedGoalActor >                  GoalList;                                         		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FMultiMap_Mirror                            PolyToGoalActorMap;                               		// 0x008C (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    CachedAnchorPoly;                                 		// 0x00D4 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 942 ];

		return pClassPointer;
	};

	void RecycleInternal ( );
	void eventRecycle ( );
	class UNavMeshGoal_ClosestActorInList* ClosestActorInList ( class UNavigationHandle* NavHandle, TArray< struct FBiasedGoalActor >* InGoalList );
};



// Class Engine.NavMeshGoal_GenericFilterContainer ( Property size: 4 iter: 9) 
// Class name index: 5728 
// 0x0030 (0x00AC - 0x007C)
class UNavMeshGoal_GenericFilterContainer : public UNavMeshPathGoalEvaluator
{
public:
	TArray< class UNavMeshGoal_Filter* >               GoalFilters;                                      		// 0x007C (0x0010) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	struct FPointer                                    SuccessfulGoal;                                   		// 0x008C (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UNavigationHandle*                           MyNavigationHandle;                               		// 0x0094 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FVector >                           SeedLocations;                                    		// 0x009C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 944 ];

		return pClassPointer;
	};

	void Recycle ( );
	struct FVector GetGoalPoint ( );
	class UNavMeshGoal_Filter* GetFilterOfType ( class UClass* Filter_Class );
	class UNavMeshGoal_GenericFilterContainer* CreateAndAddFilterToNavHandleFromSeedList ( class UNavigationHandle* NavHandle, int InMaxPathVisits, TArray< struct FVector >* InSearchSeeds );
	class UNavMeshGoal_GenericFilterContainer* CreateAndAddFilterToNavHandle ( class UNavigationHandle* NavHandle, int InMaxPathVisits );
};



// Class Engine.NavMeshGoal_Null ( Property size: 1 iter: 4) 
// Class name index: 5730 
// 0x0008 (0x0084 - 0x007C)
class UNavMeshGoal_Null : public UNavMeshPathGoalEvaluator
{
public:
	struct FPointer                                    PartialGoal;                                      		// 0x007C (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 946 ];

		return pClassPointer;
	};

	void Recycle ( );
	void RecycleNative ( );
	bool GoUntilBust ( class UNavigationHandle* NavHandle, int InMaxPathVisits );
};



// Class Engine.NavMeshGoal_PolyEncompassesAI ( Property size: 1 iter: 3) 
// Class name index: 5732 
// 0x000C (0x0088 - 0x007C)
class UNavMeshGoal_PolyEncompassesAI : public UNavMeshPathGoalEvaluator
{
public:
	struct FVector                                     OverrideExtentToCheck;                            		// 0x007C (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 948 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool MakeSureAIFits ( class UNavigationHandle* NavHandle, struct FVector InOverrideExtentToCheck );
};



// Class Engine.NavMeshGoal_Random ( Property size: 3 iter: 6) 
// Class name index: 5734 
// 0x0010 (0x008C - 0x007C)
class UNavMeshGoal_Random : public UNavMeshPathGoalEvaluator
{
public:
	int                                                MinDist;                                          		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              BestRating;                                       		// 0x0080 (0x0004) [0x0000000000000000]              
	struct FPointer                                    PartialGoal;                                      		// 0x0084 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 950 ];

		return pClassPointer;
	};

	void Recycle ( );
	void RecycleNative ( );
	bool FindRandom ( class UNavigationHandle* NavHandle, int InMinDist, int InMaxPathVisits );
};



// Class Engine.NavMeshGoal_WithinDistanceEnvelope ( Property size: 4 iter: 6) 
// Class name index: 5736 
// 0x0018 (0x0094 - 0x007C)
class UNavMeshGoal_WithinDistanceEnvelope : public UNavMeshPathGoalEvaluator
{
public:
	float                                              MaxDistance;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDistance;                                      		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinTraversalDist;                                 		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EnvelopeTestPoint;                                		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 952 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool GoalWithinEnvelopeToLoc ( class UNavigationHandle* NavHandle, struct FVector InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, float InMinTraversalDist );
};



// Class Engine.PathConstraint ( Property size: 2 iter: 4) 
// Class name index: 5738 
// 0x000C (0x006C - 0x0060)
class UPathConstraint : public UObject
{
public:
	int                                                CacheIdx;                                         		// 0x0060 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UPathConstraint*                             NextConstraint;                                   		// 0x0064 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 954 ];

		return pClassPointer;
	};

	struct FString eventGetDumpString ( );
	void eventRecycle ( );
};



// Class Engine.Path_AlongLine ( Property size: 1 iter: 3) 
// Class name index: 5740 
// 0x000C (0x0078 - 0x006C)
class UPath_AlongLine : public UPathConstraint
{
public:
	struct FVector                                     Direction;                                        		// 0x006C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 956 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool AlongLine ( class APawn* P, struct FVector Dir );
};



// Class Engine.Path_AvoidInEscapableNodes ( Property size: 4 iter: 7) 
// Class name index: 5742 
// 0x0010 (0x007C - 0x006C)
class UPath_AvoidInEscapableNodes : public UPathConstraint
{
public:
	int                                                Radius;                                           		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                Height;                                           		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                MaxFallSpeed;                                     		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                MoveFlags;                                        		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 958 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool DontGetStuck ( class APawn* P );
	void CachePawnReacFlags ( class APawn* P );
};



// Class Engine.Path_MinDistBetweenSpecsOfType ( Property size: 3 iter: 5) 
// Class name index: 5744 
// 0x0018 (0x0084 - 0x006C)
class UPath_MinDistBetweenSpecsOfType : public UPathConstraint
{
public:
	float                                              MinDistBetweenSpecTypes;                          		// 0x006C (0x0004) [0x0000000000000000]              
	struct FVector                                     InitLocation;                                     		// 0x0070 (0x000C) [0x0000000000000000]              
	class UClass*                                      ReachSpecClass;                                   		// 0x007C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 960 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool EnforceMinDist ( class APawn* P, float InMinDist, class UClass* InSpecClass, struct FVector LastLocation );
};



// Class Engine.Path_TowardGoal ( Property size: 1 iter: 3) 
// Class name index: 5746 
// 0x0008 (0x0074 - 0x006C)
class UPath_TowardGoal : public UPathConstraint
{
public:
	class AActor*                                      GoalActor;                                        		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 962 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool TowardGoal ( class APawn* P, class AActor* Goal );
};



// Class Engine.Path_TowardPoint ( Property size: 1 iter: 3) 
// Class name index: 5748 
// 0x000C (0x0078 - 0x006C)
class UPath_TowardPoint : public UPathConstraint
{
public:
	struct FVector                                     GoalPoint;                                        		// 0x006C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 964 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool TowardPoint ( class APawn* P, struct FVector Point );
};



// Class Engine.Path_WithinDistanceEnvelope ( Property size: 6 iter: 8) 
// Class name index: 5750 
// 0x001C (0x0088 - 0x006C)
class UPath_WithinDistanceEnvelope : public UPathConstraint
{
public:
	float                                              MaxDistance;                                      		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDistance;                                      		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoft : 1;                                        		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyThrowOutNodesThatLeaveEnvelope : 1;          		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              SoftStartPenalty;                                 		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EnvelopeTestPoint;                                		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 966 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool StayWithinEnvelopeToLoc ( class APawn* P, struct FVector InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, unsigned long bInSoft, float InSoftStartPenalty, unsigned long bOnlyTossOutSpecsThatLeave );
};



// Class Engine.Path_WithinTraversalDist ( Property size: 3 iter: 5) 
// Class name index: 5752 
// 0x000C (0x0078 - 0x006C)
class UPath_WithinTraversalDist : public UPathConstraint
{
public:
	float                                              MaxTraversalDist;                                 		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoft : 1;                                        		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SoftStartPenalty;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 968 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool DontExceedMaxDist ( class APawn* P, float InMaxTraversalDist, unsigned long bInSoft );
};



// Class Engine.PathGoalEvaluator ( Property size: 4 iter: 6) 
// Class name index: 5754 
// 0x0018 (0x0078 - 0x0060)
class UPathGoalEvaluator : public UObject
{
public:
	class UPathGoalEvaluator*                          NextEvaluator;                                    		// 0x0060 (0x0008) [0x0000000000000000]              
	class ANavigationPoint*                            GeneratedGoal;                                    		// 0x0068 (0x0008) [0x0000000000000000]              
	int                                                MaxPathVisits;                                    		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                CacheIdx;                                         		// 0x0074 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 970 ];

		return pClassPointer;
	};

	struct FString eventGetDumpString ( );
	void eventRecycle ( );
};



// Class Engine.Goal_AtActor ( Property size: 3 iter: 5) 
// Class name index: 5756 
// 0x0010 (0x0088 - 0x0078)
class UGoal_AtActor : public UPathGoalEvaluator
{
public:
	class AActor*                                      GoalActor;                                        		// 0x0078 (0x0008) [0x0000000000000000]              
	float                                              GoalDist;                                         		// 0x0080 (0x0004) [0x0000000000000000]              
	unsigned long                                      bKeepPartial : 1;                                 		// 0x0084 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 972 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool AtActor ( class APawn* P, class AActor* Goal, float Dist, unsigned long bReturnPartial );
};



// Class Engine.Goal_Null ( Property size: 0 iter: 2) 
// Class name index: 5758 
// 0x0000 (0x0078 - 0x0078)
class UGoal_Null : public UPathGoalEvaluator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 974 ];

		return pClassPointer;
	};

	void Recycle ( );
	bool GoUntilBust ( class APawn* P, int InMaxPathVisits );
};



// Class Engine.SkeletalMeshActor ( Property size: 15 iter: 45) 
// Class name index: 5760 
// 0x0060 (0x02A0 - 0x0240)
class ASkeletalMeshActor : public AActor
{
public:
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x0240 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShouldDoAnimNotifies : 1;                        		// 0x0240 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceSaveInCheckpoint : 1;                       		// 0x0240 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCollideActors_OldValue : 1;                      		// 0x0240 (0x0004) [0x0000000020000000] [0x00000008] ( CPF_Deprecated )
	unsigned long                                      bShouldShadowParentAllAttachedActors : 1;         		// 0x0240 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x0244 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x024C (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             FacialAudioComp;                                  		// 0x0254 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMesh*                               ReplicatedMesh;                                   		// 0x025C (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UMaterialInterface*                          ReplicatedMaterial0;                              		// 0x0264 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class UMaterialInterface*                          ReplicatedMaterial1;                              		// 0x026C (0x0008) [0x0000000000000020]              ( CPF_Net )
	TArray< struct FSkelMeshActorControlTarget >       ControlTargets;                                   		// 0x0274 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UInterpGroup* >                      InterpGroupList;                                  		// 0x0284 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       SavedAnimSeqName;                                 		// 0x0294 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              SavedCurrentTime;                                 		// 0x029C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 976 ];

		return pClassPointer;
	};

	bool eventCreateForceField ( class UAnimNotify_ForceField* AnimNotifyData );
	void SkelMeshActorOnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	bool eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	void ApplyCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void eventOnSetSkelControlTarget ( class USeqAct_SetSkelControlTarget* Action );
	void eventOnUpdatePhysBonesFromAnim ( class USeqAct_UpdatePhysBonesFromAnim* Action );
	void eventOnSetMesh ( class USeqAct_SetMesh* Action );
	bool IsActorPlayingFaceFXAnim ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	void OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay );
	void MAT_FinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion );
	void MAT_BeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void UpdateAnimSetList ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
};



// Class Engine.SkeletalMeshActorBasedOnExtremeContent ( Property size: 2 iter: 5) 
// Class name index: 5762 
// 0x0020 (0x02C0 - 0x02A0)
class ASkeletalMeshActorBasedOnExtremeContent : public ASkeletalMeshActor
{
public:
	TArray< struct FSkelMaterialSetterDatum >          ExtremeContent;                                   		// 0x02A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FSkelMaterialSetterDatum >          NonExtremeContent;                                		// 0x02B0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 978 ];

		return pClassPointer;
	};

	void SetMaterialBasedOnExtremeContent ( );
	void eventPostBeginPlay ( );
};



// Class Engine.SkeletalMeshActorSpawnable ( Property size: 0 iter: 0) 
// Class name index: 5764 
// 0x0000 (0x02A0 - 0x02A0)
class ASkeletalMeshActorSpawnable : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 980 ];

		return pClassPointer;
	};

};



// Class Engine.SkeletalMeshCinematicActor ( Property size: 0 iter: 0) 
// Class name index: 5766 
// 0x0000 (0x02A0 - 0x02A0)
class ASkeletalMeshCinematicActor : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 982 ];

		return pClassPointer;
	};

};



// Class Engine.SkeletalMeshActorMAT ( Property size: 1 iter: 14) 
// Class name index: 5768 
// 0x0010 (0x02B0 - 0x02A0)
class ASkeletalMeshActorMAT : public ASkeletalMeshCinematicActor
{
public:
	TArray< class UAnimNodeSlot* >                     SlotNodes;                                        		// 0x02A0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 984 ];

		return pClassPointer;
	};

	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion );
	void ClearAnimNodes ( );
	void CacheAnimNodes ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventDestroyed ( );
	void MAT_SetSkelControlStrength ( struct FName SkelControlName, float ControlStrength );
	void MAT_SetSkelControlScale ( struct FName SkelControlName, float Scale );
	void MAT_SetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void MAT_SetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos );
};



// Class Engine.HeadTrackingComponent ( Property size: 13 iter: 14) 
// Class name index: 5770 
// 0x00BF (0x0144 - 0x0085)
class UHeadTrackingComponent : public UActorComponent
{
public:
	TArray< struct FName >                             TrackControllerName;                              		// 0x0088 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LookAtActorRadius;                                		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisableBeyondLimit : 1;                          		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              MaxLookAtTime;                                    		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinLookAtTime;                                    		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInterestTime;                                  		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            ActorClassesToLookAt;                             		// 0x00AC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             TargetBoneNames;                                  		// 0x00BC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00CC (0x0048) UNKNOWN PROPERTY: MapProperty Engine.HeadTrackingComponent.CurrentActorMap
	class USkeletalMeshComponent*                      SkeletalMeshComp;                                 		// 0x0114 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class USkelControlLookAt* >                TrackControls;                                    		// 0x011C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     RootMeshLocation;                                 		// 0x012C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    RootMeshRotation;                                 		// 0x0138 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 986 ];

		return pClassPointer;
	};

};



// Class Engine.AnimationCompressionAlgorithm ( Property size: 4 iter: 4) 
// Class name index: 5772 
// 0x0016 (0x0076 - 0x0060)
class UAnimationCompressionAlgorithm : public UObject
{
public:
	struct FString                                     Description;                                      		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bNeedsSkeleton : 1;                               		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      TranslationCompressionFormat;                     		// 0x0074 (0x0001) [0x0000000000000000]              
	unsigned char                                      RotationCompressionFormat;                        		// 0x0075 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 988 ];

		return pClassPointer;
	};

};



// Class Engine.AnimationCompressionAlgorithm_Automatic ( Property size: 8 iter: 8) 
// Class name index: 5774 
// 0x000A (0x0080 - 0x0076)
class UAnimationCompressionAlgorithm_Automatic : public UAnimationCompressionAlgorithm
{
public:
	float                                              MaxEndEffectorError;                              		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTryFixedBitwiseCompression : 1;                  		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTryPerTrackBitwiseCompression : 1;               		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTryLinearKeyRemovalCompression : 1;              		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTryIntervalKeyRemoval : 1;                       		// 0x007C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRunCurrentDefaultCompressor : 1;                 		// 0x007C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAutoReplaceIfExistingErrorTooGreat : 1;          		// 0x007C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bRaiseMaxErrorToExisting : 1;                     		// 0x007C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 990 ];

		return pClassPointer;
	};

};



// Class Engine.AnimationCompressionAlgorithm_BitwiseCompressOnly ( Property size: 0 iter: 0) 
// Class name index: 5776 
// 0x0002 (0x0078 - 0x0076)
class UAnimationCompressionAlgorithm_BitwiseCompressOnly : public UAnimationCompressionAlgorithm
{
public:
//	 LastOffset: 76
//	 Class Propsize: 78

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 992 ];

		return pClassPointer;
	};

};



// Class Engine.AnimationCompressionAlgorithm_LeastDestructive ( Property size: 0 iter: 0) 
// Class name index: 5778 
// 0x0002 (0x0078 - 0x0076)
class UAnimationCompressionAlgorithm_LeastDestructive : public UAnimationCompressionAlgorithm
{
public:
//	 LastOffset: 76
//	 Class Propsize: 78

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 994 ];

		return pClassPointer;
	};

};



// Class Engine.AnimationCompressionAlgorithm_RemoveEverySecondKey ( Property size: 2 iter: 2) 
// Class name index: 5780 
// 0x000A (0x0080 - 0x0076)
class UAnimationCompressionAlgorithm_RemoveEverySecondKey : public UAnimationCompressionAlgorithm
{
public:
	int                                                MinKeys;                                          		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartAtSecondKey : 1;                            		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 996 ];

		return pClassPointer;
	};

};



// Class Engine.AnimationCompressionAlgorithm_RemoveLinearKeys ( Property size: 8 iter: 8) 
// Class name index: 5782 
// 0x001E (0x0094 - 0x0076)
class UAnimationCompressionAlgorithm_RemoveLinearKeys : public UAnimationCompressionAlgorithm
{
public:
	float                                              MaxPosDiff;                                       		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngleDiff;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxEffectorDiff;                                  		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinEffectorDiff;                                  		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EffectorDiffSocket;                               		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParentKeyScale;                                   		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRetarget : 1;                                    		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bActuallyFilterLinearKeys : 1;                    		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 998 ];

		return pClassPointer;
	};

};



// Class Engine.AnimationCompressionAlgorithm_PerTrackCompression ( Property size: 19 iter: 19) 
// Class name index: 5784 
// 0x005C (0x00F0 - 0x0094)
class UAnimationCompressionAlgorithm_PerTrackCompression : public UAnimationCompressionAlgorithm_RemoveLinearKeys
{
public:
	float                                              MaxZeroingThreshold;                              		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxPosDiffBitwise;                                		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngleDiffBitwise;                              		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            AllowedRotationFormats;                           		// 0x00A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            AllowedTranslationFormats;                        		// 0x00B0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bResampleAnimation : 1;                           		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseAdaptiveError : 1;                            		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseOverrideForEndEffectors : 1;                  		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseAdaptiveError2 : 1;                           		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              ResampledFramerate;                               		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinKeysForResampling;                             		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TrackHeightBias;                                  		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParentingDivisor;                                 		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParentingDivisorExponent;                         		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationErrorSourceRatio;                         		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TranslationErrorSourceRatio;                      		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxErrorPerTrackRatio;                            		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PerturbationProbeSize;                            		// 0x00E4 (0x0004) [0x0000000000000000]              
	struct FPointer                                    PerReductionCachedData;                           		// 0x00E8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1000 ];

		return pClassPointer;
	};

};



// Class Engine.AnimationCompressionAlgorithm_RemoveTrivialKeys ( Property size: 2 iter: 2) 
// Class name index: 5786 
// 0x000A (0x0080 - 0x0076)
class UAnimationCompressionAlgorithm_RemoveTrivialKeys : public UAnimationCompressionAlgorithm
{
public:
	float                                              MaxPosDiff;                                       		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngleDiff;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1002 ];

		return pClassPointer;
	};

};



// Class Engine.AnimationCompressionAlgorithm_RevertToRaw ( Property size: 0 iter: 0) 
// Class name index: 5788 
// 0x0002 (0x0078 - 0x0076)
class UAnimationCompressionAlgorithm_RevertToRaw : public UAnimationCompressionAlgorithm
{
public:
//	 LastOffset: 76
//	 Class Propsize: 78

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1004 ];

		return pClassPointer;
	};

};



// Class Engine.AnimMetaData ( Property size: 0 iter: 0) 
// Class name index: 5790 
// 0x0000 (0x0060 - 0x0060)
class UAnimMetaData : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1006 ];

		return pClassPointer;
	};

};



// Class Engine.AnimMetaData_SkelControl ( Property size: 3 iter: 3) 
// Class name index: 5792 
// 0x001C (0x007C - 0x0060)
class UAnimMetaData_SkelControl : public UAnimMetaData
{
public:
	TArray< struct FName >                             SkelControlNameList;                              		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bFullControlOverController : 1;                   		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FName                                       SkelControlName;                                  		// 0x0074 (0x0008) [0x0000000020000000]              ( CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1008 ];

		return pClassPointer;
	};

};



// Class Engine.AnimMetaData_SkelControlKeyFrame ( Property size: 1 iter: 1) 
// Class name index: 5794 
// 0x0010 (0x008C - 0x007C)
class UAnimMetaData_SkelControlKeyFrame : public UAnimMetaData_SkelControl
{
public:
	TArray< struct FTimeModifier >                     KeyFrames;                                        		// 0x007C (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1010 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNotify ( Property size: 1 iter: 2) 
// Class name index: 5796 
// 0x0004 (0x0064 - 0x0060)
class UAnimNotify : public UObject
{
public:
	struct FColor                                      NotifyColor;                                      		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1012 ];

		return pClassPointer;
	};

	bool FindNextNotifyOfClass ( class UAnimNodeSequence* AnimSeqInstigator, class UClass* NotifyClass, struct FAnimNotifyEvent* OutEvent );
};



// Class Engine.AnimNotify_AkEvent ( Property size: 3 iter: 3) 
// Class name index: 5798 
// 0x0014 (0x0078 - 0x0064)
class UAnimNotify_AkEvent : public UAnimNotify
{
public:
	class UAkEvent*                                    AkEvent;                                          		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFollowActor : 1;                                 		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1014 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNotify_CameraEffect ( Property size: 1 iter: 1) 
// Class name index: 5800 
// 0x0008 (0x006C - 0x0064)
class UAnimNotify_CameraEffect : public UAnimNotify
{
public:
	class UClass*                                      CameraLensEffect;                                 		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1016 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNotify_ClothingMaxDistanceScale ( Property size: 4 iter: 4) 
// Class name index: 5802 
// 0x0010 (0x0074 - 0x0064)
class UAnimNotify_ClothingMaxDistanceScale : public UAnimNotify
{
public:
	float                                              StartScale;                                       		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EndScale;                                         		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ScaleMode;                                        		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1018 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNotify_Footstep ( Property size: 1 iter: 1) 
// Class name index: 5804 
// 0x0004 (0x0068 - 0x0064)
class UAnimNotify_Footstep : public UAnimNotify
{
public:
	int                                                FootDown;                                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1020 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNotify_ForceField ( Property size: 4 iter: 4) 
// Class name index: 5806 
// 0x001C (0x0080 - 0x0064)
class UAnimNotify_ForceField : public UAnimNotify
{
public:
	class UNxForceFieldComponent*                      ForceFieldComponent;                              		// 0x0064 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bAttach : 1;                                      		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FName                                       SocketName;                                       		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1022 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNotify_Kismet ( Property size: 1 iter: 1) 
// Class name index: 5808 
// 0x0008 (0x006C - 0x0064)
class UAnimNotify_Kismet : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                       		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1024 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNotify_PlayParticleEffect ( Property size: 9 iter: 9) 
// Class name index: 5810 
// 0x002C (0x0090 - 0x0064)
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                       		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsExtremeContent : 1;                            		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAttach : 1;                                      		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPreview : 1;                                     		// 0x006C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSkipIfOwnerIsHidden : 1;                         		// 0x006C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	class UParticleSystem*                             PSNonExtremeContentTemplate;                      		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SocketName;                                       		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneSocketModuleActorName;                        		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1026 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNotify_Rumble ( Property size: 4 iter: 4) 
// Class name index: 5812 
// 0x0018 (0x007C - 0x0064)
class UAnimNotify_Rumble : public UAnimNotify
{
public:
	class UClass*                                      PredefinedWaveForm;                               		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      WaveForm;                                         		// 0x006C (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	unsigned long                                      bCheckForBasedPlayer : 1;                         		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              EffectRadius;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1028 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNotify_Script ( Property size: 3 iter: 3) 
// Class name index: 5814 
// 0x0018 (0x007C - 0x0064)
class UAnimNotify_Script : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                       		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       NotifyTickName;                                   		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       NotifyEndName;                                    		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1030 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNotify_Scripted ( Property size: 0 iter: 2) 
// Class name index: 5816 
// 0x0000 (0x0064 - 0x0064)
class UAnimNotify_Scripted : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1032 ];

		return pClassPointer;
	};

	void eventNotifyEnd ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};



// Class Engine.AnimNotify_PawnMaterialParam ( Property size: 1 iter: 2) 
// Class name index: 5818 
// 0x0010 (0x0074 - 0x0064)
class UAnimNotify_PawnMaterialParam : public UAnimNotify_Scripted
{
public:
	TArray< struct FScalarParameterInterpStruct >      ScalarParameterInterpArray;                       		// 0x0064 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1034 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};



// Class Engine.AnimNotify_ViewShake ( Property size: 12 iter: 13) 
// Class name index: 5820 
// 0x0054 (0x00B8 - 0x0064)
class UAnimNotify_ViewShake : public UAnimNotify_Scripted
{
public:
	float                                              Duration;                                         		// 0x0064 (0x0004) [0x0000000000020000]              ( CPF_EditConst )
	struct FVector                                     RotAmplitude;                                     		// 0x0068 (0x000C) [0x0000000000020000]              ( CPF_EditConst )
	struct FVector                                     RotFrequency;                                     		// 0x0074 (0x000C) [0x0000000000020000]              ( CPF_EditConst )
	struct FVector                                     LocAmplitude;                                     		// 0x0080 (0x000C) [0x0000000000020000]              ( CPF_EditConst )
	struct FVector                                     LocFrequency;                                     		// 0x008C (0x000C) [0x0000000000020000]              ( CPF_EditConst )
	float                                              FOVAmplitude;                                     		// 0x0098 (0x0004) [0x0000000000020000]              ( CPF_EditConst )
	float                                              FOVFrequency;                                     		// 0x009C (0x0004) [0x0000000000020000]              ( CPF_EditConst )
	unsigned long                                      bDoControllerVibration : 1;                       		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseBoneLocation : 1;                             		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              ShakeRadius;                                      		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UCameraShake*                                ShakeParams;                                      		// 0x00B0 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1036 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};



// Class Engine.AnimNotify_Sound ( Property size: 7 iter: 7) 
// Class name index: 5822 
// 0x0020 (0x0084 - 0x0064)
class UAnimNotify_Sound : public UAnimNotify
{
public:
	class USoundCue*                                   SoundCue;                                         		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFollowActor : 1;                                 		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreIfActorHidden : 1;                         		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              PercentToPlay;                                    		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMultiplier;                                 		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1038 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNotify_Trails ( Property size: 19 iter: 23) 
// Class name index: 5824 
// 0x006C (0x00D0 - 0x0064)
class UAnimNotify_Trails : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                       		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               SampledSkeletalMesh;                              		// 0x006C (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bIsExtremeContent : 1;                            		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPreview : 1;                                     		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPreviewForceExplicit : 1;                        		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSkipIfOwnerIsHidden : 1;                         		// 0x0074 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bResampleRequired : 1;                            		// 0x0074 (0x0004) [0x0000000000000000] [0x00000010] 
	struct FName                                       FirstEdgeSocketName;                              		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ControlPointSocketName;                           		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SecondEdgeSocketName;                             		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastStartTime;                                    		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              EndTime;                                          		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              SampleTimeStep;                                   		// 0x0098 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	TArray< struct FTrailSamplePoint >                 TrailSampleData;                                  		// 0x009C (0x0010) [0x0000000020400000]              ( CPF_NeedCtorLink | CPF_Deprecated )
	float                                              SamplesPerSecond;                                 		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTrailSample >                      TrailSampledData;                                 		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CurrentTime;                                      		// 0x00C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeStep;                                         		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeSequence*                           AnimNodeSeq;                                      		// 0x00C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1040 ];

		return pClassPointer;
	};

	int GetNumSteps ( int InLastTrailIndex );
};



// Class Engine.AnimObject ( Property size: 7 iter: 7) 
// Class name index: 5826 
// 0x002C (0x008C - 0x0060)
class UAnimObject : public UObject
{
public:
	int                                                DrawWidth;                                        		// 0x0060 (0x0004) [0x0000000000000000]              
	int                                                DrawHeight;                                       		// 0x0064 (0x0004) [0x0000000000000000]              
	int                                                NodePosX;                                         		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                NodePosY;                                         		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                OutDrawY;                                         		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FString                                     CategoryDesc;                                     		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      SkelComponent;                                    		// 0x0084 (0x0008) [0x000000000428200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1042 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNode ( Property size: 23 iter: 32) 
// Class name index: 5828 
// 0x009C (0x0128 - 0x008C)
class UAnimNode : public UAnimObject
{
public:
	unsigned long                                      bRelevant : 1;                                    		// 0x008C (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bJustBecameRelevant : 1;                          		// 0x008C (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bTickDuringPausedAnims : 1;                       		// 0x008C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEditorOnly : 1;                                  		// 0x008C (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bDisableCaching : 1;                              		// 0x008C (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bCallScriptEventOnInit : 1;                       		// 0x008C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCallScriptEventOnBecomeRelevant : 1;             		// 0x008C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bCallScriptEventOnCeaseRelevant : 1;              		// 0x008C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	int                                                NodeTickTag;                                      		// 0x0090 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NodeInitTag;                                      		// 0x0094 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NodeEndEventTick;                                 		// 0x0098 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                TickArrayIndex;                                   		// 0x009C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NodeCachedAtomsTag;                               		// 0x00A0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NodeTotalWeight;                                  		// 0x00A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAnimNodeBlendBase* >                ParentNodes;                                      		// 0x00A8 (0x0010) [0x0000000000600000]              ( CPF_NeedCtorLink )
	struct FName                                       NodeName;                                         		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FBoneAtom >                         CachedBoneAtoms;                                  		// 0x00C0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      CachedNumDesiredBones;                            		// 0x00D0 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0xF ];                             		// 0x00D1 (0x000F) MISSED OFFSET
	struct FBoneAtom                                   CachedRootMotionDelta;                            		// 0x00E0 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	int                                                bCachedHasRootMotion;                             		// 0x0100 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FCurveKey >                         CachedCurveKeys;                                  		// 0x0104 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                SearchTag;                                        		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FCurveKey >                         LastUpdatedAnimMorphKeys;                         		// 0x0118 (0x0010) [0x0000000000422001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1044 ];

		return pClassPointer;
	};

	void ReplayAnim ( );
	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float Rate, float StartTime );
	class UAnimNode* FindAnimNode ( struct FName InNodeName );
	void eventOnCeaseRelevant ( );
	void eventOnBecomeRelevant ( );
	void eventOnInit ( );
};



// Class Engine.AnimNodeBlendBase ( Property size: 3 iter: 7) 
// Class name index: 5830 
// 0x0015 (0x013D - 0x0128)
class UAnimNodeBlendBase : public UAnimNode
{
public:
	TArray< struct FAnimBlendChild >                   Children;                                         		// 0x0128 (0x0010) [0x0000000004400048]              ( CPF_ExportObject | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bFixNumChildren : 1;                              		// 0x0138 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      BlendType;                                        		// 0x013C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1046 ];

		return pClassPointer;
	};

	void ReplayAnim ( );
	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float Rate, float StartTime );
};



// Class Engine.AnimNode_MultiBlendPerBone ( Property size: 3 iter: 10) 
// Class name index: 5832 
// 0x001C (0x0159 - 0x013D)
class UAnimNode_MultiBlendPerBone : public UAnimNodeBlendBase
{
public:
	class APawn*                                       PawnOwner;                                        		// 0x0140 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FPerBoneMaskInfo >                  MaskList;                                         		// 0x0148 (0x0010) [0x0000000004400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      RotationBlendType;                                		// 0x0158 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1048 ];

		return pClassPointer;
	};

	void SetMaskWeight ( int MaskIndex, float DesiredWeight, float BlendTime );
};



// Class Engine.AnimNodeAimOffset ( Property size: 13 iter: 20) 
// Class name index: 5834 
// 0x005B (0x0198 - 0x013D)
class UAnimNodeAimOffset : public UAnimNodeBlendBase
{
public:
	struct FVector2D                                   Aim;                                              		// 0x0140 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   AngleOffset;                                      		// 0x0148 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceAimDir : 1;                                 		// 0x0150 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBakeFromAnimations : 1;                          		// 0x0150 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPassThroughWhenNotRendered : 1;                  		// 0x0150 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSynchronizeNodesInEditor : 1;                    		// 0x0150 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	int                                                PassThroughAtOrAboveLOD;                          		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForcedAimDir;                                     		// 0x0158 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< unsigned char >                            RequiredBones;                                    		// 0x015C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            AimCpntIndexLUT;                                  		// 0x016C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UAnimNodeAimOffset*                          TemplateNode;                                     		// 0x017C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FAimOffsetProfile >                 Profiles;                                         		// 0x0184 (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	int                                                CurrentProfileIndex;                              		// 0x0194 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1050 ];

		return pClassPointer;
	};

	void SetActiveProfileByIndex ( int ProfileIndex );
	void SetActiveProfileByName ( struct FName ProfileName );
};



// Class Engine.AnimNodeBlend ( Property size: 4 iter: 5) 
// Class name index: 5836 
// 0x0013 (0x0150 - 0x013D)
class UAnimNodeBlend : public UAnimNodeBlendBase
{
public:
	float                                              Child2Weight;                                     		// 0x0140 (0x0004) [0x0000000000000000]              
	float                                              Child2WeightTarget;                               		// 0x0144 (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x0148 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                    		// 0x014C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1052 ];

		return pClassPointer;
	};

	void SetBlendTarget ( float BlendTarget, float BlendTime );
};



// Class Engine.AnimNodeAdditiveBlending ( Property size: 1 iter: 2) 
// Class name index: 5838 
// 0x0004 (0x0154 - 0x0150)
class UAnimNodeAdditiveBlending : public UAnimNodeBlend
{
public:
	unsigned long                                      bPassThroughWhenNotRendered : 1;                  		// 0x0150 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1054 ];

		return pClassPointer;
	};

	void SetBlendTarget ( float BlendTarget, float BlendTime );
};



// Class Engine.AnimNodeBlendPerBone ( Property size: 4 iter: 5) 
// Class name index: 5840 
// 0x0034 (0x0184 - 0x0150)
class UAnimNodeBlendPerBone : public UAnimNodeBlend
{
public:
	unsigned long                                      bForceLocalSpaceBlend : 1;                        		// 0x0150 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< struct FName >                             BranchStartBoneName;                              		// 0x0154 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    Child2PerBoneWeight;                              		// 0x0164 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            LocalToCompReqBones;                              		// 0x0174 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1056 ];

		return pClassPointer;
	};

	void SetBlendTarget ( float BlendTarget, float BlendTime );
};



// Class Engine.AnimNodeCrossfader ( Property size: 3 iter: 7) 
// Class name index: 5842 
// 0x0010 (0x0160 - 0x0150)
class UAnimNodeCrossfader : public UAnimNodeBlend
{
public:
	struct FName                                       DefaultAnimSeqName;                               		// 0x0150 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDontBlendOutOneShot : 1;                         		// 0x0158 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	float                                              PendingBlendOutTimeOneShot;                       		// 0x015C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1058 ];

		return pClassPointer;
	};

	class UAnimNodeSequence* GetActiveChild ( );
	struct FName GetAnimName ( );
	void BlendToLoopingAnim ( struct FName AnimSeqName, float BlendInTime, float Rate );
	void PlayOneShotAnim ( struct FName AnimSeqName, float BlendInTime, float BlendOutTime, unsigned long bDontBlendOut, float Rate );
};



// Class Engine.AnimNodePlayCustomAnim ( Property size: 2 iter: 9) 
// Class name index: 5844 
// 0x0008 (0x0158 - 0x0150)
class UAnimNodePlayCustomAnim : public UAnimNodeBlend
{
public:
	unsigned long                                      bIsPlayingCustomAnim : 1;                         		// 0x0150 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              CustomPendingBlendOutTime;                        		// 0x0154 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1060 ];

		return pClassPointer;
	};

	void SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	class UAnimNodeSequence* GetCustomAnimNodeSeq ( );
	void SetActorAnimEndNotification ( unsigned long bNewStatus );
	void SetCustomAnim ( struct FName AnimName );
	void StopCustomAnim ( float BlendOutTime );
	void PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
};



// Class Engine.AnimNodeBlendDirectional ( Property size: 5 iter: 5) 
// Class name index: 5846 
// 0x001F (0x015C - 0x013D)
class UAnimNodeBlendDirectional : public UAnimNodeBlendBase
{
public:
	float                                              DirDegreesPerSecond;                              		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirAngle;                                         		// 0x0144 (0x0004) [0x0000000000000000]              
	int                                                SingleAnimAtOrAboveLOD;                           		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationOffset;                                   		// 0x014C (0x000C) [0x0000000000000000]              
	unsigned long                                      bUseAcceleration : 1;                             		// 0x0158 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1062 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNodeBlendList ( Property size: 8 iter: 9) 
// Class name index: 5848 
// 0x0027 (0x0164 - 0x013D)
class UAnimNodeBlendList : public UAnimNodeBlendBase
{
public:
	TArray< float >                                    TargetWeight;                                     		// 0x0140 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              BlendTimeToGo;                                    		// 0x0150 (0x0004) [0x0000000000000000]              
	int                                                ActiveChildIndex;                                 		// 0x0154 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPlayActiveChild : 1;                             		// 0x0158 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceChildFullWeightWhenBecomingRelevant : 1;    		// 0x0158 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                    		// 0x0158 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              SliderPosition;                                   		// 0x015C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                EditorActiveChildIndex;                           		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1064 ];

		return pClassPointer;
	};

	void SetActiveChild ( int ChildIndex, float BlendTime );
};



// Class Engine.AnimNodeBlendByBase ( Property size: 5 iter: 6) 
// Class name index: 5850 
// 0x0020 (0x0184 - 0x0164)
class UAnimNodeBlendByBase : public UAnimNodeBlendList
{
public:
	unsigned char                                      Type;                                             		// 0x0164 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ActorTag;                                         		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ActorClass;                                       		// 0x0170 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTime;                                        		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      CachedBase;                                       		// 0x017C (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1066 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNodeBlendByPhysics ( Property size: 0 iter: 0) 
// Class name index: 5852 
// 0x0000 (0x0164 - 0x0164)
class UAnimNodeBlendByPhysics : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1068 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNodeBlendByPosture ( Property size: 0 iter: 0) 
// Class name index: 5854 
// 0x0000 (0x0164 - 0x0164)
class UAnimNodeBlendByPosture : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1070 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNodeBlendByProperty ( Property size: 15 iter: 15) 
// Class name index: 5856 
// 0x0048 (0x01AC - 0x0164)
class UAnimNodeBlendByProperty : public UAnimNodeBlendList
{
public:
	struct FName                                       PropertyName;                                     		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseOwnersBase : 1;                               		// 0x016C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceUpdate : 1;                                 		// 0x016C (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseSpecificBlendTimes : 1;                       		// 0x016C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSynchronizeNodesInEditor : 1;                    		// 0x016C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FName                                       CachedPropertyName;                               		// 0x0170 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    CachedFloatProperty;                              		// 0x0178 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    CachedBoolProperty;                               		// 0x0180 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    CachedByteProperty;                               		// 0x0188 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class AActor*                                      CachedOwner;                                      		// 0x0190 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendTime;                                        		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatPropMin;                                     		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatPropMax;                                     		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendToChild1Time;                                		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendToChild2Time;                                		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1072 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNodeBlendBySpeed ( Property size: 10 iter: 10) 
// Class name index: 5858 
// 0x0034 (0x0198 - 0x0164)
class UAnimNodeBlendBySpeed : public UAnimNodeBlendList
{
public:
	float                                              Speed;                                            		// 0x0164 (0x0004) [0x0000000000000000]              
	int                                                LastChannel;                                      		// 0x0168 (0x0004) [0x0000000000000000]              
	float                                              BlendUpTime;                                      		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownTime;                                    		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownPerc;                                    		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< float >                                    Constraints;                                      		// 0x0178 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUseAcceleration : 1;                             		// 0x0188 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BlendUpDelay;                                     		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownDelay;                                   		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDelayRemaining;                              		// 0x0194 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1074 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNodeRandom ( Property size: 4 iter: 5) 
// Class name index: 5860 
// 0x0020 (0x0184 - 0x0164)
class UAnimNodeRandom : public UAnimNodeBlendList
{
public:
	TArray< struct FRandomAnimInfo >                   RandomInfo;                                       		// 0x0164 (0x0010) [0x0000000004400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )
	class UAnimNodeSequence*                           PlayingSeqNode;                                   		// 0x0174 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                PendingChildIndex;                                		// 0x017C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bPickedPendingChildIndex : 1;                     		// 0x0180 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1076 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNodeBlendMultiBone ( Property size: 2 iter: 4) 
// Class name index: 5862 
// 0x0023 (0x0160 - 0x013D)
class UAnimNodeBlendMultiBone : public UAnimNodeBlendBase
{
public:
	TArray< struct FChildBoneBlendInfo >               BlendTargetList;                                  		// 0x0140 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< unsigned char >                            SourceRequiredBones;                              		// 0x0150 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1078 ];

		return pClassPointer;
	};

	void SetTargetStartBone ( int TargetIdx, struct FName StartBoneName, float PerBoneIncrease );
};



// Class Engine.AnimNodeMirror ( Property size: 1 iter: 1) 
// Class name index: 5864 
// 0x0007 (0x0144 - 0x013D)
class UAnimNodeMirror : public UAnimNodeBlendBase
{
public:
	unsigned long                                      bEnableMirroring : 1;                             		// 0x0140 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1080 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNodeScalePlayRate ( Property size: 1 iter: 1) 
// Class name index: 5866 
// 0x0007 (0x0144 - 0x013D)
class UAnimNodeScalePlayRate : public UAnimNodeBlendBase
{
public:
	float                                              ScaleByValue;                                     		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1082 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNodeScaleRateBySpeed ( Property size: 1 iter: 1) 
// Class name index: 5868 
// 0x0004 (0x0148 - 0x0144)
class UAnimNodeScaleRateBySpeed : public UAnimNodeScalePlayRate
{
public:
	float                                              BaseSpeed;                                        		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1084 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNodeSlot ( Property size: 11 iter: 22) 
// Class name index: 5870 
// 0x0027 (0x0164 - 0x013D)
class UAnimNodeSlot : public UAnimNodeBlendBase
{
public:
	unsigned long                                      bIsPlayingCustomAnim : 1;                         		// 0x0140 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bEarlyAnimEndNotify : 1;                          		// 0x0140 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                    		// 0x0140 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAdditiveAnimationsOverrideSource : 1;            		// 0x0140 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIsBeingUsedByInterpGroup : 1;                    		// 0x0140 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDontAddToAlwaysTickArray : 1;                    		// 0x0140 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	float                                              PendingBlendOutTime;                              		// 0x0144 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                CustomChildIndex;                                 		// 0x0148 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TargetChildIndex;                                 		// 0x014C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< float >                                    TargetWeight;                                     		// 0x0150 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              BlendTimeToGo;                                    		// 0x0160 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1086 ];

		return pClassPointer;
	};

	void TickChildWeights ( float DeltaSeconds );
	void SetRootBoneRotationOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	void SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	class UAnimNodeSequence* GetCustomAnimNodeSeq ( );
	void SetActorAnimEndNotification ( unsigned long bNewStatus );
	void SetCustomAnim ( struct FName AnimName );
	void SetAllowPauseAnims ( unsigned long bSet );
	void StopCustomAnim ( float BlendOutTime );
	struct FName GetPlayedAnimation ( );
	bool PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, float StartTime, float EndTime );
};



// Class Engine.AnimNodeSynch ( Property size: 1 iter: 8) 
// Class name index: 5872 
// 0x0013 (0x0150 - 0x013D)
class UAnimNodeSynch : public UAnimNodeBlendBase
{
public:
	TArray< struct FSynchGroup >                       Groups;                                           		// 0x0140 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1088 ];

		return pClassPointer;
	};

	void SetGroupRateScale ( struct FName GroupName, float NewRateScale );
	float GetRelativePosition ( struct FName GroupName );
	void ForceRelativePosition ( struct FName GroupName, float RelativePosition );
	class UAnimNodeSequence* GetMasterNodeOfGroup ( struct FName GroupName );
	void RemoveNodeFromGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName );
	void AddNodeToGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName );
};



// Class Engine.AnimTree ( Property size: 34 iter: 50) 
// Class name index: 5874 
// 0x014F (0x028C - 0x013D)
class UAnimTree : public UAnimNodeBlendBase
{
public:
	class UAnimTree*                                   AnimTreeTemplate;                                 		// 0x0140 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnablePooling : 1;                               		// 0x0148 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSavedPose : 1;                                		// 0x0148 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bBeingEdited : 1;                                 		// 0x0148 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bParentNodeArrayBuilt : 1;                        		// 0x0148 (0x0004) [0x0000000000200000] [0x00000008] 
	unsigned long                                      bRebuildAnimTickArray : 1;                        		// 0x0148 (0x0004) [0x0000000000000000] [0x00000010] 
	TArray< struct FAnimGroup >                        AnimGroups;                                       		// 0x014C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             PrioritizedSkelBranches;                          		// 0x015C (0x0010) [0x0000000020400000]              ( CPF_NeedCtorLink | CPF_Deprecated )
	TArray< struct FName >                             ComposePrePassBoneNames;                          		// 0x016C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             ComposePostPassBoneNames;                         		// 0x017C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMorphNodeBase* >                    RootMorphNodes;                                   		// 0x018C (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FSkelControlListHead >              SkelControlLists;                                 		// 0x019C (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FBoneAtom >                         SavedPose;                                        		// 0x01AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MorphConnDrawY;                                   		// 0x01BC (0x0004) [0x0000000000000000]              
	float                                              PreviewPlayRate;                                  		// 0x01C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               PreviewSkelMesh;                                  		// 0x01C4 (0x0008) [0x0000000020000000]              ( CPF_Deprecated )
	class USkeletalMesh*                               SocketSkelMesh;                                   		// 0x01CC (0x0008) [0x0000000020000000]              ( CPF_Deprecated )
	class UStaticMesh*                                 SocketStaticMesh;                                 		// 0x01D4 (0x0008) [0x0000000020000000]              ( CPF_Deprecated )
	struct FName                                       SocketName;                                       		// 0x01DC (0x0008) [0x0000000020000000]              ( CPF_Deprecated )
	TArray< class UAnimSet* >                          PreviewAnimSets;                                  		// 0x01E4 (0x0010) [0x0000000020400000]              ( CPF_NeedCtorLink | CPF_Deprecated )
	TArray< class UMorphTargetSet* >                   PreviewMorphSets;                                 		// 0x01F4 (0x0010) [0x0000000020400000]              ( CPF_NeedCtorLink | CPF_Deprecated )
	TArray< struct FPreviewSkelMeshStruct >            PreviewMeshList;                                  		// 0x0204 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                PreviewMeshIndex;                                 		// 0x0214 (0x0004) [0x0000000000000000]              
	TArray< struct FPreviewSocketStruct >              PreviewSocketList;                                		// 0x0218 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                PreviewSocketIndex;                               		// 0x0228 (0x0004) [0x0000000000000000]              
	TArray< struct FPreviewAnimSetsStruct >            PreviewAnimSetList;                               		// 0x022C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                PreviewAnimSetListIndex;                          		// 0x023C (0x0004) [0x0000000000000000]              
	int                                                PreviewAnimSetIndex;                              		// 0x0240 (0x0004) [0x0000000000000000]              
	struct FVector                                     PreviewCamPos;                                    		// 0x0244 (0x000C) [0x0000000000000000]              
	struct FRotator                                    PreviewCamRot;                                    		// 0x0250 (0x000C) [0x0000000000000000]              
	struct FVector                                     PreviewFloorPos;                                  		// 0x025C (0x000C) [0x0000000000000000]              
	int                                                PreviewFloorYaw;                                  		// 0x0268 (0x0004) [0x0000000000000000]              
	TArray< class UAnimNodeFrame* >                    AnimNodeFrames;                                   		// 0x026C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UAnimNode* >                         AnimTickArray;                                    		// 0x027C (0x0010) [0x0000000000600000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1090 ];

		return pClassPointer;
	};

	int GetGroupIndex ( struct FName GroupName );
	float GetGroupRateScale ( struct FName GroupName );
	void SetGroupRateScale ( struct FName GroupName, float NewRateScale );
	float GetGroupRelativePosition ( struct FName GroupName );
	void ForceGroupRelativePosition ( struct FName GroupName, float RelativePosition );
	class UAnimNodeSequence* GetGroupNotifyMaster ( struct FName GroupName );
	class UAnimNodeSequence* GetGroupSynchMaster ( struct FName GroupName );
	bool SetAnimGroupForNode ( class UAnimNodeSequence* SeqNode, struct FName GroupName, unsigned long bCreateIfNotFound );
	void SetUseSavedPose ( unsigned long bUseSaved );
	class UMorphNodeBase* FindMorphNode ( struct FName InNodeName );
	class USkelControlBase* FindSkelControl ( struct FName InControlName );
};



// Class Engine.AnimNodeSequence ( Property size: 38 iter: 54) 
// Class name index: 5876 
// 0x0070 (0x0198 - 0x0128)
class UAnimNodeSequence : public UAnimNode
{
public:
	struct FName                                       AnimSeqName;                                      		// 0x0128 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Rate;                                             		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlaying : 1;                                     		// 0x0134 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLooping : 1;                                     		// 0x0134 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCauseActorAnimEnd : 1;                           		// 0x0134 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCauseActorAnimPlay : 1;                          		// 0x0134 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bZeroRootRotation : 1;                            		// 0x0134 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bZeroRootTranslation : 1;                         		// 0x0134 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;              		// 0x0134 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bNoNotifies : 1;                                  		// 0x0134 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bForceRefposeWhenNotPlaying : 1;                  		// 0x0134 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bIsIssuingNotifies : 1;                           		// 0x0134 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bForceAlwaysSlave : 1;                            		// 0x0134 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bSynchronize : 1;                                 		// 0x0134 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bReverseSync : 1;                                 		// 0x0134 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowTimeLineSlider : 1;                          		// 0x0134 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bLoopCameraAnim : 1;                              		// 0x0134 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bRandomizeCameraAnimLoopStartTime : 1;            		// 0x0134 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bEditorOnlyAddRefPoseToAdditiveAnimation : 1;     		// 0x0134 (0x0004) [0x0000000000000002] [0x00010000] ( CPF_Const )
	unsigned long                                      bCheckForFinishAnimEarly : 1;                     		// 0x0134 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bBlendingOut : 1;                                 		// 0x0134 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	float                                              CurrentTime;                                      		// 0x0138 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PreviousTime;                                     		// 0x013C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              EndTime;                                          		// 0x0140 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UAnimSequence*                               AnimSeq;                                          		// 0x0144 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                AnimLinkupIndex;                                  		// 0x014C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NotifyWeightThreshold;                            		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SynchGroupName;                                   		// 0x0154 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SynchPosOffset;                                   		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnim*                                 CameraAnim;                                       		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnimInst*                             ActiveCameraAnimInstance;                         		// 0x0168 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              CameraAnimScale;                                  		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraAnimPlayRate;                               		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraAnimBlendInTime;                            		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraAnimBlendOutTime;                           		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootBoneOption[ 0x3 ];                            		// 0x0180 (0x0003) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RootRotationOption[ 0x3 ];                        		// 0x0183 (0x0003) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class USkelControlBase* >                  MetaDataSkelControlList;                          		// 0x0188 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1092 ];

		return pClassPointer;
	};

	void SetRootBoneRotationOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	void SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	float GetTimeLeft ( );
	float GetAnimPlaybackLength ( );
	float GetGlobalPlayRate ( );
	float GetGroupRelativePosition ( );
	float FindGroupPosition ( float GroupRelativePosition );
	float FindGroupRelativePosition ( float GroupRelativePosition );
	float GetNormalizedPosition ( );
	void SetPosition ( float NewTime, unsigned long bFireNotifies );
	void ReplayAnim ( );
	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float InRate, float StartTime );
	void SetAnim ( struct FName Sequence );
};



// Class Engine.AnimNodeSequenceBlendBase ( Property size: 1 iter: 3) 
// Class name index: 5878 
// 0x0010 (0x01A8 - 0x0198)
class UAnimNodeSequenceBlendBase : public UAnimNodeSequence
{
public:
	TArray< struct FAnimBlendInfo >                    Anims;                                            		// 0x0198 (0x0010) [0x0000000004400049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1094 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNodeSequenceBlendByAim ( Property size: 14 iter: 15) 
// Class name index: 5880 
// 0x0070 (0x0218 - 0x01A8)
class UAnimNodeSequenceBlendByAim : public UAnimNodeSequenceBlendBase
{
public:
	struct FVector2D                                   Aim;                                              		// 0x01A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   PreviousAim;                                      		// 0x01B0 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector2D                                   HorizontalRange;                                  		// 0x01B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   VerticalRange;                                    		// 0x01C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   AngleOffset;                                      		// 0x01C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_LU;                                      		// 0x01D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_LC;                                      		// 0x01D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_LD;                                      		// 0x01E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_CU;                                      		// 0x01E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_CC;                                      		// 0x01F0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_CD;                                      		// 0x01F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_RU;                                      		// 0x0200 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_RC;                                      		// 0x0208 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_RD;                                      		// 0x0210 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1096 ];

		return pClassPointer;
	};

	void CheckAnimsUpToDate ( );
};



// Class Engine.AnimNodeFrame ( Property size: 11 iter: 11) 
// Class name index: 5882 
// 0x0038 (0x00C4 - 0x008C)
class UAnimNodeFrame : public UAnimObject
{
public:
	int                                                SizeX;                                            		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SizeY;                                            		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BorderWidth;                                      		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawBox : 1;                                     		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFilled : 1;                                      		// 0x0098 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTileFill : 1;                                    		// 0x0098 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FColor                                      BorderColor;                                      		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      FillColor;                                        		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  FillTexture;                                      		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   FillMaterial;                                     		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ObjComment;                                       		// 0x00B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1098 ];

		return pClassPointer;
	};

};



// Class Engine.MorphNodeBase ( Property size: 2 iter: 2) 
// Class name index: 5884 
// 0x000C (0x0098 - 0x008C)
class UMorphNodeBase : public UAnimObject
{
public:
	struct FName                                       NodeName;                                         		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawSlider : 1;                                  		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1100 ];

		return pClassPointer;
	};

};



// Class Engine.MorphNodeMultiPose ( Property size: 3 iter: 6) 
// Class name index: 5886 
// 0x0030 (0x00C8 - 0x0098)
class UMorphNodeMultiPose : public UMorphNodeBase
{
public:
	TArray< class UMorphTarget* >                      Targets;                                          		// 0x0098 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             MorphNames;                                       		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< float >                                    Weights;                                          		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1102 ];

		return pClassPointer;
	};

	bool UpdateMorphTarget ( class UMorphTarget* Target, float InWeight );
	void RemoveMorphTarget ( struct FName MorphTargetName );
	bool AddMorphTarget ( struct FName MorphTargetName, float InWeight );
};



// Class Engine.MorphNodePose ( Property size: 3 iter: 4) 
// Class name index: 5888 
// 0x0014 (0x00AC - 0x0098)
class UMorphNodePose : public UMorphNodeBase
{
public:
	class UMorphTarget*                                Target;                                           		// 0x0098 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       MorphName;                                        		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Weight;                                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1104 ];

		return pClassPointer;
	};

	void SetMorphTarget ( struct FName MorphTargetName );
};



// Class Engine.MorphNodeWeightBase ( Property size: 1 iter: 2) 
// Class name index: 5890 
// 0x0010 (0x00A8 - 0x0098)
class UMorphNodeWeightBase : public UMorphNodeBase
{
public:
	TArray< struct FMorphNodeConn >                    NodeConns;                                        		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1106 ];

		return pClassPointer;
	};

};



// Class Engine.MorphNodeWeight ( Property size: 1 iter: 2) 
// Class name index: 5892 
// 0x0004 (0x00AC - 0x00A8)
class UMorphNodeWeight : public UMorphNodeWeightBase
{
public:
	float                                              NodeWeight;                                       		// 0x00A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1108 ];

		return pClassPointer;
	};

	void SetNodeWeight ( float NewWeight );
};



// Class Engine.MorphNodeWeightByBoneAngle ( Property size: 13 iter: 14) 
// Class name index: 5894 
// 0x0044 (0x00EC - 0x00A8)
class UMorphNodeWeightByBoneAngle : public UMorphNodeWeightBase
{
public:
	float                                              Angle;                                            		// 0x00A8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NodeWeight;                                       		// 0x00AC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FName                                       BaseBoneName;                                     		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BaseBoneAxis;                                     		// 0x00B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AngleBoneAxis;                                    		// 0x00B9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertBaseBoneAxis : 1;                          		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInvertAngleBoneAxis : 1;                         		// 0x00BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bControlMaterialParameter : 1;                    		// 0x00BC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FName                                       AngleBoneName;                                    		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialSlotId;                                   		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScalarParameterName;                              		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MaterialInstanceConstant;                         		// 0x00D4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FBoneAngleMorph >                   WeightArray;                                      		// 0x00DC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1110 ];

		return pClassPointer;
	};

};



// Class Engine.MorphNodeWeightByBoneRotation ( Property size: 10 iter: 10) 
// Class name index: 5896 
// 0x003C (0x00E4 - 0x00A8)
class UMorphNodeWeightByBoneRotation : public UMorphNodeWeightBase
{
public:
	float                                              Angle;                                            		// 0x00A8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NodeWeight;                                       		// 0x00AC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FName                                       BoneName;                                         		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneAxis;                                         		// 0x00B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertBoneAxis : 1;                              		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bControlMaterialParameter : 1;                    		// 0x00BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< struct FBoneAngleMorph >                   WeightArray;                                      		// 0x00C0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                MaterialSlotId;                                   		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScalarParameterName;                              		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MaterialInstanceConstant;                         		// 0x00DC (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1112 ];

		return pClassPointer;
	};

};



// Class Engine.SkelControlBase ( Property size: 27 iter: 32) 
// Class name index: 5898 
// 0x0068 (0x00F4 - 0x008C)
class USkelControlBase : public UAnimObject
{
public:
	struct FName                                       ControlName;                                      		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ControlStrength;                                  		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendInTime;                                      		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BlendType;                                        		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPostPhysicsController : 1;                       		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSetStrengthFromAnimNode : 1;                     		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInitializedCachedNodeList : 1;                   		// 0x00A4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bControlledByAnimMetada : 1;                      		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bInvertMetadataWeight : 1;                        		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bPropagateSetActive : 1;                          		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bIgnoreWhenNotRendered : 1;                       		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bShouldTickInScript : 1;                          		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bShouldTickOwner : 1;                             		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bEnableEaseInOut : 1;                             		// 0x00A4 (0x0004) [0x0000000020020001] [0x00000200] ( CPF_Edit | CPF_EditConst | CPF_Deprecated )
	float                                              StrengthTarget;                                   		// 0x00A8 (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             StrengthAnimNodeNameList;                         		// 0x00B0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAnimNode* >                         CachedNodeList;                                   		// 0x00C0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              AnimMetadataWeight;                               		// 0x00D0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                AnimMetaDataUpdateTag;                            		// 0x00D4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              BoneScale;                                        		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ControlTickTag;                                   		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                IgnoreAtOrAboveLOD;                               		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USkelControlBase*                            NextControl;                                      		// 0x00E4 (0x0008) [0x0000000000000000]              
	int                                                ControlPosX;                                      		// 0x00EC (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	int                                                ControlPosY;                                      		// 0x00F0 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1114 ];

		return pClassPointer;
	};

	float GetControlMetadataWeight ( );
	void eventTickSkelControl ( float DeltaTime, class USkeletalMeshComponent* SkelComp );
	void SetSkelControlStrength ( float NewStrength, float InBlendTime );
	void SetSkelControlActive ( unsigned long bInActive );
};



// Class Engine.SkelControl_CCD_IK ( Property size: 12 iter: 12) 
// Class name index: 5900 
// 0x004C (0x0140 - 0x00F4)
class USkelControl_CCD_IK : public USkelControlBase
{
public:
	struct FVector                                     EffectorLocation;                                 		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EffectorLocationSpace;                            		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EffectorSpaceBoneName;                            		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EffectorTranslationFromBone;                      		// 0x010C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumBones;                                         		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxPerBoneIterations;                             		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                IterationsCount;                                  		// 0x0120 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Precision;                                        		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartFromTail : 1;                               		// 0x0128 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNoTurnOptimization : 1;                          		// 0x0128 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< float >                                    AngleConstraint;                                  		// 0x012C (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              MaxAngleSteps;                                    		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1116 ];

		return pClassPointer;
	};

};



// Class Engine.SkelControl_Multiply ( Property size: 1 iter: 1) 
// Class name index: 5902 
// 0x0004 (0x00F8 - 0x00F4)
class USkelControl_Multiply : public USkelControlBase
{
public:
	float                                              Multiplier;                                       		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1118 ];

		return pClassPointer;
	};

};



// Class Engine.SkelControl_TwistBone ( Property size: 2 iter: 2) 
// Class name index: 5904 
// 0x000C (0x0100 - 0x00F4)
class USkelControl_TwistBone : public USkelControlBase
{
public:
	struct FName                                       SourceBoneName;                                   		// 0x00F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistAngleScale;                                  		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1120 ];

		return pClassPointer;
	};

};



// Class Engine.SkelControlLimb ( Property size: 19 iter: 19) 
// Class name index: 5906 
// 0x0058 (0x014C - 0x00F4)
class USkelControlLimb : public USkelControlBase
{
public:
	struct FVector                                     EffectorLocation;                                 		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EffectorLocationSpace;                            		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      JointTargetLocationSpace;                         		// 0x0101 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      JointOffsetSpace;                                 		// 0x0102 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneAxis;                                         		// 0x0103 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      JointAxis;                                        		// 0x0104 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EffectorSpaceBoneName;                            		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     JointTargetLocation;                              		// 0x0110 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       JointTargetSpaceBoneName;                         		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     JointOffset;                                      		// 0x0124 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       JointOffsetBoneName;                              		// 0x0130 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertBoneAxis : 1;                              		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInvertJointAxis : 1;                             		// 0x0138 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRotateJoint : 1;                                 		// 0x0138 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bMaintainEffectorRelRot : 1;                      		// 0x0138 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTakeRotationFromEffectorSpace : 1;               		// 0x0138 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAllowStretching : 1;                             		// 0x0138 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	struct FVector2D                                   StretchLimits;                                    		// 0x013C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       StretchRollBoneName;                              		// 0x0144 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1122 ];

		return pClassPointer;
	};

};



// Class Engine.SkelControlFootPlacement ( Property size: 9 iter: 9) 
// Class name index: 5908 
// 0x0024 (0x0170 - 0x014C)
class USkelControlFootPlacement : public USkelControlLimb
{
public:
	float                                              FootOffset;                                       		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FootUpAxis;                                       		// 0x0150 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    FootRotOffset;                                    		// 0x0154 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertFootUpAxis : 1;                            		// 0x0160 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOrientFootToGround : 1;                          		// 0x0160 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyEnableForUpAdjustment : 1;                   		// 0x0160 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              MaxUpAdjustment;                                  		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDownAdjustment;                                		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFootOrientAdjust;                              		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1124 ];

		return pClassPointer;
	};

};



// Class Engine.SkelControlLookAt ( Property size: 35 iter: 39) 
// Class name index: 5910 
// 0x009C (0x0190 - 0x00F4)
class USkelControlLookAt : public USkelControlBase
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TargetLocationSpace;                              		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LookAtAxis;                                       		// 0x0101 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UpAxis;                                           		// 0x0102 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AllowRotationSpace;                               		// 0x0103 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TargetSpaceBoneName;                              		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertLookAtAxis : 1;                            		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDefineUpAxis : 1;                                		// 0x010C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInvertUpAxis : 1;                                		// 0x010C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableLimit : 1;                                 		// 0x010C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bLimitBasedOnRefPose : 1;                         		// 0x010C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDisableBeyondLimit : 1;                          		// 0x010C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNotifyBeyondLimit : 1;                           		// 0x010C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bShowLimit : 1;                                   		// 0x010C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAllowRotationX : 1;                              		// 0x010C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bAllowRotationY : 1;                              		// 0x010C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bAllowRotationZ : 1;                              		// 0x010C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	float                                              TargetLocationInterpSpeed;                        		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DesiredTargetLocation;                            		// 0x0114 (0x000C) [0x0000000000000000]              
	struct FVector                                     ActorSpaceLookAtTarget;                           		// 0x0120 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              MaxAngle;                                         		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OuterMaxAngle;                                    		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeadZoneAngle;                                    		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   RotationAngleRangeX;                              		// 0x0138 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   RotationAngleRangeY;                              		// 0x0140 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   RotationAngleRangeZ;                              		// 0x0148 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AllowRotationOtherBoneName;                       		// 0x0150 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtAlpha;                                      		// 0x0158 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LookAtAlphaTarget;                                		// 0x015C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LookAtAlphaBlendTimeToGo;                         		// 0x0160 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     LimitLookDir;                                     		// 0x0164 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     BaseLookDir;                                      		// 0x0170 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     BaseBonePos;                                      		// 0x017C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LastCalcTime;                                     		// 0x0188 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ControlBoneIndex;                                 		// 0x018C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1126 ];

		return pClassPointer;
	};

	bool CanLookAtPoint ( struct FVector PointLoc, unsigned long bDrawDebugInfo, unsigned long bDebugUsePersistentLines, unsigned long bDebugFlushLinesFirst );
	void SetLookAtAlpha ( float DesiredAlpha, float DesiredBlendTime );
	void InterpolateTargetLocation ( float DeltaTime );
	void SetTargetLocation ( struct FVector NewTargetLocation );
};



// Class Engine.SkelControlSingleBone ( Property size: 11 iter: 11) 
// Class name index: 5912 
// 0x0030 (0x0124 - 0x00F4)
class USkelControlSingleBone : public USkelControlBase
{
public:
	unsigned long                                      bApplyTranslation : 1;                            		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bApplyRotation : 1;                               		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAddTranslation : 1;                              		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAddRotation : 1;                                 		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRemoveMeshRotation : 1;                          		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FVector                                     BoneTranslation;                                  		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneTranslationSpace;                             		// 0x0104 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneRotationSpace;                                		// 0x0105 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TranslationSpaceBoneName;                         		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    BoneRotation;                                     		// 0x0110 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RotationSpaceBoneName;                            		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1128 ];

		return pClassPointer;
	};

};



// Class Engine.SkelControlHandlebars ( Property size: 5 iter: 5) 
// Class name index: 5914 
// 0x0014 (0x0138 - 0x0124)
class USkelControlHandlebars : public USkelControlSingleBone
{
public:
	unsigned char                                      WheelRollAxis;                                    		// 0x0124 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      HandlebarRotateAxis;                              		// 0x0125 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WheelBoneName;                                    		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertRotation : 1;                              		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                SteerWheelBoneIndex;                              		// 0x0134 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1130 ];

		return pClassPointer;
	};

};



// Class Engine.SkelControlWheel ( Property size: 8 iter: 8) 
// Class name index: 5916 
// 0x0018 (0x013C - 0x0124)
class USkelControlWheel : public USkelControlSingleBone
{
public:
	float                                              WheelDisplacement;                                		// 0x0124 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              WheelMaxRenderDisplacement;                       		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelRoll;                                        		// 0x012C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned char                                      WheelRollAxis;                                    		// 0x0130 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WheelSteeringAxis;                                		// 0x0131 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSteering;                                    		// 0x0134 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bInvertWheelRoll : 1;                             		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInvertWheelSteering : 1;                         		// 0x0138 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1132 ];

		return pClassPointer;
	};

};



// Class Engine.SkelControlSpline ( Property size: 6 iter: 7) 
// Class name index: 5918 
// 0x0014 (0x0108 - 0x00F4)
class USkelControlSpline : public USkelControlBase
{
public:
	int                                                SplineLength;                                     		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SplineBoneAxis;                                   		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneRotMode;                                      		// 0x00F9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertSplineBoneAxis : 1;                        		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              EndSplineTension;                                 		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartSplineTension;                               		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1134 ];

		return pClassPointer;
	};

};



// Class Engine.SkelControlTrail ( Property size: 12 iter: 12) 
// Class name index: 5920 
// 0x007C (0x0170 - 0x00F4)
class USkelControlTrail : public USkelControlBase
{
public:
	int                                                ChainLength;                                      		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ChainBoneAxis;                                    		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertChainBoneAxis : 1;                         		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLimitStretch : 1;                                		// 0x00FC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bActorSpaceFakeVel : 1;                           		// 0x00FC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bHadValidStrength : 1;                            		// 0x00FC (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              TrailRelaxation;                                  		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StretchLimit;                                     		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FakeVelocity;                                     		// 0x0108 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThisTimstep;                                      		// 0x0114 (0x0004) [0x0000000000000000]              
	TArray< struct FVector >                           TrailBoneLocations;                               		// 0x0118 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0128 (0x0008) MISSED OFFSET
	struct FMatrix                                     OldLocalToWorld;                                  		// 0x0130 (0x0040) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1136 ];

		return pClassPointer;
	};

};



// Class Engine.AnimSequence ( Property size: 35 iter: 46) 
// Class name index: 5922 
// 0x0138 (0x0198 - 0x0060)
class UAnimSequence : public UObject
{
public:
	struct FName                                       SequenceName;                                     		// 0x0060 (0x0008) [0x0000000000000000]              
	TArray< struct FAnimNotifyEvent >                  Notifies;                                         		// 0x0068 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UAnimMetaData* >                     MetaData;                                         		// 0x0078 (0x0010) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FSkelControlModifier >              BoneControlModifiers;                             		// 0x0088 (0x0010) [0x0000000024400000]              ( CPF_NeedCtorLink | CPF_EditInline | CPF_Deprecated )
	float                                              SequenceLength;                                   		// 0x0098 (0x0004) [0x0000000000000000]              
	int                                                NumFrames;                                        		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              RateScale;                                        		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoLoopingInterpolation : 1;                      		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsAdditive : 1;                                  		// 0x00A4 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bAdditiveBuiltLooping : 1;                        		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDoNotOverrideCompression : 1;                    		// 0x00A4 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasBeenUsed : 1;                                 		// 0x00A4 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bWasCompressedWithoutTranslations : 1;            		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000020] 
	TArray< struct FRawAnimSequenceTrack >             RawAnimData;                                      		// 0x00A8 (0x0010) [0x0000000020400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_Deprecated )
	TArray< struct FRawAnimSequenceTrack >             RawAnimationData;                                 		// 0x00B8 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FTranslationTrack >                 TranslationData;                                  		// 0x00C8 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FRotationTrack >                    RotationData;                                     		// 0x00D8 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FCurveTrack >                       CurveData;                                        		// 0x00E8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UAnimationCompressionAlgorithm*              CompressionScheme;                                		// 0x00F8 (0x0008) [0x0000000004020001]              ( CPF_Edit | CPF_EditConst | CPF_EditInline )
	unsigned char                                      TranslationCompressionFormat;                     		// 0x0100 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      RotationCompressionFormat;                        		// 0x0101 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      KeyEncodingFormat;                                		// 0x0102 (0x0001) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      CompressedTrackOffsets;                           		// 0x0104 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            CompressedByteStream;                             		// 0x0114 (0x0010) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    TranslationCodec;                                 		// 0x0124 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    RotationCodec;                                    		// 0x012C (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< struct FBoneAtom >                         AdditiveRefPose;                                  		// 0x0134 (0x0010) [0x0000000020400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_Deprecated )
	TArray< struct FRawAnimSequenceTrack >             AdditiveBasePose;                                 		// 0x0144 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FName                                       AdditiveRefName;                                  		// 0x0154 (0x0008) [0x0000000000000002]              ( CPF_Const )
	TArray< class UAnimSequence* >                     AdditiveBasePoseAnimSeq;                          		// 0x015C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UAnimSequence* >                     AdditiveTargetPoseAnimSeq;                        		// 0x016C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UAnimSequence* >                     RelatedAdditiveAnimSeqs;                          		// 0x017C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                EncodingPkgVersion;                               		// 0x018C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                CompressCommandletVersion;                        		// 0x0190 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              UseScore;                                         		// 0x0194 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1138 ];

		return pClassPointer;
	};

	float GetNotifyTimeByClass ( class UClass* NotifyClass, float PlayRate, float StartPosition, class UAnimNotify** out_Notify, float* out_Duration );
};



// Class Engine.AnimSet ( Property size: 12 iter: 13) 
// Class name index: 5924 
// 0x0114 (0x0174 - 0x0060)
class UAnimSet : public UObject
{
public:
	unsigned long                                      bAnimRotationOnly : 1;                            		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FName >                             TrackBoneNames;                                   		// 0x0064 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UAnimSequence* >                     Sequences;                                        		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0084 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AnimSet.SequenceCache
	TArray< struct FAnimSetMeshLinkup >                LinkupCache;                                      		// 0x00CC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x00DC (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AnimSet.SkelMesh2LinkupCache
	TArray< unsigned char >                            BoneUseAnimTranslation;                           		// 0x0124 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            ForceUseMeshTranslation;                          		// 0x0134 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             UseTranslationBoneNames;                          		// 0x0144 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             ForceMeshTranslationBoneNames;                    		// 0x0154 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       PreviewSkelMeshName;                              		// 0x0164 (0x0008) [0x0000000000000000]              
	struct FName                                       BestRatioSkelMeshName;                            		// 0x016C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1140 ];

		return pClassPointer;
	};

};



// Class Engine.MorphTarget ( Property size: 3 iter: 3) 
// Class name index: 5926 
// 0x001C (0x007C - 0x0060)
class UMorphTarget : public UObject
{
public:
	TArray< int >                                      MorphLODModels;                                   		// 0x0060 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                MaterialSlotId;                                   		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScalarParameterName;                              		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1142 ];

		return pClassPointer;
	};

};



// Class Engine.MorphTargetSet ( Property size: 3 iter: 4) 
// Class name index: 5928 
// 0x0028 (0x0088 - 0x0060)
class UMorphTargetSet : public UObject
{
public:
	TArray< class UMorphTarget* >                      Targets;                                          		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkeletalMesh*                               BaseSkelMesh;                                     		// 0x0070 (0x0008) [0x0000000000000000]              
	struct FArray_Mirror                               RawWedgePointIndices;                             		// 0x0078 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1144 ];

		return pClassPointer;
	};

	class UMorphTarget* FindMorphTarget ( struct FName MorphTargetName );
};



// Class Engine.MorphWeightSequence ( Property size: 0 iter: 0) 
// Class name index: 5930 
// 0x0000 (0x0060 - 0x0060)
class UMorphWeightSequence : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1146 ];

		return pClassPointer;
	};

};



// Class Engine.DecalActorBase ( Property size: 2 iter: 2) 
// Class name index: 5932 
// 0x0010 (0x0250 - 0x0240)
class ADecalActorBase : public AActor
{
public:
	struct FPointer                                    VfTable_IEditorLinkSelectionInterface;            		// 0x0240 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UDecalComponent*                             Decal;                                            		// 0x0248 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1148 ];

		return pClassPointer;
	};

};



// Class Engine.DecalActor ( Property size: 0 iter: 0) 
// Class name index: 5934 
// 0x0000 (0x0250 - 0x0250)
class ADecalActor : public ADecalActorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1150 ];

		return pClassPointer;
	};

};



// Class Engine.DecalActorMovable ( Property size: 0 iter: 0) 
// Class name index: 5936 
// 0x0000 (0x0250 - 0x0250)
class ADecalActorMovable : public ADecalActorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1152 ];

		return pClassPointer;
	};

};



// Class Engine.DecalManager ( Property size: 7 iter: 14) 
// Class name index: 5938 
// 0x003C (0x027C - 0x0240)
class ADecalManager : public AActor
{
public:
	class UDecalComponent*                             DecalTemplate;                                    		// 0x0240 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< class UDecalComponent* >                   PoolDecals;                                       		// 0x0248 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                MaxActiveDecals;                                  		// 0x0258 (0x0004) [0x0000000000000000]              
	float                                              DecalLifeSpan;                                    		// 0x025C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              DecalDepthBias;                                   		// 0x0260 (0x0004) [0x0000000000000000]              
	struct FVector2D                                   DecalBlendRange;                                  		// 0x0264 (0x0008) [0x0000000000000000]              
	TArray< struct FActiveDecalInfo >                  ActiveDecals;                                     		// 0x026C (0x0010) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1154 ];

		return pClassPointer;
	};

	class UDecalComponent* SpawnDecal ( class UMaterialInterface* DecalMaterial, struct FVector DecalLocation, struct FRotator DecalOrientation, float Width, float Height, float Thickness, unsigned long bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, unsigned long bProjectOnTerrain, unsigned long bProjectOnSkeletalMeshes, struct FName HitBone, int HitNodeIndex, int HitLevelIndex, float InDecalLifeSpan, int InFracturedStaticMeshComponentIndex, float InDepthBias, struct FVector2D InBlendRange );
	class UDecalComponent* GetPooledComponent ( );
	void SetDecalParameters ( class UDecalComponent* TheDecal, class UMaterialInterface* DecalMaterial, struct FVector DecalLocation, struct FRotator DecalOrientation, float Width, float Height, float Thickness, unsigned long bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, unsigned long bProjectOnTerrain, unsigned long bProjectOnSkeletalMeshes, struct FName HitBone, int HitNodeIndex, int HitLevelIndex, int InFracturedStaticMeshComponentIndex, float DepthBias, struct FVector2D BlendRange );
	bool CanSpawnDecals ( );
	void eventDecalFinished ( class UDecalComponent* Decal );
	bool AreDynamicDecalsEnabled ( );
};



// Class Engine.DecalComponent ( Property size: 52 iter: 59) 
// Class name index: 5940 
// 0x0178 (0x03B0 - 0x0238)
class UDecalComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                    		// 0x0238 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Width;                                            		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Height;                                           		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileX;                                            		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileY;                                            		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffsetX;                                          		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffsetY;                                          		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalRotation;                                    		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FieldOfView;                                      		// 0x025C (0x0004) [0x0000000000000000]              
	float                                              NearPlane;                                        		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FarPlane;                                         		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Location;                                         		// 0x0268 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    Orientation;                                      		// 0x0274 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     HitLocation;                                      		// 0x0280 (0x000C) [0x0000000000000000]              
	struct FVector                                     HitNormal;                                        		// 0x028C (0x000C) [0x0000000000000000]              
	struct FVector                                     HitTangent;                                       		// 0x0298 (0x000C) [0x0000000000000000]              
	struct FVector                                     HitBinormal;                                      		// 0x02A4 (0x000C) [0x0000000000000000]              
	unsigned long                                      bNoClip : 1;                                      		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStaticDecal : 1;                                 		// 0x02B0 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bProjectOnBackfaces : 1;                          		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bProjectOnHidden : 1;                             		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bProjectOnBSP : 1;                                		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bProjectOnStaticMeshes : 1;                       		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bProjectOnSkeletalMeshes : 1;                     		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bProjectOnTerrain : 1;                            		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bFlipBackfaceDirection : 1;                       		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bMovableDecal : 1;                                		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bHasBeenAttached : 1;                             		// 0x02B0 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bDecalMaterialSetAtRunTime : 1;                   		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	class UPrimitiveComponent*                         HitComponent;                                     		// 0x02B4 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FName                                       HitBone;                                          		// 0x02BC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                HitNodeIndex;                                     		// 0x02C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                HitLevelIndex;                                    		// 0x02C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                FracturedStaticMeshComponentIndex;                		// 0x02CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< int >                                      HitNodeIndices;                                   		// 0x02D0 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FDecalReceiver >                    DecalReceivers;                                   		// 0x02E0 (0x0010) [0x0000000001680002]              ( CPF_Const | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FPointer >                          StaticReceivers;                                  		// 0x02F0 (0x0010) [0x0000000001203002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0300 (0x0008) [0x0000000000203002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPlane >                            Planes;                                           		// 0x0308 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              DepthBias;                                        		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlopeScaleDepthBias;                              		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SortOrder;                                        		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BackfaceAngle;                                    		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   BlendRange;                                       		// 0x0328 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              StreamingDistanceMultiplier;                      		// 0x0330 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      DecalTransform;                                   		// 0x0334 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      FilterMode;                                       		// 0x0335 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            Filter;                                           		// 0x0338 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UPrimitiveComponent* >               ReceiverImages;                                   		// 0x0348 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     ParentRelativeLocation;                           		// 0x0358 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ParentRelativeOrientation;                        		// 0x0364 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FMatrix                                     ParentRelLocRotMatrix;                            		// 0x0370 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1156 ];

		return pClassPointer;
	};

	bool IsWaitingForResetToDefaultsToComplete ( );
	class UMaterialInterface* GetDecalMaterial ( );
	void SetDecalMaterial ( class UMaterialInterface* NewDecalMaterial );
	void ResetToDefaults ( );
};



// Class Engine.ActorFactoryDecal ( Property size: 1 iter: 1) 
// Class name index: 5942 
// 0x0008 (0x00A4 - 0x009C)
class UActorFactoryDecal : public UActorFactory
{
public:
	class UMaterialInterface*                          DecalMaterial;                                    		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1158 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryDecalMovable ( Property size: 0 iter: 0) 
// Class name index: 5944 
// 0x0000 (0x00A4 - 0x00A4)
class UActorFactoryDecalMovable : public UActorFactoryDecal
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1160 ];

		return pClassPointer;
	};

};



// Class Engine.Material ( Property size: 96 iter: 102) 
// Class name index: 5570 
// 0x05F0 (0x0854 - 0x0264)
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x0264 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PhysicalMaterial;                                 		// 0x026C (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  PhysMaterialMask;                                 		// 0x0274 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                PhysMaterialMaskUVChannel;                        		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           BlackPhysicalMaterial;                            		// 0x0280 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           WhitePhysicalMaterial;                            		// 0x0288 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FColorMaterialInput                         DiffuseColor;                                     		// 0x0290 (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScalarMaterialInput                        DiffusePower;                                     		// 0x02CC (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColorMaterialInput                         SpecularColor;                                    		// 0x0308 (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScalarMaterialInput                        SpecularPower;                                    		// 0x0344 (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVectorMaterialInput                        Normal;                                           		// 0x0380 (0x0044) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColorMaterialInput                         EmissiveColor;                                    		// 0x03C4 (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScalarMaterialInput                        Opacity;                                          		// 0x0400 (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScalarMaterialInput                        OpacityMask;                                      		// 0x043C (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              OpacityMaskClipValue;                             		// 0x0478 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShadowDepthBias;                                  		// 0x047C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2MaterialInput                       Distortion;                                       		// 0x0480 (0x0040) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      BlendMode;                                        		// 0x04C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LightingModel;                                    		// 0x04C1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      D3D11TessellationMode;                            		// 0x04C2 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColorMaterialInput                         CustomLighting;                                   		// 0x04C4 (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColorMaterialInput                         CustomSkylightDiffuse;                            		// 0x0500 (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVectorMaterialInput                        AnisotropicDirection;                             		// 0x053C (0x0044) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScalarMaterialInput                        TwoSidedLightingMask;                             		// 0x0580 (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColorMaterialInput                         TwoSidedLightingColor;                            		// 0x05BC (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVectorMaterialInput                        WorldPositionOffset;                              		// 0x05F8 (0x0044) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVectorMaterialInput                        WorldDisplacement;                                		// 0x063C (0x0044) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScalarMaterialInput                        TessellationMultiplier;                           		// 0x0680 (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColorMaterialInput                         SubsurfaceInscatteringColor;                      		// 0x06BC (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColorMaterialInput                         SubsurfaceAbsorptionColor;                        		// 0x06F8 (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScalarMaterialInput                        SubsurfaceScatteringRadius;                       		// 0x0734 (0x003C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      EnableSubsurfaceScattering : 1;                   		// 0x0770 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableSeparateTranslucency : 1;                   		// 0x0770 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableMaskedAntialiasing : 1;                    		// 0x0770 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      TwoSided : 1;                                     		// 0x0770 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      TwoSidedSeparatePass : 1;                         		// 0x0770 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDisableDepthTest : 1;                            		// 0x0770 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bSceneTextureRenderBehindTranslucency : 1;        		// 0x0770 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAllowFog : 1;                                    		// 0x0770 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bTranslucencyReceiveDominantShadowsFromStatic : 1;		// 0x0770 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bTranslucencyInheritDominantShadowsFromOpaque : 1;		// 0x0770 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bAllowTranslucencyDoF : 1;                        		// 0x0770 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bUseOneLayerDistortion : 1;                       		// 0x0770 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bUseLitTranslucencyDepthPass : 1;                 		// 0x0770 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bUseLitTranslucencyPostRenderDepthPass : 1;       		// 0x0770 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bCastLitTranslucencyShadowAsMasked : 1;           		// 0x0770 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bUsedAsLightFunction : 1;                         		// 0x0770 (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFogVolumes : 1;                          		// 0x0770 (0x0004) [0x0000000000000003] [0x00010000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedAsSpecialEngineMaterial : 1;                 		// 0x0770 (0x0004) [0x0000000000200002] [0x00020000] ( CPF_Const )
	unsigned long                                      bUsedWithSkeletalMesh : 1;                        		// 0x0770 (0x0004) [0x0000000000000003] [0x00040000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithTerrain : 1;                             		// 0x0770 (0x0004) [0x0000000000000003] [0x00080000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithLandscape : 1;                           		// 0x0770 (0x0004) [0x0000000000000003] [0x00100000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithMobileLandscape : 1;                     		// 0x0770 (0x0004) [0x0000000000000003] [0x00200000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFracturedMeshes : 1;                     		// 0x0770 (0x0004) [0x0000000000000003] [0x00400000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithParticleSystem : 1;                      		// 0x0770 (0x0004) [0x0000000000000002] [0x00800000] ( CPF_Const )
	unsigned long                                      bUsedWithParticleSprites : 1;                     		// 0x0770 (0x0004) [0x0000000000000003] [0x01000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithBeamTrails : 1;                          		// 0x0770 (0x0004) [0x0000000000000003] [0x02000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithParticleSubUV : 1;                       		// 0x0770 (0x0004) [0x0000000000000003] [0x04000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithSpeedTree : 1;                           		// 0x0770 (0x0004) [0x0000000000000003] [0x08000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithStaticLighting : 1;                      		// 0x0770 (0x0004) [0x0000000000000003] [0x10000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithLensFlare : 1;                           		// 0x0770 (0x0004) [0x0000000000000003] [0x20000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithGammaCorrection : 1;                     		// 0x0770 (0x0004) [0x0000000000000003] [0x40000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithInstancedMeshParticles : 1;              		// 0x0770 (0x0004) [0x0000000000000003] [0x80000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFluidSurfaces : 1;                       		// 0x0774 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithDecals : 1;                              		// 0x0774 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithMaterialEffect : 1;                      		// 0x0774 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithMorphTargets : 1;                        		// 0x0774 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithRadialBlur : 1;                          		// 0x0774 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithInstancedMeshes : 1;                     		// 0x0774 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithSplineMeshes : 1;                        		// 0x0774 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithAPEXMeshes : 1;                          		// 0x0774 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithScreenDoorFade : 1;                      		// 0x0774 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithHitProxyTranslucent : 1;                 		// 0x0774 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithOutline : 1;                             		// 0x0774 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableCrackFreeDisplacement : 1;                 		// 0x0774 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseImageBasedReflections : 1;                    		// 0x0774 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      Wireframe : 1;                                    		// 0x0774 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bPerPixelCameraVector : 1;                        		// 0x0774 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bAllowLightmapSpecular : 1;                       		// 0x0774 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bIsFallbackMaterial : 1;                          		// 0x0774 (0x0004) [0x0000000020000000] [0x00010000] ( CPF_Deprecated )
	unsigned long                                      bUsesDistortion : 1;                              		// 0x0774 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bIsMasked : 1;                                    		// 0x0774 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bIsPreviewMaterial : 1;                           		// 0x0774 (0x0004) [0x0000000000202000] [0x00080000] ( CPF_Transient )
	float                                              ImageReflectionNormalDampening;                   		// 0x0778 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    MaterialResources[ 0x2 ];                         		// 0x077C (0x0010) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    DefaultMaterialInstances[ 0x4 ];                  		// 0x078C (0x0020) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	int                                                EditorX;                                          		// 0x07AC (0x0004) [0x0000000000000000]              
	int                                                EditorY;                                          		// 0x07B0 (0x0004) [0x0000000000000000]              
	int                                                EditorPitch;                                      		// 0x07B4 (0x0004) [0x0000000000000000]              
	int                                                EditorYaw;                                        		// 0x07B8 (0x0004) [0x0000000000000000]              
	TArray< class UMaterialExpression* >               Expressions;                                      		// 0x07BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UMaterialExpressionComment* >        EditorComments;                                   		// 0x07CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FMaterialFunctionInfo >             MaterialFunctionInfos;                            		// 0x07DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x07EC (0x0048) UNKNOWN PROPERTY: MapProperty Engine.Material.EditorParameters
	TArray< class UTexture* >                          ReferencedTextures;                               		// 0x0834 (0x0010) [0x0000000020400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_Deprecated )
	TArray< struct FGuid >                             ReferencedTextureGuids;                           		// 0x0844 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1162 ];

		return pClassPointer;
	};

};



// Class Engine.DecalMaterial ( Property size: 0 iter: 0) 
// Class name index: 5947 
// 0x0000 (0x0854 - 0x0854)
class UDecalMaterial : public UMaterial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1164 ];

		return pClassPointer;
	};

};



// Class Engine.FogVolumeDensityInfo ( Property size: 3 iter: 10) 
// Class name index: 5949 
// 0x0014 (0x0254 - 0x0240)
class AFogVolumeDensityInfo : public AInfo
{
public:
	class UFogVolumeDensityComponent*                  DensityComponent;                                 		// 0x0240 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        AutomaticMeshComponent;                           		// 0x0248 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x0250 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1166 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct AFogVolumeDensityInfo_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct AFogVolumeDensityInfo_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};



// Class Engine.FogVolumeConeDensityInfo ( Property size: 0 iter: 0) 
// Class name index: 5951 
// 0x0000 (0x0254 - 0x0254)
class AFogVolumeConeDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1168 ];

		return pClassPointer;
	};

};



// Class Engine.FogVolumeConstantDensityInfo ( Property size: 0 iter: 0) 
// Class name index: 5953 
// 0x0000 (0x0254 - 0x0254)
class AFogVolumeConstantDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1170 ];

		return pClassPointer;
	};

};



// Class Engine.FogVolumeLinearHalfspaceDensityInfo ( Property size: 0 iter: 0) 
// Class name index: 5955 
// 0x0000 (0x0254 - 0x0254)
class AFogVolumeLinearHalfspaceDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1172 ];

		return pClassPointer;
	};

};



// Class Engine.FogVolumeSphericalDensityInfo ( Property size: 0 iter: 0) 
// Class name index: 5957 
// 0x0000 (0x0254 - 0x0254)
class AFogVolumeSphericalDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1174 ];

		return pClassPointer;
	};

};



// Class Engine.ExponentialHeightFogComponent ( Property size: 11 iter: 12) 
// Class name index: 5959 
// 0x002F (0x00B4 - 0x0085)
class UExponentialHeightFogComponent : public UActorComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0088 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              FogHeight;                                        		// 0x008C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FogDensity;                                       		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FogHeightFalloff;                                 		// 0x0094 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FogMaxOpacity;                                    		// 0x0098 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              StartDistance;                                    		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LightTerminatorAngle;                             		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              OppositeLightBrightness;                          		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      OppositeLightColor;                               		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LightInscatteringBrightness;                      		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LightInscatteringColor;                           		// 0x00B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1176 ];

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bSetEnabled );
};



// Class Engine.FogVolumeDensityComponent ( Property size: 10 iter: 11) 
// Class name index: 5961 
// 0x004F (0x00D4 - 0x0085)
class UFogVolumeDensityComponent : public UActorComponent
{
public:
	class UMaterialInterface*                          FogMaterial;                                      		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          DefaultFogVolumeMaterial;                         		// 0x0090 (0x0008) [0x0000000000000000]              
	unsigned long                                      bEnabled : 1;                                     		// 0x0098 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAffectsTranslucency : 1;                         		// 0x0098 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyAffectsTranslucency : 1;                     		// 0x0098 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FLinearColor                                SimpleLightColor;                                 		// 0x009C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ApproxFogLightColor;                              		// 0x00AC (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartDistance;                                    		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistance;                                      		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            FogVolumeActors;                                  		// 0x00C4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1178 ];

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bSetEnabled );
};



// Class Engine.FogVolumeConeDensityComponent ( Property size: 6 iter: 6) 
// Class name index: 5963 
// 0x002C (0x0100 - 0x00D4)
class UFogVolumeConeDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                       		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ConeVertex;                                       		// 0x00D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeRadius;                                       		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ConeAxis;                                         		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeMaxAngle;                                     		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDrawLightConeComponent*                     PreviewCone;                                      		// 0x00F8 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1180 ];

		return pClassPointer;
	};

};



// Class Engine.FogVolumeConstantDensityComponent ( Property size: 1 iter: 1) 
// Class name index: 5965 
// 0x0004 (0x00D8 - 0x00D4)
class UFogVolumeConstantDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              Density;                                          		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1182 ];

		return pClassPointer;
	};

};



// Class Engine.FogVolumeLinearHalfspaceDensityComponent ( Property size: 2 iter: 2) 
// Class name index: 5967 
// 0x001C (0x00F0 - 0x00D4)
class UFogVolumeLinearHalfspaceDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              PlaneDistanceFactor;                              		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00D8 (0x0008) MISSED OFFSET
	struct FPlane                                      HalfspacePlane;                                   		// 0x00E0 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1184 ];

		return pClassPointer;
	};

};



// Class Engine.FogVolumeSphericalDensityComponent ( Property size: 4 iter: 4) 
// Class name index: 5969 
// 0x001C (0x00F0 - 0x00D4)
class UFogVolumeSphericalDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                       		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SphereCenter;                                     		// 0x00D8 (0x000C) [0x0000000000000000]              
	float                                              SphereRadius;                                     		// 0x00E4 (0x0004) [0x0000000000000000]              
	class UDrawLightRadiusComponent*                   PreviewSphereRadius;                              		// 0x00E8 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1186 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryFogVolumeConstantDensityInfo ( Property size: 2 iter: 2) 
// Class name index: 5971 
// 0x000C (0x00A8 - 0x009C)
class UActorFactoryFogVolumeConstantDensityInfo : public UActorFactory
{
public:
	class UMaterialInterface*                          SelectedMaterial;                                 		// 0x009C (0x0008) [0x0000000000000000]              
	unsigned long                                      bNothingSelected : 1;                             		// 0x00A4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1188 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryFogVolumeLinearHalfspaceDensityInfo ( Property size: 0 iter: 0) 
// Class name index: 5973 
// 0x0000 (0x00A8 - 0x00A8)
class UActorFactoryFogVolumeLinearHalfspaceDensityInfo : public UActorFactoryFogVolumeConstantDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1190 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryFogVolumeSphericalDensityInfo ( Property size: 0 iter: 0) 
// Class name index: 5975 
// 0x0000 (0x00A8 - 0x00A8)
class UActorFactoryFogVolumeSphericalDensityInfo : public UActorFactoryFogVolumeConstantDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1192 ];

		return pClassPointer;
	};

};



// Class Engine.ApexDestructibleActor ( Property size: 9 iter: 15) 
// Class name index: 5977 
// 0x0058 (0x0298 - 0x0240)
class AApexDestructibleActor : public AActor
{
public:
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0240 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bFractureMaterialOverride : 1;                    		// 0x0248 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPlaySingleFractureMaterialEffect : 1;            		// 0x0248 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	TArray< class UFractureMaterial* >                 FractureMaterials;                                		// 0x024C (0x0010) [0x0000000000400043]              ( CPF_Edit | CPF_Const | CPF_EditConstArray | CPF_NeedCtorLink )
	class UApexStaticDestructibleComponent*            StaticDestructibleComponent;                      		// 0x025C (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	int                                                LOD;                                              		// 0x0264 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< unsigned char >                            VisibilityFactors;                                		// 0x0268 (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )
	TArray< class USoundCue* >                         FractureSounds;                                   		// 0x0278 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UParticleSystem* >                   FractureParticleEffects;                          		// 0x0288 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1194 ];

		return pClassPointer;
	};

	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void TakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void eventPostBeginPlay ( );
	void CacheFractureEffects ( );
	void eventSpawnFractureEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FVector SpawnDirection );
};



// Class Engine.FracturedStaticMeshActor ( Property size: 16 iter: 38) 
// Class name index: 5979 
// 0x0094 (0x02D4 - 0x0240)
class AFracturedStaticMeshActor : public AActor
{
public:
	int                                                MaxPartsToSpawnAtOnce;                            		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UFracturedStaticMeshComponent*               FracturedStaticMeshComponent;                     		// 0x0244 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UFracturedSkinnedMeshComponent*              SkinnedComponent;                                 		// 0x024C (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< int >                                      ChunkHealth;                                      		// 0x0254 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bBreakChunksOnActorTouch : 1;                     		// 0x0264 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShouldSaveForCheckpoint : 1;                     		// 0x0264 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< class UClass* >                            FracturedByDamageType;                            		// 0x0268 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ChunkHealthScale;                                 		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UParticleSystem* >                   OverrideFragmentDestroyEffects;                   		// 0x027C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              FractureCullMinDistance;                          		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FractureCullMaxDistance;                          		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FDeferredPartToSpawn >              DeferredPartsToSpawn;                             		// 0x0294 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPhysEffectInfo                             PartImpactEffect;                                 		// 0x02A4 (0x0018) [0x0000000000000000]              
	class USoundCue*                                   ExplosionFractureSound;                           		// 0x02BC (0x0008) [0x0000000000000000]              
	class USoundCue*                                   SingleChunkFractureSound;                         		// 0x02C4 (0x0008) [0x0000000000000000]              
	class UMaterialInterface*                          MI_LoseChunkPreviousMaterial;                     		// 0x02CC (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1196 ];

		return pClassPointer;
	};

	void NotifyHitByExplosion ( class AController* InstigatorController, float DamageAmount, class UClass* dmgType );
	void eventSetLoseChunkReplacementMaterial ( );
	void eventHideFragmentsToMaximizeMemoryUsage ( );
	void eventHideOneFragment ( );
	void eventResetVisibility ( );
	void eventBreakOffPartsInRadius ( struct FVector Origin, float Radius, float RBStrength, unsigned long bWantPhysChunksAndParticles );
	void eventExplode ( );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void RemoveDecals ( int IndexToRemoveDecalsFrom );
	bool FractureEffectIsRelevant ( unsigned long bForceDedicated, class APawn* EffectInstigator, unsigned char* bWantPhysChunksAndParticles );
	bool IsFracturedByDamageType ( class UClass* dmgType );
	bool eventSpawnDeferredParts ( );
	void eventBreakOffIsolatedIslands ( TArray< int > IgnoreFrags, struct FVector ChunkDir, TArray< class AFracturedStaticMeshPart* > DisableCollWithPart, unsigned long bWantPhysChunks, TArray< unsigned char >* FragmentVis );
	void ApplyCheckpointRecord ( struct AFracturedStaticMeshActor_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct AFracturedStaticMeshActor_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void ResetHealth ( );
	void eventPostBeginPlay ( );
	class AFracturedStaticMeshPart* SpawnPartMulti ( TArray< int > ChunkIndices, struct FVector InitialVel, struct FVector InitialAngVel, float RelativeScale, unsigned long bExplosion );
	class AFracturedStaticMeshPart* SpawnPart ( int ChunkIndex, struct FVector InitialVel, struct FVector InitialAngVel, float RelativeScale, unsigned long bExplosion );
};



// Class Engine.FracturedStaticMeshPart ( Property size: 12 iter: 19) 
// Class name index: 5981 
// 0x0034 (0x0308 - 0x02D4)
class AFracturedStaticMeshPart : public AFracturedStaticMeshActor
{
public:
	float                                              DestroyPartRadiusFactor;                          		// 0x02D4 (0x0004) [0x0000000000000000]              
	class AFracturedStaticMeshActor*                   BaseFracturedMeshActor;                           		// 0x02D8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bHasBeenRecycled : 1;                             		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bChangeRBChannelWhenAsleep : 1;                   		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCompositeThatExplodesOnImpact : 1;               		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000004] 
	float                                              LastSpawnTime;                                    		// 0x02E4 (0x0004) [0x0000000000000000]              
	int                                                PartPoolIndex;                                    		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              FracPartGravScale;                                		// 0x02EC (0x0004) [0x0000000000000000]              
	unsigned char                                      AsleepRBChannel;                                  		// 0x02F0 (0x0001) [0x0000000000000000]              
	struct FVector                                     OldVelocity;                                      		// 0x02F4 (0x000C) [0x0000000000000000]              
	float                                              CurrentVibrationLevel;                            		// 0x0300 (0x0004) [0x0000000000000000]              
	float                                              LastImpactSoundTime;                              		// 0x0304 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1198 ];

		return pClassPointer;
	};

	void eventBreakOffPartsInRadius ( struct FVector Origin, float Radius, float RBStrength, unsigned long bWantPhysChunksAndParticles );
	void eventExplode ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void TryToCleanUp ( );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void RecyclePart ( unsigned long bAddToFreePool );
	void Initialize ( );
};



// Class Engine.FractureManager ( Property size: 9 iter: 24) 
// Class name index: 5983 
// 0x0044 (0x0284 - 0x0240)
class AFractureManager : public AActor
{
public:
	int                                                FSMPartPoolSize;                                  		// 0x0240 (0x0004) [0x0000000000000000]              
	unsigned long                                      bEnableAntiVibration : 1;                         		// 0x0244 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableSpawnChunkEffectForRadialDamage : 1;       		// 0x0244 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              DestroyVibrationLevel;                            		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DestroyMinAngVel;                                 		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionVelScale;                                		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AFracturedStaticMeshPart* >          PartPool;                                         		// 0x0254 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< int >                                      FreeParts;                                        		// 0x0264 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class AFracturedStaticMeshActor* >         ActorsWithDeferredPartsToSpawn;                   		// 0x0274 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1200 ];

		return pClassPointer;
	};

	void Tick ( float DeltaTime );
	void eventReturnPartActor ( class AFracturedStaticMeshPart* Part );
	class AFracturedStaticMeshPart* eventSpawnPartActor ( class AFracturedStaticMeshActor* Parent, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	class AFracturedStaticMeshPart* GetFSMPart ( class AFracturedStaticMeshActor* Parent, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void ResetPoolVisibility ( );
	void CreateFSMParts ( );
	void CleanUpFSMParts ( );
	void eventDestroyed ( );
	void eventPreBeginPlay ( );
	float GetFSMFractureCullDistanceScale ( );
	float GetFSMRadialSpawnChanceScale ( );
	float GetFSMDirectSpawnChanceScale ( );
	float GetNumFSMPartsScale ( );
	void eventSpawnChunkDestroyEffect ( class UParticleSystem* Effect, struct FBox ChunkBox, struct FVector ChunkDir, float Scale );
};



// Class Engine.ImageReflection ( Property size: 3 iter: 6) 
// Class name index: 5985 
// 0x0014 (0x0254 - 0x0240)
class AImageReflection : public AActor
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0240 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	class UImageReflectionComponent*                   ReflectionComponent;                              		// 0x0244 (0x0008) [0x0000000024080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline | CPF_Deprecated )
	class UImageBasedReflectionComponent*              ImageReflectionComponent;                         		// 0x024C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1202 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};



// Class Engine.ImageReflectionSceneCapture ( Property size: 2 iter: 2) 
// Class name index: 5987 
// 0x0008 (0x025C - 0x0254)
class AImageReflectionSceneCapture : public AImageReflection
{
public:
	float                                              DepthRange;                                       		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ColorRange;                                       		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1204 ];

		return pClassPointer;
	};

};



// Class Engine.ImageReflectionShadowPlane ( Property size: 2 iter: 5) 
// Class name index: 5989 
// 0x000C (0x024C - 0x0240)
class AImageReflectionShadowPlane : public AActor
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0240 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	class UImageReflectionShadowPlaneComponent*        ReflectionShadowComponent;                        		// 0x0244 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1206 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};



// Class Engine.ImageReflectionComponent ( Property size: 1 iter: 1) 
// Class name index: 5991 
// 0x000B (0x0090 - 0x0085)
class UImageReflectionComponent : public UActorComponent
{
public:
	class UTexture2D*                                  ReflectionTexture;                                		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1208 ];

		return pClassPointer;
	};

};



// Class Engine.ImageReflectionShadowPlaneComponent ( Property size: 2 iter: 3) 
// Class name index: 5993 
// 0x0018 (0x0250 - 0x0238)
class UImageReflectionShadowPlaneComponent : public UPrimitiveComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0238 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x023C (0x0004) MISSED OFFSET
	struct FPlane                                      ReflectionPlane;                                  		// 0x0240 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1210 ];

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bSetEnabled );
};



// Class Engine.ApexComponentBase ( Property size: 5 iter: 5) 
// Class name index: 5995 
// 0x001C (0x0264 - 0x0248)
class UApexComponentBase : public UMeshComponent
{
public:
	struct FPointer                                    ComponentBaseResources;                           		// 0x0248 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FRenderCommandFence_Mirror                  ReleaseResourcesFence;                            		// 0x0250 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UApexAsset*                                  Asset;                                            		// 0x0254 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      WireframeColor;                                   		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAssetChanged : 1;                                		// 0x0260 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1212 ];

		return pClassPointer;
	};

};



// Class Engine.ApexDynamicComponent ( Property size: 1 iter: 1) 
// Class name index: 5997 
// 0x0008 (0x026C - 0x0264)
class UApexDynamicComponent : public UApexComponentBase
{
public:
	struct FPointer                                    ComponentDynamicResources;                        		// 0x0264 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1214 ];

		return pClassPointer;
	};

};



// Class Engine.ApexStaticComponent ( Property size: 0 iter: 0) 
// Class name index: 5999 
// 0x0000 (0x0264 - 0x0264)
class UApexStaticComponent : public UApexComponentBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1216 ];

		return pClassPointer;
	};

};



// Class Engine.ApexStaticDestructibleComponent ( Property size: 5 iter: 5) 
// Class name index: 6001 
// 0x001C (0x0280 - 0x0264)
class UApexStaticDestructibleComponent : public UApexStaticComponent
{
public:
	float                                              SleepEnergyThreshold;                             		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SleepDamping;                                     		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ApexDestructibleActor;                            		// 0x026C (0x0008) [0x0000000000201000]              ( CPF_Native )
	struct FPointer                                    ApexDestructiblePreview;                          		// 0x0274 (0x0008) [0x0000000000201000]              ( CPF_Native )
	unsigned long                                      bIsThumbnailComponent : 1;                        		// 0x027C (0x0004) [0x0000000000001000] [0x00000001] ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1218 ];

		return pClassPointer;
	};

};



// Class Engine.FracturedBaseComponent ( Property size: 10 iter: 15) 
// Class name index: 6003 
// 0x0028 (0x02F0 - 0x02C8)
class UFracturedBaseComponent : public UStaticMeshComponent
{
public:
	struct FPointer                                    ComponentBaseResources;                           		// 0x02C8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FRenderCommandFence_Mirror                  ReleaseResourcesFence;                            		// 0x02D0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< unsigned char >                            VisibleFragments;                                 		// 0x02D4 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bVisibilityHasChanged : 1;                        		// 0x02E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bVisibilityReset : 1;                             		// 0x02E4 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bInitialVisibilityValue : 1;                      		// 0x02E4 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bUseDynamicIndexBuffer : 1;                       		// 0x02E4 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bUseDynamicIBWithHiddenFragments : 1;             		// 0x02E4 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	int                                                NumResourceIndices;                               		// 0x02E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                bResetStaticMesh;                                 		// 0x02EC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1220 ];

		return pClassPointer;
	};

	int GetNumVisibleFragments ( );
	int GetNumFragments ( );
	bool IsFragmentVisible ( int FragmentIndex );
	TArray< unsigned char > GetVisibleFragments ( );
	bool SetStaticMesh ( class UStaticMesh* NewMesh, unsigned long bForce );
};



// Class Engine.FracturedSkinnedMeshComponent ( Property size: 5 iter: 5) 
// Class name index: 6005 
// 0x002C (0x031C - 0x02F0)
class UFracturedSkinnedMeshComponent : public UFracturedBaseComponent
{
public:
	struct FPointer                                    ComponentSkinResources;                           		// 0x02F0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FMatrix >                           FragmentTransforms;                               		// 0x02F8 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UFracturedStaticMeshComponent* >     DependentComponents;                              		// 0x0308 (0x0010) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bBecameVisible : 1;                               		// 0x0318 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bFragmentTransformsChanged : 1;                   		// 0x0318 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1222 ];

		return pClassPointer;
	};

};



// Class Engine.FracturedStaticMeshComponent ( Property size: 11 iter: 23) 
// Class name index: 6007 
// 0x004C (0x033C - 0x02F0)
class UFracturedStaticMeshComponent : public UFracturedBaseComponent
{
public:
	TArray< unsigned char >                            FragmentNeighborsVisible;                         		// 0x02F0 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FBox                                        VisibleBox;                                       		// 0x0300 (0x001C) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bUseSkinnedRendering : 1;                         		// 0x031C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bUseVisibleVertsForBounds : 1;                    		// 0x031C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bTopFragmentsRootNonDestroyable : 1;              		// 0x031C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bBottomFragmentsRootNonDestroyable : 1;           		// 0x031C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              TopBottomFragmentDistThreshold;                   		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LoseChunkOutsideMaterialOverride;                 		// 0x0324 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              FragmentBoundsMaxZ;                               		// 0x032C (0x0004) [0x0000000000000000]              
	float                                              FragmentBoundsMinZ;                               		// 0x0330 (0x0004) [0x0000000000000000]              
	class UFracturedSkinnedMeshComponent*              SkinnedComponent;                                 		// 0x0334 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1224 ];

		return pClassPointer;
	};

	class UPhysicalMaterial* GetFracturedMeshPhysMaterial ( );
	void RecreatePhysState ( );
	TArray< int > GetBoundaryHiddenFragments ( TArray< int > AdditionalVisibleFragments );
	TArray< struct FFragmentGroup > GetFragmentGroups ( TArray< int > IgnoreFragments, float MinConnectionArea );
	int GetCoreFragmentIndex ( );
	struct FVector GetFragmentAverageExteriorNormal ( int FragmentIndex );
	struct FBox GetFragmentBox ( int FragmentIndex );
	bool IsNoPhysFragment ( int FragmentIndex );
	bool IsRootFragment ( int FragmentIndex );
	bool IsFragmentDestroyable ( int FragmentIndex );
	void SetVisibleFragments ( TArray< unsigned char > VisibilityFactors );
};



// Class Engine.ImageBasedReflectionComponent ( Property size: 4 iter: 7) 
// Class name index: 6009 
// 0x001C (0x02E4 - 0x02C8)
class UImageBasedReflectionComponent : public UStaticMeshComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x02C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTwoSided : 1;                                    		// 0x02C8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UTexture2D*                                  ReflectionTexture;                                		// 0x02CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ReflectionColor;                                  		// 0x02D4 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1226 ];

		return pClassPointer;
	};

	void OnUpdatePropertyReflectionColor ( );
	void UpdateImageReflectionParameters ( );
	void SetEnabled ( unsigned long bSetEnabled );
};



// Class Engine.InstancedStaticMeshComponent ( Property size: 10 iter: 12) 
// Class name index: 6011 
// 0x0068 (0x0330 - 0x02C8)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	TArray< struct FInstancedStaticMeshInstanceData >  PerInstanceData;                                  		// 0x02C8 (0x0010) [0x0000000020400000]              ( CPF_NeedCtorLink | CPF_Deprecated )
	TArray< struct FInstancedStaticMeshInstanceData >  PerInstanceSMData;                                		// 0x02D8 (0x0010) [0x0000000000001000]              ( CPF_Native )
	int                                                NumPendingLightmaps;                              		// 0x02E8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ComponentJoinKey;                                 		// 0x02EC (0x0004) [0x0000000000000000]              
	TArray< struct FInstancedStaticMeshMappingInfo >   CachedMappings;                                   		// 0x02F0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                InstancingRandomSeed;                             		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InstanceStartCullDistance;                        		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InstanceEndCullDistance;                          		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FBitArray_Mirror                            SelectedInstances;                                		// 0x030C (0x0020) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bDontResolveInstancedLightmaps : 1;               		// 0x032C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1228 ];

		return pClassPointer;
	};

};



// Class Engine.SplineMeshComponent ( Property size: 3 iter: 4) 
// Class name index: 6013 
// 0x0068 (0x0330 - 0x02C8)
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	struct FSplineMeshParams                           SplineParams;                                     		// 0x02C8 (0x0058) [0x0000000000000000]              
	struct FVector                                     SplineXDir;                                       		// 0x0320 (0x000C) [0x0000000000000000]              
	unsigned long                                      bSmoothInterpRollScale : 1;                       		// 0x032C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1230 ];

		return pClassPointer;
	};

};



// Class Engine.ApexAsset ( Property size: 5 iter: 5) 
// Class name index: 6015 
// 0x0050 (0x00B0 - 0x0060)
class UApexAsset : public UObject
{
public:
	struct FString                                     OriginalApexName;                                 		// 0x0060 (0x0010) [0x0000000004400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UApexComponentBase* >                ApexComponents;                                   		// 0x0070 (0x0010) [0x000000000408300A]              ( CPF_Const | CPF_ExportObject | CPF_Native | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< class UApexAsset* >                        NamedReferences;                                  		// 0x0080 (0x0010) [0x0000000014400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineUse )
	struct FString                                     SourceFilePath;                                   		// 0x0090 (0x0010) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     SourceFileTimestamp;                              		// 0x00A0 (0x0010) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1232 ];

		return pClassPointer;
	};

};



// Class Engine.ApexClothingAsset ( Property size: 27 iter: 28) 
// Class name index: 6017 
// 0x0078 (0x0128 - 0x00B0)
class UApexClothingAsset : public UApexAsset
{
public:
	TArray< struct FClothingLodInfo >                  LodMaterialInfo;                                  		// 0x00B0 (0x0010) [0x0000000000400043]              ( CPF_Edit | CPF_Const | CPF_EditConstArray | CPF_NeedCtorLink )
	struct FPointer                                    MApexAsset;                                       		// 0x00C0 (0x0008) [0x0000000000001000]              ( CPF_Native )
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x00C8 (0x0010) [0x0000000000400043]              ( CPF_Edit | CPF_Const | CPF_EditConstArray | CPF_NeedCtorLink )
	class UApexGenericAsset*                           ApexClothingLibrary;                              		// 0x00D8 (0x0008) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	unsigned long                                      bUseHardwareCloth : 1;                            		// 0x00E0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFallbackSkinning : 1;                            		// 0x00E0 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSlowStart : 1;                                   		// 0x00E0 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bRecomputeNormals : 1;                            		// 0x00E0 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowAdaptiveTargetFrequency : 1;                		// 0x00E0 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bResetAfterTeleport : 1;                          		// 0x00E0 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseLocalSpaceSimulation : 1;                     		// 0x00E0 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasUniqueAssetMaterialNames : 1;                 		// 0x00E0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      IgnoreInitialTrigger : 1;                         		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	int                                                UVChannelForTangentUpdate;                        		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxDistanceBlendTime;                             		// 0x00E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ContinuousRotationThreshold;                      		// 0x00EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ContinuousDistanceThreshold;                      		// 0x00F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LodWeightsMaxDistance;                            		// 0x00F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LodWeightsDistanceWeight;                         		// 0x00F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LodWeightsBias;                                   		// 0x00FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LodWeightsBenefitsBias;                           		// 0x0100 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LODDecayTime;                                     		// 0x0104 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class USoundCue*                                   SoundOnMove;                                      		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundOnRest;                                      		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundWhileMoving;                                 		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedThresholdOnMove;                             		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedThresholdOnRest;                             		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1234 ];

		return pClassPointer;
	};

};



// Class Engine.ApexDestructibleAsset ( Property size: 11 iter: 18) 
// Class name index: 6019 
// 0x014C (0x01FC - 0x00B0)
class UApexDestructibleAsset : public UApexAsset
{
public:
	struct FPointer                                    MApexAsset;                                       		// 0x00B0 (0x0008) [0x0000000000001000]              ( CPF_Native )
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x00B8 (0x0010) [0x0000000000400043]              ( CPF_Edit | CPF_Const | CPF_EditConstArray | CPF_NeedCtorLink )
	TArray< class UFractureMaterial* >                 FractureMaterials;                                		// 0x00C8 (0x0010) [0x0000000000400043]              ( CPF_Edit | CPF_Const | CPF_EditConstArray | CPF_NeedCtorLink )
	unsigned long                                      bPlaySingleFractureMaterialEffect : 1;            		// 0x00D8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasUniqueAssetMaterialNames : 1;                 		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDynamic : 1;                                     		// 0x00D8 (0x0004) [0x0000000020000000] [0x00000004] ( CPF_Deprecated )
	class UPhysicalMaterial*                           DefaultPhysMaterial;                              		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    MDestructibleThumbnailComponent;                  		// 0x00E4 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FString                                     CrumbleEmitterName;                               		// 0x00EC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DustEmitterName;                                  		// 0x00FC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FNxDestructibleParameters                   DestructibleParameters;                           		// 0x010C (0x00F0) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1236 ];

		return pClassPointer;
	};

};



// Class Engine.ApexGenericAsset ( Property size: 2 iter: 2) 
// Class name index: 6021 
// 0x0018 (0x00C8 - 0x00B0)
class UApexGenericAsset : public UApexAsset
{
public:
	struct FPointer                                    MApexAsset;                                       		// 0x00B0 (0x0008) [0x0000000000001000]              ( CPF_Native )
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x00B8 (0x0010) [0x0000000000400043]              ( CPF_Edit | CPF_Const | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1238 ];

		return pClassPointer;
	};

};



// Class Engine.InterpFilter ( Property size: 1 iter: 1) 
// Class name index: 6023 
// 0x0010 (0x0070 - 0x0060)
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                          		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1240 ];

		return pClassPointer;
	};

};



// Class Engine.InterpFilter_Classes ( Property size: 2 iter: 2) 
// Class name index: 6025 
// 0x0018 (0x0088 - 0x0070)
class UInterpFilter_Classes : public UInterpFilter
{
public:
	class UClass*                                      ClassToFilterBy;                                  		// 0x0070 (0x0008) [0x0000000000000000]              
	TArray< class UClass* >                            TrackClasses;                                     		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1242 ];

		return pClassPointer;
	};

};



// Class Engine.InterpFilter_Custom ( Property size: 1 iter: 1) 
// Class name index: 6027 
// 0x0010 (0x0080 - 0x0070)
class UInterpFilter_Custom : public UInterpFilter
{
public:
	TArray< class UInterpGroup* >                      GroupsToInclude;                                  		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1244 ];

		return pClassPointer;
	};

};



// Class Engine.InterpGroup ( Property size: 10 iter: 11) 
// Class name index: 6029 
// 0x0038 (0x0098 - 0x0060)
class UInterpGroup : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;                  		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	TArray< class UInterpTrack* >                      InterpTracks;                                     		// 0x0068 (0x0010) [0x0000000000400008]              ( CPF_ExportObject | CPF_NeedCtorLink )
	struct FName                                       GroupName;                                        		// 0x0078 (0x0008) [0x0000000000000000]              
	struct FColor                                      GroupColor;                                       		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UAnimSet* >                          GroupAnimSets;                                    		// 0x0084 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bCollapsed : 1;                                   		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bVisible : 1;                                     		// 0x0094 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsFolder : 1;                                    		// 0x0094 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsParented : 1;                                  		// 0x0094 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsSelected : 1;                                  		// 0x0094 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1246 ];

		return pClassPointer;
	};

};



// Class Engine.InterpGroupAI ( Property size: 10 iter: 10) 
// Class name index: 6031 
// 0x0018 (0x00B0 - 0x0098)
class UInterpGroupAI : public UInterpGroup
{
public:
	class UClass*                                      PreviewPawnClass;                                 		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       StageMarkGroup;                                   		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      SnapToRootBoneLocationWhenFinished : 1;           		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNoEncroachmentCheck : 1;                         		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableWorldCollision : 1;                       		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIgnoreLegacyHeightAdjust : 1;                    		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bChangeLightingChannels : 1;                      		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bRecreatePreviewPawn : 1;                         		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bRefreshStageMarkGroup : 1;                       		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1248 ];

		return pClassPointer;
	};

};



// Class Engine.InterpGroupCamera ( Property size: 3 iter: 4) 
// Class name index: 6033 
// 0x004C (0x00E4 - 0x0098)
class UInterpGroupCamera : public UInterpGroup
{
public:
	class UCameraAnim*                                 CameraAnimInst;                                   		// 0x0098 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FCameraPreviewInfo                          Target;                                           		// 0x00A0 (0x0040) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CompressTolerance;                                		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1250 ];

		return pClassPointer;
	};

};



// Class Engine.InterpGroupDirector ( Property size: 0 iter: 0) 
// Class name index: 6035 
// 0x0000 (0x0098 - 0x0098)
class UInterpGroupDirector : public UInterpGroup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1252 ];

		return pClassPointer;
	};

};



// Class Engine.InterpGroupInst ( Property size: 4 iter: 4) 
// Class name index: 6037 
// 0x0028 (0x0088 - 0x0060)
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	class AActor*                                      GroupActor;                                       		// 0x0068 (0x0008) [0x0000000000000000]              
	TArray< class UInterpTrackInst* >                  TrackInst;                                        		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    CachedCamOverridePostProcess;                     		// 0x0080 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1254 ];

		return pClassPointer;
	};

};



// Class Engine.InterpGroupInstAI ( Property size: 8 iter: 8) 
// Class name index: 6039 
// 0x0024 (0x00AC - 0x0088)
class UInterpGroupInstAI : public UInterpGroupInst
{
public:
	class UInterpGroupAI*                              AIGroup;                                          		// 0x0088 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      SavedPhysics;                                     		// 0x0090 (0x0001) [0x0000000000000000]              
	unsigned long                                      bSavedNoEncroachCheck : 1;                        		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSavedCollideActors : 1;                          		// 0x0094 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bSavedBlockActors : 1;                            		// 0x0094 (0x0004) [0x0000000000000000] [0x00000004] 
	struct FLightingChannelContainer                   SavedLightingChannels;                            		// 0x0098 (0x0004) [0x0000000000000000]              
	class APawn*                                       PreviewPawn;                                      		// 0x009C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      StageMarkActor;                                   		// 0x00A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1256 ];

		return pClassPointer;
	};

};



// Class Engine.InterpGroupInstCamera ( Property size: 0 iter: 0) 
// Class name index: 6041 
// 0x0000 (0x0088 - 0x0088)
class UInterpGroupInstCamera : public UInterpGroupInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1258 ];

		return pClassPointer;
	};

};



// Class Engine.InterpGroupInstDirector ( Property size: 0 iter: 0) 
// Class name index: 6043 
// 0x0000 (0x0088 - 0x0088)
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1260 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackBoolProp ( Property size: 2 iter: 3) 
// Class name index: 6045 
// 0x0018 (0x00D8 - 0x00C0)
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	TArray< struct FBoolTrackKey >                     BoolTrack;                                        		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       PropertyName;                                     		// 0x00D0 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1262 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackDirector ( Property size: 2 iter: 3) 
// Class name index: 6047 
// 0x0014 (0x00D4 - 0x00C0)
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray< struct FDirectorTrackCut >                 CutTrack;                                         		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bSimulateCameraCutsOnClients : 1;                 		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1264 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackEvent ( Property size: 4 iter: 5) 
// Class name index: 6049 
// 0x0014 (0x00D4 - 0x00C0)
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray< struct FEventTrackKey >                    EventTrack;                                       		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bFireEventsWhenForwards : 1;                      		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenBackwards : 1;                     		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;               		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1266 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackFaceFX ( Property size: 4 iter: 6) 
// Class name index: 6051 
// 0x0038 (0x00F8 - 0x00C0)
class UInterpTrackFaceFX : public UInterpTrack
{
public:
	TArray< class UFaceFXAnimSet* >                    FaceFXAnimSets;                                   		// 0x00C0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FFaceFXTrackKey >                   FaceFXSeqs;                                       		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UFaceFXAsset*                                CachedActorFXAsset;                               		// 0x00E0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FFaceFXSoundCueKey >                FaceFXSoundCueKeys;                               		// 0x00E8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1268 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackFloatBase ( Property size: 2 iter: 2) 
// Class name index: 6053 
// 0x0018 (0x00D8 - 0x00C0)
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                       		// 0x00C0 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CurveTension;                                     		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1270 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackAnimControl ( Property size: 5 iter: 6) 
// Class name index: 6055 
// 0x002C (0x0104 - 0x00D8)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	TArray< class UAnimSet* >                          AnimSets;                                         		// 0x00D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       SlotName;                                         		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FAnimControlTrackKey >              AnimSeqs;                                         		// 0x00F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bEnableRootMotion : 1;                            		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSkipAnimNotifiers : 1;                           		// 0x0100 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1272 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackFade ( Property size: 1 iter: 1) 
// Class name index: 6057 
// 0x0004 (0x00DC - 0x00D8)
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned long                                      bPersistFade : 1;                                 		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1274 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackFloatMaterialParam ( Property size: 5 iter: 5) 
// Class name index: 6059 
// 0x0034 (0x010C - 0x00D8)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	TArray< struct FMaterialReferenceList >            Materials;                                        		// 0x00D8 (0x0010) [0x0000000000480003]              ( CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink )
	TArray< int >                                      MaterialIdx;                                      		// 0x00E8 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UMaterialInterface*                          Material;                                         		// 0x00F8 (0x0008) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	struct FName                                       ParamName;                                        		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNeedsMaterialRefsUpdate : 1;                     		// 0x0108 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1276 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackFloatParticleParam ( Property size: 1 iter: 1) 
// Class name index: 6061 
// 0x0008 (0x00E0 - 0x00D8)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                        		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1278 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackFloatProp ( Property size: 1 iter: 1) 
// Class name index: 6063 
// 0x0008 (0x00E0 - 0x00D8)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x00D8 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1280 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackMorphWeight ( Property size: 1 iter: 1) 
// Class name index: 6065 
// 0x0008 (0x00E0 - 0x00D8)
class UInterpTrackMorphWeight : public UInterpTrackFloatBase
{
public:
	struct FName                                       MorphNodeName;                                    		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1282 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackMoveAxis ( Property size: 2 iter: 3) 
// Class name index: 6067 
// 0x0014 (0x00EC - 0x00D8)
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	unsigned char                                      MoveAxis;                                         		// 0x00D8 (0x0001) [0x0000000000000000]              
	struct FInterpLookupTrack                          LookupTrack;                                      		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1284 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackSkelControlScale ( Property size: 1 iter: 1) 
// Class name index: 6069 
// 0x0008 (0x00E0 - 0x00D8)
class UInterpTrackSkelControlScale : public UInterpTrackFloatBase
{
public:
	struct FName                                       SkelControlName;                                  		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1286 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackSkelControlStrength ( Property size: 1 iter: 1) 
// Class name index: 6071 
// 0x0008 (0x00E0 - 0x00D8)
class UInterpTrackSkelControlStrength : public UInterpTrackFloatBase
{
public:
	struct FName                                       SkelControlName;                                  		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1288 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackSlomo ( Property size: 0 iter: 0) 
// Class name index: 6073 
// 0x0000 (0x00D8 - 0x00D8)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1290 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackHeadTracking ( Property size: 10 iter: 12) 
// Class name index: 6075 
// 0x0054 (0x0114 - 0x00C0)
class UInterpTrackHeadTracking : public UInterpTrack
{
public:
	TArray< struct FHeadTrackingKey >                  HeadTrackingTrack;                                		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             TrackControllerName;                              		// 0x00D0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LookAtActorRadius;                                		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisableBeyondLimit : 1;                          		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLookAtPawns : 1;                                 		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              MaxLookAtTime;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinLookAtTime;                                    		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInterestTime;                                  		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            ActorClassesToLookAt;                             		// 0x00F4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             TargetBoneNames;                                  		// 0x0104 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1292 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackLinearColorBase ( Property size: 2 iter: 2) 
// Class name index: 6077 
// 0x0018 (0x00D8 - 0x00C0)
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                                 		// 0x00C0 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CurveTension;                                     		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1294 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackLinearColorProp ( Property size: 1 iter: 1) 
// Class name index: 6079 
// 0x0008 (0x00E0 - 0x00D8)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x00D8 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1296 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackMove ( Property size: 15 iter: 19) 
// Class name index: 6081 
// 0x004E (0x010E - 0x00C0)
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                         		// 0x00C0 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveVector                          EulerTrack;                                       		// 0x00D4 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpLookupTrack                          LookupTrack;                                      		// 0x00E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       LookAtGroupName;                                  		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinCurveTension;                                  		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngCurveTension;                                  		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseQuatInterpolation : 1;                        		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShowArrowAtKeys : 1;                             		// 0x0108 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableMovement : 1;                             		// 0x0108 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bShowTranslationOnCurveEd : 1;                    		// 0x0108 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bShowRotationOnCurveEd : 1;                       		// 0x0108 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bHide3DTrack : 1;                                 		// 0x0108 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bUseRawActorTMforRelativeToInitial : 1;           		// 0x0108 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned char                                      MoveFrame;                                        		// 0x010C (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      RotMode;                                          		// 0x010D (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1298 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackNotify ( Property size: 5 iter: 6) 
// Class name index: 6083 
// 0x0030 (0x00F0 - 0x00C0)
class UInterpTrackNotify : public UInterpTrack
{
public:
	class UAnimNodeSequence*                           Node;                                             		// 0x00C0 (0x0008) [0x0000000000000000]              
	struct FName                                       ParentNodeName;                                   		// 0x00C8 (0x0008) [0x0000000000000000]              
	class UAnimSequence*                               OuterSequence;                                    		// 0x00D0 (0x0008) [0x0000000000000000]              
	class UAnimSet*                                    OuterSet;                                         		// 0x00D8 (0x0008) [0x0000000000000000]              
	TArray< struct FNotifyTrackKey >                   NotifyTrack;                                      		// 0x00E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1300 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackParticleReplay ( Property size: 3 iter: 4) 
// Class name index: 6085 
// 0x0018 (0x00D8 - 0x00C0)
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray< struct FParticleReplayTrackKey >           TrackKeys;                                        		// 0x00C0 (0x0010) [0x0000000004400000]              ( CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bIsCapturingReplay : 1;                           		// 0x00D0 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	float                                              FixedTimeStep;                                    		// 0x00D4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1302 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackToggle ( Property size: 6 iter: 8) 
// Class name index: 6087 
// 0x0014 (0x00D4 - 0x00C0)
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray< struct FToggleTrackKey >                   ToggleTrack;                                      		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bActivateSystemEachUpdate : 1;                    		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bActivateWithJustAttachedFlag : 1;                		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenForwards : 1;                      		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenBackwards : 1;                     		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;               		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1304 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackVectorBase ( Property size: 2 iter: 2) 
// Class name index: 6089 
// 0x0018 (0x00D8 - 0x00C0)
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                      		// 0x00C0 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CurveTension;                                     		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1306 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackAudioMaster ( Property size: 0 iter: 0) 
// Class name index: 6091 
// 0x0000 (0x00D8 - 0x00D8)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1308 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackColorProp ( Property size: 1 iter: 1) 
// Class name index: 6093 
// 0x0008 (0x00E0 - 0x00D8)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x00D8 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1310 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackColorScale ( Property size: 0 iter: 0) 
// Class name index: 6095 
// 0x0000 (0x00D8 - 0x00D8)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1312 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackSound ( Property size: 5 iter: 6) 
// Class name index: 6097 
// 0x0014 (0x00EC - 0x00D8)
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray< struct FSoundTrackKey >                    Sounds;                                           		// 0x00D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bPlayOnReverse : 1;                               		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bContinueSoundOnMatineeEnd : 1;                   		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTreatAsDialogue : 1;                             		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1314 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackVectorMaterialParam ( Property size: 5 iter: 5) 
// Class name index: 6099 
// 0x0034 (0x010C - 0x00D8)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	TArray< struct FMaterialReferenceList >            Materials;                                        		// 0x00D8 (0x0010) [0x0000000000480003]              ( CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink )
	TArray< int >                                      MaterialIdx;                                      		// 0x00E8 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	class UMaterialInterface*                          Material;                                         		// 0x00F8 (0x0008) [0x0000000020000002]              ( CPF_Const | CPF_Deprecated )
	struct FName                                       ParamName;                                        		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNeedsMaterialRefsUpdate : 1;                     		// 0x0108 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1316 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackVectorProp ( Property size: 1 iter: 1) 
// Class name index: 6101 
// 0x0008 (0x00E0 - 0x00D8)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x00D8 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1318 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackVisibility ( Property size: 4 iter: 7) 
// Class name index: 6103 
// 0x0014 (0x00D4 - 0x00C0)
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray< struct FVisibilityTrackKey >               VisibilityTrack;                                  		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bFireEventsWhenForwards : 1;                      		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenBackwards : 1;                     		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;               		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1320 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInst ( Property size: 0 iter: 0) 
// Class name index: 6105 
// 0x0000 (0x0060 - 0x0060)
class UInterpTrackInst : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1322 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstAnimControl ( Property size: 3 iter: 3) 
// Class name index: 6107 
// 0x001C (0x007C - 0x0060)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     InitPosition;                                     		// 0x0064 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    InitRotation;                                     		// 0x0070 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1324 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstAudioMaster ( Property size: 0 iter: 0) 
// Class name index: 6109 
// 0x0000 (0x0060 - 0x0060)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1326 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstColorScale ( Property size: 0 iter: 0) 
// Class name index: 6111 
// 0x0000 (0x0060 - 0x0060)
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1328 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstDirector ( Property size: 3 iter: 3) 
// Class name index: 6113 
// 0x0010 (0x0070 - 0x0060)
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                    		// 0x0060 (0x0008) [0x0000000000000000]              
	struct FRenderingPerformanceOverrides              OldRenderingOverrides;                            		// 0x0068 (0x0004) [0x0000000000000000]              
	unsigned long                                      bTransitioningToOtherDirector : 1;                		// 0x006C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1330 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstEvent ( Property size: 1 iter: 1) 
// Class name index: 6115 
// 0x0004 (0x0064 - 0x0060)
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1332 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstFaceFX ( Property size: 2 iter: 2) 
// Class name index: 6117 
// 0x0008 (0x0068 - 0x0060)
class UInterpTrackInstFaceFX : public UInterpTrackInst
{
public:
	unsigned long                                      bFirstUpdate : 1;                                 		// 0x0060 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	float                                              LastUpdatePosition;                               		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1334 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstFade ( Property size: 0 iter: 0) 
// Class name index: 6119 
// 0x0000 (0x0060 - 0x0060)
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1336 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstFloatMaterialParam ( Property size: 2 iter: 3) 
// Class name index: 6121 
// 0x0018 (0x0078 - 0x0060)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	TArray< struct FFloatMaterialParamMICData >        MICInfos;                                         		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                   		// 0x0070 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1338 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstFloatParticleParam ( Property size: 1 iter: 1) 
// Class name index: 6123 
// 0x0004 (0x0064 - 0x0060)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                       		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1340 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstHeadTracking ( Property size: 5 iter: 5) 
// Class name index: 6125 
// 0x0068 (0x00C8 - 0x0060)
class UInterpTrackInstHeadTracking : public UInterpTrackInst
{
public:
	unsigned char                                      Action;                                           		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0064 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.InterpTrackInstHeadTracking.CurrentActorMap
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x00AC (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< class USkelControlLookAt* >                TrackControls;                                    		// 0x00B4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastUpdatePosition;                               		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1342 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstMorphWeight ( Property size: 0 iter: 0) 
// Class name index: 6127 
// 0x0000 (0x0060 - 0x0060)
class UInterpTrackInstMorphWeight : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1344 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstMove ( Property size: 4 iter: 4) 
// Class name index: 6129 
// 0x0070 (0x00D0 - 0x0060)
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                    		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FRotator                                    ResetRotation;                                    		// 0x006C (0x000C) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0078 (0x0008) MISSED OFFSET
	struct FMatrix                                     InitialTM;                                        		// 0x0080 (0x0040) [0x0000000000000000]              
	struct FQuat                                       InitialQuat;                                      		// 0x00C0 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1346 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstNotify ( Property size: 1 iter: 1) 
// Class name index: 6131 
// 0x0004 (0x0064 - 0x0060)
class UInterpTrackInstNotify : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1348 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstParticleReplay ( Property size: 1 iter: 1) 
// Class name index: 6133 
// 0x0004 (0x0064 - 0x0060)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1350 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstProperty ( Property size: 2 iter: 2) 
// Class name index: 6135 
// 0x0010 (0x0070 - 0x0060)
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UFunction*                                   PropertyUpdateCallback;                           		// 0x0060 (0x0008) [0x0000000000000000]              
	class UObject*                                     PropertyOuterObjectInst;                          		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1352 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstBoolProp ( Property size: 3 iter: 3) 
// Class name index: 6137 
// 0x0010 (0x0080 - 0x0070)
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    BoolProp;                                         		// 0x0070 (0x0008) [0x0000000000000000]              
	int                                                BitMask;                                          		// 0x0078 (0x0004) [0x0000000000000000]              
	unsigned long                                      ResetBool : 1;                                    		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1354 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstColorProp ( Property size: 2 iter: 2) 
// Class name index: 6139 
// 0x000C (0x007C - 0x0070)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    ColorProp;                                        		// 0x0070 (0x0008) [0x0000000000000000]              
	struct FColor                                      ResetColor;                                       		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1356 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstFloatProp ( Property size: 3 iter: 3) 
// Class name index: 6141 
// 0x0014 (0x0084 - 0x0070)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    FloatProp;                                        		// 0x0070 (0x0008) [0x0000000000000000]              
	float                                              ResetFloat;                                       		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FPointer                                    DistributionProp;                                 		// 0x007C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1358 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstLinearColorProp ( Property size: 2 iter: 2) 
// Class name index: 6143 
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    ColorProp;                                        		// 0x0070 (0x0008) [0x0000000000000000]              
	struct FLinearColor                                ResetColor;                                       		// 0x0078 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1360 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstVectorProp ( Property size: 2 iter: 2) 
// Class name index: 6145 
// 0x0014 (0x0084 - 0x0070)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    VectorProp;                                       		// 0x0070 (0x0008) [0x0000000000000000]              
	struct FVector                                     ResetVector;                                      		// 0x0078 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1362 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstSkelControlScale ( Property size: 0 iter: 0) 
// Class name index: 6147 
// 0x0000 (0x0060 - 0x0060)
class UInterpTrackInstSkelControlScale : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1364 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstSkelControlStrength ( Property size: 1 iter: 1) 
// Class name index: 6149 
// 0x0004 (0x0064 - 0x0060)
class UInterpTrackInstSkelControlStrength : public UInterpTrackInst
{
public:
	unsigned long                                      bSavedControlledByAnimMetaData : 1;               		// 0x0060 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1366 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstSlomo ( Property size: 1 iter: 1) 
// Class name index: 6151 
// 0x0004 (0x0064 - 0x0060)
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                  		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1368 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstSound ( Property size: 2 iter: 2) 
// Class name index: 6153 
// 0x000C (0x006C - 0x0060)
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0060 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             PlayAudioComp;                                    		// 0x0064 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1370 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstToggle ( Property size: 3 iter: 3) 
// Class name index: 6155 
// 0x000C (0x006C - 0x0060)
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	unsigned char                                      Action;                                           		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastUpdatePosition;                               		// 0x0064 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSavedActiveState : 1;                            		// 0x0068 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1372 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstVectorMaterialParam ( Property size: 2 iter: 3) 
// Class name index: 6157 
// 0x0018 (0x0078 - 0x0060)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	TArray< struct FVectorMaterialParamMICData >       MICInfos;                                         		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                   		// 0x0070 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1374 ];

		return pClassPointer;
	};

};



// Class Engine.InterpTrackInstVisibility ( Property size: 2 iter: 2) 
// Class name index: 6159 
// 0x0008 (0x0068 - 0x0060)
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	unsigned char                                      Action;                                           		// 0x0060 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastUpdatePosition;                               		// 0x0064 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1376 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpression ( Property size: 18 iter: 20) 
// Class name index: 6161 
// 0x0058 (0x00B8 - 0x0060)
class UMaterialExpression : public UObject
{
public:
	int                                                EditorX;                                          		// 0x0060 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	int                                                EditorY;                                          		// 0x0064 (0x0004) [0x0000000020000000]              ( CPF_Deprecated )
	int                                                MaterialExpressionEditorX;                        		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                MaterialExpressionEditorY;                        		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned long                                      bRealtimePreview : 1;                             		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNeedToUpdatePreview : 1;                         		// 0x0070 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsParameterExpression : 1;                       		// 0x0070 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bShowOutputNameOnPin : 1;                         		// 0x0070 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bHidePreviewWindow : 1;                           		// 0x0070 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bShowInputs : 1;                                  		// 0x0070 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bShowOutputs : 1;                                 		// 0x0070 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bUsedByStaticParameterSet : 1;                    		// 0x0070 (0x0004) [0x0000000000000000] [0x00000080] 
	class UMaterial*                                   Material;                                         		// 0x0074 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UMaterialFunction*                           Function;                                         		// 0x007C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     Desc;                                             		// 0x0084 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FColor                                      BorderColor;                                      		// 0x0094 (0x0004) [0x0000000000000000]              
	TArray< struct FName >                             MenuCategories;                                   		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FExpressionOutput >                 Outputs;                                          		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1378 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionAbs ( Property size: 1 iter: 1) 
// Class name index: 6163 
// 0x0034 (0x00EC - 0x00B8)
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1380 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionActorWorldPosition ( Property size: 0 iter: 0) 
// Class name index: 6165 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionActorWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1382 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionAdd ( Property size: 2 iter: 2) 
// Class name index: 6167 
// 0x0068 (0x0120 - 0x00B8)
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            B;                                                		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1384 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionAppendVector ( Property size: 2 iter: 2) 
// Class name index: 6169 
// 0x0068 (0x0120 - 0x00B8)
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            B;                                                		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1386 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionBumpOffset ( Property size: 5 iter: 5) 
// Class name index: 6171 
// 0x00A4 (0x015C - 0x00B8)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Height;                                           		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            HeightRatioInput;                                 		// 0x0120 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              HeightRatio;                                      		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReferencePlane;                                   		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1388 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionCameraVector ( Property size: 0 iter: 0) 
// Class name index: 6173 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionCameraVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1390 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionCameraWorldPosition ( Property size: 0 iter: 0) 
// Class name index: 6175 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionCameraWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1392 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionCeil ( Property size: 1 iter: 1) 
// Class name index: 6177 
// 0x0034 (0x00EC - 0x00B8)
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1394 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionClamp ( Property size: 3 iter: 3) 
// Class name index: 6179 
// 0x009C (0x0154 - 0x00B8)
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Min;                                              		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Max;                                              		// 0x0120 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1396 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionComment ( Property size: 5 iter: 5) 
// Class name index: 6181 
// 0x0020 (0x00D8 - 0x00B8)
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                PosX;                                             		// 0x00B8 (0x0004) [0x0000000000000000]              
	int                                                PosY;                                             		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                SizeX;                                            		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                SizeY;                                            		// 0x00C4 (0x0004) [0x0000000000000000]              
	struct FString                                     Text;                                             		// 0x00C8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1398 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionComponentMask ( Property size: 5 iter: 5) 
// Class name index: 6183 
// 0x0038 (0x00F0 - 0x00B8)
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      R : 1;                                            		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      G : 1;                                            		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      B : 1;                                            		// 0x00EC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      A : 1;                                            		// 0x00EC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1400 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionConstant ( Property size: 1 iter: 1) 
// Class name index: 6185 
// 0x0004 (0x00BC - 0x00B8)
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1402 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionConstant2Vector ( Property size: 2 iter: 2) 
// Class name index: 6187 
// 0x0008 (0x00C0 - 0x00B8)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              G;                                                		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1404 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionConstant3Vector ( Property size: 3 iter: 3) 
// Class name index: 6189 
// 0x000C (0x00C4 - 0x00B8)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              G;                                                		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              B;                                                		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1406 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionConstant4Vector ( Property size: 4 iter: 4) 
// Class name index: 6191 
// 0x0010 (0x00C8 - 0x00B8)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              G;                                                		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              B;                                                		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              A;                                                		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1408 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionConstantBiasScale ( Property size: 3 iter: 3) 
// Class name index: 6193 
// 0x003C (0x00F4 - 0x00B8)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              Bias;                                             		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Scale;                                            		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1410 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionConstantClamp ( Property size: 3 iter: 3) 
// Class name index: 6195 
// 0x003C (0x00F4 - 0x00B8)
class UMaterialExpressionConstantClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              Min;                                              		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Max;                                              		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1412 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionCosine ( Property size: 2 iter: 2) 
// Class name index: 6197 
// 0x0038 (0x00F0 - 0x00B8)
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              Period;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1414 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionCrossProduct ( Property size: 2 iter: 2) 
// Class name index: 6199 
// 0x0068 (0x0120 - 0x00B8)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            B;                                                		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1416 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionCustom ( Property size: 4 iter: 6) 
// Class name index: 6201 
// 0x0034 (0x00EC - 0x00B8)
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	struct FString                                     Code;                                             		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      OutputType;                                       		// 0x00C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Description;                                      		// 0x00CC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FCustomInput >                      Inputs;                                           		// 0x00DC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1418 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionCustomTexture ( Property size: 1 iter: 1) 
// Class name index: 6203 
// 0x0008 (0x00C0 - 0x00B8)
class UMaterialExpressionCustomTexture : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                          		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1420 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionDepthBiasedAlpha ( Property size: 4 iter: 4) 
// Class name index: 6205 
// 0x0070 (0x0128 - 0x00B8)
class UMaterialExpressionDepthBiasedAlpha : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BiasScale;                                        		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Alpha;                                            		// 0x00C0 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Bias;                                             		// 0x00F4 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1422 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionDepthBiasedBlend ( Property size: 5 iter: 5) 
// Class name index: 6207 
// 0x00A4 (0x015C - 0x00B8)
class UMaterialExpressionDepthBiasedBlend : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BiasScale;                                        		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            RGB;                                              		// 0x00C0 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Alpha;                                            		// 0x00F4 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Bias;                                             		// 0x0128 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1424 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionDepthOfFieldFunction ( Property size: 2 iter: 3) 
// Class name index: 6209 
// 0x0038 (0x00F0 - 0x00B8)
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	unsigned char                                      FunctionValue;                                    		// 0x00B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Depth;                                            		// 0x00BC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1426 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionDeriveNormalZ ( Property size: 1 iter: 1) 
// Class name index: 6211 
// 0x0034 (0x00EC - 0x00B8)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                             		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1428 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionDesaturation ( Property size: 3 iter: 3) 
// Class name index: 6213 
// 0x0078 (0x0130 - 0x00B8)
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Percent;                                          		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FLinearColor                                LuminanceFactors;                                 		// 0x0120 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1430 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionDestColor ( Property size: 0 iter: 0) 
// Class name index: 6215 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionDestColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1432 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionDestDepth ( Property size: 1 iter: 1) 
// Class name index: 6217 
// 0x0004 (0x00BC - 0x00B8)
class UMaterialExpressionDestDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1434 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionDistance ( Property size: 2 iter: 2) 
// Class name index: 6219 
// 0x0068 (0x0120 - 0x00B8)
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            B;                                                		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1436 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionDivide ( Property size: 2 iter: 2) 
// Class name index: 6221 
// 0x0068 (0x0120 - 0x00B8)
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            B;                                                		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1438 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionDotProduct ( Property size: 2 iter: 2) 
// Class name index: 6223 
// 0x0068 (0x0120 - 0x00B8)
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            B;                                                		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1440 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionDynamicParameter ( Property size: 1 iter: 1) 
// Class name index: 6225 
// 0x0010 (0x00C8 - 0x00B8)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray< struct FString >                           ParamNames;                                       		// 0x00B8 (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1442 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionMeshEmitterDynamicParameter ( Property size: 0 iter: 0) 
// Class name index: 6227 
// 0x0000 (0x00C8 - 0x00C8)
class UMaterialExpressionMeshEmitterDynamicParameter : public UMaterialExpressionDynamicParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1444 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionFloor ( Property size: 1 iter: 1) 
// Class name index: 6229 
// 0x0034 (0x00EC - 0x00B8)
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1446 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionFluidNormal ( Property size: 1 iter: 1) 
// Class name index: 6231 
// 0x0034 (0x00EC - 0x00B8)
class UMaterialExpressionFluidNormal : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1448 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionFmod ( Property size: 2 iter: 2) 
// Class name index: 6233 
// 0x0068 (0x0120 - 0x00B8)
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            B;                                                		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1450 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionFoliageImpulseDirection ( Property size: 0 iter: 0) 
// Class name index: 6235 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionFoliageImpulseDirection : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1452 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionFoliageNormalizedRotationAxisAndAngle ( Property size: 0 iter: 0) 
// Class name index: 6237 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionFoliageNormalizedRotationAxisAndAngle : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1454 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionFontSample ( Property size: 2 iter: 2) 
// Class name index: 6239 
// 0x000C (0x00C4 - 0x00B8)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                             		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                FontTexturePage;                                  		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1456 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionFontSampleParameter ( Property size: 3 iter: 3) 
// Class name index: 6241 
// 0x0020 (0x00E4 - 0x00C4)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                    		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       ExpressionGUID;                                   		// 0x00CC (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       Group;                                            		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1458 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionFrac ( Property size: 1 iter: 1) 
// Class name index: 6243 
// 0x0034 (0x00EC - 0x00B8)
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1460 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionFresnel ( Property size: 2 iter: 2) 
// Class name index: 6245 
// 0x0038 (0x00F0 - 0x00B8)
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	float                                              Exponent;                                         		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Normal;                                           		// 0x00BC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1462 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionFunctionInput ( Property size: 9 iter: 10) 
// Class name index: 6247 
// 0x0080 (0x0138 - 0x00B8)
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	struct FExpressionInput                            Preview;                                          		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     InputName;                                        		// 0x00EC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x00FC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FGuid                                       Id;                                               		// 0x010C (0x0010) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      InputType;                                        		// 0x011C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector4                                    PreviewValue;                                     		// 0x0120 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUsePreviewValueAsDefault : 1;                    		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCompilingFunctionPreview : 1;                    		// 0x0130 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	int                                                SortPriority;                                     		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1464 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionFunctionOutput ( Property size: 6 iter: 6) 
// Class name index: 6249 
// 0x006C (0x0124 - 0x00B8)
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	struct FString                                     OutputName;                                       		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x00C8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                SortPriority;                                     		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            A;                                                		// 0x00DC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bLastPreviewed : 1;                               		// 0x0110 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FGuid                                       Id;                                               		// 0x0114 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1466 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionIf ( Property size: 5 iter: 5) 
// Class name index: 6251 
// 0x0104 (0x01BC - 0x00B8)
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            B;                                                		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            AGreaterThanB;                                    		// 0x0120 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            AEqualsB;                                         		// 0x0154 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            ALessThanB;                                       		// 0x0188 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1468 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionLandscapeLayerBlend ( Property size: 2 iter: 4) 
// Class name index: 6253 
// 0x0020 (0x00D8 - 0x00B8)
class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
{
public:
	TArray< struct FLayerBlendInput >                  Layers;                                           		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FGuid                                       ExpressionGUID;                                   		// 0x00C8 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1470 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionLensFlareIntensity ( Property size: 0 iter: 0) 
// Class name index: 6255 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionLensFlareIntensity : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1472 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionLensFlareOcclusion ( Property size: 0 iter: 0) 
// Class name index: 6257 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionLensFlareOcclusion : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1474 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionLensFlareRadialDistance ( Property size: 0 iter: 0) 
// Class name index: 6259 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionLensFlareRadialDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1476 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionLensFlareRayDistance ( Property size: 0 iter: 0) 
// Class name index: 6261 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionLensFlareRayDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1478 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionLensFlareSourceDistance ( Property size: 0 iter: 0) 
// Class name index: 6263 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionLensFlareSourceDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1480 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionLightmapUVs ( Property size: 0 iter: 0) 
// Class name index: 6265 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1482 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionLightmassReplace ( Property size: 2 iter: 2) 
// Class name index: 6267 
// 0x0068 (0x0120 - 0x00B8)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                         		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Lightmass;                                        		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1484 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionLightVector ( Property size: 0 iter: 0) 
// Class name index: 6269 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1486 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionLinearInterpolate ( Property size: 3 iter: 3) 
// Class name index: 6271 
// 0x009C (0x0154 - 0x00B8)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            B;                                                		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Alpha;                                            		// 0x0120 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1488 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionMaterialFunctionCall ( Property size: 3 iter: 5) 
// Class name index: 6273 
// 0x0028 (0x00E0 - 0x00B8)
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	class UMaterialFunction*                           MaterialFunction;                                 		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FFunctionExpressionInput >          FunctionInputs;                                   		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FFunctionExpressionOutput >         FunctionOutputs;                                  		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1490 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionMeshEmitterVertexColor ( Property size: 0 iter: 0) 
// Class name index: 6275 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionMeshEmitterVertexColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1492 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionMultiply ( Property size: 2 iter: 2) 
// Class name index: 6277 
// 0x0068 (0x0120 - 0x00B8)
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            B;                                                		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1494 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionNormalize ( Property size: 1 iter: 1) 
// Class name index: 6279 
// 0x0034 (0x00EC - 0x00B8)
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                      		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1496 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionObjectOrientation ( Property size: 0 iter: 0) 
// Class name index: 6281 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1498 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionObjectRadius ( Property size: 0 iter: 0) 
// Class name index: 6283 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1500 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionObjectWorldPosition ( Property size: 0 iter: 0) 
// Class name index: 6285 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionObjectWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1502 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionOcclusionPercentage ( Property size: 0 iter: 0) 
// Class name index: 6287 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionOcclusionPercentage : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1504 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionOneMinus ( Property size: 1 iter: 1) 
// Class name index: 6289 
// 0x0034 (0x00EC - 0x00B8)
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1506 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionPanner ( Property size: 4 iter: 4) 
// Class name index: 6291 
// 0x0070 (0x0128 - 0x00B8)
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Time;                                             		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              SpeedX;                                           		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedY;                                           		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1508 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionParameter ( Property size: 3 iter: 3) 
// Class name index: 6293 
// 0x0020 (0x00D8 - 0x00B8)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                    		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       ExpressionGUID;                                   		// 0x00C0 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       Group;                                            		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1510 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionScalarParameter ( Property size: 1 iter: 1) 
// Class name index: 6295 
// 0x0004 (0x00DC - 0x00D8)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                     		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1512 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionStaticBoolParameter ( Property size: 3 iter: 3) 
// Class name index: 6297 
// 0x000C (0x00E4 - 0x00D8)
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	unsigned long                                      DefaultValue : 1;                                 		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ExtendedCaptionDisplay : 1;                       		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FPointer                                    InstanceOverride;                                 		// 0x00DC (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1514 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionStaticSwitchParameter ( Property size: 2 iter: 2) 
// Class name index: 6299 
// 0x0068 (0x014C - 0x00E4)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:
	struct FExpressionInput                            A;                                                		// 0x00E4 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            B;                                                		// 0x0118 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1516 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionStaticComponentMaskParameter ( Property size: 6 iter: 6) 
// Class name index: 6301 
// 0x0040 (0x0118 - 0x00D8)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00D8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      DefaultR : 1;                                     		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      DefaultG : 1;                                     		// 0x010C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      DefaultB : 1;                                     		// 0x010C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      DefaultA : 1;                                     		// 0x010C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FPointer                                    InstanceOverride;                                 		// 0x0110 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1518 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionVectorParameter ( Property size: 1 iter: 1) 
// Class name index: 6303 
// 0x0010 (0x00E8 - 0x00D8)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                     		// 0x00D8 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1520 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionParticleMacroUV ( Property size: 1 iter: 1) 
// Class name index: 6305 
// 0x0004 (0x00BC - 0x00B8)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:
	unsigned long                                      bUseViewSpace : 1;                                		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1522 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionPerInstanceRandom ( Property size: 0 iter: 0) 
// Class name index: 6307 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1524 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionPinkConstant ( Property size: 0 iter: 0) 
// Class name index: 6309 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionPinkConstant : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1526 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionPixelDepth ( Property size: 1 iter: 1) 
// Class name index: 6311 
// 0x0004 (0x00BC - 0x00B8)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1528 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionPower ( Property size: 2 iter: 2) 
// Class name index: 6313 
// 0x0068 (0x0120 - 0x00B8)
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                             		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Exponent;                                         		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1530 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionQualitySwitch ( Property size: 2 iter: 2) 
// Class name index: 6315 
// 0x0068 (0x0120 - 0x00B8)
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            High;                                             		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Low;                                              		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1532 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionReflectionVector ( Property size: 0 iter: 0) 
// Class name index: 6317 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionReflectionVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1534 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionRotateAboutAxis ( Property size: 3 iter: 3) 
// Class name index: 6319 
// 0x009C (0x0154 - 0x00B8)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxisAndAngle;                   		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            PositionOnAxis;                                   		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Position;                                         		// 0x0120 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1536 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionRotator ( Property size: 5 iter: 5) 
// Class name index: 6321 
// 0x0074 (0x012C - 0x00B8)
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Time;                                             		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CenterX;                                          		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CenterY;                                          		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Speed;                                            		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1538 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionSceneDepth ( Property size: 2 iter: 2) 
// Class name index: 6323 
// 0x0038 (0x00F0 - 0x00B8)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bNormalize : 1;                                   		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1540 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionSceneTexture ( Property size: 3 iter: 4) 
// Class name index: 6325 
// 0x003C (0x00F4 - 0x00B8)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      SceneTextureType;                                 		// 0x00EC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ScreenAlign : 1;                                  		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1542 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionScreenPosition ( Property size: 1 iter: 1) 
// Class name index: 6327 
// 0x0004 (0x00BC - 0x00B8)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:
	unsigned long                                      ScreenAlign : 1;                                  		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1544 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionScreenSize ( Property size: 0 iter: 0) 
// Class name index: 6329 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionScreenSize : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1546 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionSine ( Property size: 2 iter: 2) 
// Class name index: 6331 
// 0x0038 (0x00F0 - 0x00B8)
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              Period;                                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1548 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionSphereMask ( Property size: 6 iter: 6) 
// Class name index: 6333 
// 0x00D8 (0x0190 - 0x00B8)
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            B;                                                		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Radius;                                           		// 0x0120 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Hardness;                                         		// 0x0154 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              AttenuationRadius;                                		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HardnessPercent;                                  		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1550 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionSquareRoot ( Property size: 1 iter: 1) 
// Class name index: 6335 
// 0x0034 (0x00EC - 0x00B8)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1552 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionStaticBool ( Property size: 1 iter: 1) 
// Class name index: 6337 
// 0x0004 (0x00BC - 0x00B8)
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	unsigned long                                      Value : 1;                                        		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1554 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionStaticSwitch ( Property size: 5 iter: 5) 
// Class name index: 6339 
// 0x00A0 (0x0158 - 0x00B8)
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	unsigned long                                      DefaultValue : 1;                                 		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ExtendedCaptionDisplay : 1;                       		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FExpressionInput                            A;                                                		// 0x00BC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            B;                                                		// 0x00F0 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Value;                                            		// 0x0124 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1556 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionSubtract ( Property size: 2 iter: 2) 
// Class name index: 6341 
// 0x0068 (0x0120 - 0x00B8)
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            B;                                                		// 0x00EC (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1558 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTerrainLayerCoords ( Property size: 5 iter: 6) 
// Class name index: 6343 
// 0x0014 (0x00CC - 0x00B8)
class UMaterialExpressionTerrainLayerCoords : public UMaterialExpression
{
public:
	unsigned char                                      MappingType;                                      		// 0x00B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingScale;                                     		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingRotation;                                  		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingPanU;                                      		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingPanV;                                      		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1560 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTerrainLayerSwitch ( Property size: 6 iter: 6) 
// Class name index: 6345 
// 0x008C (0x0144 - 0x00B8)
class UMaterialExpressionTerrainLayerSwitch : public UMaterialExpression
{
public:
	struct FPointer                                    InstanceOverride;                                 		// 0x00B8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FExpressionInput                            LayerUsed;                                        		// 0x00C0 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            LayerNotUsed;                                     		// 0x00F4 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       ParameterName;                                    		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      PreviewUsed : 1;                                  		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FGuid                                       ExpressionGUID;                                   		// 0x0134 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1562 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTerrainLayerWeight ( Property size: 6 iter: 6) 
// Class name index: 6347 
// 0x008C (0x0144 - 0x00B8)
class UMaterialExpressionTerrainLayerWeight : public UMaterialExpression
{
public:
	struct FPointer                                    InstanceOverride;                                 		// 0x00B8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FExpressionInput                            Base;                                             		// 0x00C0 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            Layer;                                            		// 0x00F4 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       ParameterName;                                    		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              PreviewWeight;                                    		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       ExpressionGUID;                                   		// 0x0134 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1564 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTexelSize ( Property size: 0 iter: 0) 
// Class name index: 6349 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionTexelSize : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1566 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTextureCoordinate ( Property size: 5 iter: 5) 
// Class name index: 6351 
// 0x0010 (0x00C8 - 0x00B8)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                  		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UTiling;                                          		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VTiling;                                          		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UnMirrorU : 1;                                    		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UnMirrorV : 1;                                    		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1568 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTextureObject ( Property size: 1 iter: 1) 
// Class name index: 6353 
// 0x0008 (0x00C0 - 0x00B8)
class UMaterialExpressionTextureObject : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                          		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1570 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTextureSample ( Property size: 3 iter: 3) 
// Class name index: 6355 
// 0x0070 (0x0128 - 0x00B8)
class UMaterialExpressionTextureSample : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                          		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Coordinates;                                      		// 0x00C0 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FExpressionInput                            TextureObject;                                    		// 0x00F4 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1572 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionDepthBiasBlend ( Property size: 3 iter: 3) 
// Class name index: 6357 
// 0x003C (0x0164 - 0x0128)
class UMaterialExpressionDepthBiasBlend : public UMaterialExpressionTextureSample
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x0128 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              BiasScale;                                        		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FExpressionInput                            Bias;                                             		// 0x0130 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1574 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionFlipBookSample ( Property size: 0 iter: 0) 
// Class name index: 6359 
// 0x0000 (0x0128 - 0x0128)
class UMaterialExpressionFlipBookSample : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1576 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionMeshSubUV ( Property size: 0 iter: 0) 
// Class name index: 6361 
// 0x0000 (0x0128 - 0x0128)
class UMaterialExpressionMeshSubUV : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1578 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionMeshSubUVBlend ( Property size: 0 iter: 0) 
// Class name index: 6363 
// 0x0000 (0x0128 - 0x0128)
class UMaterialExpressionMeshSubUVBlend : public UMaterialExpressionMeshSubUV
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1580 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionParticleSubUV ( Property size: 0 iter: 0) 
// Class name index: 6365 
// 0x0000 (0x0128 - 0x0128)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1582 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTextureSampleParameter ( Property size: 3 iter: 3) 
// Class name index: 6367 
// 0x0020 (0x0148 - 0x0128)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                    		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       ExpressionGUID;                                   		// 0x0130 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       Group;                                            		// 0x0140 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1584 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTextureObjectParameter ( Property size: 0 iter: 0) 
// Class name index: 6369 
// 0x0000 (0x0148 - 0x0148)
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1586 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTextureSampleParameter2D ( Property size: 0 iter: 0) 
// Class name index: 6371 
// 0x0000 (0x0148 - 0x0148)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1588 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionAntialiasedTextureMask ( Property size: 2 iter: 3) 
// Class name index: 6373 
// 0x0005 (0x014D - 0x0148)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              Threshold;                                        		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Channel;                                          		// 0x014C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1590 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTextureSampleParameterFlipbook ( Property size: 0 iter: 0) 
// Class name index: 6375 
// 0x0000 (0x0148 - 0x0148)
class UMaterialExpressionTextureSampleParameterFlipbook : public UMaterialExpressionTextureSampleParameter2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1592 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTextureSampleParameterMeshSubUV ( Property size: 0 iter: 0) 
// Class name index: 6377 
// 0x0000 (0x0148 - 0x0148)
class UMaterialExpressionTextureSampleParameterMeshSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1594 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTextureSampleParameterMeshSubUVBlend ( Property size: 0 iter: 0) 
// Class name index: 6379 
// 0x0000 (0x0148 - 0x0148)
class UMaterialExpressionTextureSampleParameterMeshSubUVBlend : public UMaterialExpressionTextureSampleParameterMeshSubUV
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1596 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTextureSampleParameterSubUV ( Property size: 0 iter: 0) 
// Class name index: 6381 
// 0x0000 (0x0148 - 0x0148)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1598 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTextureSampleParameterCube ( Property size: 0 iter: 0) 
// Class name index: 6383 
// 0x0000 (0x0148 - 0x0148)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1600 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTextureSampleParameterMovie ( Property size: 0 iter: 0) 
// Class name index: 6385 
// 0x0000 (0x0148 - 0x0148)
class UMaterialExpressionTextureSampleParameterMovie : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1602 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTextureSampleParameterNormal ( Property size: 1 iter: 1) 
// Class name index: 6387 
// 0x0008 (0x0150 - 0x0148)
class UMaterialExpressionTextureSampleParameterNormal : public UMaterialExpressionTextureSampleParameter
{
public:
	struct FPointer                                    InstanceOverride;                                 		// 0x0148 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1604 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTime ( Property size: 1 iter: 1) 
// Class name index: 6389 
// 0x0004 (0x00BC - 0x00B8)
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned long                                      bIgnorePause : 1;                                 		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1606 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTransform ( Property size: 3 iter: 5) 
// Class name index: 6391 
// 0x0036 (0x00EE - 0x00B8)
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      TransformSourceType;                              		// 0x00EC (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      TransformType;                                    		// 0x00ED (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1608 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTransformPosition ( Property size: 3 iter: 5) 
// Class name index: 6393 
// 0x0036 (0x00EE - 0x00B8)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x00B8 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      TransformSourceType;                              		// 0x00EC (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      TransformType;                                    		// 0x00ED (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1610 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionTwoSidedSign ( Property size: 0 iter: 0) 
// Class name index: 6395 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1612 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionVertexCameraVector ( Property size: 0 iter: 0) 
// Class name index: 6397 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionVertexCameraVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1614 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionVertexColor ( Property size: 0 iter: 0) 
// Class name index: 6399 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1616 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionWindDirectionAndSpeed ( Property size: 0 iter: 0) 
// Class name index: 6401 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionWindDirectionAndSpeed : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1618 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionWorldNormal ( Property size: 0 iter: 0) 
// Class name index: 6403 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionWorldNormal : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1620 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialExpressionWorldPosition ( Property size: 0 iter: 0) 
// Class name index: 6405 
// 0x0000 (0x00B8 - 0x00B8)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1622 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialFunction ( Property size: 8 iter: 8) 
// Class name index: 6407 
// 0x005C (0x00BC - 0x0060)
class UMaterialFunction : public UObject
{
public:
	struct FGuid                                       StateId;                                          		// 0x0060 (0x0010) [0x0000000000200000]              
	class UMaterialFunction*                           ParentFunction;                                   		// 0x0070 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FString                                     Description;                                      		// 0x0078 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bExposeToLibrary : 1;                             		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bReentrantFlag : 1;                               		// 0x0088 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	TArray< struct FString >                           LibraryCategories;                                		// 0x008C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialExpression* >               FunctionExpressions;                              		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UMaterialExpressionComment* >        FunctionEditorComments;                           		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1624 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialInstance ( Property size: 16 iter: 25) 
// Class name index: 6409 
// 0x00A0 (0x0304 - 0x0264)
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x0264 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Parent;                                           		// 0x026C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  PhysMaterialMask;                                 		// 0x0274 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                PhysMaterialMaskUVChannel;                        		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           BlackPhysicalMaterial;                            		// 0x0280 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           WhitePhysicalMaterial;                            		// 0x0288 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHasStaticPermutationResource : 1;                		// 0x0290 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bStaticPermutationDirty : 1;                      		// 0x0290 (0x0004) [0x0000000000003000] [0x00000002] ( CPF_Native | CPF_Transient )
	unsigned long                                      ReentrantFlag : 1;                                		// 0x0290 (0x0004) [0x0000000000001002] [0x00000004] ( CPF_Const | CPF_Native )
	unsigned long                                      bNeedsMaterialFlattening : 1;                     		// 0x0290 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	struct FPointer                                    StaticParameters[ 0x2 ];                          		// 0x0294 (0x0010) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    StaticPermutationResources[ 0x2 ];                		// 0x02A4 (0x0010) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    Resources[ 0x4 ];                                 		// 0x02B4 (0x0020) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	TArray< class UTexture* >                          ReferencedTextures;                               		// 0x02D4 (0x0010) [0x0000000020400002]              ( CPF_Const | CPF_NeedCtorLink | CPF_Deprecated )
	TArray< struct FGuid >                             ReferencedTextureGuids;                           		// 0x02E4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FGuid                                       ParentLightingGuid;                               		// 0x02F4 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1626 ];

		return pClassPointer;
	};

	bool IsInMapOrTransientPackage ( );
	void ClearParameterValues ( unsigned long bOnlyClearTextures );
	void SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage );
	bool GetTextureParameterValue ( struct FName ParameterName, class UTexture** Value );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* Value );
	void SetParent ( class UMaterialInterface* NewParent );
};



// Class Engine.MaterialInstanceConstant ( Property size: 4 iter: 17) 
// Class name index: 6411 
// 0x0040 (0x0344 - 0x0304)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	TArray< struct FFontParameterValue >               FontParameterValues;                              		// 0x0304 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FScalarParameterValue >             ScalarParameterValues;                            		// 0x0314 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FTextureParameterValue >            TextureParameterValues;                           		// 0x0324 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FVectorParameterValue >             VectorParameterValues;                            		// 0x0334 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1628 ];

		return pClassPointer;
	};

	void ClearParameterValues ( unsigned long bOnlyClearTextures );
	bool GetMobileVectorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue );
	bool GetMobileTextureParameterValue ( struct FName ParameterName, class UTexture** OutValue );
	bool GetMobileScalarParameterValue ( struct FName ParameterName, float* OutValue );
	void SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage );
	void SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* Value );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetParent ( class UMaterialInterface* NewParent );
};



// Class Engine.LandscapeMaterialInstanceConstant ( Property size: 3 iter: 3) 
// Class name index: 6413 
// 0x000C (0x0350 - 0x0344)
class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
{
public:
	unsigned long                                      bIsLayerThumbnail : 1;                            		// 0x0344 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                DataWeightmapIndex;                               		// 0x0348 (0x0004) [0x0000000000000000]              
	int                                                DataWeightmapSize;                                		// 0x034C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1630 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialInstanceTimeVarying ( Property size: 7 iter: 28) 
// Class name index: 6415 
// 0x0058 (0x035C - 0x0304)
class UMaterialInstanceTimeVarying : public UMaterialInstance
{
public:
	unsigned long                                      bAutoActivateAll : 1;                             		// 0x0304 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              Duration;                                         		// 0x0308 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FFontParameterValueOverTime >       FontParameterValues;                              		// 0x030C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FScalarParameterValueOverTime >     ScalarParameterValues;                            		// 0x031C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FTextureParameterValueOverTime >    TextureParameterValues;                           		// 0x032C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVectorParameterValueOverTime >     VectorParameterValues;                            		// 0x033C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FLinearColorParameterValueOverTime > LinearColorParameterValues;                       		// 0x034C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1632 ];

		return pClassPointer;
	};

	bool CheckForVectorParameterConflicts ( struct FName ParameterName );
	float GetMaxDurationFromAllParameters ( );
	void ClearParameterValues ( unsigned long bOnlyClearTextures );
	void SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage );
	void SetVectorStartTime ( struct FName ParameterName, float Value );
	void SetLinearColorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveLinearColor* Value );
	void SetLinearColorParameterValue ( struct FName ParameterName, struct FLinearColor* Value );
	void SetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector* Value );
	void SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* Value );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetDuration ( float Value );
	void SetScalarStartTime ( struct FName ParameterName, float Value );
	void SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetParent ( class UMaterialInterface* NewParent );
};



// Class Engine.EmitterCameraLensEffectBase ( Property size: 7 iter: 13) 
// Class name index: 6417 
// 0x0034 (0x0288 - 0x0254)
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	class UParticleSystem*                             PS_CameraEffect;                                  		// 0x0254 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                 		// 0x025C (0x0008) [0x0000000000000000]              
	float                                              BaseFOV;                                          		// 0x0264 (0x0004) [0x0000000000000000]              
	float                                              DistFromCamera;                                   		// 0x0268 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowMultipleInstances : 1;                      		// 0x026C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< class UClass* >                            EmittersToTreatAsSame;                            		// 0x0270 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ACamera*                                     BaseCamera;                                       		// 0x0280 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1634 ];

		return pClassPointer;
	};

	void UpdateLocation ( float CamFOVDeg, struct FVector* CamLoc, struct FRotator* CamRot );
	void ActivateLensEffect ( );
	void PostBeginPlay ( );
	void NotifyRetriggered ( );
	void RegisterCamera ( class ACamera* C );
	void Destroyed ( );
};



// Class Engine.ParticleEventManager ( Property size: 0 iter: 1) 
// Class name index: 6419 
// 0x0000 (0x0240 - 0x0240)
class AParticleEventManager : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1636 ];

		return pClassPointer;
	};

	void eventHandleParticleModuleEventSendToGame ( class UParticleModuleEventSendToGame* InEvent, struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName );
};



// Class Engine.ParticleSystemComponent ( Property size: 59 iter: 121) 
// Class name index: 6421 
// 0x015C (0x0394 - 0x0238)
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	class UParticleSystem*                             Template;                                         		// 0x0238 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      LightEnvironmentClass;                            		// 0x0240 (0x0008) [0x0000000000000000]              
	class AActor*                                      LightEnvironmentSharedInstigator;                 		// 0x0248 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxLightEnvironmentPooledReuses;                  		// 0x0250 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FPointer >                          EmitterInstances;                                 		// 0x0254 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UStaticMeshComponent* >              SMComponents;                                     		// 0x0264 (0x0010) [0x000000000468200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UMaterialInterface* >                SMMaterialInterfaces;                             		// 0x0274 (0x0010) [0x0000000000602002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class USkeletalMeshComponent* >            SkelMeshComponents;                               		// 0x0284 (0x0010) [0x000000000468200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FViewParticleEmitterInstanceMotionBlurInfo > ViewMBInfoArray;                                  		// 0x0294 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bAutoActivate : 1;                                		// 0x02A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWasCompleted : 1;                                		// 0x02A4 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bSuppressSpawning : 1;                            		// 0x02A4 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bWasDeactivated : 1;                              		// 0x02A4 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bResetOnDetach : 1;                               		// 0x02A4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUpdateOnDedicatedServer : 1;                     		// 0x02A4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bJustAttached : 1;                                		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bIsActive : 1;                                    		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bHasBeenActivated : 1;                            		// 0x02A4 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bWarmingUp : 1;                                   		// 0x02A4 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIsCachedInPool : 1;                              		// 0x02A4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bOverrideLODMethod : 1;                           		// 0x02A4 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bSkipUpdateDynamicDataDuringTick : 1;             		// 0x02A4 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bSkipBoundsUpdate : 1;                            		// 0x02A4 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bUpdateComponentInTick : 1;                       		// 0x02A4 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bDeferredBeamUpdate : 1;                          		// 0x02A4 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bForcedInActive : 1;                              		// 0x02A4 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bIsWarmingUp : 1;                                 		// 0x02A4 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bIsViewRelevanceDirty : 1;                        		// 0x02A4 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bRecacheViewRelevance : 1;                        		// 0x02A4 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bLODUpdatePending : 1;                            		// 0x02A4 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bSkipSpawnCountCheck : 1;                         		// 0x02A4 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	TArray< struct FParticleSysParam >                 InstanceParameters;                               		// 0x02A8 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     OldPosition;                                      		// 0x02B8 (0x000C) [0x0000000000000000]              
	struct FVector                                     PartSysVelocity;                                  		// 0x02C4 (0x000C) [0x0000000000000000]              
	float                                              WarmupTime;                                       		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              WarmupTickRate;                                   		// 0x02D4 (0x0004) [0x0000000000000000]              
	int                                                LODLevel;                                         		// 0x02D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SecondsBeforeInactive;                            		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeSinceLastForceUpdateTransform;                		// 0x02E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxTimeBeforeForceUpdateTransform;                		// 0x02E4 (0x0004) [0x0000000000000000]              
	int                                                EditorLODLevel;                                   		// 0x02E8 (0x0004) [0x0000000000000000]              
	int                                                EditorDetailMode;                                 		// 0x02EC (0x0004) [0x0000000000000000]              
	float                                              AccumTickTime;                                    		// 0x02F0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      LODMethod;                                        		// 0x02F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ReplayState;                                      		// 0x02F5 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< struct FMaterialViewRelevance >            CachedViewRelevanceFlags;                         		// 0x02F8 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UParticleSystemReplay* >             ReplayClips;                                      		// 0x0308 (0x0010) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	int                                                ReplayClipIDNumber;                               		// 0x0318 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ReplayFrameIndex;                                 		// 0x031C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              AccumLODDistanceCheckTime;                        		// 0x0320 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FParticleEventSpawnData >           SpawnEvents;                                      		// 0x0324 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FParticleEventDeathData >           DeathEvents;                                      		// 0x0334 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FParticleEventCollideData >         CollisionEvents;                                  		// 0x0344 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FParticleEventKismetData >          KismetEvents;                                     		// 0x0354 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FParticleEventAttractorCollideData > AttractorCollisionEvents;                         		// 0x0364 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0374 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              CustomTimeDilation;                               		// 0x037C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmitterDelay;                                     		// 0x0380 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FScriptDelegate                             __OnSystemFinished__Delegate;                     		// 0x0384 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0388 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1638 ];

		return pClassPointer;
	};

	void SetStopSpawning ( int InEmitterIndex, unsigned long bInStopSpawning );
	void ResetToDefaults ( );
	void SetActive ( unsigned long bNowActive, unsigned long bFlagAsJustAttached );
	void ClearParameter ( struct FName ParameterName, unsigned char ParameterType );
	bool GetMaterialParameter ( struct FName InName, class UMaterialInterface** OutMaterial );
	bool GetActorParameter ( struct FName InName, class AActor** OutActor );
	bool GetColorParameter ( struct FName InName, struct FColor* OutColor );
	bool GetVectorParameter ( struct FName InName, struct FVector* OutVector );
	bool GetFloatParameter ( struct FName InName, float* OutFloat );
	void SetMaterialParameter ( struct FName ParameterName, class UMaterialInterface* Param );
	void SetActorParameter ( struct FName ParameterName, class AActor* Param );
	void SetColorParameter ( struct FName ParameterName, struct FColor Param );
	void SetVectorRandParameter ( struct FName ParameterName, struct FVector* Param, struct FVector* ParamLow );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatRandParameter ( struct FName ParameterName, float Param, float ParamLow );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	int GetEditorLODLevel ( );
	int GetLODLevel ( );
	void SetEditorLODLevel ( int InLODLevel );
	void SetLODLevel ( int InLODLevel );
	void CleanupEmitters ( );
	void AddUniqueEditorSkelMeshComp ( class USkeletalMeshComponent* comp );
	bool SystemHasCompleted ( );
	float GetMaxLifespan ( );
	int DetermineLODLevelForLocation ( struct FVector* EffectLocation );
	void SetBeamTargetStrength ( int EmitterIndex, float NewTargetStrength, int TargetIndex );
	void SetBeamTargetTangent ( int EmitterIndex, struct FVector NewTangentPoint, int TargetIndex );
	void SetBeamTargetPoint ( int EmitterIndex, struct FVector NewTargetPoint, int TargetIndex );
	void SetBeamSourceStrength ( int EmitterIndex, float NewSourceStrength, int SourceIndex );
	void SetBeamSourceTangent ( int EmitterIndex, struct FVector NewTangentPoint, int SourceIndex );
	void SetBeamSourcePoint ( int EmitterIndex, struct FVector NewSourcePoint, int SourceIndex );
	void SetBeamDistance ( int EmitterIndex, float Distance );
	void SetBeamEndPoint ( int EmitterIndex, struct FVector NewEndPoint );
	void SetBeamTessellationFactor ( int EmitterIndex, float NewFactor );
	void SetBeamType ( int EmitterIndex, int NewMethod );
	void RewindEmitterInstances ( );
	void RewindEmitterInstance ( int EmitterIndex );
	void SetKillOnCompleted ( int EmitterIndex, unsigned long bKill );
	void SetKillOnDeactivate ( int EmitterIndex, unsigned long bKill );
	bool GetSkipBoundsUpdate ( );
	void SetSkipBoundsUpdate ( unsigned long bInSkipBoundsUpdate );
	bool GetSkipUpdateDynamicDataDuringTick ( );
	void SetSkipUpdateDynamicDataDuringTick ( unsigned long bInSkipUpdateDynamicDataDuringTick );
	void KillParticlesInEmitter ( struct FName InEmitterName );
	void KillParticlesForced ( );
	void DeactivateSystem ( );
	void ActivateSystem ( unsigned long bFlagAsJustAttached );
	void SetTemplate ( class UParticleSystem* NewTemplate );
	void OnSystemFinished ( class UParticleSystemComponent* PSystem );
};



// Class Engine.DistributionFloatParticleParameter ( Property size: 0 iter: 0) 
// Class name index: 6423 
// 0x0003 (0x009C - 0x0099)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:
//	 LastOffset: 99
//	 Class Propsize: 9c

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1640 ];

		return pClassPointer;
	};

};



// Class Engine.DistributionVectorParticleParameter ( Property size: 0 iter: 0) 
// Class name index: 6425 
// 0x0001 (0x00CC - 0x00CB)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:
//	 LastOffset: cb
//	 Class Propsize: cc

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1642 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleEmitter ( Property size: 12 iter: 17) 
// Class name index: 6427 
// 0x0034 (0x0094 - 0x0060)
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                      		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubUVDataOffset;                                  		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      EmitterRenderMode;                                		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      EmitterEditorColor;                               		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UParticleLODLevel* >                 LODLevels;                                        		// 0x0074 (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      ConvertedModules : 1;                             		// 0x0084 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCollapsed : 1;                                   		// 0x0084 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIsSoloing : 1;                                   		// 0x0084 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bCookedOut : 1;                                   		// 0x0084 (0x0004) [0x0000000000000000] [0x00000008] 
	int                                                PeakActiveParticles;                              		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                InitialAllocationCount;                           		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MediumDetailSpawnRateScale;                       		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1644 ];

		return pClassPointer;
	};

	float GetMaxLifespan ( float InComponentDelay );
};



// Class Engine.ParticleSpriteEmitter ( Property size: 0 iter: 1) 
// Class name index: 6429 
// 0x0000 (0x0094 - 0x0094)
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1646 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleLODLevel ( Property size: 14 iter: 14) 
// Class name index: 6431 
// 0x008C (0x00EC - 0x0060)
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                            		// 0x0060 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bEnabled : 1;                                     		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      ConvertedModules : 1;                             		// 0x0064 (0x0004) [0x0000000000000000] [0x00000002] 
	class UParticleModuleRequired*                     RequiredModule;                                   		// 0x0068 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UParticleModule* >                   Modules;                                          		// 0x0070 (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UParticleModule*                             TypeDataModule;                                   		// 0x0080 (0x0008) [0x0000000000000008]              ( CPF_ExportObject )
	class UParticleModuleSpawn*                        SpawnModule;                                      		// 0x0088 (0x0008) [0x0000000000000008]              ( CPF_ExportObject )
	class UParticleModuleEventGenerator*               EventGenerator;                                   		// 0x0090 (0x0008) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UParticleModuleSpawnBase* >          SpawningModules;                                  		// 0x0098 (0x0010) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModule* >                   SpawnModules;                                     		// 0x00A8 (0x0010) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModule* >                   UpdateModules;                                    		// 0x00B8 (0x0010) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModuleOrbit* >              OrbitModules;                                     		// 0x00C8 (0x0010) [0x0000000000001000]              ( CPF_Native )
	TArray< class UParticleModuleEventReceiverBase* >  EventReceiverModules;                             		// 0x00D8 (0x0010) [0x0000000000001000]              ( CPF_Native )
	int                                                PeakActiveParticles;                              		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1648 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModule ( Property size: 13 iter: 17) 
// Class name index: 6433 
// 0x000C (0x006C - 0x0060)
class UParticleModule : public UObject
{
public:
	unsigned long                                      bSpawnModule : 1;                                 		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpdateModule : 1;                                		// 0x0060 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFinalUpdateModule : 1;                           		// 0x0060 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCurvesAsColor : 1;                               		// 0x0060 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      b3DDrawMode : 1;                                  		// 0x0060 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSupported3DDrawMode : 1;                         		// 0x0060 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bEnabled : 1;                                     		// 0x0060 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bEditable : 1;                                    		// 0x0060 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      LODDuplicate : 1;                                 		// 0x0060 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bSupportsRandomSeed : 1;                          		// 0x0060 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bRequiresLoopingNotification : 1;                 		// 0x0060 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned char                                      LODValidity;                                      		// 0x0064 (0x0001) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      ModuleEditorColor;                                		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1650 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleAccelerationBase ( Property size: 1 iter: 1) 
// Class name index: 6435 
// 0x0004 (0x0070 - 0x006C)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	unsigned long                                      bAlwaysInWorldSpace : 1;                          		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1652 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleAcceleration ( Property size: 2 iter: 2) 
// Class name index: 6437 
// 0x0028 (0x0098 - 0x0070)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                     		// 0x0070 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bApplyOwnerScale : 1;                             		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1654 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleAccelerationOverLifetime ( Property size: 1 iter: 1) 
// Class name index: 6439 
// 0x0024 (0x0094 - 0x0070)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                    		// 0x0070 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1656 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleAttractorBase ( Property size: 0 iter: 0) 
// Class name index: 6441 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleAttractorBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1658 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleAttractorBoneSocket ( Property size: 15 iter: 19) 
// Class name index: 6443 
// 0x010C (0x0178 - 0x006C)
class UParticleModuleAttractorBoneSocket : public UParticleModuleAttractorBase
{
public:
	unsigned char                                      FalloffType;                                      		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DestinationType;                                  		// 0x006D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SelectionMethod;                                  		// 0x006E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bParticleLifeRelative : 1;                        		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAttractAlongLengthOfBone : 1;                    		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FRawDistributionFloat                       FalloffExponent;                                  		// 0x0074 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Range;                                            		// 0x0098 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Strength;                                         		// 0x00BC (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       CollisionRadius;                                  		// 0x00E0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       DragCoefficient;                                  		// 0x0104 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       DragRadius;                                       		// 0x0128 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FVector                                     UniversalOffset;                                  		// 0x014C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FAttractLocationBoneSocketInfo >    SourceLocations;                                  		// 0x0158 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       SkelMeshActorParamName;                           		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               EditorSkelMesh;                                   		// 0x0170 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1660 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleAttractorLine ( Property size: 4 iter: 4) 
// Class name index: 6445 
// 0x0060 (0x00CC - 0x006C)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                        		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EndPoint1;                                        		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Range;                                            		// 0x0084 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Strength;                                         		// 0x00A8 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1662 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleAttractorParticle ( Property size: 9 iter: 10) 
// Class name index: 6447 
// 0x005C (0x00C8 - 0x006C)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x006C (0x0008) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	struct FRawDistributionFloat                       Range;                                            		// 0x0074 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bStrengthByDistance : 1;                          		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAffectBaseVelocity : 1;                          		// 0x0098 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRenewSource : 1;                                 		// 0x0098 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bInheritSourceVel : 1;                            		// 0x0098 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionFloat                       Strength;                                         		// 0x009C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      SelectionMethod;                                  		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastSelIndex;                                     		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1664 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleAttractorPoint ( Property size: 7 iter: 7) 
// Class name index: 6449 
// 0x0070 (0x00DC - 0x006C)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                         		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Range;                                            		// 0x0090 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Strength;                                         		// 0x00B4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      StrengthByDistance : 1;                           		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAffectBaseVelocity : 1;                          		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOverrideVelocity : 1;                            		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseWorldSpacePosition : 1;                       		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1666 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleAttractorSkelVertSurface ( Property size: 18 iter: 20) 
// Class name index: 6451 
// 0x0130 (0x019C - 0x006C)
class UParticleModuleAttractorSkelVertSurface : public UParticleModuleAttractorBase
{
public:
	unsigned char                                      FalloffType;                                      		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DestinationType;                                  		// 0x006D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bParticleLifeRelative : 1;                        		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnforceNormalCheck : 1;                          		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FRawDistributionFloat                       FalloffExponent;                                  		// 0x0074 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Range;                                            		// 0x0098 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Strength;                                         		// 0x00BC (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       CollisionRadius;                                  		// 0x00E0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       DragCoefficient;                                  		// 0x0104 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       DragRadius;                                       		// 0x0128 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FVector                                     UniversalOffset;                                  		// 0x014C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SkelMeshActorParamName;                           		// 0x0158 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               EditorSkelMesh;                                   		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             ValidAssociatedBones;                             		// 0x0168 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     NormalToCompare;                                  		// 0x0178 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalCheckToleranceDegrees;                      		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalCheckTolerance;                             		// 0x0188 (0x0004) [0x0000000000000000]              
	TArray< int >                                      ValidMaterialIndices;                             		// 0x018C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1668 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleBeamBase ( Property size: 0 iter: 2) 
// Class name index: 6453 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleBeamBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1670 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleBeamModifier ( Property size: 8 iter: 10) 
// Class name index: 6455 
// 0x0080 (0x00EC - 0x006C)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	unsigned char                                      ModifierType;                                     		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FBeamModifierOptions                        PositionOptions;                                  		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      Position;                                         		// 0x0074 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBeamModifierOptions                        TangentOptions;                                   		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      Tangent;                                          		// 0x009C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bAbsoluteTangent : 1;                             		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FBeamModifierOptions                        StrengthOptions;                                  		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Strength;                                         		// 0x00C8 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1672 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleBeamNoise ( Property size: 20 iter: 20) 
// Class name index: 6457 
// 0x00D4 (0x0140 - 0x006C)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned long                                      bLowFreq_Enabled : 1;                             		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNRScaleEmitterTime : 1;                          		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSmooth : 1;                                      		// 0x006C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNoiseLock : 1;                                   		// 0x006C (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bOscillate : 1;                                   		// 0x006C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseNoiseTangents : 1;                            		// 0x006C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bTargetNoise : 1;                                 		// 0x006C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bApplyNoiseScale : 1;                             		// 0x006C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	int                                                Frequency;                                        		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Frequency_LowRange;                               		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      NoiseRange;                                       		// 0x0078 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       NoiseRangeScale;                                  		// 0x009C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      NoiseSpeed;                                       		// 0x00C0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              NoiseLockRadius;                                  		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseLockTime;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseTension;                                     		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       NoiseTangentStrength;                             		// 0x00F0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                NoiseTessellation;                                		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrequencyDistance;                                		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       NoiseScale;                                       		// 0x011C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1674 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleBeamSource ( Property size: 10 iter: 10) 
// Class name index: 6459 
// 0x007C (0x00E8 - 0x006C)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	unsigned char                                      SourceMethod;                                     		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SourceTangentMethod;                              		// 0x006D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SourceName;                                       		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSourceAbsolute : 1;                              		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLockSource : 1;                                  		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLockSourceTangent : 1;                           		// 0x0078 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLockSourceStength : 1;                           		// 0x0078 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionVector                      Source;                                           		// 0x007C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      SourceTangent;                                    		// 0x00A0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       SourceStrength;                                   		// 0x00C4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1676 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleBeamTarget ( Property size: 11 iter: 11) 
// Class name index: 6461 
// 0x0080 (0x00EC - 0x006C)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	unsigned char                                      TargetMethod;                                     		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TargetTangentMethod;                              		// 0x006D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TargetName;                                       		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      Target;                                           		// 0x0078 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bTargetAbsolute : 1;                              		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLockTarget : 1;                                  		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLockTargetTangent : 1;                           		// 0x009C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLockTargetStength : 1;                           		// 0x009C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionVector                      TargetTangent;                                    		// 0x00A0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TargetStrength;                                   		// 0x00C4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              LockRadius;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1678 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleCameraBase ( Property size: 0 iter: 0) 
// Class name index: 6463 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleCameraBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1680 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleCameraOffset ( Property size: 3 iter: 4) 
// Class name index: 6465 
// 0x0029 (0x0095 - 0x006C)
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                       CameraOffset;                                     		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bSpawnTimeOnly : 1;                               		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      UpdateMethod;                                     		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1682 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleCollisionBase ( Property size: 0 iter: 1) 
// Class name index: 6467 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleCollisionBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1684 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleCollision ( Property size: 17 iter: 19) 
// Class name index: 6469 
// 0x00D8 (0x0144 - 0x006C)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                    		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      DampingFactorRotation;                            		// 0x0090 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       MaxCollisions;                                    		// 0x00B4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      CollisionCompletionOption;                        		// 0x00D8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bApplyPhysics : 1;                                		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPawnsDoNotDecrementCount : 1;                    		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyVerticalNormalsDecrementCount : 1;           		// 0x00DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDropDetail : 1;                                  		// 0x00DC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCollideOnlyIfVisible : 1;                        		// 0x00DC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCollideWithWorld : 1;                            		// 0x00DC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCollideWithWorldAttractors : 1;                  		// 0x00DC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	struct FRawDistributionFloat                       ParticleMass;                                     		// 0x00E0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              DirScalar;                                        		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VerticalFudgeFactor;                              		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       DelayAmount;                                      		// 0x010C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              MaxCollisionDistance;                             		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FParticleAttractorCollisionAction > ParticleAttractorCollisionActions;                		// 0x0134 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1686 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleCollisionActor ( Property size: 2 iter: 2) 
// Class name index: 6471 
// 0x0014 (0x0158 - 0x0144)
class UParticleModuleCollisionActor : public UParticleModuleCollision
{
public:
	TArray< struct FName >                             ActorsToCollideWith;                              		// 0x0144 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bCheckPawnCollisions : 1;                         		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1688 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleColorBase ( Property size: 0 iter: 0) 
// Class name index: 6473 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleColorBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1690 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleColor ( Property size: 3 iter: 3) 
// Class name index: 6475 
// 0x004C (0x00B8 - 0x006C)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                       		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       StartAlpha;                                       		// 0x0090 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bClampAlpha : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1692 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleColor_Seeded ( Property size: 1 iter: 1) 
// Class name index: 6477 
// 0x001C (0x00D4 - 0x00B8)
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x00B8 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1694 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleColorByParameter ( Property size: 2 iter: 2) 
// Class name index: 6479 
// 0x000C (0x0078 - 0x006C)
class UParticleModuleColorByParameter : public UParticleModuleColorBase
{
public:
	struct FName                                       ColorParam;                                       		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DefaultColor;                                     		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1696 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleColorOverLife ( Property size: 3 iter: 3) 
// Class name index: 6481 
// 0x004C (0x00B8 - 0x006C)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0090 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bClampAlpha : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1698 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleColorScaleOverDensity ( Property size: 2 iter: 2) 
// Class name index: 6483 
// 0x0048 (0x00B4 - 0x006C)
class UParticleModuleColorScaleOverDensity : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverDensity;                            		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaScaleOverDensity;                            		// 0x0090 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1700 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleColorScaleOverLife ( Property size: 3 iter: 3) 
// Class name index: 6485 
// 0x004C (0x00B8 - 0x006C)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                               		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaScaleOverLife;                               		// 0x0090 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bEmitterTime : 1;                                 		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1702 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleEventBase ( Property size: 0 iter: 0) 
// Class name index: 6487 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleEventBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1704 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleEventGenerator ( Property size: 1 iter: 2) 
// Class name index: 6489 
// 0x0010 (0x007C - 0x006C)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray< struct FParticleEvent_GenerateInfo >       Events;                                           		// 0x006C (0x0010) [0x0000000002400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1706 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleEventReceiverBase ( Property size: 2 iter: 2) 
// Class name index: 6491 
// 0x000C (0x0078 - 0x006C)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	unsigned char                                      EventGeneratorType;                               		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EventName;                                        		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1708 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleEventReceiverKillParticles ( Property size: 1 iter: 1) 
// Class name index: 6493 
// 0x0004 (0x007C - 0x0078)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	unsigned long                                      bStopSpawning : 1;                                		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1710 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleEventReceiverSpawn ( Property size: 5 iter: 5) 
// Class name index: 6495 
// 0x004C (0x00C4 - 0x0078)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                       SpawnCount;                                       		// 0x0078 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bUseParticleTime : 1;                             		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUsePSysLocation : 1;                             		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInheritVelocity : 1;                             		// 0x009C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FRawDistributionVector                      InheritVelocityScale;                             		// 0x00A0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1712 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleKillBase ( Property size: 0 iter: 0) 
// Class name index: 6497 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleKillBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1714 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleKillBox ( Property size: 5 iter: 5) 
// Class name index: 6499 
// 0x004C (0x00B8 - 0x006C)
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                  		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      UpperRightCorner;                                 		// 0x0090 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bAbsolute : 1;                                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKillInside : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAxisAlignedAndFixedSize : 1;                     		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1716 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleKillHeight ( Property size: 4 iter: 4) 
// Class name index: 6501 
// 0x0028 (0x0094 - 0x006C)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                           		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bAbsolute : 1;                                    		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFloor : 1;                                       		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bApplyPSysScale : 1;                              		// 0x0090 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1718 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLifetimeBase ( Property size: 0 iter: 0) 
// Class name index: 6503 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1720 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLifetime ( Property size: 1 iter: 1) 
// Class name index: 6505 
// 0x0024 (0x0090 - 0x006C)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1722 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLifetime_Seeded ( Property size: 1 iter: 1) 
// Class name index: 6507 
// 0x001C (0x00AC - 0x0090)
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0090 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1724 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocationBase ( Property size: 0 iter: 0) 
// Class name index: 6509 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleLocationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1726 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocation ( Property size: 3 iter: 3) 
// Class name index: 6511 
// 0x002C (0x0098 - 0x006C)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                    		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              DistributeOverNPoints;                            		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistributeThreshold;                              		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1728 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocation_Seeded ( Property size: 1 iter: 1) 
// Class name index: 6513 
// 0x001C (0x00B4 - 0x0098)
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0098 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1730 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocationWorldOffset ( Property size: 0 iter: 0) 
// Class name index: 6515 
// 0x0000 (0x0098 - 0x0098)
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1732 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocationWorldOffset_Seeded ( Property size: 1 iter: 1) 
// Class name index: 6517 
// 0x001C (0x00B4 - 0x0098)
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0098 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1734 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocationBoneSocket ( Property size: 10 iter: 13) 
// Class name index: 6519 
// 0x0038 (0x00A4 - 0x006C)
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	unsigned char                                      SourceType;                                       		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SelectionMethod;                                  		// 0x006D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     UniversalOffset;                                  		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FLocationBoneSocketInfo >           SourceLocations;                                  		// 0x007C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUpdatePositionEachFrame : 1;                     		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOrientMeshEmitters : 1;                          		// 0x008C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInheritVelocityAtSpawn : 1;                      		// 0x008C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FName                                       SkelMeshActorParamName;                           		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               EditorSkelMesh;                                   		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastUpdateTime;                                   		// 0x00A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1736 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocationDirect ( Property size: 4 iter: 4) 
// Class name index: 6521 
// 0x0090 (0x00FC - 0x006C)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                         		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      LocationOffset;                                   		// 0x0090 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      ScaleFactor;                                      		// 0x00B4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      Direction;                                        		// 0x00D8 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1738 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocationEmitter ( Property size: 6 iter: 7) 
// Class name index: 6523 
// 0x0018 (0x0084 - 0x006C)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x006C (0x0008) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	unsigned char                                      SelectionMethod;                                  		// 0x0074 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      InheritSourceVelocity : 1;                        		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInheritSourceRotation : 1;                       		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              InheritSourceVelocityScale;                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InheritSourceRotationScale;                       		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1740 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocationEmitterDirect ( Property size: 1 iter: 1) 
// Class name index: 6525 
// 0x0008 (0x0074 - 0x006C)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x006C (0x0008) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1742 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocationPrimitiveBase ( Property size: 10 iter: 10) 
// Class name index: 6527 
// 0x004C (0x00B8 - 0x006C)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned long                                      Positive_X : 1;                                   		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      Positive_Y : 1;                                   		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      Positive_Z : 1;                                   		// 0x006C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      Negative_X : 1;                                   		// 0x006C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      Negative_Y : 1;                                   		// 0x006C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      Negative_Z : 1;                                   		// 0x006C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      SurfaceOnly : 1;                                  		// 0x006C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      Velocity : 1;                                     		// 0x006C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	struct FRawDistributionFloat                       VelocityScale;                                    		// 0x0070 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartLocation;                                    		// 0x0094 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1744 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocationPrimitiveCylinder ( Property size: 5 iter: 6) 
// Class name index: 6529 
// 0x004D (0x0105 - 0x00B8)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned long                                      RadialVelocity : 1;                               		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAdjustForWorldSpace : 1;                         		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FRawDistributionFloat                       StartRadius;                                      		// 0x00BC (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       StartHeight;                                      		// 0x00E0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      HeightAxis;                                       		// 0x0104 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1746 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded ( Property size: 1 iter: 1) 
// Class name index: 6531 
// 0x001F (0x0124 - 0x0105)
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0108 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1748 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocationPrimitiveSphere ( Property size: 1 iter: 1) 
// Class name index: 6533 
// 0x0024 (0x00DC - 0x00B8)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                      		// 0x00B8 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1750 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded ( Property size: 1 iter: 1) 
// Class name index: 6535 
// 0x001C (0x00F8 - 0x00DC)
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x00DC (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1752 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocationSkelVertSurface ( Property size: 12 iter: 13) 
// Class name index: 6537 
// 0x0058 (0x00C4 - 0x006C)
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	unsigned char                                      SourceType;                                       		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     UniversalOffset;                                  		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUpdatePositionEachFrame : 1;                     		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOrientMeshEmitters : 1;                          		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnforceNormalCheck : 1;                          		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FName                                       SkelMeshActorParamName;                           		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               EditorSkelMesh;                                   		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             ValidAssociatedBones;                             		// 0x0090 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     NormalToCompare;                                  		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalCheckToleranceDegrees;                      		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalCheckTolerance;                             		// 0x00B0 (0x0004) [0x0000000000000000]              
	TArray< int >                                      ValidMaterialIndices;                             		// 0x00B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1754 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleLocationStaticVertSurface ( Property size: 11 iter: 12) 
// Class name index: 6539 
// 0x0048 (0x00B4 - 0x006C)
class UParticleModuleLocationStaticVertSurface : public UParticleModuleLocationBase
{
public:
	unsigned char                                      SourceType;                                       		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     UniversalOffset;                                  		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUpdatePositionEachFrame : 1;                     		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOrientMeshEmitters : 1;                          		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnforceNormalCheck : 1;                          		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FName                                       StaticMeshActorParamName;                         		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 EditorStaticMesh;                                 		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     NormalToCompare;                                  		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalCheckToleranceDegrees;                      		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalCheckTolerance;                             		// 0x00A0 (0x0004) [0x0000000000000000]              
	TArray< int >                                      ValidMaterialIndices;                             		// 0x00A4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1756 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSourceMovement ( Property size: 1 iter: 1) 
// Class name index: 6541 
// 0x0024 (0x0090 - 0x006C)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      SourceMovementScale;                              		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1758 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleMaterialBase ( Property size: 0 iter: 0) 
// Class name index: 6543 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleMaterialBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1760 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleMaterialByParameter ( Property size: 2 iter: 2) 
// Class name index: 6545 
// 0x0020 (0x008C - 0x006C)
class UParticleModuleMaterialByParameter : public UParticleModuleMaterialBase
{
public:
	TArray< struct FName >                             MaterialParameters;                               		// 0x006C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialInterface* >                DefaultMaterials;                                 		// 0x007C (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1762 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleMeshMaterial ( Property size: 1 iter: 1) 
// Class name index: 6547 
// 0x0010 (0x007C - 0x006C)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray< class UMaterialInterface* >                MeshMaterials;                                    		// 0x006C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1764 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleOrbitBase ( Property size: 1 iter: 1) 
// Class name index: 6549 
// 0x0004 (0x0070 - 0x006C)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned long                                      bUseEmitterTime : 1;                              		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1766 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleOrbit ( Property size: 7 iter: 9) 
// Class name index: 6551 
// 0x007C (0x00EC - 0x0070)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	unsigned char                                      ChainMode;                                        		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      OffsetAmount;                                     		// 0x0074 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FOrbitOptions                               OffsetOptions;                                    		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      RotationAmount;                                   		// 0x009C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FOrbitOptions                               RotationOptions;                                  		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      RotationRateAmount;                               		// 0x00C4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FOrbitOptions                               RotationRateOptions;                              		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1768 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleOrientationBase ( Property size: 0 iter: 0) 
// Class name index: 6553 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleOrientationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1770 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleOrientationAxisLock ( Property size: 1 iter: 2) 
// Class name index: 6555 
// 0x0001 (0x006D - 0x006C)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	unsigned char                                      LockAxisFlags;                                    		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1772 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleParameterBase ( Property size: 0 iter: 0) 
// Class name index: 6557 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleParameterBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1774 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleParameterDynamic ( Property size: 3 iter: 5) 
// Class name index: 6559 
// 0x0018 (0x0084 - 0x006C)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray< struct FEmitterDynamicParameter >          DynamicParams;                                    		// 0x006C (0x0010) [0x0000000000480041]              ( CPF_Edit | CPF_EditConstArray | CPF_Component | CPF_NeedCtorLink )
	int                                                UpdateFlags;                                      		// 0x007C (0x0004) [0x0000000000000000]              
	unsigned long                                      bUsesVelocity : 1;                                		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1776 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleParameterDynamic_Seeded ( Property size: 1 iter: 1) 
// Class name index: 6561 
// 0x001C (0x00A0 - 0x0084)
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0084 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1778 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleRequired ( Property size: 45 iter: 47) 
// Class name index: 6563 
// 0x00AC (0x0118 - 0x006C)
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ScreenAlignment;                                  		// 0x0074 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SortMode;                                         		// 0x0075 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParticleBurstMethod;                              		// 0x0076 (0x0001) [0x0000000000000000]              
	unsigned char                                      InterpolationMethod;                              		// 0x0077 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EmitterNormalsMode;                               		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAllowImageFlipping : 1;                          		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSquareImageFlipping : 1;                         		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseLocalSpace : 1;                               		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bKillOnDeactivate : 1;                            		// 0x007C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bKillOnCompleted : 1;                             		// 0x007C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bRequiresSorting : 1;                             		// 0x007C (0x0004) [0x0000000020000000] [0x00000020] ( CPF_Deprecated )
	unsigned long                                      bUseLegacyEmitterTime : 1;                        		// 0x007C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bEnableNearParticleCulling : 1;                   		// 0x007C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bEnableFarParticleCulling : 1;                    		// 0x007C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bEmitterDurationUseRange : 1;                     		// 0x007C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bDurationRecalcEachLoop : 1;                      		// 0x007C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bEmitterDelayUseRange : 1;                        		// 0x007C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bDelayFirstLoopOnly : 1;                          		// 0x007C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bScaleUV : 1;                                     		// 0x007C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bDirectUV : 1;                                    		// 0x007C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bOverrideSystemMacroUV : 1;                       		// 0x007C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bUseMaxDrawCount : 1;                             		// 0x007C (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bOrbitModuleAffectsVelocityAlignment : 1;         		// 0x007C (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	float                                              NearCullDistance;                                 		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NearFadeDistance;                                 		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FarFadeDistance;                                  		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FarCullDistance;                                  		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmitterDuration;                                  		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmitterDurationLow;                               		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EmitterLoops;                                     		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SpawnRate;                                        		// 0x009C (0x0024) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	TArray< struct FParticleBurst >                    BurstList;                                        		// 0x00C0 (0x0010) [0x0000000002400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear )
	float                                              EmitterDelay;                                     		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmitterDelayLow;                                  		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubImages_Horizontal;                             		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubImages_Vertical;                               		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomImageTime;                                  		// 0x00E0 (0x0004) [0x0000000000000000]              
	int                                                RandomImageChanges;                               		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MacroUVPosition;                                  		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MacroUVRadius;                                    		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxDrawCount;                                     		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DownsampleThresholdScreenFraction;                		// 0x00FC (0x0004) [0x0000000000000000]              
	struct FVector                                     NormalsSphereCenter;                              		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     NormalsCylinderDirection;                         		// 0x010C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1780 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleRotationBase ( Property size: 0 iter: 0) 
// Class name index: 6565 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleRotationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1782 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleMeshRotation ( Property size: 2 iter: 2) 
// Class name index: 6567 
// 0x0028 (0x0094 - 0x006C)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                    		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bInheritParent : 1;                               		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1784 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleMeshRotation_Seeded ( Property size: 1 iter: 1) 
// Class name index: 6569 
// 0x001C (0x00B0 - 0x0094)
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0094 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1786 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleRotation ( Property size: 1 iter: 1) 
// Class name index: 6571 
// 0x0024 (0x0090 - 0x006C)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                    		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1788 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleRotation_Seeded ( Property size: 1 iter: 1) 
// Class name index: 6573 
// 0x001C (0x00AC - 0x0090)
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0090 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1790 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleRotationOverLifetime ( Property size: 2 iter: 2) 
// Class name index: 6575 
// 0x0028 (0x0094 - 0x006C)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                 		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      Scale : 1;                                        		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1792 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleRotationRateBase ( Property size: 0 iter: 0) 
// Class name index: 6577 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1794 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleMeshRotationRate ( Property size: 1 iter: 1) 
// Class name index: 6579 
// 0x0024 (0x0090 - 0x006C)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1796 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleMeshRotationRate_Seeded ( Property size: 1 iter: 1) 
// Class name index: 6581 
// 0x001C (0x00AC - 0x0090)
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0090 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1798 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleMeshRotationRateMultiplyLife ( Property size: 1 iter: 1) 
// Class name index: 6583 
// 0x0024 (0x0090 - 0x006C)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1800 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleMeshRotationRateOverLife ( Property size: 2 iter: 2) 
// Class name index: 6585 
// 0x0028 (0x0094 - 0x006C)
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      RotRate;                                          		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bScaleRotRate : 1;                                		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1802 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleRotationRate ( Property size: 1 iter: 1) 
// Class name index: 6587 
// 0x0024 (0x0090 - 0x006C)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1804 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleRotationRate_Seeded ( Property size: 1 iter: 1) 
// Class name index: 6589 
// 0x001C (0x00AC - 0x0090)
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0090 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1806 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleRotationRateMultiplyLife ( Property size: 1 iter: 1) 
// Class name index: 6591 
// 0x0024 (0x0090 - 0x006C)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                   		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1808 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSizeBase ( Property size: 0 iter: 0) 
// Class name index: 6593 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleSizeBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1810 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSize ( Property size: 1 iter: 1) 
// Class name index: 6595 
// 0x0024 (0x0090 - 0x006C)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                        		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1812 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSize_Seeded ( Property size: 1 iter: 1) 
// Class name index: 6597 
// 0x001C (0x00AC - 0x0090)
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x0090 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1814 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSizeMultiplyLife ( Property size: 4 iter: 4) 
// Class name index: 6599 
// 0x0028 (0x0094 - 0x006C)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      MultiplyX : 1;                                    		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0090 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1816 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSizeMultiplyVelocity ( Property size: 6 iter: 6) 
// Class name index: 6601 
// 0x0040 (0x00AC - 0x006C)
class UParticleModuleSizeMultiplyVelocity : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      VelocityMultiplier;                               		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      MultiplyX : 1;                                    		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0090 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FVector                                     CapMaxSize;                                       		// 0x0094 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     CapMinSize;                                       		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1818 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSizeScale ( Property size: 4 iter: 4) 
// Class name index: 6603 
// 0x0028 (0x0094 - 0x006C)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                        		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      EnableX : 1;                                      		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableY : 1;                                      		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      EnableZ : 1;                                      		// 0x0090 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1820 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSizeScaleByTime ( Property size: 4 iter: 4) 
// Class name index: 6605 
// 0x0028 (0x0094 - 0x006C)
class UParticleModuleSizeScaleByTime : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScaleByTime;                                  		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bEnableX : 1;                                     		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableY : 1;                                     		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableZ : 1;                                     		// 0x0090 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1822 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSizeScaleOverDensity ( Property size: 1 iter: 1) 
// Class name index: 6607 
// 0x0024 (0x0090 - 0x006C)
class UParticleModuleSizeScaleOverDensity : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScaleOverDensity;                             		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1824 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSpawnBase ( Property size: 2 iter: 2) 
// Class name index: 6609 
// 0x0004 (0x0070 - 0x006C)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned long                                      bProcessSpawnRate : 1;                            		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProcessBurstList : 1;                            		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1826 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSpawn ( Property size: 4 iter: 4) 
// Class name index: 6611 
// 0x005C (0x00CC - 0x0070)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                             		// 0x0070 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       RateScale;                                        		// 0x0094 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      ParticleBurstMethod;                              		// 0x00B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FParticleBurst >                    BurstList;                                        		// 0x00BC (0x0010) [0x0000000002400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1828 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSpawnPerUnit ( Property size: 9 iter: 9) 
// Class name index: 6613 
// 0x0038 (0x00A8 - 0x0070)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                       		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SpawnPerUnit;                                     		// 0x0074 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bIgnoreSpawnRateWhenMoving : 1;                   		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreMovementAlongX : 1;                        		// 0x0098 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIgnoreMovementAlongY : 1;                        		// 0x0098 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIgnoreMovementAlongZ : 1;                        		// 0x0098 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	float                                              MovementTolerance;                                		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFrameDistance;                                 		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinFrameDistance;                                 		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1830 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleStoreSpawnTimeBase ( Property size: 0 iter: 0) 
// Class name index: 6615 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleStoreSpawnTimeBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1832 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleStoreSpawnTime ( Property size: 0 iter: 0) 
// Class name index: 6617 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleStoreSpawnTime : public UParticleModuleStoreSpawnTimeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1834 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSubUVBase ( Property size: 0 iter: 0) 
// Class name index: 6619 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleSubUVBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1836 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSubUV ( Property size: 2 iter: 2) 
// Class name index: 6621 
// 0x0028 (0x0094 - 0x006C)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionFloat                       SubImageIndex;                                    		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bUseRealTime : 1;                                 		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1838 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSubUVMovie ( Property size: 3 iter: 3) 
// Class name index: 6623 
// 0x002C (0x00C0 - 0x0094)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	unsigned long                                      bUseEmitterTime : 1;                              		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FRawDistributionFloat                       FrameRate;                                        		// 0x0098 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                StartingFrame;                                    		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1840 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSubUVDirect ( Property size: 2 iter: 2) 
// Class name index: 6625 
// 0x0048 (0x00B4 - 0x006C)
class UParticleModuleSubUVDirect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubUVPosition;                                    		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      SubUVSize;                                        		// 0x0090 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1842 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleSubUVSelect ( Property size: 1 iter: 1) 
// Class name index: 6627 
// 0x0024 (0x0090 - 0x006C)
class UParticleModuleSubUVSelect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubImageSelect;                                   		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1844 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleTrailBase ( Property size: 0 iter: 0) 
// Class name index: 6629 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleTrailBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1846 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleTrailSource ( Property size: 8 iter: 9) 
// Class name index: 6631 
// 0x0048 (0x00B4 - 0x006C)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	unsigned char                                      SourceMethod;                                     		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SelectionMethod;                                  		// 0x006D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SourceName;                                       		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       SourceStrength;                                   		// 0x0078 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bLockSourceStength : 1;                           		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInheritRotation : 1;                             		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                SourceOffsetCount;                                		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FVector >                           SourceOffsetDefaults;                             		// 0x00A4 (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1848 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleTrailSpawn ( Property size: 2 iter: 3) 
// Class name index: 6633 
// 0x000C (0x0078 - 0x006C)
class UParticleModuleTrailSpawn : public UParticleModuleTrailBase
{
public:
	class UDistributionFloatParticleParameter*         SpawnDistanceMap;                                 		// 0x006C (0x0008) [0x0000000006080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	float                                              MinSpawnVelocity;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1850 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleTrailTaper ( Property size: 2 iter: 3) 
// Class name index: 6635 
// 0x0028 (0x0094 - 0x006C)
class UParticleModuleTrailTaper : public UParticleModuleTrailBase
{
public:
	unsigned char                                      TaperMethod;                                      		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       TaperFactor;                                      		// 0x0070 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1852 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleTypeDataBase ( Property size: 0 iter: 0) 
// Class name index: 6637 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1854 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleTypeDataAnimTrail ( Property size: 13 iter: 13) 
// Class name index: 6639 
// 0x001C (0x0088 - 0x006C)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	struct FName                                       ControlEdgeName;                                  		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                SheetsPerTrail;                                   		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDeadTrailsOnDeactivate : 1;                      		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClipSourceSegement : 1;                          		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnablePreviousTangentRecalculation : 1;          		// 0x0078 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTangentRecalculationEveryFrame : 1;              		// 0x0078 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRenderGeometry : 1;                              		// 0x0078 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bRenderSpawnPoints : 1;                           		// 0x0078 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bRenderTangents : 1;                              		// 0x0078 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bRenderTessellation : 1;                          		// 0x0078 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	float                                              TilingDistance;                                   		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceTessellationStepSize;                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TangentTessellationScalar;                        		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1856 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleTypeDataApex ( Property size: 2 iter: 2) 
// Class name index: 6641 
// 0x0010 (0x007C - 0x006C)
class UParticleModuleTypeDataApex : public UParticleModuleTypeDataBase
{
public:
	class UApexGenericAsset*                           ApexIOFX;                                         		// 0x006C (0x0008) [0x0000000000000000]              
	class UApexGenericAsset*                           ApexEmitter;                                      		// 0x0074 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1858 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleTypeDataBeam ( Property size: 13 iter: 15) 
// Class name index: 6643 
// 0x00C4 (0x0130 - 0x006C)
class UParticleModuleTypeDataBeam : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      BeamMethod;                                       		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EndPointMethod;                                   		// 0x006D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Distance;                                         		// 0x0070 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      EndPoint;                                         		// 0x0094 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                TessellationFactor;                               		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       EmitterStrength;                                  		// 0x00BC (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TargetStrength;                                   		// 0x00E0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      EndPointDirection;                                		// 0x0104 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                TextureTile;                                      		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RenderDirectLine : 1;                             		// 0x012C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x012C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x012C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1860 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleTypeDataBeam2 ( Property size: 18 iter: 21) 
// Class name index: 6645 
// 0x0098 (0x0104 - 0x006C)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	unsigned char                                      BeamMethod;                                       		// 0x006C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TaperMethod;                                      		// 0x006D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureTile;                                      		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextureTileDistance;                              		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Sheets;                                           		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxBeamCount;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Speed;                                            		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InterpolationPoints;                              		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAlwaysOn : 1;                                    		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x0088 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderDirectLine : 1;                             		// 0x0088 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x0088 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x0088 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	int                                                UpVectorStepSize;                                 		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BranchParentName;                                 		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Distance;                                         		// 0x0098 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TaperFactor;                                      		// 0x00BC (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TaperScale;                                       		// 0x00E0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1862 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleTypeDataMesh ( Property size: 14 iter: 17) 
// Class name index: 6647 
// 0x001C (0x0088 - 0x006C)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                             		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      CastShadows : 1;                                  		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      DoCollisions : 1;                                 		// 0x0074 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAllowMotionBlur : 1;                             		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bOverrideMaterial : 1;                            		// 0x0074 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCameraFacing : 1;                                		// 0x0074 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bApplyParticleRotationAsSpin : 1;                 		// 0x0074 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned char                                      MeshAlignment;                                    		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AxisLockOption;                                   		// 0x0079 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CameraFacingUpAxisOption;                         		// 0x007A (0x0001) [0x0000000020000000]              ( CPF_Deprecated )
	unsigned char                                      CameraFacingOption;                               		// 0x007B (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              Pitch;                                            		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Roll;                                             		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Yaw;                                              		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1864 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleTypeDataMeshPhysX ( Property size: 5 iter: 6) 
// Class name index: 6649 
// 0x0024 (0x00AC - 0x0088)
class UParticleModuleTypeDataMeshPhysX : public UParticleModuleTypeDataMesh
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                      		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PhysXRotationMethod;                              		// 0x0090 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidRotationCoefficient;                         		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                      		// 0x0098 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZOffset;                                          		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1866 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleTypeDataPhysX ( Property size: 2 iter: 3) 
// Class name index: 6651 
// 0x0018 (0x0084 - 0x006C)
class UParticleModuleTypeDataPhysX : public UParticleModuleTypeDataBase
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                      		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                      		// 0x0074 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1868 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleTypeDataRibbon ( Property size: 20 iter: 21) 
// Class name index: 6653 
// 0x0028 (0x0094 - 0x006C)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                  		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                SheetsPerTrail;                                   		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxTrailCount;                                    		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxParticleInTrailCount;                          		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDeadTrailsOnDeactivate : 1;                      		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDeadTrailsOnSourceLoss : 1;                      		// 0x007C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bClipSourceSegement : 1;                          		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnablePreviousTangentRecalculation : 1;          		// 0x007C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTangentRecalculationEveryFrame : 1;              		// 0x007C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSpawnInitialParticle : 1;                        		// 0x007C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bRenderGeometry : 1;                              		// 0x007C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bRenderSpawnPoints : 1;                           		// 0x007C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bRenderTangents : 1;                              		// 0x007C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bRenderTessellation : 1;                          		// 0x007C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bEnableTangentDiffInterpScale : 1;                		// 0x007C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned char                                      RenderAxis;                                       		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              TangentSpawningScalar;                            		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TilingDistance;                                   		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceTessellationStepSize;                     		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TangentTessellationScalar;                        		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1870 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleTypeDataTrail ( Property size: 8 iter: 8) 
// Class name index: 6655 
// 0x0038 (0x00A4 - 0x006C)
class UParticleModuleTypeDataTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned long                                      RenderGeometry : 1;                               		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x006C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      Tapered : 1;                                      		// 0x006C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      SpawnByDistance : 1;                              		// 0x006C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	int                                                TessellationFactor;                               		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Tension;                                          		// 0x0074 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FVector                                     SpawnDistance;                                    		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1872 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleTypeDataTrail2 ( Property size: 13 iter: 13) 
// Class name index: 6657 
// 0x0020 (0x008C - 0x006C)
class UParticleModuleTypeDataTrail2 : public UParticleModuleTypeDataBase
{
public:
	int                                                TessellationFactor;                               		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TessellationFactorDistance;                       		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              TessellationStrength;                             		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureTile;                                      		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Sheets;                                           		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                MaxTrailCount;                                    		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxParticleInTrailCount;                          		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bClipSourceSegement : 1;                          		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClearTangents : 1;                               		// 0x0088 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x0088 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      RenderDirectLine : 1;                             		// 0x0088 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x0088 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x0088 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1874 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleUberBase ( Property size: 1 iter: 1) 
// Class name index: 6659 
// 0x0010 (0x007C - 0x006C)
class UParticleModuleUberBase : public UParticleModule
{
public:
	TArray< struct FName >                             RequiredModules;                                  		// 0x006C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1876 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleUberLTISIVCL ( Property size: 6 iter: 6) 
// Class name index: 6661 
// 0x00D8 (0x0154 - 0x007C)
class UParticleModuleUberLTISIVCL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x007C (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartSize;                                        		// 0x00A0 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x00C4 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x00E8 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x010C (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0130 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1878 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleUberLTISIVCLIL ( Property size: 7 iter: 7) 
// Class name index: 6663 
// 0x00FC (0x0178 - 0x007C)
class UParticleModuleUberLTISIVCLIL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x007C (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartSize;                                        		// 0x00A0 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x00C4 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x00E8 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x010C (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0130 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartLocation;                                    		// 0x0154 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1880 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleUberLTISIVCLILIRSSBLIRR ( Property size: 13 iter: 13) 
// Class name index: 6665 
// 0x016C (0x01E8 - 0x007C)
class UParticleModuleUberLTISIVCLILIRSSBLIRR : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x007C (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartSize;                                        		// 0x00A0 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x00C4 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x00E8 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x010C (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0130 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartLocation;                                    		// 0x0154 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartRotation;                                    		// 0x0178 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      SizeLifeMultiplier;                               		// 0x019C (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	unsigned long                                      SizeMultiplyX : 1;                                		// 0x01C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      SizeMultiplyY : 1;                                		// 0x01C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      SizeMultiplyZ : 1;                                		// 0x01C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x01C4 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1882 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleUberRainDrops ( Property size: 27 iter: 27) 
// Class name index: 6667 
// 0x0088 (0x0104 - 0x007C)
class UParticleModuleUberRainDrops : public UParticleModuleUberBase
{
public:
	float                                              LifetimeMin;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LifetimeMax;                                      		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartSizeMin;                                     		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartSizeMax;                                     		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartVelocityMin;                                 		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartVelocityMax;                                 		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartVelocityRadialMin;                           		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartVelocityRadialMax;                           		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ColorOverLife;                                    		// 0x00BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AlphaOverLife;                                    		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsUsingCylinder : 1;                             		// 0x00CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPositive_X : 1;                                  		// 0x00CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPositive_Y : 1;                                  		// 0x00CC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPositive_Z : 1;                                  		// 0x00CC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bNegative_X : 1;                                  		// 0x00CC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bNegative_Y : 1;                                  		// 0x00CC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNegative_Z : 1;                                  		// 0x00CC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bSurfaceOnly : 1;                                 		// 0x00CC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bVelocity : 1;                                    		// 0x00CC (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bRadialVelocity : 1;                              		// 0x00CC (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	float                                              PC_VelocityScale;                                 		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PC_StartLocation;                                 		// 0x00D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              PC_StartRadius;                                   		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PC_StartHeight;                                   		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PC_HeightAxis;                                    		// 0x00E8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartLocationMin;                                 		// 0x00EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartLocationMax;                                 		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1884 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleUberRainImpacts ( Property size: 25 iter: 25) 
// Class name index: 6669 
// 0x0170 (0x01EC - 0x007C)
class UParticleModuleUberRainImpacts : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x007C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartSize;                                        		// 0x00A0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartRotation;                                    		// 0x00C4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bInheritParent : 1;                               		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyX : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIsUsingCylinder : 1;                             		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bPositive_X : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bPositive_Y : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPositive_Z : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bNegative_X : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bNegative_Y : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bNegative_Z : 1;                                  		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bSurfaceOnly : 1;                                 		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bVelocity : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bRadialVelocity : 1;                              		// 0x00E8 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x00EC (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PC_VelocityScale;                                 		// 0x0110 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      PC_StartLocation;                                 		// 0x0134 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PC_StartRadius;                                   		// 0x0158 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PC_StartHeight;                                   		// 0x017C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      PC_HeightAxis;                                    		// 0x01A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x01A4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x01C8 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1886 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleUberRainSplashA ( Property size: 10 iter: 10) 
// Class name index: 6671 
// 0x00DC (0x0158 - 0x007C)
class UParticleModuleUberRainSplashA : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x007C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartSize;                                        		// 0x00A0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartRotation;                                    		// 0x00C4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bInheritParent : 1;                               		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyX : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x00EC (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0110 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0134 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1888 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleUberRainSplashB ( Property size: 9 iter: 9) 
// Class name index: 6673 
// 0x00DC (0x0158 - 0x007C)
class UParticleModuleUberRainSplashB : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x007C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartSize;                                        		// 0x00A0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00C4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00E8 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x010C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      MultiplyX : 1;                                    		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x0130 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0130 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x0134 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1890 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleVelocityBase ( Property size: 2 iter: 2) 
// Class name index: 6675 
// 0x0004 (0x0070 - 0x006C)
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	unsigned long                                      bInWorldSpace : 1;                                		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bApplyOwnerScale : 1;                             		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1892 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleVelocity ( Property size: 2 iter: 2) 
// Class name index: 6677 
// 0x0048 (0x00B8 - 0x0070)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x0070 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x0094 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1894 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleVelocity_Seeded ( Property size: 1 iter: 1) 
// Class name index: 6679 
// 0x001C (0x00D4 - 0x00B8)
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                   		// 0x00B8 (0x001C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1896 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleVelocityCone ( Property size: 3 iter: 3) 
// Class name index: 6681 
// 0x0054 (0x00C4 - 0x0070)
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       Angle;                                            		// 0x0070 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Velocity;                                         		// 0x0094 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FVector                                     Direction;                                        		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1898 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleVelocityInheritParent ( Property size: 1 iter: 1) 
// Class name index: 6683 
// 0x0024 (0x0094 - 0x0070)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                            		// 0x0070 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1900 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleVelocityOverLifetime ( Property size: 2 iter: 2) 
// Class name index: 6685 
// 0x0028 (0x0098 - 0x0070)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                      		// 0x0070 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      Absolute : 1;                                     		// 0x0094 (0x0004) [0x0000000000000009] [0x00000001] ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1902 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleWorldForcesBase ( Property size: 0 iter: 0) 
// Class name index: 6687 
// 0x0000 (0x006C - 0x006C)
class UParticleModuleWorldForcesBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1904 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModulePhysicsVolumes ( Property size: 2 iter: 3) 
// Class name index: 6689 
// 0x0025 (0x0091 - 0x006C)
class UParticleModulePhysicsVolumes : public UParticleModuleWorldForcesBase
{
public:
	struct FRawDistributionFloat                       GlobalInfluence;                                  		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      LevelInfluenceType;                               		// 0x0090 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1906 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleWorldAttractor ( Property size: 2 iter: 2) 
// Class name index: 6691 
// 0x0028 (0x0094 - 0x006C)
class UParticleModuleWorldAttractor : public UParticleModuleWorldForcesBase
{
public:
	unsigned long                                      bParticleLifeRelative : 1;                        		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FRawDistributionFloat                       AttractorInfluence;                               		// 0x0070 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1908 ];

		return pClassPointer;
	};

};



// Class Engine.ParticleModuleEventSendToGame ( Property size: 0 iter: 1) 
// Class name index: 6693 
// 0x0000 (0x0060 - 0x0060)
class UParticleModuleEventSendToGame : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1910 ];

		return pClassPointer;
	};

	void DoEvent ( struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName );
};



// Class Engine.ParticleSystemReplay ( Property size: 2 iter: 4) 
// Class name index: 6695 
// 0x0014 (0x0074 - 0x0060)
class UParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                     		// 0x0060 (0x0004) [0x0000000000001001]              ( CPF_Edit | CPF_Native )
	TArray< struct FParticleSystemReplayFrame >        Frames;                                           		// 0x0064 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1912 ];

		return pClassPointer;
	};

};



// Class Engine.PhysXParticleSystem ( Property size: 31 iter: 33) 
// Class name index: 6697 
// 0x006C (0x00CC - 0x0060)
class UPhysXParticleSystem : public UObject
{
public:
	int                                                MaxParticles;                                     		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ParticleSpawnReserve;                             		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RBChannel;                                        		// 0x0068 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      SimulationMethod;                                 		// 0x0069 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PacketSizeMultiplier;                             		// 0x006A (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRBCollisionChannelContainer                RBCollideWithChannels;                            		// 0x006C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CollisionDistance;                                		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestitutionWithStaticShapes;                      		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestitutionWithDynamicShapes;                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionWithStaticShapes;                         		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionWithDynamicShapes;                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StaticFrictionWithStaticShapes;                   		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StaticFrictionWithDynamicShapes;                  		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDynamicCollision : 1;                            		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableGravity : 1;                              		// 0x008C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bStaticCollision : 1;                             		// 0x008C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTwoWayCollision : 1;                             		// 0x008C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDestroy : 1;                                     		// 0x008C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bSyncFailed : 1;                                  		// 0x008C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsInGame : 1;                                    		// 0x008C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	float                                              MaxMotionDistance;                                		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Damping;                                          		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ExternalAcceleration;                             		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestParticleDistance;                             		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestDensity;                                      		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KernelRadiusMultiplier;                           		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Stiffness;                                        		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Viscosity;                                        		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionResponseCoefficient;                     		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    CascadeScene;                                     		// 0x00BC (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    PSys;                                             		// 0x00C4 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1914 ];

		return pClassPointer;
	};

};



// Class Engine.KActor ( Property size: 25 iter: 39) 
// Class name index: 6699 
// 0x00D8 (0x0368 - 0x0290)
class AKActor : public ADynamicSMActor
{
public:
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x0290 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWakeOnLevelStart : 1;                            		// 0x0290 (0x0004) [0x0000000000000021] [0x00000002] ( CPF_Edit | CPF_Net )
	unsigned long                                      bCurrentSlide : 1;                                		// 0x0290 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSlideActive : 1;                                 		// 0x0290 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bEnableStayUprightSpring : 1;                     		// 0x0290 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bLimitMaxPhysicsVelocity : 1;                     		// 0x0290 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNeedsRBStateReplication : 1;                     		// 0x0290 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bDisableClientSidePawnInteractions : 1;           		// 0x0290 (0x0004) [0x0000000000000000] [0x00000080] 
	class UParticleSystemComponent*                    ImpactEffectComponent;                            		// 0x0294 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             ImpactSoundComponent;                             		// 0x029C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             ImpactSoundComponent2;                            		// 0x02A4 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LastImpactTime;                                   		// 0x02AC (0x0004) [0x0000000000000000]              
	struct FPhysEffectInfo                             ImpactEffectInfo;                                 		// 0x02B0 (0x0018) [0x0000000000000000]              
	class UParticleSystemComponent*                    SlideEffectComponent;                             		// 0x02C8 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             SlideSoundComponent;                              		// 0x02D0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LastSlideTime;                                    		// 0x02D8 (0x0004) [0x0000000000000000]              
	struct FPhysEffectInfo                             SlideEffectInfo;                                  		// 0x02DC (0x0018) [0x0000000000000000]              
	float                                              StayUprightTorqueFactor;                          		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightMaxTorque;                             		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxPhysicsVelocity;                               		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRigidBodyState                             RBState;                                          		// 0x0300 (0x0040) [0x0000000000001022]              ( CPF_Const | CPF_Net | CPF_Native )
	float                                              AngErrorAccumulator;                              		// 0x0340 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     ReplicatedDrawScale3D;                            		// 0x0344 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     InitialLocation;                                  		// 0x0350 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    InitialRotation;                                  		// 0x035C (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1916 ];

		return pClassPointer;
	};

	void Reset ( );
	void OnTeleport ( class USeqAct_Teleport* inAction );
	void OnToggle ( class USeqAct_Toggle* Action );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void eventApplyImpulse ( struct FVector ImpulseDir, float ImpulseMag, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class UClass* DamageType );
	void eventReplicatedEvent ( struct FName VarName );
	void eventSpawnedByKismet ( );
	void SetPhysicalCollisionProperties ( );
	void eventDestroyed ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void eventPostBeginPlay ( );
	void ResolveRBState ( );
	class UPhysicalMaterial* GetKActorPhysMaterial ( );
};



// Class Engine.KActorFromStatic ( Property size: 2 iter: 14) 
// Class name index: 6701 
// 0x000C (0x0374 - 0x0368)
class AKActorFromStatic : public AKActor
{
public:
	class AActor*                                      MyStaticMeshActor;                                		// 0x0368 (0x0008) [0x0000000000000000]              
	float                                              MaxImpulseSpeed;                                  		// 0x0370 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1918 ];

		return pClassPointer;
	};

	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void ReceiveImpulse ( class APawn* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventApplyImpulse ( struct FVector ImpulseDir, float ImpulseMag, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class UClass* DamageType );
	class AKActorFromStatic* MakeDynamic ( class UStaticMeshComponent* MovableMesh );
	void MakeStatic ( );
	void BecomeStatic ( );
	void eventOnWakeRBPhysics ( );
	void eventOnSleepRBPhysics ( );
	void DisablePrecomputedLighting ( );
};



// Class Engine.KActorSpawnable ( Property size: 2 iter: 6) 
// Class name index: 6703 
// 0x0004 (0x036C - 0x0368)
class AKActorSpawnable : public AKActor
{
public:
	unsigned long                                      bRecycleScaleToZero : 1;                          		// 0x0368 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bScalingToZero : 1;                               		// 0x0368 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1920 ];

		return pClassPointer;
	};

	void ResetComponents ( );
	void eventRecycleInternal ( );
	void Recycle ( );
	void Initialize ( );
};



// Class Engine.KAsset ( Property size: 6 iter: 14) 
// Class name index: 6705 
// 0x001C (0x025C - 0x0240)
class AKAsset : public AActor
{
public:
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x0240 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x0248 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWakeOnLevelStart : 1;                            		// 0x0248 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockPawns : 1;                                  		// 0x0248 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class USkeletalMesh*                               ReplicatedMesh;                                   		// 0x024C (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	class UPhysicsAsset*                               ReplicatedPhysAsset;                              		// 0x0254 (0x0008) [0x0000000000002020]              ( CPF_Net | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1922 ];

		return pClassPointer;
	};

	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnTeleport ( class USeqAct_Teleport* inAction );
	void OnToggle ( class USeqAct_Toggle* Action );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void eventReplicatedEvent ( struct FName VarName );
	void SetMeshAndPhysAsset ( class USkeletalMesh* NewMesh, class UPhysicsAsset* NewPhysAsset );
	void eventPostBeginPlay ( );
};



// Class Engine.Pawn ( Property size: 187 iter: 418) 
// Class name index: 6707 
// 0x0310 (0x0550 - 0x0240)
class APawn : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_Speaker;                       		// 0x0240 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              MaxStepHeight;                                    		// 0x0248 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxJumpHeight;                                    		// 0x024C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              WalkableFloorZ;                                   		// 0x0250 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LedgeCheckThreshold;                              		// 0x0254 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     PartialLedgeMoveDir;                              		// 0x0258 (0x000C) [0x0000000000000002]              ( CPF_Const )
	class AController*                                 Controller;                                       		// 0x0264 (0x0008) [0x0000000004000020]              ( CPF_Net | CPF_EditInline )
	class APawn*                                       NextPawn;                                         		// 0x026C (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              NetRelevancyTime;                                 		// 0x0274 (0x0004) [0x0000000000000000]              
	class APlayerController*                           LastRealViewer;                                   		// 0x0278 (0x0008) [0x0000000000000000]              
	class AActor*                                      LastViewer;                                       		// 0x0280 (0x0008) [0x0000000000000000]              
	unsigned long                                      bScriptTickSpecial : 1;                           		// 0x0288 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpAndOut : 1;                                    		// 0x0288 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsWalking : 1;                                   		// 0x0288 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bWantsToCrouch : 1;                               		// 0x0288 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsCrouched : 1;                                  		// 0x0288 (0x0004) [0x0000000000000022] [0x00000010] ( CPF_Const | CPF_Net )
	unsigned long                                      bTryToUncrouch : 1;                               		// 0x0288 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bCanCrouch : 1;                                   		// 0x0288 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bCrawler : 1;                                     		// 0x0288 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bReducedSpeed : 1;                                		// 0x0288 (0x0004) [0x0000000000000002] [0x00000100] ( CPF_Const )
	unsigned long                                      bJumpCapable : 1;                                 		// 0x0288 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bCanJump : 1;                                     		// 0x0288 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bCanWalk : 1;                                     		// 0x0288 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bCanSwim : 1;                                     		// 0x0288 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bCanFly : 1;                                      		// 0x0288 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bCanClimbLadders : 1;                             		// 0x0288 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bCanStrafe : 1;                                   		// 0x0288 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bAvoidLedges : 1;                                 		// 0x0288 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bStopAtLedges : 1;                                		// 0x0288 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bAllowLedgeOverhang : 1;                          		// 0x0288 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bPartiallyOverLedge : 1;                          		// 0x0288 (0x0004) [0x0000000000000002] [0x00080000] ( CPF_Const )
	unsigned long                                      bSimulateGravity : 1;                             		// 0x0288 (0x0004) [0x0000000000000022] [0x00100000] ( CPF_Const | CPF_Net )
	unsigned long                                      bIgnoreForces : 1;                                		// 0x0288 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bCanWalkOffLedges : 1;                            		// 0x0288 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bCanBeBaseForPawns : 1;                           		// 0x0288 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bSimGravityDisabled : 1;                          		// 0x0288 (0x0004) [0x0000000000000002] [0x01000000] ( CPF_Const )
	unsigned long                                      bDirectHitWall : 1;                               		// 0x0288 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bPushesRigidBodies : 1;                           		// 0x0288 (0x0004) [0x0000000000000002] [0x04000000] ( CPF_Const )
	unsigned long                                      bForceFloorCheck : 1;                             		// 0x0288 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bForceKeepAnchor : 1;                             		// 0x0288 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bCanMantle : 1;                                   		// 0x0288 (0x0004) [0x0000000000004000] [0x20000000] ( CPF_Config )
	unsigned long                                      bCanClimbUp : 1;                                  		// 0x0288 (0x0004) [0x0000000000004000] [0x40000000] ( CPF_Config )
	unsigned long                                      bCanClimbCeilings : 1;                            		// 0x0288 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bCanSwatTurn : 1;                                 		// 0x028C (0x0004) [0x0000000000004020] [0x00000001] ( CPF_Net | CPF_Config )
	unsigned long                                      bCanLeap : 1;                                     		// 0x028C (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bCanCoverSlip : 1;                                		// 0x028C (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bDisplayPathErrors : 1;                           		// 0x028C (0x0004) [0x0000000000044000] [0x00000008] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCanPickupInventory : 1;                          		// 0x028C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bAmbientCreature : 1;                             		// 0x028C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bLOSHearing : 1;                                  		// 0x028C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bMuffledHearing : 1;                              		// 0x028C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDontPossess : 1;                                 		// 0x028C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bRollToDesired : 1;                               		// 0x028C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bStationary : 1;                                  		// 0x028C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bCachedRelevant : 1;                              		// 0x028C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bNoWeaponFiring : 1;                              		// 0x028C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bModifyReachSpecCost : 1;                         		// 0x028C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bModifyNavPointDest : 1;                          		// 0x028C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bPathfindsAsVehicle : 1;                          		// 0x028C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bPrevBypassSimulatedClientPhysics : 1;            		// 0x028C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bRunPhysicsWithNoController : 1;                  		// 0x028C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bForceMaxAccel : 1;                               		// 0x028C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bLimitFallAccel : 1;                              		// 0x028C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bReplicateHealthToAll : 1;                        		// 0x028C (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bForceRMVelocity : 1;                             		// 0x028C (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bForceRegularVelocity : 1;                        		// 0x028C (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bPlayedDeath : 1;                                 		// 0x028C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bDesiredRotationSet : 1;                          		// 0x028C (0x0004) [0x0000000000000002] [0x01000000] ( CPF_Const )
	unsigned long                                      bLockDesiredRotation : 1;                         		// 0x028C (0x0004) [0x0000000000000002] [0x02000000] ( CPF_Const )
	unsigned long                                      bUnlockWhenReached : 1;                           		// 0x028C (0x0004) [0x0000000000000002] [0x04000000] ( CPF_Const )
	unsigned long                                      bNeedsBaseTickedFirst : 1;                        		// 0x028C (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bUsedByMatinee : 1;                               		// 0x028C (0x0004) [0x0000000000002020] [0x10000000] ( CPF_Net | CPF_Transient )
	unsigned long                                      bRootMotionFromInterpCurve : 1;                   		// 0x028C (0x0004) [0x0000000000000020] [0x20000000] ( CPF_Net )
	unsigned long                                      bDebugShowCameraLocation : 1;                     		// 0x028C (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      bFastAttachedMove : 1;                            		// 0x028C (0x0004) [0x0000000000000021] [0x80000000] ( CPF_Edit | CPF_Net )
	unsigned char                                      WalkingPhysics;                                   		// 0x0290 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PathSearchType;                                   		// 0x0291 (0x0001) [0x0000000000000000]              
	unsigned char                                      RemoteViewPitch;                                  		// 0x0292 (0x0001) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	unsigned char                                      FlashCount;                                       		// 0x0293 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      FiringMode;                                       		// 0x0294 (0x0001) [0x0000000000000020]              ( CPF_Net )
	float                                              UncrouchTime;                                     		// 0x0298 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CrouchHeight;                                     		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              CrouchRadius;                                     		// 0x02A0 (0x0004) [0x0000000000000000]              
	int                                                FullHeight;                                       		// 0x02A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NonPreferredVehiclePathMultiplier;                		// 0x02A8 (0x0004) [0x0000000000000000]              
	class UPathConstraint*                             PathConstraintList;                               		// 0x02AC (0x0008) [0x0000000000000000]              
	class UPathGoalEvaluator*                          PathGoalList;                                     		// 0x02B4 (0x0008) [0x0000000000000000]              
	float                                              DesiredSpeed;                                     		// 0x02BC (0x0004) [0x0000000000000000]              
	float                                              MaxDesiredSpeed;                                  		// 0x02C0 (0x0004) [0x0000000000000000]              
	float                                              HearingThreshold;                                 		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Alertness;                                        		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SightRadius;                                      		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PeripheralVision;                                 		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AvgPhysicsTime;                                   		// 0x02D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Mass;                                             		// 0x02D8 (0x0004) [0x0000000000000000]              
	float                                              Buoyancy;                                         		// 0x02DC (0x0004) [0x0000000000000000]              
	float                                              MeleeRange;                                       		// 0x02E0 (0x0004) [0x0000000000000000]              
	class ANavigationPoint*                            Anchor;                                           		// 0x02E4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                AnchorItem;                                       		// 0x02EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            LastAnchor;                                       		// 0x02F0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              FindAnchorFailedTime;                             		// 0x02F8 (0x0004) [0x0000000000000000]              
	float                                              LastValidAnchorTime;                              		// 0x02FC (0x0004) [0x0000000000000000]              
	float                                              DestinationOffset;                                		// 0x0300 (0x0004) [0x0000000000000000]              
	float                                              NextPathRadius;                                   		// 0x0304 (0x0004) [0x0000000000000000]              
	struct FVector                                     SerpentineDir;                                    		// 0x0308 (0x000C) [0x0000000000000000]              
	float                                              SerpentineDist;                                   		// 0x0314 (0x0004) [0x0000000000000000]              
	float                                              SerpentineTime;                                   		// 0x0318 (0x0004) [0x0000000000000000]              
	float                                              SpawnTime;                                        		// 0x031C (0x0004) [0x0000000000000000]              
	int                                                MaxPitchLimit;                                    		// 0x0320 (0x0004) [0x0000000000000000]              
	float                                              GroundSpeed;                                      		// 0x0324 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              WaterSpeed;                                       		// 0x0328 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              AirSpeed;                                         		// 0x032C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              LadderSpeed;                                      		// 0x0330 (0x0004) [0x0000000000000000]              
	float                                              AccelRate;                                        		// 0x0334 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              JumpZ;                                            		// 0x0338 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              OutofWaterZ;                                      		// 0x033C (0x0004) [0x0000000000000000]              
	float                                              MaxOutOfWaterStepHeight;                          		// 0x0340 (0x0004) [0x0000000000000000]              
	float                                              AirControl;                                       		// 0x0344 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              WalkingPct;                                       		// 0x0348 (0x0004) [0x0000000000000000]              
	float                                              MovementSpeedModifier;                            		// 0x034C (0x0004) [0x0000000000000000]              
	float                                              CrouchedPct;                                      		// 0x0350 (0x0004) [0x0000000000000000]              
	float                                              MaxFallSpeed;                                     		// 0x0354 (0x0004) [0x0000000000000000]              
	float                                              AIMaxFallSpeedFactor;                             		// 0x0358 (0x0004) [0x0000000000000000]              
	float                                              BaseEyeHeight;                                    		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EyeHeight;                                        		// 0x0360 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Floor;                                            		// 0x0364 (0x000C) [0x0000000000000000]              
	float                                              SplashTime;                                       		// 0x0370 (0x0004) [0x0000000000000000]              
	class APhysicsVolume*                              HeadVolume;                                       		// 0x0374 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                Health;                                           		// 0x037C (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                HealthMax;                                        		// 0x0380 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              BreathTime;                                       		// 0x0384 (0x0004) [0x0000000000000000]              
	float                                              UnderWaterTime;                                   		// 0x0388 (0x0004) [0x0000000000000000]              
	float                                              LastPainTime;                                     		// 0x038C (0x0004) [0x0000000000000000]              
	float                                              KismetDeathDelayTime;                             		// 0x0390 (0x0004) [0x0000000000000000]              
	struct FVector                                     RMVelocity;                                       		// 0x0394 (0x000C) [0x0000000000000000]              
	struct FVector                                     noise1spot;                                       		// 0x03A0 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              noise1time;                                       		// 0x03AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       noise1other;                                      		// 0x03B0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              noise1loudness;                                   		// 0x03B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     noise2spot;                                       		// 0x03BC (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              noise2time;                                       		// 0x03C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       noise2other;                                      		// 0x03CC (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              noise2loudness;                                   		// 0x03D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SoundDampening;                                   		// 0x03D8 (0x0004) [0x0000000000000000]              
	float                                              DamageScaling;                                    		// 0x03DC (0x0004) [0x0000000000000000]              
	struct FString                                     MenuName;                                         		// 0x03E0 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UClass*                                      ControllerClass;                                  		// 0x03F0 (0x0008) [0x0000000000000000]              
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                            		// 0x03F8 (0x0008) [0x0000000004000020]              ( CPF_Net | CPF_EditInline )
	class ALadderVolume*                               OnLadder;                                         		// 0x0400 (0x0008) [0x0000000000000000]              
	struct FName                                       LandMovementState;                                		// 0x0408 (0x0008) [0x0000000000000000]              
	struct FName                                       WaterMovementState;                               		// 0x0410 (0x0008) [0x0000000000000000]              
	class APlayerStart*                                LastStartSpot;                                    		// 0x0418 (0x0008) [0x0000000000000000]              
	float                                              LastStartTime;                                    		// 0x0420 (0x0004) [0x0000000000000000]              
	struct FVector                                     TakeHitLocation;                                  		// 0x0424 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      HitDamageType;                                    		// 0x0430 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     TearOffMomentum;                                  		// 0x0438 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x0444 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x044C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RBPushRadius;                                     		// 0x0454 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RBPushStrength;                                   		// 0x0458 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AVehicle*                                    DrivenVehicle;                                    		// 0x045C (0x0008) [0x0000000000000020]              ( CPF_Net )
	float                                              AlwaysRelevantDistanceSquared;                    		// 0x0464 (0x0004) [0x0000000000000000]              
	float                                              VehicleCheckRadius;                               		// 0x0468 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AController*                                 LastHitBy;                                        		// 0x046C (0x0008) [0x0000000000000000]              
	float                                              ViewPitchMin;                                     		// 0x0474 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ViewPitchMax;                                     		// 0x0478 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AllowedYawError;                                  		// 0x047C (0x0004) [0x0000000000000000]              
	struct FRotator                                    DesiredRotation;                                  		// 0x0480 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UClass*                                      InventoryManagerClass;                            		// 0x048C (0x0008) [0x0000000000000000]              
	class AInventoryManager*                           InvManager;                                       		// 0x0494 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class AWeapon*                                     Weapon;                                           		// 0x049C (0x0008) [0x0000000000000000]              
	struct FVector                                     FlashLocation;                                    		// 0x04A4 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     LastFiringFlashLocation;                          		// 0x04B0 (0x000C) [0x0000000000000000]              
	int                                                ShotCount;                                        		// 0x04BC (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         PreRagdollCollisionComponent;                     		// 0x04C0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class URB_BodyInstance*                            PhysicsPushBody;                                  		// 0x04C8 (0x0008) [0x0000000000000000]              
	int                                                FailedLandingCount;                               		// 0x04D0 (0x0004) [0x0000000000000000]              
	TArray< class UAnimNodeSlot* >                     SlotNodes;                                        		// 0x04D4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< class UInterpGroup* >                      InterpGroupList;                                  		// 0x04E4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UAudioComponent*                             FacialAudioComp;                                  		// 0x04F4 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   MIC_PawnMat;                                      		// 0x04FC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   MIC_PawnHair;                                     		// 0x0504 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FScalarParameterInterpStruct >      ScalarParameterInterpArray;                       		// 0x050C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FRootMotionCurve                            RootMotionInterpCurve;                            		// 0x051C (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              RootMotionInterpRate;                             		// 0x053C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              RootMotionInterpCurrentTime;                      		// 0x0540 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     RootMotionInterpCurveLastValue;                   		// 0x0544 (0x000C) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1924 ];

		return pClassPointer;
	};

	void OnSetVelocity ( class USeqAct_SetVelocity* Action );
	void eventSpeak ( class USoundCue* Cue );
	void SetScalarParameterInterp ( struct FScalarParameterInterpStruct* ScalarParameterInterp );
	void SetRootMotionInterpCurrentTime ( float inTime, float DeltaTime, unsigned long bUpdateSkelPose );
	void SetCinematicMode ( unsigned long bInCinematicMode );
	void ZeroMovementVariables ( );
	void ClearPathStep ( );
	void DrawPathStep ( class UCanvas* C );
	void IncrementPathChild ( int Cnt, class UCanvas* C );
	void IncrementPathStep ( int Cnt, class UCanvas* C );
	class UPathGoalEvaluator* CreatePathGoalEvaluator ( class UClass* GoalEvalClass );
	class UPathConstraint* CreatePathConstraint ( class UClass* ConstraintClass );
	void AddGoalEvaluator ( class UPathGoalEvaluator* Evaluator );
	void AddPathConstraint ( class UPathConstraint* Constraint );
	void ClearConstraints ( );
	void eventSoakPause ( );
	void eventBecomeViewTarget ( class APlayerController* PC );
	void eventMessagePlayer ( struct FString msg );
	bool HandleTeleport ( TArray< class UObject* > DestList, unsigned long bUpdateRotation, unsigned long bCheckOverlap, float TeleportDistance, TArray< class AVolume* > TeleportVolumes, int PreferredDestIndex );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	float GetDamageScaling ( );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void eventSpawnedByKismet ( );
	bool IsStationary ( );
	struct FVector GetCollisionExtent ( );
	float GetCollisionHeight ( );
	float GetCollisionRadius ( );
	bool CheatFly ( );
	bool CheatGhost ( );
	bool CheatWalk ( );
	void PlayWeaponSwitch ( class AWeapon* OldWeapon, class AWeapon* NewWeapon );
	void SetActiveWeapon ( class AWeapon* NewWeapon );
	void TossInventory ( class AInventory* Inv, struct FVector ForceVelocity );
	void ThrowActiveWeapon ( unsigned long bDestroyWeap );
	void DrawHUD ( class AHUD* H );
	class AInventory* FindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass );
	class AInventory* eventCreateInventory ( class UClass* NewInvClass, unsigned long bDoNotActivate );
	void AddDefaultInventory ( );
	void eventStopDriving ( class AVehicle* V );
	void eventStartDriving ( class AVehicle* V );
	bool CanThrowWeapon ( );
	void Suicide ( );
	class AVehicle* GetVehicleBase ( );
	void PlayLanded ( float ImpactVel );
	bool CannotJumpNow ( );
	void eventPlayFootStepSound ( int FootDown );
	void eventTornOff ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void SetDyingPhysics ( );
	void TurnOff ( );
	void PlayHit ( float Damage, class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo );
	void PlayDyingSound ( );
	bool DoJump ( unsigned long bUpdating );
	bool CheckWaterJump ( struct FVector* WallNormal );
	void TakeDrowningDamage ( );
	void eventBreathTimer ( );
	bool TouchingWaterVolume ( );
	void eventHeadVolumeChange ( class APhysicsVolume* newHeadVolume );
	void eventTickSpecial ( float DeltaTime );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventFalling ( );
	void DelayTriggerDeath ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void ThrowWeaponOnDeath ( );
	bool eventIsSameTeam ( class APawn* Other );
	class ATeamInfo* GetTeam ( );
	unsigned char GetTeamNum ( );
	void eventTakeDamage ( int Damage, class AController* InstigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	class AController* SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType );
	void NotifyTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, class AActor* DamageCauser );
	bool eventTakeRadiusDamageOnBones ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, TArray< struct FName > Bones );
	void PruneDamagedBoneList ( TArray< struct FName >* Bones );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void AdjustDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser, int* InDamage, struct FVector* Momentum );
	void SetMovementPhysics ( );
	void Gasp ( );
	void OnGiveInventory ( class USeqAct_GiveInventory* inAction );
	void OnAssignController ( class USeqAct_AssignController* inAction );
	void eventReceivedNewEvent ( class USequenceEvent* Evt );
	void SpawnDefaultController ( );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	void eventDestroyed ( );
	void DetachFromController ( unsigned long bDestroyController );
	void CrushedBy ( class APawn* OtherPawn );
	bool CanBeBaseForPawn ( class APawn* aPawn );
	void eventBaseChange ( );
	void eventStuckOnPawn ( class APawn* OtherPawn );
	void JumpOffPawn ( );
	void gibbedBy ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	void eventUpdatePawnRotation ( struct FRotator NewRotation );
	void ClientSetRotation ( struct FRotator NewRotation );
	void ClientRestart ( );
	void Restart ( );
	void TakeFallingDamage ( );
	void KilledBy ( class APawn* EventInstigator );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void eventStartCrouch ( float HeightAdjust );
	void eventEndCrouch ( float HeightAdjust );
	void ShouldCrouch ( unsigned long bCrouch );
	void UnCrouch ( );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void eventClientMessage ( struct FString S, struct FName Type );
	void HandlePickup ( class AInventory* Inv );
	bool LineOfSightTo ( class AActor* Other );
	void SetMoveTarget ( class AActor* NewTarget );
	bool InGodMode ( );
	void SetViewRotation ( struct FRotator NewRotation );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	bool eventInFreeCam ( );
	struct FRotator eventGetBaseAimRotation ( );
	struct FVector eventGetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	struct FVector eventGetPawnViewLocation ( );
	struct FRotator eventGetViewRotation ( );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_Rotation );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	bool IsFirstPerson ( );
	bool IsPlayerPawn ( );
	bool IsLocallyControlled ( );
	bool IsHumanControlled ( class AController* PawnController );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void ClimbLadder ( class ALadderVolume* L );
	void EndClimbLadder ( class ALadderVolume* OldLadder );
	bool CanSplash ( );
	void eventSetWalking ( unsigned long bNewIsWalking );
	float RangedAttackTime ( );
	bool RecommendLongRangedAttack ( );
	bool CanGrabLadder ( );
	void DropToGround ( );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	void UnPossessed ( );
	void UpdateControllerOnPossess ( unsigned long bVehicleTransition );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void NotifyTeamChanged ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	struct FString GetHumanReadableName ( );
	bool NeedToTurn ( struct FVector targ );
	bool IsFiring ( );
	bool HasRangedAttack ( );
	bool FireOnRelease ( );
	bool TooCloseToAttack ( class AActor* Other );
	bool CanAttack ( class AActor* Other );
	bool BotFire ( unsigned long bFinished );
	void WeaponStoppedFiring ( class AWeapon* InWeapon, unsigned long bViaReplication );
	void WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation );
	void FlashLocationUpdated ( class AWeapon* InWeapon, struct FVector InFlashLocation, unsigned long bViaReplication );
	void ClearFlashLocation ( class AWeapon* InWeapon );
	void SetFlashLocation ( class AWeapon* InWeapon, unsigned char InFiringMode, struct FVector NewLoc );
	void ClearFlashCount ( class AWeapon* InWeapon );
	void FlashCountUpdated ( class AWeapon* InWeapon, unsigned char InFlashCount, unsigned long bViaReplication );
	void IncrementFlashCount ( class AWeapon* InWeapon, unsigned char InFiringMode );
	void FiringModeUpdated ( class AWeapon* InWeapon, unsigned char InFiringMode, unsigned long bViaReplication );
	void SetFiringMode ( class AWeapon* InWeapon, unsigned char InFiringMode );
	unsigned char GetWeaponFiringMode ( class AWeapon* InWeapon );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	bool StopFiring ( );
	void Reset ( );
	void PlayerChangedTeam ( );
	void SetBaseEyeheight ( );
	bool eventSpecialMoveThruEdge ( unsigned char EdgeType, int Dir, struct FVector MoveStart, struct FVector MoveDest, class AActor* RelActor, int RelItem, class UNavigationHandle* NavHandle );
	bool SpecialMoveTo ( class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next );
	bool TermRagdoll ( );
	bool InitRagdoll ( );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	bool ReachedDesiredRotation ( );
	void SetPushesRigidBodies ( unsigned long NewPush );
	void ForceCrouch ( );
	bool ReachedPoint ( struct FVector Point, class AActor* NewAnchor );
	bool ReachedDestination ( class AActor* Goal );
	class ANavigationPoint* GetBestAnchor ( class AActor* TestActor, struct FVector TestLocation, unsigned long bStartPoint, unsigned long bOnlyCheckVisible, float* out_Dist );
	void SetAnchor ( class ANavigationPoint* NewAnchor );
	void SetRemoteViewPitch ( int NewRemoteViewPitch );
	bool IsInvisible ( );
	bool IsValidEnemyTargetFor ( class APlayerReplicationInfo* PRI, unsigned long bNoPRIisEnemy );
	float GetFallDuration ( );
	bool SuggestJumpVelocity ( struct FVector Destination, struct FVector Start, unsigned long bRequireFallLanding, struct FVector* JumpVelocity );
	bool ValidAnchor ( );
	struct FVector AdjustDestination ( class AActor* GoalActor, struct FVector Dest );
	bool IsAliveAndWell ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	void FaceFXAudioFinished ( class UAudioComponent* AC );
	void OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction );
	bool CanActorPlayFaceFXAnim ( );
	bool IsActorPlayingFaceFXAnim ( );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay );
	void eventMAT_FinishAIGroup ( );
	void eventMAT_BeginAIGroup ( struct FVector StartLoc, struct FRotator StartRot );
	void FinishAIGroup ( );
	void BeginAIGroup ( );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void MAT_SetSkelControlStrength ( struct FName SkelControlName, float ControlStrength );
	void MAT_SetSkelControlScale ( struct FName SkelControlName, float Scale );
	void MAT_SetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void MAT_SetAnimWeights ( TArray< struct FAnimSlotInfo > SlotInfos );
	void MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping, unsigned long bEnableRootMotion );
	void MAT_FinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void MAT_BeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	bool eventRestoreAnimSetsToDefault ( );
	void eventAnimSetListUpdated ( );
	void AddAnimSets ( TArray< class UAnimSet* >* CustomAnimSets );
	void eventBuildScriptAnimSetList ( );
	void UpdateAnimSetList ( );
	void ClearAnimNodes ( );
	void eventCacheAnimNodes ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	bool IsDesiredRotationLocked ( );
	bool IsDesiredRotationInUse ( );
	void CheckDesiredRotation ( );
	void ResetDesiredRotation ( );
	void LockDesiredRotation ( unsigned long Lock, unsigned long InUnlockWhenReached );
	bool SetDesiredRotation ( struct FRotator TargetDesiredRotation, unsigned long InLockDesiredRotation, unsigned long InUnlockWhenReached, float InterpolationTime, unsigned long bResetRotationRate );
	bool PickWallAdjust ( struct FVector WallHitNormal, class AActor* HitActor );
};



// Class Engine.Vehicle ( Property size: 35 iter: 87) 
// Class name index: 6709 
// 0x0080 (0x05D0 - 0x0550)
class AVehicle : public APawn
{
public:
	class APawn*                                       Driver;                                           		// 0x0550 (0x0008) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bDriving : 1;                                     		// 0x0558 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bDriverIsVisible : 1;                             		// 0x0558 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAttachDriver : 1;                                		// 0x0558 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bTurnInPlace : 1;                                 		// 0x0558 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSeparateTurretFocus : 1;                         		// 0x0558 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bFollowLookDir : 1;                               		// 0x0558 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bHasHandbrake : 1;                                		// 0x0558 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bScriptedRise : 1;                                		// 0x0558 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bDuckObstacles : 1;                               		// 0x0558 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bAvoidReversing : 1;                              		// 0x0558 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bRetryPathfindingWithDriver : 1;                  		// 0x0558 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIgnoreStallZ : 1;                                		// 0x0558 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bDoExtraNetRelevancyTraces : 1;                   		// 0x0558 (0x0004) [0x0000000000000000] [0x00001000] 
	TArray< struct FVector >                           ExitPositions;                                    		// 0x055C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ExitRadius;                                       		// 0x056C (0x0004) [0x0000000000000000]              
	struct FVector                                     ExitOffset;                                       		// 0x0570 (0x000C) [0x0000000000000000]              
	float                                              Steering;                                         		// 0x057C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Throttle;                                         		// 0x0580 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Rise;                                             		// 0x0584 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetLocationAdjustment;                         		// 0x0588 (0x000C) [0x0000000000000000]              
	float                                              DriverDamageMult;                                 		// 0x0594 (0x0004) [0x0000000000000000]              
	float                                              MomentumMult;                                     		// 0x0598 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      CrushedDamageType;                                		// 0x059C (0x0008) [0x0000000000000000]              
	float                                              MinCrushSpeed;                                    		// 0x05A4 (0x0004) [0x0000000000000000]              
	float                                              ForceCrushPenetration;                            		// 0x05A8 (0x0004) [0x0000000000000000]              
	unsigned char                                      StuckCount;                                       		// 0x05AC (0x0001) [0x0000000000000000]              
	float                                              ThrottleTime;                                     		// 0x05B0 (0x0004) [0x0000000000000000]              
	float                                              StuckTime;                                        		// 0x05B4 (0x0004) [0x0000000000000000]              
	float                                              OldSteering;                                      		// 0x05B8 (0x0004) [0x0000000000000000]              
	float                                              OnlySteeringStartTime;                            		// 0x05BC (0x0004) [0x0000000000000000]              
	float                                              OldThrottle;                                      		// 0x05C0 (0x0004) [0x0000000000000000]              
	float                                              AIMoveCheckTime;                                  		// 0x05C4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              VehicleMovingTime;                                		// 0x05C8 (0x0004) [0x0000000000000000]              
	float                                              TurnTime;                                         		// 0x05CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1926 ];

		return pClassPointer;
	};

	void ZeroMovementVariables ( );
	void NotifyDriverTakeHit ( class AController* InstigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void eventReplicatedEvent ( struct FName VarName );
	void DrivingStatusChanged ( );
	void SetDriving ( unsigned long B );
	struct FVector eventGetEntryLocation ( );
	void CrushedBy ( class APawn* OtherPawn );
	void PancakeOther ( class APawn* Other );
	bool eventEncroachingOn ( class AActor* Other );
	class AController* GetCollisionDamageInstigator ( );
	void eventEncroachedBy ( class AActor* Other );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void DriverDied ( class UClass* DamageType );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void ThrowActiveWeapon ( unsigned long bDestroyWeap );
	void AdjustDriverDamage ( class AController* InstigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	class AController* SetKillInstigator ( class AController* InstigatedBy, class UClass* DamageType );
	void UnPossessed ( );
	bool TryExitPos ( class APawn* ExitingDriver, struct FVector ExitPos, unsigned long bMustFindGround );
	bool FindAutoExit ( class APawn* ExitingDriver );
	bool PlaceExitingDriver ( class APawn* ExitingDriver );
	void DriverLeft ( );
	void SetInputs ( float InForward, float InStrafe, float InUp );
	bool eventDriverLeave ( unsigned long bForceLeave );
	struct FRotator GetExitRotation ( class AController* C );
	bool eventContinueOnFoot ( );
	void DetachDriver ( class APawn* P );
	void AttachDriver ( class APawn* P );
	void EntryAnnouncement ( class AController* C );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	bool DriverEnter ( class APawn* P );
	bool TryToDrive ( class APawn* P );
	bool AnySeatAvailable ( );
	bool CanEnterVehicle ( class APawn* P );
	void Destroyed_HandleDriver ( );
	void eventDestroyed ( );
	bool CheatFly ( );
	bool CheatGhost ( );
	bool CheatWalk ( );
	void eventPostBeginPlay ( );
	void SetBaseEyeheight ( );
	void PlayerChangedTeam ( );
	void DriverRadiusDamage ( float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, struct FVector HitLocation, class AActor* DamageCauser, float DamageFalloffExponent );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	float GetMaxRiseForce ( );
	void Suicide ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void NotifyTeamChanged ( );
};



// Class Engine.SVehicle ( Property size: 56 iter: 89) 
// Class name index: 6711 
// 0x0148 (0x0718 - 0x05D0)
class ASVehicle : public AVehicle
{
public:
	class USVehicleSimBase*                            SimObj;                                           		// 0x05D0 (0x0008) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	TArray< class USVehicleWheel* >                    Wheels;                                           		// 0x05D8 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     COMOffset;                                        		// 0x05E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     InertiaTensorMultiplier;                          		// 0x05F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStayUpright : 1;                                 		// 0x0600 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSuspensionAxis : 1;                           		// 0x0600 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUpdateWheelShapes : 1;                           		// 0x0600 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bVehicleOnGround : 1;                             		// 0x0600 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bVehicleOnWater : 1;                              		// 0x0600 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bIsInverted : 1;                                  		// 0x0600 (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bChassisTouchingGround : 1;                       		// 0x0600 (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bWasChassisTouchingGroundLastTick : 1;            		// 0x0600 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bCanFlip : 1;                                     		// 0x0600 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bFlipRight : 1;                                   		// 0x0600 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIsUprighting : 1;                                		// 0x0600 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bOutputHandbrake : 1;                             		// 0x0600 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bHoldingDownHandbrake : 1;                        		// 0x0600 (0x0004) [0x0000000000000000] [0x00001000] 
	float                                              StayUprightRollResistAngle;                       		// 0x0604 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightPitchResistAngle;                      		// 0x0608 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightStiffness;                             		// 0x060C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightDamping;                               		// 0x0610 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class URB_StayUprightSetup*                        StayUprightConstraintSetup;                       		// 0x0614 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class URB_ConstraintInstance*                      StayUprightConstraintInstance;                    		// 0x061C (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              HeavySuspensionShiftPercent;                      		// 0x0624 (0x0004) [0x0000000000000000]              
	float                                              MaxSpeed;                                         		// 0x0628 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              MaxAngularVelocity;                               		// 0x062C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeOffGround;                                    		// 0x0630 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              UprightLiftStrength;                              		// 0x0634 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UprightTorqueStrength;                            		// 0x0638 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UprightTime;                                      		// 0x063C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UprightStartTime;                                 		// 0x0640 (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             EngineSound;                                      		// 0x0644 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             SquealSound;                                      		// 0x064C (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class USoundCue*                                   CollisionSound;                                   		// 0x0654 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   EnterVehicleSound;                                		// 0x065C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ExitVehicleSound;                                 		// 0x0664 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionIntervalSecs;                            		// 0x066C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SquealThreshold;                                  		// 0x0670 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SquealLatThreshold;                               		// 0x0674 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LatAngleVolumeMult;                               		// 0x0678 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EngineStartOffsetSecs;                            		// 0x067C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EngineStopOffsetSecs;                             		// 0x0680 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LastCollisionSoundTime;                           		// 0x0684 (0x0004) [0x0000000000000000]              
	float                                              OutputBrake;                                      		// 0x0688 (0x0004) [0x0000000000000000]              
	float                                              OutputGas;                                        		// 0x068C (0x0004) [0x0000000000000000]              
	float                                              OutputSteering;                                   		// 0x0690 (0x0004) [0x0000000000000000]              
	float                                              OutputRise;                                       		// 0x0694 (0x0004) [0x0000000000000000]              
	float                                              ForwardVel;                                       		// 0x0698 (0x0004) [0x0000000000000000]              
	int                                                NumPoweredWheels;                                 		// 0x069C (0x0004) [0x0000000000000000]              
	struct FVector                                     BaseOffset;                                       		// 0x06A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              CamDist;                                          		// 0x06AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DriverViewPitch;                                  		// 0x06B0 (0x0004) [0x0000000000000000]              
	int                                                DriverViewYaw;                                    		// 0x06B4 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x06B8 (0x0008) MISSED OFFSET
	struct FVehicleState                               VState;                                           		// 0x06C0 (0x0050) [0x0000000000001022]              ( CPF_Const | CPF_Net | CPF_Native )
	float                                              AngErrorAccumulator;                              		// 0x0710 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              RadialImpulseScaling;                             		// 0x0714 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1928 ];

		return pClassPointer;
	};

	void GetSVehicleDebug ( TArray< struct FString >* DebugInfo );
	float HermiteEval ( float Slip );
	void DisplayWheelsDebug ( class AHUD* HUD, float YL );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	void eventSuspensionHeavyShift ( float Delta );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void DrivingStatusChanged ( );
	void VehiclePlayExitSound ( );
	void VehiclePlayEnterSound ( );
	void StopEngineSoundTimed ( );
	void StopEngineSound ( );
	void StartEngineSoundTimed ( );
	void StartEngineSound ( );
	bool HasWheelsOnGround ( );
	bool TryToDrive ( class APawn* P );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void InitVehicleRagdoll ( class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, struct FVector ActorMove, unsigned long bClearAnimTree );
	void TakeRadiusDamage ( class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent );
	void StopVehicleSounds ( );
	void TurnOff ( );
	void eventDestroyed ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventPostBeginPlay ( );
	void SetWheelCollision ( int WheelNum, unsigned long bCollision );
	bool IsSleeping ( );
	void AddTorque ( struct FVector Torque );
	void AddImpulse ( struct FVector Impulse );
	void AddForce ( struct FVector Force );
};



// Class Engine.RB_ConstraintActor ( Property size: 9 iter: 15) 
// Class name index: 6713 
// 0x0034 (0x0274 - 0x0240)
class ARB_ConstraintActor : public ARigidBodyBase
{
public:
	class AActor*                                      ConstraintActor1;                                 		// 0x0240 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      ConstraintActor2;                                 		// 0x0248 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class URB_ConstraintSetup*                         ConstraintSetup;                                  		// 0x0250 (0x0008) [0x0000000006400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline )
	class URB_ConstraintInstance*                      ConstraintInstance;                               		// 0x0258 (0x0008) [0x0000000006400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline )
	unsigned long                                      bDisableCollision : 1;                            		// 0x0260 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateActor1RefFrame : 1;                        		// 0x0260 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUpdateActor2RefFrame : 1;                        		// 0x0260 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class AActor*                                      PulleyPivotActor1;                                		// 0x0264 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      PulleyPivotActor2;                                		// 0x026C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1930 ];

		return pClassPointer;
	};

	void OnToggleConstraintDrive ( class USeqAct_ToggleConstraintDrive* Action );
	void OnToggle ( class USeqAct_Toggle* Action );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void TermConstraint ( );
	void InitConstraint ( class AActor* Actor1, class AActor* Actor2, struct FName Actor1Bone, struct FName Actor2Bone, float BreakThreshold );
	void SetDisableCollision ( unsigned long NewDisableCollision );
};



// Class Engine.RB_LineImpulseActor ( Property size: 7 iter: 10) 
// Class name index: 6715 
// 0x0015 (0x0255 - 0x0240)
class ARB_LineImpulseActor : public ARigidBodyBase
{
public:
	float                                              ImpulseStrength;                                  		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseRange;                                     		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelChange : 1;                                   		// 0x0248 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStopAtFirstHit : 1;                              		// 0x0248 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCauseFracture : 1;                               		// 0x0248 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class UArrowComponent*                             Arrow;                                            		// 0x024C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned char                                      ImpulseCount;                                     		// 0x0254 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1932 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void OnToggle ( class USeqAct_Toggle* inAction );
	void FireLineImpulse ( );
};



// Class Engine.RB_RadialImpulseActor ( Property size: 3 iter: 5) 
// Class name index: 6717 
// 0x0011 (0x0251 - 0x0240)
class ARB_RadialImpulseActor : public ARigidBodyBase
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x0240 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class URB_RadialImpulseComponent*                  ImpulseComponent;                                 		// 0x0248 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned char                                      ImpulseCount;                                     		// 0x0250 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1934 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void OnToggle ( class USeqAct_Toggle* inAction );
};



// Class Engine.RB_Thruster ( Property size: 2 iter: 3) 
// Class name index: 6719 
// 0x0008 (0x0248 - 0x0240)
class ARB_Thruster : public ARigidBodyBase
{
public:
	unsigned long                                      bThrustEnabled : 1;                               		// 0x0240 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ThrustStrength;                                   		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1936 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};



// Class Engine.WorldAttractor ( Property size: 10 iter: 13) 
// Class name index: 6721 
// 0x00F0 (0x0330 - 0x0240)
class AWorldAttractor : public AActor
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0240 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              LoopDuration;                                     		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentTime;                                      		// 0x0248 (0x0004) [0x0000000000000000]              
	unsigned char                                      FalloffType;                                      		// 0x024C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FMatineeRawDistributionFloat                FalloffExponent;                                  		// 0x0250 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FMatineeRawDistributionFloat                Range;                                            		// 0x027C (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FMatineeRawDistributionFloat                Strength;                                         		// 0x02A8 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              CollisionRadius;                                  		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FMatineeRawDistributionFloat                DragCoefficient;                                  		// 0x02D8 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FMatineeRawDistributionFloat                DragRadius;                                       		// 0x0304 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1938 ];

		return pClassPointer;
	};

	void OnSetWorldAttractorParam ( class USeqAct_SetWorldAttractorParam* Action );
};



// Class Engine.RB_ConstraintDrawComponent ( Property size: 1 iter: 1) 
// Class name index: 6723 
// 0x0008 (0x0240 - 0x0238)
class URB_ConstraintDrawComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          LimitMaterial;                                    		// 0x0238 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1940 ];

		return pClassPointer;
	};

};



// Class Engine.RB_RadialImpulseComponent ( Property size: 6 iter: 7) 
// Class name index: 6725 
// 0x0018 (0x0250 - 0x0238)
class URB_RadialImpulseComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      ImpulseFalloff;                                   		// 0x0238 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseStrength;                                  		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseRadius;                                    		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelChange : 1;                                   		// 0x0244 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCauseFracture : 1;                               		// 0x0244 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UDrawSphereComponent*                        PreviewSphere;                                    		// 0x0248 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1942 ];

		return pClassPointer;
	};

	void FireImpulse ( struct FVector Origin );
};



// Class Engine.RB_Handle ( Property size: 17 iter: 24) 
// Class name index: 6727 
// 0x0077 (0x00FC - 0x0085)
class URB_Handle : public UActorComponent
{
public:
	class UPrimitiveComponent*                         GrabbedComponent;                                 		// 0x0088 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       GrabbedBoneName;                                  		// 0x0090 (0x0008) [0x0000000000000000]              
	int                                                SceneIndex;                                       		// 0x0098 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bInHardware : 1;                                  		// 0x009C (0x0004) [0x0000000000003002] [0x00000001] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bRotationConstrained : 1;                         		// 0x009C (0x0004) [0x0000000000003002] [0x00000002] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bInterpolating : 1;                               		// 0x009C (0x0004) [0x0000000000000000] [0x00000004] 
	struct FPointer                                    HandleData;                                       		// 0x00A0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    KinActorData;                                     		// 0x00A8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              LinearDamping;                                    		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearStiffness;                                  		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LinearStiffnessScale3D;                           		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LinearDampingScale3D;                             		// 0x00C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularDamping;                                   		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularStiffness;                                 		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Destination;                                      		// 0x00D8 (0x000C) [0x0000000000000000]              
	struct FVector                                     StepSize;                                         		// 0x00E4 (0x000C) [0x0000000000000000]              
	struct FVector                                     Location;                                         		// 0x00F0 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1944 ];

		return pClassPointer;
	};

	struct FQuat GetOrientation ( );
	void SetOrientation ( struct FQuat* NewOrientation );
	void UpdateSmoothLocation ( struct FVector* NewLocation );
	void SetSmoothLocation ( struct FVector NewLocation, float MoveTime );
	void SetLocation ( struct FVector NewLocation );
	void ReleaseComponent ( );
	void GrabComponent ( class UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation, unsigned long bConstrainRotation );
};



// Class Engine.RB_Spring ( Property size: 16 iter: 18) 
// Class name index: 6729 
// 0x0063 (0x00E8 - 0x0085)
class URB_Spring : public UActorComponent
{
public:
	class UPrimitiveComponent*                         Component1;                                       		// 0x0088 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       BoneName1;                                        		// 0x0090 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UPrimitiveComponent*                         Component2;                                       		// 0x0098 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       BoneName2;                                        		// 0x00A0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                SceneIndex;                                       		// 0x00A8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bInHardware : 1;                                  		// 0x00AC (0x0004) [0x0000000000001002] [0x00000001] ( CPF_Const | CPF_Native )
	unsigned long                                      bEnableForceMassRatio : 1;                        		// 0x00AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FPointer                                    SpringData;                                       		// 0x00B0 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              TimeSinceActivation;                              		// 0x00B8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              MinBodyMass;                                      		// 0x00BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SpringSaturateDist;                               		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpringMaxForce;                                   		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxForceMassRatio;                                		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           SpringMaxForceTimeScale;                          		// 0x00CC (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DampSaturateVel;                                  		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DampMaxForce;                                     		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1946 ];

		return pClassPointer;
	};

	void Clear ( );
	void SetComponents ( class UPrimitiveComponent* InComponent1, struct FName InBoneName1, struct FVector Position1, class UPrimitiveComponent* InComponent2, struct FName InBoneName2, struct FVector Position2 );
};



// Class Engine.SVehicleSimBase ( Property size: 16 iter: 16) 
// Class name index: 6731 
// 0x003B (0x00C0 - 0x0085)
class USVehicleSimBase : public UActorComponent
{
public:
	float                                              WheelSuspensionStiffness;                         		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSuspensionDamping;                           		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSuspensionBias;                              		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongExtremumSlip;                            		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongExtremumValue;                           		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongAsymptoteSlip;                           		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongAsymptoteValue;                          		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatExtremumSlip;                             		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatExtremumValue;                            		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatAsymptoteSlip;                            		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatAsymptoteValue;                           		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelInertia;                                     		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWheelSpeedOverride : 1;                          		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClampedFrictionModel : 1;                        		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAutoDrive : 1;                                   		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              AutoDriveSteer;                                   		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1948 ];

		return pClassPointer;
	};

};



// Class Engine.SVehicleSimCar ( Property size: 10 iter: 10) 
// Class name index: 6733 
// 0x0038 (0x00F8 - 0x00C0)
class USVehicleSimCar : public USVehicleSimBase
{
public:
	float                                              ChassisTorqueScale;                               		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FInterpCurveFloat                           MaxSteerAngleCurve;                               		// 0x00C4 (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              SteerSpeed;                                       		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReverseThrottle;                                  		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EngineBrakeFactor;                                		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxBrakeTorque;                                   		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopThreshold;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsDriving : 1;                                   		// 0x00EC (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              ActualSteering;                                   		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              TimeSinceThrottle;                                		// 0x00F4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1950 ];

		return pClassPointer;
	};

};



// Class Engine.SVehicleSimTank ( Property size: 12 iter: 12) 
// Class name index: 6735 
// 0x0030 (0x0128 - 0x00F8)
class USVehicleSimTank : public USVehicleSimCar
{
public:
	float                                              LeftTrackVel;                                     		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              RightTrackVel;                                    		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              LeftTrackTorque;                                  		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              RightTrackTorque;                                 		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              MaxEngineTorque;                                  		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EngineDamping;                                    		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InsideTrackTorqueFactor;                          		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SteeringLatStiffnessFactor;                       		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnInPlaceThrottle;                              		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnMaxGripReduction;                             		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnGripScaleRate;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTurnInPlaceOnSteer : 1;                          		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1952 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryApexClothing ( Property size: 3 iter: 3) 
// Class name index: 6737 
// 0x0018 (0x00CC - 0x00B4)
class UActorFactoryApexClothing : public UActorFactorySkeletalMesh
{
public:
	TArray< class UApexClothingAsset* >                ClothingAssets;                                   		// 0x00B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      ClothingRBChannel;                                		// 0x00C4 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRBCollisionChannelContainer                ClothingRBCollideWithChannels;                    		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1954 ];

		return pClassPointer;
	};

};



// Class Engine.ApexDestructibleDamageParameters ( Property size: 1 iter: 4) 
// Class name index: 6739 
// 0x0010 (0x0070 - 0x0060)
class UApexDestructibleDamageParameters : public UObject
{
public:
	TArray< struct FDamagePair >                       DamageMap;                                        		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1956 ];

		return pClassPointer;
	};

};



// Class Engine.FractureMaterial ( Property size: 2 iter: 2) 
// Class name index: 6741 
// 0x0010 (0x0070 - 0x0060)
class UFractureMaterial : public UObject
{
public:
	class UParticleSystem*                             FractureEffect;                                   		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FractureSound;                                    		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1958 ];

		return pClassPointer;
	};

};



// Class Engine.PhysicalMaterial ( Property size: 24 iter: 28) 
// Class name index: 6743 
// 0x0084 (0x00E4 - 0x0060)
class UPhysicalMaterial : public UObject
{
public:
	int                                                MaterialIndex;                                    		// 0x0060 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Friction;                                         		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Restitution;                                      		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceConeFriction : 1;                           		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableAnisotropicFriction : 1;                   		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FVector                                     AnisoFrictionDir;                                 		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionV;                                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Density;                                          		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularDamping;                                   		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearDamping;                                    		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MagneticResponse;                                 		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindResponse;                                     		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactThreshold;                                  		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactReFireDelay;                                		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ImpactEffect;                                     		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ImpactSound;                                      		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlideThreshold;                                   		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlideReFireDelay;                                 		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SlideEffect;                                      		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SlideSound;                                       		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FractureSoundExplosion;                           		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FractureSoundSingle;                              		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           Parent;                                           		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                         		// 0x00DC (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1960 ];

		return pClassPointer;
	};

	class UPhysicalMaterialPropertyBase* GetPhysicalMaterialProperty ( class UClass* DesiredClass );
	void FindFractureSounds ( class USoundCue** OutSoundExplosion, class USoundCue** OutSoundSingle );
	struct FPhysEffectInfo FindPhysEffectInfo ( unsigned char Type );
};



// Class Engine.PhysicalMaterialPropertyBase ( Property size: 0 iter: 0) 
// Class name index: 6745 
// 0x0000 (0x0060 - 0x0060)
class UPhysicalMaterialPropertyBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1962 ];

		return pClassPointer;
	};

};



// Class Engine.PhysicsAsset ( Property size: 6 iter: 7) 
// Class name index: 6747 
// 0x0088 (0x00E8 - 0x0060)
class UPhysicsAsset : public UObject
{
public:
	class USkeletalMesh*                               DefaultSkelMesh;                                  		// 0x0060 (0x0008) [0x0000000000000002]              ( CPF_Const )
	TArray< class URB_BodySetup* >                     BodySetup;                                        		// 0x0068 (0x0010) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FMap_Mirror                                 BodySetupIndexMap;                                		// 0x0078 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< int >                                      BoundsBodies;                                     		// 0x00C0 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class URB_ConstraintSetup* >               ConstraintSetup;                                  		// 0x00D0 (0x0010) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UPhysicsAssetInstance*                       DefaultInstance;                                  		// 0x00E0 (0x0008) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1964 ];

		return pClassPointer;
	};

	int FindBodyIndex ( struct FName BodyName );
};



// Class Engine.PhysicsAssetInstance ( Property size: 12 iter: 29) 
// Class name index: 6749 
// 0x0090 (0x00F0 - 0x0060)
class UPhysicsAssetInstance : public UObject
{
public:
	class AActor*                                      Owner;                                            		// 0x0060 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                RootBodyIndex;                                    		// 0x0068 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class URB_BodyInstance* >                  Bodies;                                           		// 0x006C (0x0010) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class URB_ConstraintInstance* >            Constraints;                                      		// 0x007C (0x0010) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FMap_Mirror                                 CollisionDisableTable;                            		// 0x008C (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              LinearSpringScale;                                		// 0x00D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LinearDampingScale;                               		// 0x00D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LinearForceLimitScale;                            		// 0x00DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AngularSpringScale;                               		// 0x00E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AngularDampingScale;                              		// 0x00E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AngularForceLimitScale;                           		// 0x00E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bInitBodies : 1;                                  		// 0x00EC (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1966 ];

		return pClassPointer;
	};

	class URB_ConstraintInstance* FindConstraintInstance ( struct FName ConName, class UPhysicsAsset* InAsset );
	class URB_BodyInstance* FindBodyInstance ( struct FName BodyName, class UPhysicsAsset* InAsset );
	void SetFullAnimWeightBonesFixed ( unsigned long bNewFixed, class USkeletalMeshComponent* SkelMesh );
	void SetFullAnimWeightBlockRigidBody ( unsigned long bNewBlockRigidBody, class USkeletalMeshComponent* SkelMesh );
	void SetNamedBodiesBlockRigidBody ( unsigned long bNewBlockRigidBody, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMesh );
	void SetNamedRBBoneSprings ( unsigned long bEnable, TArray< struct FName > BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp );
	void SetNamedMotorsAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement );
	void SetNamedMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement );
	void SetAllMotorsAngularDriveParams ( float InSpring, float InDamping, float InForceLimit, class USkeletalMeshComponent* SkelMesh, unsigned long bSkipFullAnimWeightBodies );
	void SetAllMotorsAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSkipFullAnimWeightBodies );
	void SetAllMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, class USkeletalMeshComponent* SkelMesh, unsigned long bSkipFullAnimWeightBodies );
	void ForceAllBodiesBelowUnfixed ( class UPhysicsAsset* InAsset, class USkeletalMeshComponent* InSkelMesh, unsigned long InbInstanceAlwaysFullAnimWeight, struct FName* InBoneName );
	void SetNamedBodiesFixed ( unsigned long bNewFixed, TArray< struct FName > BoneNames, class USkeletalMeshComponent* SkelMesh, unsigned long bSetOtherBodiesToComplement, unsigned long bSkipFullAnimWeightBodies );
	void SetAllBodiesFixed ( unsigned long bNewFixed );
	float GetTotalMassBelowBone ( struct FName InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh );
	void SetAngularDriveScale ( float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale );
	void SetLinearDriveScale ( float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale );
};



// Class Engine.PhysicsLODVerticalEmitter ( Property size: 1 iter: 1) 
// Class name index: 6751 
// 0x0004 (0x0064 - 0x0060)
class UPhysicsLODVerticalEmitter : public UObject
{
public:
	int                                                ParticlePercentage;                               		// 0x0060 (0x0004) [0x0000000000005000]              ( CPF_Native | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1968 ];

		return pClassPointer;
	};

};



// Class Engine.RB_BodyInstance ( Property size: 31 iter: 49) 
// Class name index: 6753 
// 0x0074 (0x00D4 - 0x0060)
class URB_BodyInstance : public UObject
{
public:
	class UPrimitiveComponent*                         OwnerComponent;                                   		// 0x0060 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                BodyIndex;                                        		// 0x0068 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     Velocity;                                         		// 0x006C (0x000C) [0x0000000000000000]              
	struct FVector                                     PreviousVelocity;                                 		// 0x0078 (0x000C) [0x0000000000000000]              
	int                                                SceneIndex;                                       		// 0x0084 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    BodyData;                                         		// 0x0088 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    BoneSpring;                                       		// 0x0090 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    BoneSpringKinActor;                               		// 0x0098 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bEnableBoneSpringLinear : 1;                      		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableBoneSpringAngular : 1;                     		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableOnOverextension : 1;                      		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNotifyOwnerOnOverextension : 1;                  		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTeleportOnOverextension : 1;                     		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseKinActorForBoneSpring : 1;                    		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bMakeSpringToBaseCollisionComponent : 1;          		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bOnlyCollideWithPawns : 1;                        		// 0x00A0 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableCollisionResponse : 1;                     		// 0x00A0 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPushBody : 1;                                    		// 0x00A0 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bForceUnfixed : 1;                                		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bInstanceAlwaysFullAnimWeight : 1;                		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	float                                              BoneLinearSpring;                                 		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoneLinearDamping;                                		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoneAngularSpring;                                		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoneAngularDamping;                               		// 0x00B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              OverextensionThreshold;                           		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomGravityFactor;                              		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastEffectPlayedTime;                             		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UPhysicalMaterial*                           PhysMaterialOverride;                             		// 0x00C0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ContactReportForceThreshold;                      		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstanceMassScale;                                		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstanceDampingScale;                             		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1970 ];

		return pClassPointer;
	};

	void UpdateDampingProperties ( );
	void UpdateMassProperties ( class URB_BodySetup* Setup );
	void SetContactReportForceThreshold ( float Threshold );
	void EnableCollisionResponse ( unsigned long bEnableResponse );
	void SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial );
	void SetBlockRigidBody ( unsigned long bNewBlockRigidBody );
	void SetBoneSpringTarget ( unsigned long bTeleport, struct FMatrix* InBoneTarget );
	void SetBoneSpringParams ( float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping );
	void EnableBoneSpring ( unsigned long bInEnableLinear, unsigned long bInEnableAngular, struct FMatrix* InBoneTarget );
	struct FVector GetUnrealWorldVelocityAtPoint ( struct FVector Point );
	struct FVector GetUnrealWorldAngularVelocity ( );
	struct FVector GetUnrealWorldVelocity ( );
	struct FMatrix GetUnrealWorldTM ( );
	class UPhysicsAssetInstance* GetPhysicsAssetInstance ( );
	bool IsValidBodyInstance ( );
	bool IsFixed ( );
	void SetFixed ( unsigned long bNewFixed );
	float GetBodyMass ( );
};



// Class Engine.RB_ConstraintInstance ( Property size: 29 iter: 46) 
// Class name index: 6755 
// 0x0080 (0x00E0 - 0x0060)
class URB_ConstraintInstance : public UObject
{
public:
	class AActor*                                      Owner;                                            		// 0x0060 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UPrimitiveComponent*                         OwnerComponent;                                   		// 0x0068 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                ConstraintIndex;                                  		// 0x0070 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SceneIndex;                                       		// 0x0074 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bInHardware : 1;                                  		// 0x0078 (0x0004) [0x0000000000001002] [0x00000001] ( CPF_Const | CPF_Native )
	unsigned long                                      bLinearXPositionDrive : 1;                        		// 0x0078 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearXVelocityDrive : 1;                        		// 0x0078 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearYPositionDrive : 1;                        		// 0x0078 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearYVelocityDrive : 1;                        		// 0x0078 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearZPositionDrive : 1;                        		// 0x0078 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearZVelocityDrive : 1;                        		// 0x0078 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSwingPositionDrive : 1;                          		// 0x0078 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSwingVelocityDrive : 1;                          		// 0x0078 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTwistPositionDrive : 1;                          		// 0x0078 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTwistVelocityDrive : 1;                          		// 0x0078 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAngularSlerpDrive : 1;                           		// 0x0078 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTerminated : 1;                                  		// 0x0078 (0x0004) [0x0000000000000000] [0x00001000] 
	struct FPointer                                    ConstraintData;                                   		// 0x007C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     LinearPositionTarget;                             		// 0x0084 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     LinearVelocityTarget;                             		// 0x0090 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LinearDriveSpring;                                		// 0x009C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LinearDriveDamping;                               		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LinearDriveForceLimit;                            		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00A8 (0x0008) MISSED OFFSET
	struct FQuat                                       AngularPositionTarget;                            		// 0x00B0 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     AngularVelocityTarget;                            		// 0x00C0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngularDriveSpring;                               		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngularDriveDamping;                              		// 0x00D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngularDriveForceLimit;                           		// 0x00D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    DummyKinActor;                                    		// 0x00D8 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1972 ];

		return pClassPointer;
	};

	void MoveKinActorTransform ( struct FMatrix* NewTM );
	void SetLinearLimitSize ( float NewLimitSize );
	void SetAngularDOFLimitScale ( float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup );
	void SetAngularDriveParams ( float InSpring, float InDamping, float InForceLimit );
	void SetAngularVelocityTarget ( struct FVector InVelTarget );
	void SetAngularPositionTarget ( struct FQuat* InPosTarget );
	void SetLinearDriveParams ( float InSpring, float InDamping, float InForceLimit );
	void SetLinearVelocityTarget ( struct FVector InVelTarget );
	void SetLinearPositionTarget ( struct FVector InPosTarget );
	void SetAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive );
	void SetAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive );
	void SetLinearVelocityDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive );
	void SetLinearPositionDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive );
	struct FVector GetConstraintLocation ( );
	class UPhysicsAssetInstance* GetPhysicsAssetInstance ( );
	void TermConstraint ( );
	void InitConstraint ( class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* InOwner, class UPrimitiveComponent* InPrimComp, unsigned long bMakeKinForBody1 );
};



// Class Engine.RB_ConstraintSetup ( Property size: 36 iter: 37) 
// Class name index: 6757 
// 0x00C4 (0x0124 - 0x0060)
class URB_ConstraintSetup : public UObject
{
public:
	struct FName                                       JointName;                                        		// 0x0060 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ConstraintBone1;                                  		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ConstraintBone2;                                  		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Pos1;                                             		// 0x0078 (0x000C) [0x0000000000000000]              
	struct FVector                                     PriAxis1;                                         		// 0x0084 (0x000C) [0x0000000000000000]              
	struct FVector                                     SecAxis1;                                         		// 0x0090 (0x000C) [0x0000000000000000]              
	struct FVector                                     Pos2;                                             		// 0x009C (0x000C) [0x0000000000000000]              
	struct FVector                                     PriAxis2;                                         		// 0x00A8 (0x000C) [0x0000000000000000]              
	struct FVector                                     SecAxis2;                                         		// 0x00B4 (0x000C) [0x0000000000000000]              
	struct FVector                                     PulleyPivot1;                                     		// 0x00C0 (0x000C) [0x0000000000000000]              
	struct FVector                                     PulleyPivot2;                                     		// 0x00CC (0x000C) [0x0000000000000000]              
	unsigned long                                      bEnableProjection : 1;                            		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLinearLimitSoft : 1;                             		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLinearBreakable : 1;                             		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSwingLimited : 1;                                		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTwistLimited : 1;                                		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSwingLimitSoft : 1;                              		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bTwistLimitSoft : 1;                              		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAngularBreakable : 1;                            		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIsPulley : 1;                                    		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bMaintainMinDistance : 1;                         		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	struct FLinearDOFSetup                             LinearXSetup;                                     		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearDOFSetup                             LinearYSetup;                                     		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearDOFSetup                             LinearZSetup;                                     		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearLimitStiffness;                             		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearLimitDamping;                               		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearBreakThreshold;                             		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Swing1LimitAngle;                                 		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Swing2LimitAngle;                                 		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistLimitAngle;                                  		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwingLimitStiffness;                              		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwingLimitDamping;                                		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistLimitStiffness;                              		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistLimitDamping;                                		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularBreakThreshold;                            		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PulleyRatio;                                      		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1974 ];

		return pClassPointer;
	};

};



// Class Engine.RB_BSJointSetup ( Property size: 0 iter: 0) 
// Class name index: 6759 
// 0x0000 (0x0124 - 0x0124)
class URB_BSJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1976 ];

		return pClassPointer;
	};

};



// Class Engine.RB_DistanceJointSetup ( Property size: 0 iter: 0) 
// Class name index: 6761 
// 0x0000 (0x0124 - 0x0124)
class URB_DistanceJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1978 ];

		return pClassPointer;
	};

};



// Class Engine.RB_HingeSetup ( Property size: 0 iter: 0) 
// Class name index: 6763 
// 0x0000 (0x0124 - 0x0124)
class URB_HingeSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1980 ];

		return pClassPointer;
	};

};



// Class Engine.RB_PrismaticSetup ( Property size: 0 iter: 0) 
// Class name index: 6765 
// 0x0000 (0x0124 - 0x0124)
class URB_PrismaticSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1982 ];

		return pClassPointer;
	};

};



// Class Engine.RB_PulleyJointSetup ( Property size: 0 iter: 0) 
// Class name index: 6767 
// 0x0000 (0x0124 - 0x0124)
class URB_PulleyJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1984 ];

		return pClassPointer;
	};

};



// Class Engine.RB_SkelJointSetup ( Property size: 0 iter: 0) 
// Class name index: 6769 
// 0x0000 (0x0124 - 0x0124)
class URB_SkelJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1986 ];

		return pClassPointer;
	};

};



// Class Engine.RB_StayUprightSetup ( Property size: 0 iter: 0) 
// Class name index: 6771 
// 0x0000 (0x0124 - 0x0124)
class URB_StayUprightSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1988 ];

		return pClassPointer;
	};

};



// Class Engine.SVehicleWheel ( Property size: 43 iter: 44) 
// Class name index: 6773 
// 0x00E0 (0x0150 - 0x0070)
class USVehicleWheel : public UComponent
{
public:
	float                                              Steer;                                            		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotorTorque;                                      		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BrakeTorque;                                      		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChassisTorque;                                    		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPoweredWheel : 1;                                		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHoverWheel : 1;                                  		// 0x0080 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCollidesVehicles : 1;                            		// 0x0080 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCollidesPawns : 1;                               		// 0x0080 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIsSquealing : 1;                                 		// 0x0080 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWheelOnGround : 1;                               		// 0x0080 (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              SteerFactor;                                      		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SkelControlName;                                  		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkelControlWheel*                           WheelControl;                                     		// 0x0090 (0x0008) [0x0000000000000000]              
	struct FName                                       BoneName;                                         		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BoneOffset;                                       		// 0x00A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelRadius;                                      		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionTravel;                                 		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionSpeed;                                  		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             WheelParticleSystem;                              		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Side;                                             		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              LongSlipFactor;                                   		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LatSlipFactor;                                    		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandbrakeLongSlipFactor;                          		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandbrakeLatSlipFactor;                           		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParkedSlipFactor;                                 		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WheelPosition;                                    		// 0x00D8 (0x000C) [0x0000000000000000]              
	float                                              SpinVel;                                          		// 0x00E4 (0x0004) [0x0000000000000000]              
	float                                              LongSlipRatio;                                    		// 0x00E8 (0x0004) [0x0000000000000000]              
	float                                              LatSlipAngle;                                     		// 0x00EC (0x0004) [0x0000000000000000]              
	struct FVector                                     ContactNormal;                                    		// 0x00F0 (0x000C) [0x0000000000000000]              
	struct FVector                                     LongDirection;                                    		// 0x00FC (0x000C) [0x0000000000000000]              
	struct FVector                                     LatDirection;                                     		// 0x0108 (0x000C) [0x0000000000000000]              
	float                                              ContactForce;                                     		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              LongImpulse;                                      		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              LatImpulse;                                       		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              DesiredSuspensionPosition;                        		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              SuspensionPosition;                               		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              CurrentRotation;                                  		// 0x0128 (0x0004) [0x0000000000000000]              
	struct FPointer                                    WheelShape;                                       		// 0x012C (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                WheelMaterialIndex;                               		// 0x0134 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UClass*                                      WheelPSCClass;                                    		// 0x0138 (0x0008) [0x0000000000000000]              
	class UParticleSystemComponent*                    WheelParticleComp;                                		// 0x0140 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       SlipParticleParamName;                            		// 0x0148 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1990 ];

		return pClassPointer;
	};

};



// Class Engine.NxGenericForceFieldBrush ( Property size: 22 iter: 25) 
// Class name index: 6775 
// 0x00E0 (0x035C - 0x027C)
class ANxGenericForceFieldBrush : public AVolume
{
public:
	int                                                ExcludeChannel;                                   		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RBChannel;                                        		// 0x0284 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Coordinates;                                      		// 0x0285 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Constant;                                         		// 0x0288 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x0294 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x02A0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x02AC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x02B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x02C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x02D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x02DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x02E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x02F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x0300 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x030C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ForceField;                                       		// 0x031C (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ConvexMeshes;                                     		// 0x0324 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapes;                                  		// 0x0334 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapePoses;                              		// 0x0344 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    LinearKernel;                                     		// 0x0354 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1992 ];

		return pClassPointer;
	};

	bool StopsProjectile ( class AProjectile* P );
	void eventPostBeginPlay ( );
};



// Class Engine.RB_ForceFieldExcludeVolume ( Property size: 2 iter: 2) 
// Class name index: 6777 
// 0x0008 (0x0284 - 0x027C)
class ARB_ForceFieldExcludeVolume : public AVolume
{
public:
	int                                                ForceFieldChannel;                                		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SceneIndex;                                       		// 0x0280 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1994 ];

		return pClassPointer;
	};

};



// Class Engine.NxForceField ( Property size: 10 iter: 12) 
// Class name index: 6779 
// 0x0054 (0x0294 - 0x0240)
class ANxForceField : public AActor
{
public:
	int                                                ExcludeChannel;                                   		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceActive : 1;                                 		// 0x0244 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x0248 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RBChannel;                                        		// 0x024C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    ForceField;                                       		// 0x0250 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ConvexMeshes;                                     		// 0x0258 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapes;                                  		// 0x0268 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapePoses;                              		// 0x0278 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    U2NRotation;                                      		// 0x0288 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SceneIndex;                                       		// 0x0290 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1996 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
	void DoInitRBPhys ( );
};



// Class Engine.NxCylindricalForceField ( Property size: 11 iter: 11) 
// Class name index: 6781 
// 0x0030 (0x02C4 - 0x0294)
class ANxCylindricalForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                   		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UseSpecialRadialForce : 1;                        		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x02BC (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 1998 ];

		return pClassPointer;
	};

};



// Class Engine.NxCylindricalForceFieldCapsule ( Property size: 1 iter: 2) 
// Class name index: 6783 
// 0x0008 (0x02CC - 0x02C4)
class ANxCylindricalForceFieldCapsule : public ANxCylindricalForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x02C4 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2000 ];

		return pClassPointer;
	};

	void DoInitRBPhys ( );
};



// Class Engine.NxForceFieldGeneric ( Property size: 20 iter: 22) 
// Class name index: 6785 
// 0x00BC (0x0350 - 0x0294)
class ANxForceFieldGeneric : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x0294 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UActorComponent*                             DrawComponent;                                    		// 0x029C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RoughExtentX;                                     		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoughExtentY;                                     		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoughExtentZ;                                     		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Coordinates;                                      		// 0x02B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Constant;                                         		// 0x02B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x02C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x02CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x02D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x02E4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x02F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x02FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x0308 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x0314 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x0320 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x032C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x0338 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x0344 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    LinearKernel;                                     		// 0x0348 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2002 ];

		return pClassPointer;
	};

	void DoInitRBPhys ( );
};



// Class Engine.NxForceFieldRadial ( Property size: 7 iter: 8) 
// Class name index: 6787 
// 0x0028 (0x02BC - 0x0294)
class ANxForceFieldRadial : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x0294 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UActorComponent*                             DrawComponent;                                    		// 0x029C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ForceStrength;                                    		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForceFalloff;                                     		// 0x02B0 (0x0001) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )
	struct FPointer                                    Kernel;                                           		// 0x02B4 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2004 ];

		return pClassPointer;
	};

	void DoInitRBPhys ( );
};



// Class Engine.NxForceFieldTornado ( Property size: 14 iter: 15) 
// Class name index: 6789 
// 0x0044 (0x02D8 - 0x0294)
class ANxForceFieldTornado : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x0294 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UActorComponent*                             DrawComponent;                                    		// 0x029C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RadialStrength;                                   		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x02C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x02D0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2006 ];

		return pClassPointer;
	};

	void DoInitRBPhys ( );
};



// Class Engine.NxGenericForceField ( Property size: 15 iter: 15) 
// Class name index: 6791 
// 0x00A0 (0x0334 - 0x0294)
class ANxGenericForceField : public ANxForceField
{
public:
	unsigned char                                      Coordinates;                                      		// 0x0294 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Constant;                                         		// 0x0298 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x02A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x02B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x02BC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x02C8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x02D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x02E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x02EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x02F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x0304 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x0310 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x031C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x0328 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    LinearKernel;                                     		// 0x032C (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2008 ];

		return pClassPointer;
	};

};



// Class Engine.NxGenericForceFieldBox ( Property size: 2 iter: 3) 
// Class name index: 6793 
// 0x0014 (0x0348 - 0x0334)
class ANxGenericForceFieldBox : public ANxGenericForceField
{
public:
	class UDrawBoxComponent*                           RenderComponent;                                  		// 0x0334 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     BoxExtent;                                        		// 0x033C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2010 ];

		return pClassPointer;
	};

	void DoInitRBPhys ( );
};



// Class Engine.NxGenericForceFieldCapsule ( Property size: 3 iter: 3) 
// Class name index: 6795 
// 0x0010 (0x0344 - 0x0334)
class ANxGenericForceFieldCapsule : public ANxGenericForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x0334 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              CapsuleHeight;                                    		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CapsuleRadius;                                    		// 0x0340 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2012 ];

		return pClassPointer;
	};

};



// Class Engine.NxRadialForceField ( Property size: 5 iter: 5) 
// Class name index: 6797 
// 0x001C (0x02B0 - 0x0294)
class ANxRadialForceField : public ANxForceField
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x0294 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ForceStrength;                                    		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForceFalloff;                                     		// 0x02A4 (0x0001) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )
	struct FPointer                                    LinearKernel;                                     		// 0x02A8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2014 ];

		return pClassPointer;
	};

};



// Class Engine.NxRadialCustomForceField ( Property size: 2 iter: 2) 
// Class name index: 6799 
// 0x000C (0x02BC - 0x02B0)
class ANxRadialCustomForceField : public ANxRadialForceField
{
public:
	float                                              SelfRotationStrength;                             		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x02B4 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2016 ];

		return pClassPointer;
	};

};



// Class Engine.NxTornadoAngularForceField ( Property size: 12 iter: 12) 
// Class name index: 6801 
// 0x0034 (0x02C8 - 0x0294)
class ANxTornadoAngularForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                   		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x02C0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2018 ];

		return pClassPointer;
	};

};



// Class Engine.NxTornadoAngularForceFieldCapsule ( Property size: 1 iter: 1) 
// Class name index: 6803 
// 0x0008 (0x02D0 - 0x02C8)
class ANxTornadoAngularForceFieldCapsule : public ANxTornadoAngularForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x02C8 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2020 ];

		return pClassPointer;
	};

};



// Class Engine.NxTornadoForceField ( Property size: 11 iter: 11) 
// Class name index: 6805 
// 0x0030 (0x02C4 - 0x0294)
class ANxTornadoForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                   		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x02B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x02BC (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2022 ];

		return pClassPointer;
	};

};



// Class Engine.NxTornadoForceFieldCapsule ( Property size: 1 iter: 1) 
// Class name index: 6807 
// 0x0008 (0x02CC - 0x02C4)
class ANxTornadoForceFieldCapsule : public ANxTornadoForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x02C4 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2024 ];

		return pClassPointer;
	};

};



// Class Engine.NxForceFieldSpawnable ( Property size: 1 iter: 2) 
// Class name index: 6809 
// 0x0008 (0x0248 - 0x0240)
class ANxForceFieldSpawnable : public AActor
{
public:
	class UNxForceFieldComponent*                      ForceFieldComponent;                              		// 0x0240 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2026 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};



// Class Engine.RB_CylindricalForceActor ( Property size: 16 iter: 17) 
// Class name index: 6811 
// 0x0034 (0x0274 - 0x0240)
class ARB_CylindricalForceActor : public ARigidBodyBase
{
public:
	class UDrawCylinderComponent*                      RenderComponent;                                  		// 0x0240 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RadialStrength;                                   		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceActive : 1;                                 		// 0x026C (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bForceApplyToCloth : 1;                           		// 0x026C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceApplyToFluid : 1;                           		// 0x026C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceApplyToRigidBodies : 1;                     		// 0x026C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceApplyToProjectiles : 1;                     		// 0x026C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x0270 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2028 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};



// Class Engine.RB_RadialForceActor ( Property size: 13 iter: 15) 
// Class name index: 6813 
// 0x0024 (0x0264 - 0x0240)
class ARB_RadialForceActor : public ARigidBodyBase
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x0240 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ForceStrength;                                    		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwirlStrength;                                    		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpinTorque;                                       		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForceFalloff;                                     		// 0x0258 (0x0001) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )
	unsigned char                                      RadialForceMode;                                  		// 0x0259 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceActive : 1;                                 		// 0x025C (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bForceApplyToCloth : 1;                           		// 0x025C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceApplyToFluid : 1;                           		// 0x025C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceApplyToRigidBodies : 1;                     		// 0x025C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceApplyToProjectiles : 1;                     		// 0x025C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x0260 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2030 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* inAction );
};



// Class Engine.NxForceFieldComponent ( Property size: 15 iter: 16) 
// Class name index: 6815 
// 0x0070 (0x02A8 - 0x0238)
class UNxForceFieldComponent : public UPrimitiveComponent
{
public:
	class UForceFieldShape*                            Shape;                                            		// 0x0238 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UActorComponent*                             DrawComponent;                                    		// 0x0240 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                ExcludeChannel;                                   		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceActive : 1;                                 		// 0x024C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDestroyWhenInactive : 1;                         		// 0x024C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x0250 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Duration;                                         		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ForceField;                                       		// 0x0258 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ConvexMeshes;                                     		// 0x0260 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapes;                                  		// 0x0270 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FPointer >                          ExclusionShapePoses;                              		// 0x0280 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SceneIndex;                                       		// 0x0290 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              ElapsedTime;                                      		// 0x0294 (0x0004) [0x0000000000000000]              
	class UPrimitiveComponent*                         RenderComponent;                                  		// 0x0298 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FPointer                                    RBPhysScene;                                      		// 0x02A0 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2032 ];

		return pClassPointer;
	};

	void DoInitRBPhys ( );
};



// Class Engine.NxForceFieldCylindricalComponent ( Property size: 11 iter: 11) 
// Class name index: 6817 
// 0x0030 (0x02D8 - 0x02A8)
class UNxForceFieldCylindricalComponent : public UNxForceFieldComponent
{
public:
	float                                              RadialStrength;                                   		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UseSpecialRadialForce : 1;                        		// 0x02CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x02D0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2034 ];

		return pClassPointer;
	};

};



// Class Engine.NxForceFieldGenericComponent ( Property size: 18 iter: 18) 
// Class name index: 6819 
// 0x00AC (0x0354 - 0x02A8)
class UNxForceFieldGenericComponent : public UNxForceFieldComponent
{
public:
	float                                              RoughExtentX;                                     		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoughExtentY;                                     		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoughExtentZ;                                     		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Coordinates;                                      		// 0x02B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Constant;                                         		// 0x02B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x02C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x02D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x02DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x02E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x02F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x0300 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x030C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x0318 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x0324 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x0330 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x033C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x0348 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x034C (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2036 ];

		return pClassPointer;
	};

};



// Class Engine.NxForceFieldRadialComponent ( Property size: 5 iter: 5) 
// Class name index: 6821 
// 0x0018 (0x02C0 - 0x02A8)
class UNxForceFieldRadialComponent : public UNxForceFieldComponent
{
public:
	float                                              ForceStrength;                                    		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ForceFalloff;                                     		// 0x02B4 (0x0001) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )
	struct FPointer                                    Kernel;                                           		// 0x02B8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2038 ];

		return pClassPointer;
	};

};



// Class Engine.NxForceFieldTornadoComponent ( Property size: 12 iter: 12) 
// Class name index: 6823 
// 0x0034 (0x02DC - 0x02A8)
class UNxForceFieldTornadoComponent : public UNxForceFieldComponent
{
public:
	float                                              RadialStrength;                                   		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RotationalStrength;                               		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftStrength;                                     		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceRadius;                                      		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceTopRadius;                                   		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LiftFalloffHeight;                                		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EscapeVelocity;                                   		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceHeight;                                      		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeightOffset;                                     		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x02CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              SelfRotationStrength;                             		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    Kernel;                                           		// 0x02D4 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2040 ];

		return pClassPointer;
	};

};



// Class Engine.ForceFieldShape ( Property size: 0 iter: 5) 
// Class name index: 6825 
// 0x0000 (0x0060 - 0x0060)
class UForceFieldShape : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2042 ];

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Dimension );
	void eventFillBySphere ( float Radius );
};



// Class Engine.ForceFieldShapeBox ( Property size: 1 iter: 7) 
// Class name index: 6827 
// 0x0008 (0x0068 - 0x0060)
class UForceFieldShapeBox : public UForceFieldShape
{
public:
	class UDrawBoxComponent*                           Shape;                                            		// 0x0060 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2044 ];

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Extent );
	void eventFillBySphere ( float Radius );
	struct FVector eventGetRadii ( );
};



// Class Engine.ForceFieldShapeCapsule ( Property size: 1 iter: 8) 
// Class name index: 6829 
// 0x0008 (0x0068 - 0x0060)
class UForceFieldShapeCapsule : public UForceFieldShape
{
public:
	class UDrawCapsuleComponent*                       Shape;                                            		// 0x0060 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2046 ];

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Extent );
	void eventFillBySphere ( float Radius );
	float eventGetRadius ( );
	float eventGetHeight ( );
};



// Class Engine.ForceFieldShapeSphere ( Property size: 1 iter: 7) 
// Class name index: 6831 
// 0x0008 (0x0068 - 0x0060)
class UForceFieldShapeSphere : public UForceFieldShape
{
public:
	class UDrawSphereComponent*                        Shape;                                            		// 0x0060 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2048 ];

		return pClassPointer;
	};

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Extent );
	void eventFillBySphere ( float Radius );
	float eventGetRadius ( );
};



// Class Engine.PrefabInstance ( Property size: 11 iter: 11) 
// Class name index: 6833 
// 0x00EC (0x032C - 0x0240)
class APrefabInstance : public AActor
{
public:
	class UPrefab*                                     TemplatePrefab;                                   		// 0x0240 (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                TemplateVersion;                                  		// 0x0248 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x024C (0x0048) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.ArchetypeToInstanceMap
	class UPrefabSequence*                             SequenceInstance;                                 		// 0x0294 (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                PI_PackageVersion;                                		// 0x029C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PI_LicenseePackageVersion;                        		// 0x02A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< unsigned char >                            PI_Bytes;                                         		// 0x02A4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UObject* >                           PI_CompleteObjects;                               		// 0x02B4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UObject* >                           PI_ReferencedObjects;                             		// 0x02C4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           PI_SavedNames;                                    		// 0x02D4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x02E4 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.PI_ObjectMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2050 ];

		return pClassPointer;
	};

};



// Class Engine.Prefab ( Property size: 5 iter: 5) 
// Class name index: 6835 
// 0x0034 (0x0094 - 0x0060)
class UPrefab : public UObject
{
public:
	int                                                PrefabVersion;                                    		// 0x0060 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UObject* >                           PrefabArchetypes;                                 		// 0x0064 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UObject* >                           RemovedArchetypes;                                		// 0x0074 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UPrefabSequence*                             PrefabSequence;                                   		// 0x0084 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UTexture2D*                                  PrefabPreview;                                    		// 0x008C (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2052 ];

		return pClassPointer;
	};

};



// Class Engine.SequenceObject ( Property size: 17 iter: 23) 
// Class name index: 6837 
// 0x006C (0x00CC - 0x0060)
class USequenceObject : public UObject
{
public:
	int                                                ObjInstanceVersion;                               		// 0x0060 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class USequence*                                   ParentSequence;                                   		// 0x0064 (0x0008) [0x0000000001000002]              ( CPF_Const )
	int                                                ObjPosX;                                          		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                ObjPosY;                                          		// 0x0070 (0x0004) [0x0000000000000000]              
	struct FString                                     ObjName;                                          		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ObjCategory;                                      		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           ObjRemoveInProject;                               		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FColor                                      ObjColor;                                         		// 0x00A4 (0x0004) [0x0000000000000000]              
	struct FString                                     ObjComment;                                       		// 0x00A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bDeletable : 1;                                   		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDrawFirst : 1;                                   		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDrawLast : 1;                                    		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bOutputObjCommentToScreen : 1;                    		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSuppressAutoComment : 1;                         		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	int                                                DrawWidth;                                        		// 0x00BC (0x0004) [0x0000000000000000]              
	int                                                DrawHeight;                                       		// 0x00C0 (0x0004) [0x0000000000000000]              
	class USequenceObject*                             PIESequenceObject;                                		// 0x00C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2054 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool eventShouldClearNameOnPasting ( );
	bool eventIsPastingIntoLevelSequenceAllowed ( );
	bool eventIsValidLevelSequenceObject ( );
	class AWorldInfo* GetWorldInfo ( );
	void ScriptLog ( struct FString LogText, unsigned long bWarning );
};



// Class Engine.SequenceFrame ( Property size: 10 iter: 10) 
// Class name index: 6839 
// 0x0028 (0x00F4 - 0x00CC)
class USequenceFrame : public USequenceObject
{
public:
	int                                                SizeX;                                            		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SizeY;                                            		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BorderWidth;                                      		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawBox : 1;                                     		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFilled : 1;                                      		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTileFill : 1;                                    		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	struct FColor                                      BorderColor;                                      		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      FillColor;                                        		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  FillTexture;                                      		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   FillMaterial;                                     		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2056 ];

		return pClassPointer;
	};

};



// Class Engine.SequenceFrameWrapped ( Property size: 0 iter: 0) 
// Class name index: 6841 
// 0x0000 (0x00F4 - 0x00F4)
class USequenceFrameWrapped : public USequenceFrame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2058 ];

		return pClassPointer;
	};

};



// Class Engine.SequenceOp ( Property size: 26 iter: 49) 
// Class name index: 6843 
// 0x006C (0x0138 - 0x00CC)
class USequenceOp : public USequenceObject
{
public:
	unsigned long                                      bIsActivated : 1;                                 		// 0x00CC (0x0004) [0x0000000001202000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsCurrentDebuggerOp : 1;                         		// 0x00CC (0x0004) [0x0000000001202000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bActive : 1;                                      		// 0x00CC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bLatentExecution : 1;                             		// 0x00CC (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bAutoActivateOutputLinks : 1;                     		// 0x00CC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bHaveMovingVarConnector : 1;                      		// 0x00CC (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bHaveMovingInputConnector : 1;                    		// 0x00CC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bHaveMovingOutputConnector : 1;                   		// 0x00CC (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bPendingVarConnectorRecalc : 1;                   		// 0x00CC (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bPendingInputConnectorRecalc : 1;                 		// 0x00CC (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bPendingOutputConnectorRecalc : 1;                		// 0x00CC (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bIsBreakpointSet : 1;                             		// 0x00CC (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bIsHiddenBreakpointSet : 1;                       		// 0x00CC (0x0004) [0x0000000001202000] [0x00001000] ( CPF_Transient )
	float                                              PIEActivationTime;                                		// 0x00D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class USequenceOp*                                 ActivatorSeqOp;                                   		// 0x00D4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastActivatedInputLink;                           		// 0x00DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastActivatedOutputLink;                          		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                LastActivatedInputLinkSavegame;                   		// 0x00E4 (0x0004) [0x0000000000000000]              
	TArray< struct FSeqOpInputLink >                   InputLinks;                                       		// 0x00E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSeqOpOutputLink >                  OutputLinks;                                      		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSeqVarLink >                       VariableLinks;                                    		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FSeqEventLink >                     EventLinks;                                       		// 0x0118 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PlayerIndex;                                      		// 0x0128 (0x0004) [0x0000000001002000]              ( CPF_Transient )
	unsigned char                                      GamepadID;                                        		// 0x012C (0x0001) [0x0000000001002000]              ( CPF_Transient )
	int                                                ActivateCount;                                    		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SearchTag;                                        		// 0x0134 (0x0004) [0x0000000000202002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2060 ];

		return pClassPointer;
	};

	void ForceActivateOutput ( int OutputIdx );
	void ForceActivateInput ( int InputIdx );
	class AController* GetController ( class AActor* TheActor );
	class APawn* GetPawn ( class AActor* TheActor );
	void Reset ( );
	void PublishLinkedVariableValues ( );
	void PopulateLinkedVariableValues ( );
	void eventVersionUpdated ( int OldVersion, int NewVersion );
	void eventDeactivated ( );
	void eventActivated ( );
	bool ActivateNamedOutputLink ( struct FString LinkDesc );
	bool ActivateOutputLink ( int OutputIdx );
	void LinkedVariables ( class UClass* VarClass, struct FString inDesc, class USequenceVariable** OutVariable );
	void GetBoolVars ( struct FString inDesc, TArray< unsigned char >* boolVars );
	void GetInterpDataVars ( struct FString inDesc, TArray< class UInterpData* >* outIData );
	void GetObjectVars ( struct FString inDesc, TArray< class UObject* >* objVars );
	void GetLinkedObjects ( class UClass* ObjectType, unsigned long bRecurse, TArray< class USequenceObject* >* out_Objects );
	bool HasLinkedOps ( unsigned long bConsiderInputLinks );
};



// Class Engine.Sequence ( Property size: 12 iter: 18) 
// Class name index: 6845 
// 0x0088 (0x01C0 - 0x0138)
class USequence : public USequenceOp
{
public:
	struct FPointer                                    LogFile;                                          		// 0x0138 (0x0008) [0x0000000000000002]              ( CPF_Const )
	TArray< class USequenceObject* >                   SequenceObjects;                                  		// 0x0140 (0x0010) [0x000000000040000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink )
	TArray< class USequenceOp* >                       ActiveSequenceOps;                                		// 0x0150 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class USequence* >                         NestedSequences;                                  		// 0x0160 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class USequenceEvent* >                    UnregisteredEvents;                               		// 0x0170 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FActivateOp >                       DelayedActivatedOps;                              		// 0x0180 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class USequenceOp* >                       DelayedLatentOps;                                 		// 0x0190 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bEnabled : 1;                                     		// 0x01A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FQueuedActivationInfo >             QueuedActivations;                                		// 0x01A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DefaultViewX;                                     		// 0x01B4 (0x0004) [0x0000000000000000]              
	int                                                DefaultViewY;                                     		// 0x01B8 (0x0004) [0x0000000000000000]              
	float                                              DefaultViewZoom;                                  		// 0x01BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2062 ];

		return pClassPointer;
	};

	void SetEnabled ( unsigned long bInEnabled );
	void Reset ( );
	void FindSeqObjectsByName ( struct FString SeqObjName, unsigned long bCheckComment, unsigned long bRecursive, unsigned long bUseFullLevelName, TArray< class USequenceObject* >* OutputObjects );
	void FindSeqObjectsByClass ( class UClass* DesiredClass, unsigned long bRecursive, TArray< class USequenceObject* >* OutputObjects );
};



// Class Engine.PrefabSequence ( Property size: 1 iter: 3) 
// Class name index: 6847 
// 0x0008 (0x01C8 - 0x01C0)
class UPrefabSequence : public USequence
{
public:
	class APrefabInstance*                             OwnerPrefab;                                      		// 0x01C0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2064 ];

		return pClassPointer;
	};

	class APrefabInstance* GetOwnerPrefab ( );
	void SetOwnerPrefab ( class APrefabInstance* InOwner );
};



// Class Engine.PrefabSequenceContainer ( Property size: 0 iter: 0) 
// Class name index: 6849 
// 0x0000 (0x01C0 - 0x01C0)
class UPrefabSequenceContainer : public USequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2066 ];

		return pClassPointer;
	};

};



// Class Engine.SequenceAction ( Property size: 3 iter: 3) 
// Class name index: 6851 
// 0x001C (0x0154 - 0x0138)
class USequenceAction : public USequenceOp
{
public:
	struct FName                                       HandlerName;                                      		// 0x0138 (0x0008) [0x0000000000000000]              
	unsigned long                                      bCallHandler : 1;                                 		// 0x0140 (0x0004) [0x0000000000000000] [0x00000001] 
	TArray< class UObject* >                           Targets;                                          		// 0x0144 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2068 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_ActivateRemoteEvent ( Property size: 3 iter: 4) 
// Class name index: 6853 
// 0x0014 (0x0168 - 0x0154)
class USeqAct_ActivateRemoteEvent : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EventName;                                        		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0164 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2070 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_AndGate ( Property size: 3 iter: 3) 
// Class name index: 6855 
// 0x0024 (0x0178 - 0x0154)
class USeqAct_AndGate : public USequenceAction
{
public:
	unsigned long                                      bOpen : 1;                                        		// 0x0154 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< unsigned long >                            LinkedOutputFiredStatus;                          		// 0x0158 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FPointer >                          LinkedOutputs;                                    		// 0x0168 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2072 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_ApplySoundNode ( Property size: 2 iter: 2) 
// Class name index: 6857 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_ApplySoundNode : public USequenceAction
{
public:
	class USoundCue*                                   PlaySound;                                        		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundNode*                                  ApplyNode;                                        		// 0x015C (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2074 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_AttachToEvent ( Property size: 1 iter: 1) 
// Class name index: 6859 
// 0x0004 (0x0158 - 0x0154)
class USeqAct_AttachToEvent : public USequenceAction
{
public:
	unsigned long                                      bPreferController : 1;                            		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2076 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_CameraFade ( Property size: 8 iter: 9) 
// Class name index: 6861 
// 0x002C (0x0180 - 0x0154)
class USeqAct_CameraFade : public USequenceAction
{
public:
	struct FColor                                      FadeColor;                                        		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   FadeAlpha;                                        		// 0x0158 (0x0008) [0x0000000020000000]              ( CPF_Deprecated )
	float                                              FadeOpacity;                                      		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeTime;                                         		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPersistFade : 1;                                 		// 0x0168 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFadeAudio : 1;                                   		// 0x0168 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              FadeTimeRemaining;                                		// 0x016C (0x0004) [0x0000000000000000]              
	TArray< class APlayerController* >                 CachedPCs;                                        		// 0x0170 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2078 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_CameraLookAt ( Property size: 19 iter: 20) 
// Class name index: 6863 
// 0x0038 (0x018C - 0x0154)
class USeqAct_CameraLookAt : public USequenceAction
{
public:
	unsigned long                                      bAffectCamera : 1;                                		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysFocus : 1;                                 		// 0x0154 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAdjustCamera : 1;                                		// 0x0154 (0x0004) [0x0000000020000000] [0x00000004] ( CPF_Deprecated )
	unsigned long                                      bTurnInPlace : 1;                                 		// 0x0154 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIgnoreTrace : 1;                                 		// 0x0154 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAffectHead : 1;                                  		// 0x0154 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bRotatePlayerWithCamera : 1;                      		// 0x0154 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bToggleGodMode : 1;                               		// 0x0154 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bLeaveCameraRotation : 1;                         		// 0x0154 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDisableInput : 1;                                		// 0x0154 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bUsedTimer : 1;                                   		// 0x0154 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bCheckLineOfSight : 1;                            		// 0x0154 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	struct FVector2D                                   InterpSpeedRange;                                 		// 0x0158 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   InFocusFOV;                                       		// 0x0160 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FocusBoneName;                                    		// 0x0168 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     TextDisplay;                                      		// 0x0170 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              TotalTime;                                        		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraFOV;                                        		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RemainingTime;                                    		// 0x0188 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2080 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_CameraShake ( Property size: 10 iter: 11) 
// Class name index: 6865 
// 0x0028 (0x017C - 0x0154)
class USeqAct_CameraShake : public USequenceAction
{
public:
	class UCameraShake*                                Shake;                                            		// 0x0154 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              ShakeScale;                                       		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDoControllerVibration : 1;                       		// 0x0160 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRadialShake : 1;                                 		// 0x0160 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOrientTowardRadialEpicenter : 1;                 		// 0x0160 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              RadialShake_InnerRadius;                          		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialShake_OuterRadius;                          		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialShake_Falloff;                              		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlaySpace;                                        		// 0x0170 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      LocationActor;                                    		// 0x0174 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2082 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_ChangeCollision ( Property size: 4 iter: 5) 
// Class name index: 6867 
// 0x0005 (0x0159 - 0x0154)
class USeqAct_ChangeCollision : public USequenceAction
{
public:
	unsigned long                                      bCollideActors : 1;                               		// 0x0154 (0x0004) [0x0000000000020003] [0x00000001] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bBlockActors : 1;                                 		// 0x0154 (0x0004) [0x0000000000020003] [0x00000002] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bIgnoreEncroachers : 1;                           		// 0x0154 (0x0004) [0x0000000000020003] [0x00000004] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned char                                      CollisionType;                                    		// 0x0158 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2084 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_CommitMapChange ( Property size: 0 iter: 0) 
// Class name index: 6869 
// 0x0000 (0x0154 - 0x0154)
class USeqAct_CommitMapChange : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2086 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_ConvertToString ( Property size: 3 iter: 4) 
// Class name index: 6871 
// 0x0018 (0x016C - 0x0154)
class USeqAct_ConvertToString : public USequenceAction
{
public:
	unsigned long                                      bIncludeVarComment : 1;                           		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FString                                     VarSeparator;                                     		// 0x0158 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                NumberOfInputs;                                   		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2088 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_DrawText ( Property size: 3 iter: 4) 
// Class name index: 6873 
// 0x0048 (0x019C - 0x0154)
class USeqAct_DrawText : public USequenceAction
{
public:
	float                                              DisplayTimeSeconds;                               		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisplayOnObject : 1;                             		// 0x0158 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FKismetDrawTextInfo                         DrawTextInfo;                                     		// 0x015C (0x0040) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2090 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_FinishSequence ( Property size: 1 iter: 1) 
// Class name index: 6875 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_FinishSequence : public USequenceAction
{
public:
	struct FString                                     OutputLabel;                                      		// 0x0154 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2092 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_Gate ( Property size: 3 iter: 3) 
// Class name index: 6877 
// 0x000C (0x0160 - 0x0154)
class USeqAct_Gate : public USequenceAction
{
public:
	unsigned long                                      bOpen : 1;                                        		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                AutoCloseCount;                                   		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentCloseCount;                                		// 0x015C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2094 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_GetDistance ( Property size: 1 iter: 1) 
// Class name index: 6879 
// 0x0004 (0x0158 - 0x0154)
class USeqAct_GetDistance : public USequenceAction
{
public:
	float                                              Distance;                                         		// 0x0154 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2096 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_GetLocationAndRotation ( Property size: 4 iter: 5) 
// Class name index: 6881 
// 0x002C (0x0180 - 0x0154)
class USeqAct_GetLocationAndRotation : public USequenceAction
{
public:
	struct FVector                                     Location;                                         		// 0x0154 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     RotationVector;                                   		// 0x0160 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     Rotation;                                         		// 0x016C (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FName                                       SocketOrBoneName;                                 		// 0x0178 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2098 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_GetProperty ( Property size: 1 iter: 1) 
// Class name index: 6883 
// 0x0008 (0x015C - 0x0154)
class USeqAct_GetProperty : public USequenceAction
{
public:
	struct FName                                       PropertyName;                                     		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2100 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_GetVectorComponents ( Property size: 4 iter: 5) 
// Class name index: 6885 
// 0x0018 (0x016C - 0x0154)
class USeqAct_GetVectorComponents : public USequenceAction
{
public:
	struct FVector                                     InVector;                                         		// 0x0154 (0x000C) [0x0000000000000000]              
	float                                              X;                                                		// 0x0160 (0x0004) [0x0000000000000000]              
	float                                              Y;                                                		// 0x0164 (0x0004) [0x0000000000000000]              
	float                                              Z;                                                		// 0x0168 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2102 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_GetVelocity ( Property size: 2 iter: 3) 
// Class name index: 6887 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_GetVelocity : public USequenceAction
{
public:
	float                                              VelocityMag;                                      		// 0x0154 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     VelocityVect;                                     		// 0x0158 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2104 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_HeadTrackingControl ( Property size: 11 iter: 13) 
// Class name index: 6889 
// 0x009C (0x01F0 - 0x0154)
class USeqAct_HeadTrackingControl : public USequenceAction
{
public:
	TArray< struct FName >                             TrackControllerName;                              		// 0x0154 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LookAtActorRadius;                                		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisableBeyondLimit : 1;                          		// 0x0168 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLookAtPawns : 1;                                 		// 0x0168 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              MaxLookAtTime;                                    		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinLookAtTime;                                    		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInterestTime;                                  		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            ActorClassesToLookAt;                             		// 0x0178 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             TargetBoneNames;                                  		// 0x0188 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UObject* >                           LookAtTargets;                                    		// 0x0198 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x01A8 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.SeqAct_HeadTrackingControl.ActorToComponentMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2106 ];

		return pClassPointer;
	};

	void eventActivated ( );
	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_IsInObjectList ( Property size: 2 iter: 2) 
// Class name index: 6891 
// 0x0004 (0x0158 - 0x0154)
class USeqAct_IsInObjectList : public USequenceAction
{
public:
	unsigned long                                      bCheckForAllObjects : 1;                          		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bObjectFound : 1;                                 		// 0x0154 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2108 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_Latent ( Property size: 3 iter: 5) 
// Class name index: 6893 
// 0x0018 (0x016C - 0x0154)
class USeqAct_Latent : public USequenceAction
{
public:
	TArray< class AActor* >                            LatentActors;                                     		// 0x0154 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bAborted : 1;                                     		// 0x0164 (0x0004) [0x0000000000000000] [0x00000001] 
	float                                              LatentActivationTime;                             		// 0x0168 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2110 ];

		return pClassPointer;
	};

	bool eventUpdate ( float DeltaTime );
	void AbortFor ( class AActor* latentActor );
};



// Class Engine.SeqAct_ActorFactory ( Property size: 14 iter: 16) 
// Class name index: 6895 
// 0x0058 (0x01C4 - 0x016C)
class USeqAct_ActorFactory : public USeqAct_Latent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x016C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsSpawning : 1;                                  		// 0x016C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCheckSpawnCollision : 1;                         		// 0x016C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class UActorFactory*                               Factory;                                          		// 0x0170 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      PointSelection;                                   		// 0x0178 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AActor* >                            SpawnPoints;                                      		// 0x017C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           SpawnLocations;                                   		// 0x018C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FVector >                           SpawnOrientations;                                		// 0x019C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                SpawnCount;                                       		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnDelay;                                       		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastSpawnIdx;                                     		// 0x01B4 (0x0004) [0x0000000000000000]              
	int                                                CurrentSpawnIdx;                                  		// 0x01B8 (0x0004) [0x0000000000000000]              
	int                                                SpawnedCount;                                     		// 0x01BC (0x0004) [0x0000000000000000]              
	float                                              RemainingDelay;                                   		// 0x01C0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2112 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_ActorFactoryEx ( Property size: 0 iter: 0) 
// Class name index: 6897 
// 0x0000 (0x01C4 - 0x01C4)
class USeqAct_ActorFactoryEx : public USeqAct_ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2114 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_ProjectileFactory ( Property size: 3 iter: 4) 
// Class name index: 6899 
// 0x0018 (0x01DC - 0x01C4)
class USeqAct_ProjectileFactory : public USeqAct_ActorFactory
{
public:
	class UParticleSystem*                             PSTemplate;                                       		// 0x01C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SocketName;                                       		// 0x01CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x01D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2116 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_AIMoveToActor ( Property size: 6 iter: 8) 
// Class name index: 6901 
// 0x0024 (0x0190 - 0x016C)
class USeqAct_AIMoveToActor : public USeqAct_Latent
{
public:
	unsigned long                                      bInterruptable : 1;                               		// 0x016C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPickClosest : 1;                                 		// 0x016C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< class AActor* >                            Destination;                                      		// 0x0170 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              MovementSpeedModifier;                            		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      LookAt;                                           		// 0x0184 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastDestinationChoice;                            		// 0x018C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2118 ];

		return pClassPointer;
	};

	class AActor* PickDestination ( class AActor* Requestor );
	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_Delay ( Property size: 6 iter: 8) 
// Class name index: 6903 
// 0x0014 (0x0180 - 0x016C)
class USeqAct_Delay : public USeqAct_Latent
{
public:
	unsigned long                                      bDelayActive : 1;                                 		// 0x016C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bStartWillRestart : 1;                            		// 0x016C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              DefaultDuration;                                  		// 0x0170 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Duration;                                         		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastUpdateTime;                                   		// 0x0178 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RemainingTime;                                    		// 0x017C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2120 ];

		return pClassPointer;
	};

	void ResetDelayActive ( );
	void Reset ( );
};



// Class Engine.SeqAct_DelaySwitch ( Property size: 4 iter: 4) 
// Class name index: 6905 
// 0x0010 (0x017C - 0x016C)
class USeqAct_DelaySwitch : public USeqAct_Latent
{
public:
	int                                                LinkCount;                                        		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentIdx;                                       		// 0x0170 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SwitchDelay;                                      		// 0x0174 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextLinkTime;                                     		// 0x0178 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2122 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_ForceGarbageCollection ( Property size: 0 iter: 0) 
// Class name index: 6907 
// 0x0000 (0x016C - 0x016C)
class USeqAct_ForceGarbageCollection : public USeqAct_Latent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2124 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_Interp ( Property size: 35 iter: 42) 
// Class name index: 6909 
// 0x0100 (0x026C - 0x016C)
class USeqAct_Interp : public USeqAct_Latent
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x016C (0x0048) UNKNOWN PROPERTY: MapProperty Engine.SeqAct_Interp.SavedActorTransforms
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x01B4 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.SeqAct_Interp.SavedActorVisibilities
	int                                                mSaveLoadPriority;                                		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayRate;                                         		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Position;                                         		// 0x0204 (0x0004) [0x0000000000000000]              
	float                                              ForceStartPosition;                               		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsPlaying : 1;                                   		// 0x020C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPaused : 1;                                      		// 0x020C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsBeingEdited : 1;                               		// 0x020C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bLooping : 1;                                     		// 0x020C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRewindOnPlay : 1;                                		// 0x020C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bNoResetOnRewind : 1;                             		// 0x020C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bRewindIfAlreadyPlaying : 1;                      		// 0x020C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bReversePlayback : 1;                             		// 0x020C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bInterpForPathBuilding : 1;                       		// 0x020C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bForceStartPos : 1;                               		// 0x020C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bDisableRadioFilter : 1;                          		// 0x020C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bClientSideOnly : 1;                              		// 0x020C (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bSkipUpdateIfNotVisible : 1;                      		// 0x020C (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bIsSkippable : 1;                                 		// 0x020C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bShouldShowGore : 1;                              		// 0x020C (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bAutoStopWhenDirectorChanges : 1;                 		// 0x020C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bLockOutgoingCameraOnFirstTransition : 1;         		// 0x020C (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bSkipFirstTransitionIfNotFromCamera : 1;          		// 0x020C (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	TArray< class ACoverLink* >                        LinkedCover;                                      		// 0x0210 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UInterpData*                                 InterpData;                                       		// 0x0220 (0x0008) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UInterpGroupInst* >                  GroupInst;                                        		// 0x0228 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      ReplicatedActorClass;                             		// 0x0238 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class AMatineeActor*                               ReplicatedActor;                                  		// 0x0240 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                PreferredSplitScreenNum;                          		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FCameraCutInfo >                    CameraCuts;                                       		// 0x024C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              TerminationTime;                                  		// 0x025C (0x0004) [0x0000000000000000]              
	struct FRenderingPerformanceOverrides              RenderingOverrides;                               		// 0x0260 (0x0004) [0x0000000000044001]              ( CPF_Edit | CPF_Config | CPF_GlobalConfig )
	unsigned char                                      ConstantCameraAnim;                               		// 0x0264 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConstantCameraAnimRate;                           		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2126 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void Reset ( );
	void AddPlayerToDirectorTracks ( class APlayerController* PC );
	void Stop ( );
	void SetPosition ( float NewPosition, unsigned long bJump );
};



// Class Engine.SeqAct_LevelStreamingBase ( Property size: 2 iter: 2) 
// Class name index: 6911 
// 0x0004 (0x0170 - 0x016C)
class USeqAct_LevelStreamingBase : public USeqAct_Latent
{
public:
	unsigned long                                      bMakeVisibleAfterLoad : 1;                        		// 0x016C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x016C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2128 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_LevelStreaming ( Property size: 3 iter: 3) 
// Class name index: 6913 
// 0x0014 (0x0184 - 0x0170)
class USeqAct_LevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	class ULevelStreaming*                             Level;                                            		// 0x0170 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       LevelName;                                        		// 0x0178 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0180 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2130 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_MultiLevelStreaming ( Property size: 4 iter: 5) 
// Class name index: 6915 
// 0x0014 (0x0184 - 0x0170)
class USeqAct_MultiLevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	TArray< struct FLevelStreamingNameCombo >          Levels;                                           		// 0x0170 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUnloadAllOtherLevels : 1;                        		// 0x0180 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHideAllOtherLevels : 1;                          		// 0x0180 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0180 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2132 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_LevelVisibility ( Property size: 3 iter: 3) 
// Class name index: 6917 
// 0x0014 (0x0180 - 0x016C)
class USeqAct_LevelVisibility : public USeqAct_Latent
{
public:
	class ULevelStreaming*                             Level;                                            		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LevelName;                                        		// 0x0174 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x017C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2134 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_PlaySound ( Property size: 11 iter: 12) 
// Class name index: 6919 
// 0x0028 (0x0194 - 0x016C)
class USeqAct_PlaySound : public USeqAct_Latent
{
public:
	class USoundCue*                                   PlaySound;                                        		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraDelay;                                       		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDelayReached : 1;                                		// 0x0178 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x0178 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bStopped : 1;                                     		// 0x0178 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              SoundDuration;                                    		// 0x017C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FadeInTime;                                       		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutTime;                                      		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMultiplier;                                 		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BeforeEndTime;                                    		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2136 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_PrepareMapChange ( Property size: 4 iter: 4) 
// Class name index: 6921 
// 0x001C (0x0188 - 0x016C)
class USeqAct_PrepareMapChange : public USeqAct_Latent
{
public:
	struct FName                                       MainLevelName;                                    		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             InitiallyLoadedSecondaryLevelNames;               		// 0x0174 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bIsHighPriority : 1;                              		// 0x0184 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0184 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2138 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetDOFParams ( Property size: 18 iter: 18) 
// Class name index: 6923 
// 0x0058 (0x01C4 - 0x016C)
class USeqAct_SetDOFParams : public USeqAct_Latent
{
public:
	float                                              FalloffExponent;                                  		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlurKernelSize;                                   		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxNearBlurAmount;                                		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinBlurAmount;                                    		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFarBlurAmount;                                 		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusInnerRadius;                                 		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusDistance;                                    		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FocusPosition;                                    		// 0x0188 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateSeconds;                               		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateElapsed;                               		// 0x0198 (0x0004) [0x0000000000000000]              
	float                                              OldFalloffExponent;                               		// 0x019C (0x0004) [0x0000000000000000]              
	float                                              OldBlurKernelSize;                                		// 0x01A0 (0x0004) [0x0000000000000000]              
	float                                              OldMaxNearBlurAmount;                             		// 0x01A4 (0x0004) [0x0000000000000000]              
	float                                              OldMinBlurAmount;                                 		// 0x01A8 (0x0004) [0x0000000000000000]              
	float                                              OldMaxFarBlurAmount;                              		// 0x01AC (0x0004) [0x0000000000000000]              
	float                                              OldFocusInnerRadius;                              		// 0x01B0 (0x0004) [0x0000000000000000]              
	float                                              OldFocusDistance;                                 		// 0x01B4 (0x0004) [0x0000000000000000]              
	struct FVector                                     OldFocusPosition;                                 		// 0x01B8 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2140 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetMotionBlurParams ( Property size: 4 iter: 4) 
// Class name index: 6925 
// 0x0010 (0x017C - 0x016C)
class USeqAct_SetMotionBlurParams : public USeqAct_Latent
{
public:
	float                                              MotionBlurAmount;                                 		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateSeconds;                               		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateElapsed;                               		// 0x0174 (0x0004) [0x0000000000000000]              
	float                                              OldMotionBlurAmount;                              		// 0x0178 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2142 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_StreamInTextures ( Property size: 11 iter: 12) 
// Class name index: 6927 
// 0x003C (0x01A8 - 0x016C)
class USeqAct_StreamInTextures : public USeqAct_Latent
{
public:
	unsigned long                                      bLocationBased : 1;                               		// 0x016C (0x0004) [0x0000000020000000] [0x00000001] ( CPF_Deprecated )
	unsigned long                                      bStreamingActive : 1;                             		// 0x016C (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bHasTriggeredAllLoaded : 1;                       		// 0x016C (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	float                                              Seconds;                                          		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StreamingDistanceMultiplier;                      		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumWantingResourcesID;                            		// 0x0178 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StopTimestamp;                                    		// 0x017C (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< class UObject* >                           LocationActors;                                   		// 0x0180 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialInterface* >                ForceMaterials;                                   		// 0x0190 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FTextureGroupContainer                      CinematicTextureGroups;                           		// 0x01A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SelectedCinematicTextureGroups;                   		// 0x01A4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2144 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_WaitForLevelsVisible ( Property size: 2 iter: 4) 
// Class name index: 6929 
// 0x0014 (0x0180 - 0x016C)
class USeqAct_WaitForLevelsVisible : public USeqAct_Latent
{
public:
	TArray< struct FName >                             LevelNames;                                       		// 0x016C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x017C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2146 ];

		return pClassPointer;
	};

	void eventActivated ( );
	bool CheckLevelsVisible ( );
};



// Class Engine.SeqAct_Log ( Property size: 5 iter: 6) 
// Class name index: 6931 
// 0x0024 (0x0178 - 0x0154)
class USeqAct_Log : public USequenceAction
{
public:
	unsigned long                                      bOutputToScreen : 1;                              		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIncludeObjComment : 1;                           		// 0x0154 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              TargetDuration;                                   		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     TargetOffset;                                     		// 0x015C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     LogMessage;                                       		// 0x0168 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2148 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_FeatureTest ( Property size: 4 iter: 4) 
// Class name index: 6933 
// 0x0028 (0x01A0 - 0x0178)
class USeqAct_FeatureTest : public USeqAct_Log
{
public:
	struct FString                                     FreezeAtParameters;                               		// 0x0178 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ScreenShotDelay;                                  		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     ScreenShotName;                                   		// 0x018C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              RemainingScreenShotDelay;                         		// 0x019C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2150 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_ModifyCover ( Property size: 3 iter: 3) 
// Class name index: 6935 
// 0x0018 (0x016C - 0x0154)
class USeqAct_ModifyCover : public USequenceAction
{
public:
	TArray< int >                                      Slots;                                            		// 0x0154 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      ManualCoverType;                                  		// 0x0164 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bManualAdjustPlayersOnly : 1;                     		// 0x0168 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2152 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_ModifyHealth ( Property size: 8 iter: 9) 
// Class name index: 6937 
// 0x0020 (0x0174 - 0x0154)
class USeqAct_ModifyHealth : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Momentum;                                         		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Amount;                                           		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHeal : 1;                                        		// 0x0168 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRadial : 1;                                      		// 0x0168 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFalloff : 1;                                     		// 0x0168 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x016C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2154 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_ParticleEventGenerator ( Property size: 9 iter: 10) 
// Class name index: 6939 
// 0x0050 (0x01A4 - 0x0154)
class USeqAct_ParticleEventGenerator : public USequenceAction
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseEmitterLocation : 1;                          		// 0x0154 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x0158 (0x0008) [0x0000000000000000]              
	TArray< struct FString >                           EventNames;                                       		// 0x0160 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              EventTime;                                        		// 0x0170 (0x0004) [0x0000000000000000]              
	struct FVector                                     EventLocation;                                    		// 0x0174 (0x000C) [0x0000000000000000]              
	struct FVector                                     EventDirection;                                   		// 0x0180 (0x000C) [0x0000000000000000]              
	struct FVector                                     EventVelocity;                                    		// 0x018C (0x000C) [0x0000000000000000]              
	struct FVector                                     EventNormal;                                      		// 0x0198 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2156 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_PlayCameraAnim ( Property size: 9 iter: 10) 
// Class name index: 6941 
// 0x0028 (0x017C - 0x0154)
class USeqAct_PlayCameraAnim : public USequenceAction
{
public:
	class UCameraAnim*                                 CameraAnim;                                       		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLoop : 1;                                        		// 0x015C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRandomStartTime : 1;                             		// 0x015C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              BlendInTime;                                      		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Rate;                                             		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IntensityScale;                                   		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PlaySpace;                                        		// 0x0170 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      UserDefinedSpaceActor;                            		// 0x0174 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2158 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_PlayFaceFXAnim ( Property size: 5 iter: 5) 
// Class name index: 6943 
// 0x0038 (0x018C - 0x0154)
class USeqAct_PlayFaceFXAnim : public USequenceAction
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     FaceFXGroupName;                                  		// 0x015C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FaceFXAnimName;                                   		// 0x016C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   SoundCueToPlay;                                   		// 0x017C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    AkEventToPlay;                                    		// 0x0184 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2160 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_PlayMusicTrack ( Property size: 1 iter: 1) 
// Class name index: 6945 
// 0x002C (0x0180 - 0x0154)
class USeqAct_PlayMusicTrack : public USequenceAction
{
public:
	struct FMusicTrackStruct                           MusicTrack;                                       		// 0x0154 (0x002C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2162 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_Possess ( Property size: 3 iter: 3) 
// Class name index: 6947 
// 0x000C (0x0160 - 0x0154)
class USeqAct_Possess : public USequenceAction
{
public:
	class APawn*                                       PawnToPossess;                                    		// 0x0154 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bKillOldPawn : 1;                                 		// 0x015C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTryToLeaveVehicle : 1;                           		// 0x015C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2164 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_RangeSwitch ( Property size: 1 iter: 2) 
// Class name index: 6949 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_RangeSwitch : public USequenceAction
{
public:
	TArray< struct FSwitchRange >                      Ranges;                                           		// 0x0154 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2166 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetActiveAnimChild ( Property size: 3 iter: 3) 
// Class name index: 6951 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_SetActiveAnimChild : public USequenceAction
{
public:
	struct FName                                       NodeName;                                         		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                ChildIndex;                                       		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendTime;                                        		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2168 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetApexClothingParam ( Property size: 1 iter: 1) 
// Class name index: 6953 
// 0x0004 (0x0158 - 0x0154)
class USeqAct_SetApexClothingParam : public USequenceAction
{
public:
	unsigned long                                      bEnableApexClothingSimulation : 1;                		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2170 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetBlockRigidBody ( Property size: 0 iter: 0) 
// Class name index: 6955 
// 0x0000 (0x0154 - 0x0154)
class USeqAct_SetBlockRigidBody : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2172 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetCameraTarget ( Property size: 2 iter: 3) 
// Class name index: 6957 
// 0x0018 (0x016C - 0x0154)
class USeqAct_SetCameraTarget : public USequenceAction
{
public:
	class AActor*                                      CameraTarget;                                     		// 0x0154 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FViewTargetTransitionParams                 TransitionParams;                                 		// 0x015C (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2174 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_SetMaterial ( Property size: 2 iter: 2) 
// Class name index: 6959 
// 0x000C (0x0160 - 0x0154)
class USeqAct_SetMaterial : public USequenceAction
{
public:
	class UMaterialInterface*                          NewMaterial;                                      		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialIndex;                                    		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2176 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetMatInstScalarParam ( Property size: 3 iter: 3) 
// Class name index: 6961 
// 0x0014 (0x0168 - 0x0154)
class USeqAct_SetMatInstScalarParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParamName;                                        		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScalarValue;                                      		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2178 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetMesh ( Property size: 5 iter: 6) 
// Class name index: 6963 
// 0x0018 (0x016C - 0x0154)
class USeqAct_SetMesh : public USequenceAction
{
public:
	class USkeletalMesh*                               NewSkeletalMesh;                                  		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 NewStaticMesh;                                    		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MeshType;                                         		// 0x0164 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsAllowedToMove : 1;                             		// 0x0168 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAllowDecalsToReattach : 1;                       		// 0x0168 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2180 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetPhysics ( Property size: 1 iter: 1) 
// Class name index: 6965 
// 0x0001 (0x0155 - 0x0154)
class USeqAct_SetPhysics : public USequenceAction
{
public:
	unsigned char                                      newPhysics;                                       		// 0x0154 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2182 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetRigidBodyIgnoreVehicles ( Property size: 0 iter: 0) 
// Class name index: 6967 
// 0x0000 (0x0154 - 0x0154)
class USeqAct_SetRigidBodyIgnoreVehicles : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2184 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetSequenceVariable ( Property size: 0 iter: 0) 
// Class name index: 6969 
// 0x0000 (0x0154 - 0x0154)
class USeqAct_SetSequenceVariable : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2186 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_AccessObjectList ( Property size: 2 iter: 2) 
// Class name index: 6971 
// 0x000C (0x0160 - 0x0154)
class USeqAct_AccessObjectList : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     OutputObject;                                     		// 0x0154 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ObjectIndex;                                      		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2188 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_AddFloat ( Property size: 4 iter: 4) 
// Class name index: 6973 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_AddFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x015C (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0160 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2190 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_AddInt ( Property size: 4 iter: 4) 
// Class name index: 6975 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_AddInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x015C (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0160 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2192 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_CastToFloat ( Property size: 2 iter: 2) 
// Class name index: 6977 
// 0x0008 (0x015C - 0x0154)
class USeqAct_CastToFloat : public USeqAct_SetSequenceVariable
{
public:
	int                                                Value;                                            		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              FloatResult;                                      		// 0x0158 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2194 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_CastToInt ( Property size: 3 iter: 3) 
// Class name index: 6979 
// 0x000C (0x0160 - 0x0154)
class USeqAct_CastToInt : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      bTruncate : 1;                                    		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              Value;                                            		// 0x0158 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x015C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2196 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_DivideFloat ( Property size: 4 iter: 4) 
// Class name index: 6981 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_DivideFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x015C (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0160 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2198 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_DivideInt ( Property size: 4 iter: 4) 
// Class name index: 6983 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_DivideInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x015C (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0160 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2200 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_ModifyObjectList ( Property size: 1 iter: 1) 
// Class name index: 6985 
// 0x0004 (0x0158 - 0x0154)
class USeqAct_ModifyObjectList : public USeqAct_SetSequenceVariable
{
public:
	int                                                ListEntriesCount;                                 		// 0x0154 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2202 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_MultiplyFloat ( Property size: 4 iter: 4) 
// Class name index: 6987 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_MultiplyFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x015C (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0160 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2204 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_MultiplyInt ( Property size: 4 iter: 4) 
// Class name index: 6989 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_MultiplyInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x015C (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0160 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2206 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetBool ( Property size: 1 iter: 1) 
// Class name index: 6991 
// 0x0004 (0x0158 - 0x0154)
class USeqAct_SetBool : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      DefaultValue : 1;                                 		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2208 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetFloat ( Property size: 2 iter: 3) 
// Class name index: 6993 
// 0x0014 (0x0168 - 0x0154)
class USeqAct_SetFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              Target;                                           		// 0x0154 (0x0004) [0x0000000000000000]              
	TArray< float >                                    Value;                                            		// 0x0158 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2210 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_SetInt ( Property size: 2 iter: 3) 
// Class name index: 6995 
// 0x0014 (0x0168 - 0x0154)
class USeqAct_SetInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                Target;                                           		// 0x0154 (0x0004) [0x0000000000000000]              
	TArray< int >                                      Value;                                            		// 0x0158 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2212 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_SetLocation ( Property size: 5 iter: 6) 
// Class name index: 6997 
// 0x0024 (0x0178 - 0x0154)
class USeqAct_SetLocation : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      bSetLocation : 1;                                 		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSetRotation : 1;                                 		// 0x0154 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FVector                                     LocationValue;                                    		// 0x0158 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationValue;                                    		// 0x0164 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     Target;                                           		// 0x0170 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2214 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_SetObject ( Property size: 2 iter: 3) 
// Class name index: 6999 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_SetObject : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     DefaultValue;                                     		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     Value;                                            		// 0x015C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2216 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_SetString ( Property size: 2 iter: 3) 
// Class name index: 7001 
// 0x0020 (0x0174 - 0x0154)
class USeqAct_SetString : public USeqAct_SetSequenceVariable
{
public:
	struct FString                                     Target;                                           		// 0x0154 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Value;                                            		// 0x0164 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2218 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_SubtractFloat ( Property size: 4 iter: 4) 
// Class name index: 7003 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_SubtractFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x015C (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0160 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2220 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SubtractInt ( Property size: 4 iter: 4) 
// Class name index: 7005 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_SubtractInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x015C (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0160 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2222 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetVectorComponents ( Property size: 4 iter: 4) 
// Class name index: 7007 
// 0x0018 (0x016C - 0x0154)
class USeqAct_SetVectorComponents : public USequenceAction
{
public:
	struct FVector                                     OutVector;                                        		// 0x0154 (0x000C) [0x0000000000000000]              
	float                                              X;                                                		// 0x0160 (0x0004) [0x0000000000000000]              
	float                                              Y;                                                		// 0x0164 (0x0004) [0x0000000000000000]              
	float                                              Z;                                                		// 0x0168 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2224 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetWorldAttractorParam ( Property size: 11 iter: 11) 
// Class name index: 7009 
// 0x0084 (0x01D8 - 0x0154)
class USeqAct_SetWorldAttractorParam : public USequenceAction
{
public:
	TArray< class AWorldAttractor* >                   Attractor;                                        		// 0x0154 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bEnabledField : 1;                                		// 0x0164 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bFalloffTypeField : 1;                            		// 0x0164 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFalloffExponentField : 1;                        		// 0x0164 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRangeField : 1;                                  		// 0x0164 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bStrengthField : 1;                               		// 0x0164 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bEnabled : 1;                                     		// 0x0164 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned char                                      FalloffType;                                      		// 0x0168 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       FalloffExponent;                                  		// 0x016C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Range;                                            		// 0x0190 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Strength;                                         		// 0x01B4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2226 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_Switch ( Property size: 5 iter: 5) 
// Class name index: 7011 
// 0x001C (0x0170 - 0x0154)
class USeqAct_Switch : public USequenceAction
{
public:
	int                                                LinkCount;                                        		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                IncrementAmount;                                  		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLooping : 1;                                     		// 0x015C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAutoDisableLinks : 1;                            		// 0x015C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	TArray< int >                                      Indices;                                          		// 0x0160 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2228 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_RandomSwitch ( Property size: 1 iter: 2) 
// Class name index: 7013 
// 0x0010 (0x0180 - 0x0170)
class USeqAct_RandomSwitch : public USeqAct_Switch
{
public:
	TArray< int >                                      AutoDisabledIndices;                              		// 0x0170 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2230 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_Timer ( Property size: 2 iter: 3) 
// Class name index: 7015 
// 0x0008 (0x015C - 0x0154)
class USeqAct_Timer : public USequenceAction
{
public:
	float                                              ActivationTime;                                   		// 0x0154 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Time;                                             		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2232 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_Toggle ( Property size: 1 iter: 1) 
// Class name index: 7017 
// 0x0004 (0x0158 - 0x0154)
class USeqAct_Toggle : public USequenceAction
{
public:
	unsigned long                                      mDontFireOnLoad : 1;                              		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2234 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_Trace ( Property size: 8 iter: 9) 
// Class name index: 7019 
// 0x0040 (0x0194 - 0x0154)
class USeqAct_Trace : public USequenceAction
{
public:
	unsigned long                                      bTraceActors : 1;                                 		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTraceWorld : 1;                                  		// 0x0154 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FVector                                     TraceExtent;                                      		// 0x0158 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartOffset;                                      		// 0x0164 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EndOffset;                                        		// 0x0170 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     HitObject;                                        		// 0x017C (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              Distance;                                         		// 0x0184 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     HitLocation;                                      		// 0x0188 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2236 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SequenceCondition ( Property size: 0 iter: 0) 
// Class name index: 7021 
// 0x0000 (0x0138 - 0x0138)
class USequenceCondition : public USequenceOp
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2238 ];

		return pClassPointer;
	};

};



// Class Engine.SeqCond_CompareBool ( Property size: 1 iter: 2) 
// Class name index: 7023 
// 0x0004 (0x013C - 0x0138)
class USeqCond_CompareBool : public USequenceCondition
{
public:
	unsigned long                                      bResult : 1;                                      		// 0x0138 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2240 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqCond_CompareFloat ( Property size: 2 iter: 2) 
// Class name index: 7025 
// 0x0008 (0x0140 - 0x0138)
class USeqCond_CompareFloat : public USequenceCondition
{
public:
	float                                              ValueA;                                           		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2242 ];

		return pClassPointer;
	};

};



// Class Engine.SeqCond_CompareInt ( Property size: 2 iter: 2) 
// Class name index: 7027 
// 0x0008 (0x0140 - 0x0138)
class USeqCond_CompareInt : public USequenceCondition
{
public:
	int                                                ValueA;                                           		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2244 ];

		return pClassPointer;
	};

};



// Class Engine.SeqCond_CompareObject ( Property size: 0 iter: 0) 
// Class name index: 7029 
// 0x0000 (0x0138 - 0x0138)
class USeqCond_CompareObject : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2246 ];

		return pClassPointer;
	};

};



// Class Engine.SeqCond_GetServerType ( Property size: 0 iter: 1) 
// Class name index: 7031 
// 0x0000 (0x0138 - 0x0138)
class USeqCond_GetServerType : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2248 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqCond_Increment ( Property size: 3 iter: 3) 
// Class name index: 7033 
// 0x000C (0x0144 - 0x0138)
class USeqCond_Increment : public USequenceCondition
{
public:
	int                                                IncrementAmount;                                  		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueA;                                           		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2250 ];

		return pClassPointer;
	};

};



// Class Engine.SeqCond_IncrementFloat ( Property size: 3 iter: 3) 
// Class name index: 7035 
// 0x000C (0x0144 - 0x0138)
class USeqCond_IncrementFloat : public USequenceCondition
{
public:
	float                                              IncrementAmount;                                  		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueA;                                           		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2252 ];

		return pClassPointer;
	};

};



// Class Engine.SeqCond_IsAlive ( Property size: 0 iter: 0) 
// Class name index: 7037 
// 0x0000 (0x0138 - 0x0138)
class USeqCond_IsAlive : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2254 ];

		return pClassPointer;
	};

};



// Class Engine.SeqCond_IsBenchmarking ( Property size: 0 iter: 1) 
// Class name index: 7039 
// 0x0000 (0x0138 - 0x0138)
class USeqCond_IsBenchmarking : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2256 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqCond_IsConsole ( Property size: 0 iter: 0) 
// Class name index: 7041 
// 0x0000 (0x0138 - 0x0138)
class USeqCond_IsConsole : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2258 ];

		return pClassPointer;
	};

};



// Class Engine.SeqCond_IsInCombat ( Property size: 0 iter: 0) 
// Class name index: 7043 
// 0x0000 (0x0138 - 0x0138)
class USeqCond_IsInCombat : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2260 ];

		return pClassPointer;
	};

};



// Class Engine.SeqCond_IsLoggedIn ( Property size: 1 iter: 2) 
// Class name index: 7045 
// 0x0004 (0x013C - 0x0138)
class USeqCond_IsLoggedIn : public USequenceCondition
{
public:
	int                                                NumNeededLoggedIn;                                		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2262 ];

		return pClassPointer;
	};

	bool eventCheckLogins ( );
};



// Class Engine.SeqCond_IsPIE ( Property size: 0 iter: 1) 
// Class name index: 7047 
// 0x0000 (0x0138 - 0x0138)
class USeqCond_IsPIE : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2264 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqCond_IsSameTeam ( Property size: 0 iter: 0) 
// Class name index: 7049 
// 0x0000 (0x0138 - 0x0138)
class USeqCond_IsSameTeam : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2266 ];

		return pClassPointer;
	};

};



// Class Engine.SeqCond_MatureLanguage ( Property size: 0 iter: 0) 
// Class name index: 7051 
// 0x0000 (0x0138 - 0x0138)
class USeqCond_MatureLanguage : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2268 ];

		return pClassPointer;
	};

};



// Class Engine.SeqCond_ShowGore ( Property size: 0 iter: 0) 
// Class name index: 7053 
// 0x0000 (0x0138 - 0x0138)
class USeqCond_ShowGore : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2270 ];

		return pClassPointer;
	};

};



// Class Engine.SeqCond_SwitchBase ( Property size: 0 iter: 4) 
// Class name index: 7055 
// 0x0000 (0x0138 - 0x0138)
class USeqCond_SwitchBase : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2272 ];

		return pClassPointer;
	};

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};



// Class Engine.SeqCond_SwitchClass ( Property size: 1 iter: 6) 
// Class name index: 7057 
// 0x0010 (0x0148 - 0x0138)
class USeqCond_SwitchClass : public USeqCond_SwitchBase
{
public:
	TArray< struct FSwitchClassInfo >                  ClassArray;                                       		// 0x0138 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2274 ];

		return pClassPointer;
	};

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};



// Class Engine.SeqCond_SwitchObject ( Property size: 1 iter: 6) 
// Class name index: 7059 
// 0x0010 (0x0148 - 0x0138)
class USeqCond_SwitchObject : public USeqCond_SwitchBase
{
public:
	TArray< struct FSwitchObjectCase >                 SupportedValues;                                  		// 0x0138 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2276 ];

		return pClassPointer;
	};

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};



// Class Engine.SeqCond_SwitchPlatform ( Property size: 0 iter: 0) 
// Class name index: 7061 
// 0x0000 (0x0138 - 0x0138)
class USeqCond_SwitchPlatform : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2278 ];

		return pClassPointer;
	};

};



// Class Engine.SequenceEvent ( Property size: 14 iter: 18) 
// Class name index: 7063 
// 0x0040 (0x0178 - 0x0138)
class USequenceEvent : public USequenceOp
{
public:
	TArray< class USequenceEvent* >                    DuplicateEvts;                                    		// 0x0138 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      Originator;                                       		// 0x0148 (0x0008) [0x0000000000000000]              
	class AActor*                                      Instigator;                                       		// 0x0150 (0x0008) [0x0000000000000000]              
	float                                              ActivationTime;                                   		// 0x0158 (0x0004) [0x0000000000000000]              
	float                                              mDeltaActivationTime;                             		// 0x015C (0x0004) [0x0000000000000000]              
	int                                                TriggerCount;                                     		// 0x0160 (0x0004) [0x0000000000000000]              
	int                                                MaxTriggerCount;                                  		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReTriggerDelay;                                   		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x016C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x016C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRegistered : 1;                                  		// 0x016C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bClientSideOnly : 1;                              		// 0x016C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned char                                      Priority;                                         		// 0x0170 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxWidth;                                         		// 0x0174 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2280 ];

		return pClassPointer;
	};

	void eventToggled ( );
	void Reset ( );
	bool CheckActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest, unsigned long bPushTop, TArray< int >* ActivateIndices );
	void eventRegisterEvent ( );
};



// Class Engine.SeqEvent_AISeeEnemy ( Property size: 1 iter: 1) 
// Class name index: 7065 
// 0x0004 (0x017C - 0x0178)
class USeqEvent_AISeeEnemy : public USequenceEvent
{
public:
	float                                              MaxSightDistance;                                 		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2282 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_AnalogInput ( Property size: 3 iter: 3) 
// Class name index: 7067 
// 0x0018 (0x0190 - 0x0178)
class USeqEvent_AnalogInput : public USequenceEvent
{
public:
	unsigned long                                      bTrapInput : 1;                                   		// 0x0178 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                AllowedPlayerIndex;                               		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             InputNames;                                       		// 0x0180 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2284 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_AnimNotify ( Property size: 1 iter: 1) 
// Class name index: 7069 
// 0x0008 (0x0180 - 0x0178)
class USeqEvent_AnimNotify : public USequenceEvent
{
public:
	struct FName                                       NotifyName;                                       		// 0x0178 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2286 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_Console ( Property size: 2 iter: 2) 
// Class name index: 7071 
// 0x0018 (0x0190 - 0x0178)
class USeqEvent_Console : public USequenceEvent
{
public:
	struct FName                                       ConsoleEventName;                                 		// 0x0178 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     EventDesc;                                        		// 0x0180 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2288 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_ConstraintBroken ( Property size: 0 iter: 0) 
// Class name index: 7073 
// 0x0000 (0x0178 - 0x0178)
class USeqEvent_ConstraintBroken : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2290 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_Destroyed ( Property size: 0 iter: 0) 
// Class name index: 7075 
// 0x0000 (0x0178 - 0x0178)
class USeqEvent_Destroyed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2292 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_GetInventory ( Property size: 0 iter: 0) 
// Class name index: 7077 
// 0x0000 (0x0178 - 0x0178)
class USeqEvent_GetInventory : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2294 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_Input ( Property size: 3 iter: 3) 
// Class name index: 7079 
// 0x0018 (0x0190 - 0x0178)
class USeqEvent_Input : public USequenceEvent
{
public:
	unsigned long                                      bTrapInput : 1;                                   		// 0x0178 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                AllowedPlayerIndex;                               		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             InputNames;                                       		// 0x0180 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2296 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_LevelBeginning ( Property size: 0 iter: 0) 
// Class name index: 7081 
// 0x0000 (0x0178 - 0x0178)
class USeqEvent_LevelBeginning : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2298 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_LevelLoaded ( Property size: 0 iter: 1) 
// Class name index: 7083 
// 0x0000 (0x0178 - 0x0178)
class USeqEvent_LevelLoaded : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2300 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqEvent_LevelStartup ( Property size: 0 iter: 0) 
// Class name index: 7085 
// 0x0000 (0x0178 - 0x0178)
class USeqEvent_LevelStartup : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2302 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_Mover ( Property size: 1 iter: 6) 
// Class name index: 7087 
// 0x0004 (0x017C - 0x0178)
class USeqEvent_Mover : public USequenceEvent
{
public:
	float                                              StayOpenTime;                                     		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2304 ];

		return pClassPointer;
	};

	void NotifyFinishedOpen ( );
	void NotifyDetached ( class AActor* Other );
	void NotifyAttached ( class AActor* Other );
	void NotifyEncroachingOn ( class AActor* Hit );
	void eventRegisterEvent ( );
};



// Class Engine.SeqEvent_ParticleEvent ( Property size: 7 iter: 9) 
// Class name index: 7089 
// 0x0034 (0x01AC - 0x0178)
class USeqEvent_ParticleEvent : public USequenceEvent
{
public:
	unsigned char                                      EventType;                                        		// 0x0178 (0x0001) [0x0000000000000000]              
	struct FVector                                     EventPosition;                                    		// 0x017C (0x000C) [0x0000000000000000]              
	float                                              EventEmitterTime;                                 		// 0x0188 (0x0004) [0x0000000000000000]              
	struct FVector                                     EventVelocity;                                    		// 0x018C (0x000C) [0x0000000000000000]              
	float                                              EventParticleTime;                                		// 0x0198 (0x0004) [0x0000000000000000]              
	struct FVector                                     EventNormal;                                      		// 0x019C (0x000C) [0x0000000000000000]              
	unsigned long                                      UseRelfectedImpactVector : 1;                     		// 0x01A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2306 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqEvent_ProjectileLanded ( Property size: 1 iter: 1) 
// Class name index: 7091 
// 0x0004 (0x017C - 0x0178)
class USeqEvent_ProjectileLanded : public USequenceEvent
{
public:
	float                                              MaxDistance;                                      		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2308 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_RemoteEvent ( Property size: 2 iter: 3) 
// Class name index: 7093 
// 0x000C (0x0184 - 0x0178)
class USeqEvent_RemoteEvent : public USequenceEvent
{
public:
	struct FName                                       EventName;                                        		// 0x0178 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0180 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2310 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqEvent_RigidBodyCollision ( Property size: 1 iter: 1) 
// Class name index: 7095 
// 0x0004 (0x017C - 0x0178)
class USeqEvent_RigidBodyCollision : public USequenceEvent
{
public:
	float                                              MinCollisionVelocity;                             		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2312 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_SeeDeath ( Property size: 0 iter: 0) 
// Class name index: 7097 
// 0x0000 (0x0178 - 0x0178)
class USeqEvent_SeeDeath : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2314 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_SequenceActivated ( Property size: 1 iter: 1) 
// Class name index: 7099 
// 0x0010 (0x0188 - 0x0178)
class USeqEvent_SequenceActivated : public USequenceEvent
{
public:
	struct FString                                     InputLabel;                                       		// 0x0178 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2316 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_TakeDamage ( Property size: 6 iter: 11) 
// Class name index: 7101 
// 0x0030 (0x01A8 - 0x0178)
class USeqEvent_TakeDamage : public USequenceEvent
{
public:
	float                                              MinDamageAmount;                                  		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageThreshold;                                  		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            DamageTypes;                                      		// 0x0180 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            IgnoreDamageTypes;                                		// 0x0190 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CurrentDamage;                                    		// 0x01A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bResetDamageOnToggle : 1;                         		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2318 ];

		return pClassPointer;
	};

	void eventToggled ( );
	int eventGetObjClassVersion ( );
	void Reset ( );
	void HandleDamage ( class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, int inAmount );
	bool IsValidDamageType ( class UClass* inDamageType );
};



// Class Engine.SeqEvent_Touch ( Property size: 6 iter: 11) 
// Class name index: 7103 
// 0x0034 (0x01AC - 0x0178)
class USeqEvent_Touch : public USequenceEvent
{
public:
	TArray< class UClass* >                            ClassProximityTypes;                              		// 0x0178 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            IgnoredClassProximityTypes;                       		// 0x0188 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bForceOverlapping : 1;                            		// 0x0198 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseInstigator : 1;                               		// 0x0198 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowDeadPawns : 1;                              		// 0x0198 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	TArray< class AActor* >                            TouchedList;                                      		// 0x019C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2320 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void NotifyTouchingPawnDied ( class APawn* P );
	void eventToggled ( );
	bool CheckUnTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest );
	bool CheckTouchActivate ( class AActor* InOriginator, class AActor* InInstigator, unsigned long bTest );
};



// Class Engine.SeqEvent_TouchInput ( Property size: 4 iter: 4) 
// Class name index: 7105 
// 0x0010 (0x0188 - 0x0178)
class USeqEvent_TouchInput : public USequenceEvent
{
public:
	unsigned long                                      bTrapInput : 1;                                   		// 0x0178 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                AllowedPlayerIndex;                               		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AllowedTouchIndex;                                		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AllowedTouchpadIndex;                             		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2322 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_Used ( Property size: 6 iter: 6) 
// Class name index: 7107 
// 0x0040 (0x01B8 - 0x0178)
class USeqEvent_Used : public USequenceEvent
{
public:
	unsigned long                                      bAimToInteract : 1;                               		// 0x0178 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              InteractDistance;                                 		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     InteractText;                                     		// 0x0180 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  InteractIcon;                                     		// 0x0190 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UClass* >                            ClassProximityTypes;                              		// 0x0198 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UClass* >                            IgnoredClassProximityTypes;                       		// 0x01A8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2324 ];

		return pClassPointer;
	};

};



// Class Engine.SequenceVariable ( Property size: 1 iter: 1) 
// Class name index: 7109 
// 0x0008 (0x00D4 - 0x00CC)
class USequenceVariable : public USequenceObject
{
public:
	struct FName                                       VarName;                                          		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2326 ];

		return pClassPointer;
	};

};



// Class Engine.InterpData ( Property size: 12 iter: 13) 
// Class name index: 7111 
// 0x006C (0x0140 - 0x00D4)
class UInterpData : public USequenceVariable
{
public:
	float                                              InterpLength;                                     		// 0x00D4 (0x0004) [0x0000000000000000]              
	float                                              PathBuildTime;                                    		// 0x00D8 (0x0004) [0x0000000000000000]              
	TArray< class UInterpGroup* >                      InterpGroups;                                     		// 0x00DC (0x0010) [0x0000000000400008]              ( CPF_ExportObject | CPF_NeedCtorLink )
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x00EC (0x0008) [0x0000000000000008]              ( CPF_ExportObject )
	TArray< class UInterpFilter* >                     InterpFilters;                                    		// 0x00F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UInterpFilter*                               SelectedFilter;                                   		// 0x0104 (0x0008) [0x0000000000000000]              
	TArray< class UInterpFilter* >                     DefaultFilters;                                   		// 0x010C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              EdSectionStart;                                   		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              EdSectionEnd;                                     		// 0x0120 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShouldBakeAndPrune : 1;                          		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< struct FAnimSetBakeAndPruneStatus >        BakeAndPruneStatus;                               		// 0x0128 (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	class UInterpGroupDirector*                        CachedDirectorGroup;                              		// 0x0138 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2328 ];

		return pClassPointer;
	};

};



// Class Engine.SeqVar_Bool ( Property size: 1 iter: 1) 
// Class name index: 7113 
// 0x0004 (0x00D8 - 0x00D4)
class USeqVar_Bool : public USequenceVariable
{
public:
	int                                                bValue;                                           		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2330 ];

		return pClassPointer;
	};

};



// Class Engine.SeqVar_External ( Property size: 2 iter: 2) 
// Class name index: 7115 
// 0x0018 (0x00EC - 0x00D4)
class USeqVar_External : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                     		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     VariableLabel;                                    		// 0x00DC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2332 ];

		return pClassPointer;
	};

};



// Class Engine.SeqVar_Float ( Property size: 1 iter: 1) 
// Class name index: 7117 
// 0x0004 (0x00D8 - 0x00D4)
class USeqVar_Float : public USequenceVariable
{
public:
	float                                              FloatValue;                                       		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2334 ];

		return pClassPointer;
	};

};



// Class Engine.SeqVar_RandomFloat ( Property size: 2 iter: 2) 
// Class name index: 7119 
// 0x0008 (0x00E0 - 0x00D8)
class USeqVar_RandomFloat : public USeqVar_Float
{
public:
	float                                              Min;                                              		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Max;                                              		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2336 ];

		return pClassPointer;
	};

};



// Class Engine.SeqVar_Int ( Property size: 1 iter: 1) 
// Class name index: 7121 
// 0x0004 (0x00D8 - 0x00D4)
class USeqVar_Int : public USequenceVariable
{
public:
	int                                                IntValue;                                         		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2338 ];

		return pClassPointer;
	};

};



// Class Engine.SeqVar_RandomInt ( Property size: 2 iter: 2) 
// Class name index: 7123 
// 0x0008 (0x00E0 - 0x00D8)
class USeqVar_RandomInt : public USeqVar_Int
{
public:
	int                                                Min;                                              		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Max;                                              		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2340 ];

		return pClassPointer;
	};

};



// Class Engine.SeqVar_Named ( Property size: 3 iter: 3) 
// Class name index: 7125 
// 0x0014 (0x00E8 - 0x00D4)
class USeqVar_Named : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                     		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FindVarName;                                      		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x00E4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2342 ];

		return pClassPointer;
	};

};



// Class Engine.SeqVar_Object ( Property size: 3 iter: 5) 
// Class name index: 7127 
// 0x0024 (0x00F8 - 0x00D4)
class USeqVar_Object : public USequenceVariable
{
public:
	class UObject*                                     ObjValue;                                         		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ActorLocation;                                    		// 0x00DC (0x000C) [0x0000000000002000]              ( CPF_Transient )
	TArray< class UClass* >                            SupportedClasses;                                 		// 0x00E8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2344 ];

		return pClassPointer;
	};

	void SetObjectValue ( class UObject* NewValue );
	class UObject* GetObjectValue ( );
};



// Class Engine.SeqVar_Character ( Property size: 1 iter: 1) 
// Class name index: 7129 
// 0x0008 (0x0100 - 0x00F8)
class USeqVar_Character : public USeqVar_Object
{
public:
	class UClass*                                      PawnClass;                                        		// 0x00F8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2346 ];

		return pClassPointer;
	};

};



// Class Engine.SeqVar_Group ( Property size: 3 iter: 3) 
// Class name index: 7131 
// 0x001C (0x0114 - 0x00F8)
class USeqVar_Group : public USeqVar_Object
{
public:
	struct FName                                       GroupName;                                        		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCachedList : 1;                                  		// 0x0100 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< class UObject* >                           Actors;                                           		// 0x0104 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2348 ];

		return pClassPointer;
	};

};



// Class Engine.SeqVar_ObjectList ( Property size: 1 iter: 3) 
// Class name index: 7133 
// 0x0010 (0x0108 - 0x00F8)
class USeqVar_ObjectList : public USeqVar_Object
{
public:
	TArray< class UObject* >                           ObjList;                                          		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2350 ];

		return pClassPointer;
	};

	void SetObjectValue ( class UObject* NewValue );
	class UObject* GetObjectValue ( );
};



// Class Engine.SeqVar_ObjectVolume ( Property size: 4 iter: 4) 
// Class name index: 7135 
// 0x0028 (0x0120 - 0x00F8)
class USeqVar_ObjectVolume : public USeqVar_Object
{
public:
	float                                              LastUpdateTime;                                   		// 0x00F8 (0x0004) [0x0000000000000000]              
	TArray< class UObject* >                           ContainedObjects;                                 		// 0x00FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UClass* >                            ExcludeClassList;                                 		// 0x010C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bCollidingOnly : 1;                               		// 0x011C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2352 ];

		return pClassPointer;
	};

};



// Class Engine.SeqVar_Player ( Property size: 3 iter: 5) 
// Class name index: 7137 
// 0x0018 (0x0110 - 0x00F8)
class USeqVar_Player : public USeqVar_Object
{
public:
	TArray< class UObject* >                           Players;                                          		// 0x00F8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bAllPlayers : 1;                                  		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                PlayerIdx;                                        		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2354 ];

		return pClassPointer;
	};

	class UObject* GetObjectValue ( );
	void UpdatePlayersList ( );
};



// Class Engine.SeqVar_String ( Property size: 1 iter: 1) 
// Class name index: 7139 
// 0x0010 (0x00E4 - 0x00D4)
class USeqVar_String : public USequenceVariable
{
public:
	struct FString                                     StrValue;                                         		// 0x00D4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2356 ];

		return pClassPointer;
	};

};



// Class Engine.SeqVar_Vector ( Property size: 1 iter: 1) 
// Class name index: 7141 
// 0x000C (0x00E0 - 0x00D4)
class USeqVar_Vector : public USequenceVariable
{
public:
	struct FVector                                     VectValue;                                        		// 0x00D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2358 ];

		return pClassPointer;
	};

};



// Class Engine.AmbientSound ( Property size: 3 iter: 3) 
// Class name index: 7143 
// 0x000C (0x0254 - 0x0248)
class AAmbientSound : public AKeypoint
{
public:
	unsigned long                                      bAutoPlay : 1;                                    		// 0x0248 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsPlaying : 1;                                   		// 0x0248 (0x0004) [0x0000000000000000] [0x00000002] 
	class UAudioComponent*                             AudioComponent;                                   		// 0x024C (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2360 ];

		return pClassPointer;
	};

};



// Class Engine.AmbientSoundMovable ( Property size: 0 iter: 0) 
// Class name index: 7145 
// 0x0000 (0x0254 - 0x0254)
class AAmbientSoundMovable : public AAmbientSound
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2362 ];

		return pClassPointer;
	};

};



// Class Engine.AmbientSoundSimple ( Property size: 3 iter: 3) 
// Class name index: 7147 
// 0x0018 (0x026C - 0x0254)
class AAmbientSoundSimple : public AAmbientSound
{
public:
	class USoundNodeAmbient*                           AmbientProperties;                                		// 0x0254 (0x0008) [0x0000000004020001]              ( CPF_Edit | CPF_EditConst | CPF_EditInline )
	class USoundCue*                                   SoundCueInstance;                                 		// 0x025C (0x0008) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USoundNodeAmbient*                           SoundNodeInstance;                                		// 0x0264 (0x0008) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2364 ];

		return pClassPointer;
	};

};



// Class Engine.AmbientSoundNonLoop ( Property size: 0 iter: 0) 
// Class name index: 7149 
// 0x0000 (0x026C - 0x026C)
class AAmbientSoundNonLoop : public AAmbientSoundSimple
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2366 ];

		return pClassPointer;
	};

};



// Class Engine.AmbientSoundSimpleToggleable ( Property size: 7 iter: 15) 
// Class name index: 7151 
// 0x0014 (0x0280 - 0x026C)
class AAmbientSoundSimpleToggleable : public AAmbientSoundSimple
{
public:
	unsigned long                                      bCurrentlyPlaying : 1;                            		// 0x026C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bFadeOnToggle : 1;                                		// 0x026C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIgnoreAutoPlay : 1;                              		// 0x026C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	float                                              FadeInDuration;                                   		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeInVolumeLevel;                                		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutDuration;                                  		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutVolumeLevel;                               		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2368 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record );
	void OnToggle ( class USeqAct_Toggle* Action );
	void StopPlaying ( );
	void StartPlaying ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};



// Class Engine.AmbientSoundNonLoopingToggleable ( Property size: 0 iter: 0) 
// Class name index: 7153 
// 0x0000 (0x0280 - 0x0280)
class AAmbientSoundNonLoopingToggleable : public AAmbientSoundSimpleToggleable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2370 ];

		return pClassPointer;
	};

};



// Class Engine.AmbientSoundSpline ( Property size: 3 iter: 3) 
// Class name index: 7155 
// 0x0018 (0x026C - 0x0254)
class AAmbientSoundSpline : public AAmbientSound
{
public:
	float                                              DistanceBetweenPoints;                            		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class USplineComponent*                            SplineComponent;                                  		// 0x0258 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     TestPoint;                                        		// 0x0260 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2372 ];

		return pClassPointer;
	};

};



// Class Engine.AmbientSoundSimpleSpline ( Property size: 1 iter: 1) 
// Class name index: 7157 
// 0x0004 (0x0270 - 0x026C)
class AAmbientSoundSimpleSpline : public AAmbientSoundSpline
{
public:
	int                                                EditedSlot;                                       		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2374 ];

		return pClassPointer;
	};

};



// Class Engine.AmbientSoundSplineMultiCue ( Property size: 1 iter: 1) 
// Class name index: 7159 
// 0x0004 (0x0270 - 0x026C)
class AAmbientSoundSplineMultiCue : public AAmbientSoundSpline
{
public:
	int                                                EditedSlot;                                       		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2376 ];

		return pClassPointer;
	};

};



// Class Engine.DistributionFloatSoundParameter ( Property size: 0 iter: 0) 
// Class name index: 7161 
// 0x0003 (0x009C - 0x0099)
class UDistributionFloatSoundParameter : public UDistributionFloatParameterBase
{
public:
//	 LastOffset: 99
//	 Class Propsize: 9c

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2378 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNode ( Property size: 2 iter: 2) 
// Class name index: 7163 
// 0x0014 (0x0074 - 0x0060)
class USoundNode : public UObject
{
public:
	int                                                NodeUpdateHint;                                   		// 0x0060 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class USoundNode* >                        ChildNodes;                                       		// 0x0064 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2380 ];

		return pClassPointer;
	};

};



// Class Engine.ForcedLoopSoundNode ( Property size: 0 iter: 0) 
// Class name index: 7165 
// 0x0000 (0x0074 - 0x0074)
class UForcedLoopSoundNode : public USoundNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2382 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeAmbient ( Property size: 14 iter: 15) 
// Class name index: 7167 
// 0x003C (0x00B0 - 0x0074)
class USoundNodeAmbient : public USoundNode
{
public:
	unsigned long                                      bAttenuate : 1;                                   		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSpatialize : 1;                                  		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAttenuateWithLPF : 1;                            		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              dBAttenuationAtMax;                               		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DistanceModel;                                    		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusMin;                                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusMax;                                        		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LPFRadiusMin;                                     		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LPFRadiusMax;                                     		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMin;                                         		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMax;                                         		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMin;                                        		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMax;                                        		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FAmbientSoundSlot >                 SoundSlots;                                       		// 0x00A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2384 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeAmbientNonLoop ( Property size: 3 iter: 3) 
// Class name index: 7169 
// 0x002C (0x00DC - 0x00B0)
class USoundNodeAmbientNonLoop : public USoundNodeAmbient
{
public:
	float                                              DelayMin;                                         		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DelayMax;                                         		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       DelayTime;                                        		// 0x00B8 (0x0024) [0x0000000020480000]              ( CPF_Component | CPF_NeedCtorLink | CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2386 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeAmbientNonLoopToggle ( Property size: 0 iter: 0) 
// Class name index: 7171 
// 0x0000 (0x00DC - 0x00DC)
class USoundNodeAmbientNonLoopToggle : public USoundNodeAmbientNonLoop
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2388 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeAttenuation ( Property size: 11 iter: 13) 
// Class name index: 7173 
// 0x0020 (0x0094 - 0x0074)
class USoundNodeAttenuation : public USoundNode
{
public:
	unsigned long                                      bAttenuate : 1;                                   		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSpatialize : 1;                                  		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAttenuateWithLPF : 1;                            		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              dBAttenuationAtMax;                               		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OmniRadius;                                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DistanceAlgorithm;                                		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DistanceType;                                     		// 0x0081 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusMin;                                        		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusMax;                                        		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LPFRadiusMin;                                     		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LPFRadiusMax;                                     		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2390 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeAttenuationAndGain ( Property size: 16 iter: 16) 
// Class name index: 7175 
// 0x0030 (0x00A4 - 0x0074)
class USoundNodeAttenuationAndGain : public USoundNode
{
public:
	unsigned long                                      bAttenuate : 1;                                   		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSpatialize : 1;                                  		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAttenuateWithLPF : 1;                            		// 0x0074 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              dBAttenuationAtMax;                               		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OmniRadius;                                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      GainDistanceAlgorithm;                            		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AttenuateDistanceAlgorithm;                       		// 0x0081 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DistanceType;                                     		// 0x0082 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinimalVolume;                                    		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusMin;                                        		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusPeak;                                       		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusMax;                                        		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LPFMinimal;                                       		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LPFRadiusMin;                                     		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LPFRadiusPeak;                                    		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LPFRadiusMax;                                     		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2392 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeConcatenator ( Property size: 1 iter: 1) 
// Class name index: 7177 
// 0x0010 (0x0084 - 0x0074)
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray< float >                                    InputVolume;                                      		// 0x0074 (0x0010) [0x0000000000400049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2394 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeConcatenatorRadio ( Property size: 0 iter: 0) 
// Class name index: 7179 
// 0x0000 (0x0074 - 0x0074)
class USoundNodeConcatenatorRadio : public USoundNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2396 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeDelay ( Property size: 3 iter: 3) 
// Class name index: 7181 
// 0x002C (0x00A0 - 0x0074)
class USoundNodeDelay : public USoundNode
{
public:
	float                                              DelayMin;                                         		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DelayMax;                                         		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       DelayDuration;                                    		// 0x007C (0x0024) [0x0000000020480000]              ( CPF_Component | CPF_NeedCtorLink | CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2398 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeDistanceCrossFade ( Property size: 1 iter: 2) 
// Class name index: 7183 
// 0x0010 (0x0084 - 0x0074)
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray< struct FDistanceDatum >                    CrossFadeInput;                                   		// 0x0074 (0x0010) [0x0000000000480049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2400 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeDoppler ( Property size: 1 iter: 1) 
// Class name index: 7185 
// 0x0004 (0x0078 - 0x0074)
class USoundNodeDoppler : public USoundNode
{
public:
	float                                              DopplerIntensity;                                 		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2402 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeEnveloper ( Property size: 8 iter: 8) 
// Class name index: 7187 
// 0x0024 (0x0098 - 0x0074)
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                              LoopStart;                                        		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LoopEnd;                                          		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DurationAfterLoop;                                		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LoopCount;                                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLoopIndefinitely : 1;                            		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLoop : 1;                                        		// 0x0084 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UDistributionFloatConstantCurve*             VolumeInterpCurve;                                		// 0x0088 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDistributionFloatConstantCurve*             PitchInterpCurve;                                 		// 0x0090 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2404 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeLooping ( Property size: 4 iter: 4) 
// Class name index: 7189 
// 0x0030 (0x00A4 - 0x0074)
class USoundNodeLooping : public USoundNode
{
public:
	unsigned long                                      bLoopIndefinitely : 1;                            		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              LoopCountMin;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LoopCountMax;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       LoopCount;                                        		// 0x0080 (0x0024) [0x0000000020480000]              ( CPF_Component | CPF_NeedCtorLink | CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2406 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeMature ( Property size: 0 iter: 0) 
// Class name index: 7191 
// 0x0000 (0x0074 - 0x0074)
class USoundNodeMature : public USoundNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2408 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeMixer ( Property size: 1 iter: 1) 
// Class name index: 7193 
// 0x0010 (0x0084 - 0x0074)
class USoundNodeMixer : public USoundNode
{
public:
	TArray< float >                                    InputVolume;                                      		// 0x0074 (0x0010) [0x0000000000400049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2410 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeModulator ( Property size: 6 iter: 6) 
// Class name index: 7195 
// 0x0058 (0x00CC - 0x0074)
class USoundNodeModulator : public USoundNode
{
public:
	float                                              PitchMin;                                         		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMax;                                         		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMin;                                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMax;                                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       PitchModulation;                                  		// 0x0084 (0x0024) [0x0000000020480000]              ( CPF_Component | CPF_NeedCtorLink | CPF_Deprecated )
	struct FRawDistributionFloat                       VolumeModulation;                                 		// 0x00A8 (0x0024) [0x0000000020480000]              ( CPF_Component | CPF_NeedCtorLink | CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2412 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeModulatorContinuous ( Property size: 2 iter: 2) 
// Class name index: 7197 
// 0x0048 (0x00BC - 0x0074)
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FRawDistributionFloat                       PitchModulation;                                  		// 0x0074 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       VolumeModulation;                                 		// 0x0098 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2414 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeOscillator ( Property size: 14 iter: 14) 
// Class name index: 7199 
// 0x00B4 (0x0128 - 0x0074)
class USoundNodeOscillator : public USoundNode
{
public:
	unsigned long                                      bModulateVolume : 1;                              		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bModulatePitch : 1;                               		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              AmplitudeMin;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AmplitudeMax;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrequencyMin;                                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrequencyMax;                                     		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffsetMin;                                        		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffsetMax;                                        		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CenterMin;                                        		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CenterMax;                                        		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       Amplitude;                                        		// 0x0098 (0x0024) [0x0000000020480000]              ( CPF_Component | CPF_NeedCtorLink | CPF_Deprecated )
	struct FRawDistributionFloat                       Frequency;                                        		// 0x00BC (0x0024) [0x0000000020480000]              ( CPF_Component | CPF_NeedCtorLink | CPF_Deprecated )
	struct FRawDistributionFloat                       Offset;                                           		// 0x00E0 (0x0024) [0x0000000020480000]              ( CPF_Component | CPF_NeedCtorLink | CPF_Deprecated )
	struct FRawDistributionFloat                       Center;                                           		// 0x0104 (0x0024) [0x0000000020480000]              ( CPF_Component | CPF_NeedCtorLink | CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2416 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeRandom ( Property size: 5 iter: 5) 
// Class name index: 7201 
// 0x002C (0x00A0 - 0x0074)
class USoundNodeRandom : public USoundNode
{
public:
	TArray< float >                                    Weights;                                          		// 0x0074 (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	int                                                PreselectAtLevelLoad;                             		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRandomizeWithoutReplacement : 1;                 		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< unsigned long >                            HasBeenUsed;                                      		// 0x008C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NumRandomUsed;                                    		// 0x009C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2418 ];

		return pClassPointer;
	};

};



// Class Engine.SoundNodeWave ( Property size: 38 iter: 40) 
// Class name index: 7203 
// 0x0284 (0x02F8 - 0x0074)
class USoundNodeWave : public USoundNode
{
public:
	int                                                CompressionQuality;                               		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceRealTimeDecompression : 1;                  		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLoopingSound : 1;                                		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDynamicResource : 1;                             		// 0x0078 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseTTS : 1;                                      		// 0x0078 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bProcedural : 1;                                  		// 0x0078 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bMature : 1;                                      		// 0x0078 (0x0004) [0x0000000000008003] [0x00000020] ( CPF_Edit | CPF_Const | CPF_Localized )
	unsigned long                                      bManualWordWrap : 1;                              		// 0x0078 (0x0004) [0x0000000000008003] [0x00000040] ( CPF_Edit | CPF_Const | CPF_Localized )
	unsigned long                                      bSingleLine : 1;                                  		// 0x0078 (0x0004) [0x0000000000008003] [0x00000080] ( CPF_Edit | CPF_Const | CPF_Localized )
	unsigned char                                      TTSSpeaker;                                       		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DecompressionType;                                		// 0x007D (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      MobileDetailMode;                                 		// 0x007E (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FString                                     SpokenText;                                       		// 0x0080 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	float                                              Volume;                                           		// 0x0090 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	float                                              Pitch;                                            		// 0x0094 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	float                                              Duration;                                         		// 0x0098 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                NumChannels;                                      		// 0x009C (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                SampleRate;                                       		// 0x00A0 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	TArray< int >                                      ChannelOffsets;                                   		// 0x00A4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      ChannelSizes;                                     		// 0x00B4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FUntypedBulkData_Mirror                     RawData;                                          		// 0x00C4 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    VorbisDecompressor;                               		// 0x0104 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    RawPCMData;                                       		// 0x010C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                RawPCMDataSize;                                   		// 0x0114 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FUntypedBulkData_Mirror                     CompressedPCData;                                 		// 0x0118 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUntypedBulkData_Mirror                     CompressedXbox360Data;                            		// 0x0158 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUntypedBulkData_Mirror                     CompressedPS3Data;                                		// 0x0198 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUntypedBulkData_Mirror                     CompressedWiiUData;                               		// 0x01D8 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUntypedBulkData_Mirror                     CompressedIPhoneData;                             		// 0x0218 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUntypedBulkData_Mirror                     CompressedFlashData;                              		// 0x0258 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                ResourceID;                                       		// 0x0298 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ResourceSize;                                     		// 0x029C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FPointer                                    ResourceData;                                     		// 0x02A0 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FSubtitleCue >                      Subtitles;                                        		// 0x02A8 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Comment;                                          		// 0x02B8 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	TArray< struct FLocalizedSubtitle >                LocalizedSubtitles;                               		// 0x02C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SourceFilePath;                                   		// 0x02D8 (0x0010) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     SourceFileTimestamp;                              		// 0x02E8 (0x0010) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2420 ];

		return pClassPointer;
	};

	void eventGeneratePCMData ( int SamplesNeeded, TArray< unsigned char >* Buffer );
};



// Class Engine.SoundNodeWaveStreaming ( Property size: 2 iter: 7) 
// Class name index: 7205 
// 0x0014 (0x030C - 0x02F8)
class USoundNodeWaveStreaming : public USoundNodeWave
{
public:
	TArray< unsigned char >                            QueuedAudio;                                      		// 0x02F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              InactiveDuration;                                 		// 0x0308 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2422 ];

		return pClassPointer;
	};

	void eventGeneratePCMData ( int SamplesNeeded, TArray< unsigned char >* Buffer );
	int eventAvailableAudioBytes ( );
	void eventResetAudio ( );
	void eventQueueSilence ( float Seconds );
	void eventQueueAudio ( TArray< unsigned char > Data );
};



// Class Engine.SoundNodeWaveParam ( Property size: 1 iter: 1) 
// Class name index: 7207 
// 0x0008 (0x007C - 0x0074)
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2424 ];

		return pClassPointer;
	};

};



// Class Engine.LandscapeProxy ( Property size: 28 iter: 33) 
// Class name index: 7209 
// 0x015D (0x039D - 0x0240)
class ALandscapeProxy : public AInfo
{
public:
	struct FGuid                                       LandscapeGuid;                                    		// 0x0240 (0x0010) [0x0000000000000002]              ( CPF_Const )
	int                                                MaxLODLevel;                                      		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinLODLevel;                                      		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LODDistanceFactor;                                		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           DefaultPhysMaterial;                              		// 0x025C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              StreamingDistanceMultiplier;                      		// 0x0264 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMaterialInterface*                          LandscapeMaterial;                                		// 0x0268 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class ULandscapeComponent* >               LandscapeComponents;                              		// 0x0270 (0x0010) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class ULandscapeHeightfieldCollisionComponent* > CollisionComponents;                              		// 0x0280 (0x0010) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0290 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.LandscapeProxy.MaterialInstanceConstantMap
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x02D8 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.LandscapeProxy.WeightmapUsageMap
	float                                              StaticLightingResolution;                         		// 0x0320 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x0324 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class ALandscape*                                  LandscapeActor;                                   		// 0x0328 (0x0008) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bIsProxy : 1;                                     		// 0x0330 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bIsSetup : 1;                                     		// 0x0330 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bResetup : 1;                                     		// 0x0330 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsMovingToLevel : 1;                             		// 0x0330 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                		// 0x0334 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	int                                                CollisionMipLevel;                                		// 0x0350 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MobileLODBias;                                    		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FLandscapeLayerStruct >             LayerInfoObjs;                                    		// 0x0358 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FH7CombatListLayerStruct >          CombatListLayerInfoObjs;                          		// 0x0368 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ComponentSizeQuads;                               		// 0x0378 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SubsectionSizeQuads;                              		// 0x037C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumSubsections;                                   		// 0x0380 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FH7LandscapeGridInfoStruct                  mH7LandscapeGridInfo;                             		// 0x0384 (0x0018) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned char                                      LandscapeType;                                    		// 0x039C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2426 ];

		return pClassPointer;
	};

};



// Class Engine.Landscape ( Property size: 2 iter: 4) 
// Class name index: 7211 
// 0x0023 (0x03C0 - 0x039D)
class ALandscape : public ALandscapeProxy
{
public:
	TArray< struct FName >                             LayerNames;                                       		// 0x03A0 (0x0010) [0x0000000020400000]              ( CPF_NeedCtorLink | CPF_Deprecated )
	TArray< struct FLandscapeLayerInfo >               LayerInfos;                                       		// 0x03B0 (0x0010) [0x0000000020400000]              ( CPF_NeedCtorLink | CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2428 ];

		return pClassPointer;
	};

};



// Class Engine.Terrain ( Property size: 47 iter: 60) 
// Class name index: 7213 
// 0x0134 (0x0374 - 0x0240)
class ATerrain : public AInfo
{
public:
	TArray< struct FTerrainHeight >                    Heights;                                          		// 0x0240 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FTerrainInfoData >                  InfoData;                                         		// 0x0250 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FTerrainLayer >                     Layers;                                           		// 0x0260 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                NormalMapLayer;                                   		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FTerrainDecoLayer >                 DecoLayers;                                       		// 0x0274 (0x0010) [0x0000000000480003]              ( CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FAlphaMap >                         AlphaMaps;                                        		// 0x0284 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UTerrainComponent* >                 TerrainComponents;                                		// 0x0294 (0x0010) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                NumSectionsX;                                     		// 0x02A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumSectionsY;                                     		// 0x02A8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< struct ATerrain_FTerrainWeightedMaterial > WeightedMaterials;                                		// 0x02AC (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UTerrainWeightMapTexture* >          WeightedTextureMaps;                              		// 0x02BC (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                MaxTesselationLevel;                              		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinTessellationLevel;                             		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TesselationDistanceScale;                         		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TessellationCheckDistance;                        		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CollisionTesselationLevel;                        		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FCachedTerrainMaterialArray                 CachedTerrainMaterials[ 0x2 ];                    		// 0x02E0 (0x0020) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                NumVerticesX;                                     		// 0x0300 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumVerticesY;                                     		// 0x0304 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumPatchesX;                                      		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumPatchesY;                                      		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxComponentSize;                                 		// 0x0310 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                StaticLightingResolution;                         		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsOverridingLightResolution : 1;                 		// 0x0318 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBilinearFilterLightmapGeneration : 1;            		// 0x0318 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCastShadow : 1;                                  		// 0x0318 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceDirectLightMap : 1;                         		// 0x0318 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x0318 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSpecular : 1;                              		// 0x0318 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bBlockRigidBody : 1;                              		// 0x0318 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowRigidBodyUnderneath : 1;                    		// 0x0318 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDynamicLights : 1;                        		// 0x0318 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMorphingEnabled : 1;                             		// 0x0318 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bMorphingGradientsEnabled : 1;                    		// 0x0318 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bLocked : 1;                                      		// 0x0318 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bHeightmapLocked : 1;                             		// 0x0318 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bShowingCollision : 1;                            		// 0x0318 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bUseWorldOriginTextureUVs : 1;                    		// 0x0318 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bShowWireframe : 1;                               		// 0x0318 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	class UPhysicalMaterial*                           TerrainPhysMaterialOverride;                      		// 0x031C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x0324 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                		// 0x0328 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0344 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                EditorTessellationLevel;                          		// 0x034C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	TArray< struct FSelectedTerrainVertex >            SelectedVertices;                                 		// 0x0350 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FColor                                      WireframeColor;                                   		// 0x0360 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       LightingGuid;                                     		// 0x0364 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2430 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
	void CalcLayerBounds ( );
};



// Class Engine.LandscapeGizmoActor ( Property size: 7 iter: 7) 
// Class name index: 7215 
// 0x0020 (0x0260 - 0x0240)
class ALandscapeGizmoActor : public AActor
{
public:
	float                                              Width;                                            		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Height;                                           		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LengthZ;                                          		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MarginZ;                                          		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinRelativeZ;                                     		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RelativeScaleZ;                                   		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class ULandscapeInfo*                              TargetLandscapeInfo;                              		// 0x0258 (0x0008) [0x0000000000022001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2432 ];

		return pClassPointer;
	};

};



// Class Engine.LandscapeGizmoActiveActor ( Property size: 17 iter: 19) 
// Class name index: 7217 
// 0x0120 (0x0380 - 0x0260)
class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
{
public:
	unsigned char                                      DataType;                                         		// 0x0260 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0264 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.LandscapeGizmoActiveActor.SelectedData
	class UTexture2D*                                  GizmoTexture;                                     		// 0x02AC (0x0008) [0x0000000000000000]              
	struct FVector2D                                   TextureScale;                                     		// 0x02B4 (0x0008) [0x0000000000000000]              
	TArray< struct FVector >                           SampledHeight;                                    		// 0x02BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FVector >                           SampledNormal;                                    		// 0x02CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SampleSizeX;                                      		// 0x02DC (0x0004) [0x0000000000000000]              
	int                                                SampleSizeY;                                      		// 0x02E0 (0x0004) [0x0000000000000000]              
	float                                              CachedWidth;                                      		// 0x02E4 (0x0004) [0x0000000000000000]              
	float                                              CachedHeight;                                     		// 0x02E8 (0x0004) [0x0000000000000000]              
	float                                              CachedScaleXY;                                    		// 0x02EC (0x0004) [0x0000000000000000]              
	struct FVector                                     FrustumVerts[ 0x8 ];                              		// 0x02F0 (0x0060) [0x0000000000002000]              ( CPF_Transient )
	class UMaterial*                                   GizmoMaterial;                                    		// 0x0350 (0x0008) [0x0000000000000000]              
	class UMaterialInstance*                           GizmoDataMaterial;                                		// 0x0358 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   GizmoMeshMaterial;                                		// 0x0360 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   GizmoMeshMaterial2;                               		// 0x0368 (0x0008) [0x0000000000000000]              
	TArray< struct FName >                             LayerNames;                                       		// 0x0370 (0x0010) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2434 ];

		return pClassPointer;
	};

};



// Class Engine.LandscapeComponent ( Property size: 29 iter: 30) 
// Class name index: 7219 
// 0x0134 (0x036C - 0x0238)
class ULandscapeComponent : public UPrimitiveComponent
{
public:
	int                                                SectionBaseX;                                     		// 0x0238 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                SectionBaseY;                                     		// 0x023C (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                ComponentSizeQuads;                               		// 0x0240 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SubsectionSizeQuads;                              		// 0x0244 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumSubsections;                                   		// 0x0248 (0x0004) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInterface*                          OverrideMaterial;                                 		// 0x024C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MaterialInstance;                                 		// 0x0254 (0x0008) [0x0000000000000000]              
	TArray< struct FWeightmapLayerAllocationInfo >     WeightmapLayerAllocations;                        		// 0x025C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UTexture2D* >                        WeightmapTextures;                                		// 0x026C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x027C (0x0004) MISSED OFFSET
	struct FVector4                                    WeightmapScaleBias;                               		// 0x0280 (0x0010) [0x0000000000000000]              
	float                                              WeightmapSubsectionOffset;                        		// 0x0290 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0xC ];                             		// 0x0294 (0x000C) MISSED OFFSET
	struct FVector4                                    HeightmapScaleBias;                               		// 0x02A0 (0x0010) [0x0000000000000000]              
	class UTexture2D*                                  HeightmapTexture;                                 		// 0x02B0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FBoxSphereBounds                            CachedBoxSphereBounds;                            		// 0x02B8 (0x001C) [0x0000000000000002]              ( CPF_Const )
	struct FBox                                        CachedLocalBox;                                   		// 0x02D4 (0x001C) [0x0000000000000002]              ( CPF_Const )
	struct FGuid                                       LightingGuid;                                     		// 0x02F0 (0x0010) [0x0000000000000002]              ( CPF_Const )
	TArray< class UShadowMap2D* >                      ShadowMaps;                                       		// 0x0300 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FGuid >                             IrrelevantLights;                                 		// 0x0310 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FLightMapRef                                LightMap;                                         		// 0x0320 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    EditToolRenderData;                               		// 0x0328 (0x0008) [0x0000000000001000]              ( CPF_Native )
	int                                                CollisionMipLevel;                                		// 0x0330 (0x0004) [0x0000000000000000]              
	struct FPointer                                    PlatformData;                                     		// 0x0334 (0x0008) [0x0000000000001000]              ( CPF_Native )
	int                                                PlatformDataSize;                                 		// 0x033C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bNeedPostUndo : 1;                                		// 0x0340 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	TArray< class UMaterialInstanceConstant* >         AdditionalMaterialInstances;                      		// 0x0344 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                ForcedLOD;                                        		// 0x0354 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      NeighborLOD[ 0x8 ];                               		// 0x0358 (0x0008) [0x0000000000000000]              
	unsigned char                                      NeighborLODBias[ 0x8 ];                           		// 0x0360 (0x0008) [0x0000000000000000]              
	int                                                LODBias;                                          		// 0x0368 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2436 ];

		return pClassPointer;
	};

};



// Class Engine.LandscapeGizmoRenderComponent ( Property size: 0 iter: 0) 
// Class name index: 7221 
// 0x0000 (0x0238 - 0x0238)
class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2438 ];

		return pClassPointer;
	};

};



// Class Engine.LandscapeHeightfieldCollisionComponent ( Property size: 13 iter: 13) 
// Class name index: 7223 
// 0x00E8 (0x0320 - 0x0238)
class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
{
public:
	struct FUntypedBulkData_Mirror                     CollisionHeightData;                              		// 0x0238 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FName >                             ComponentLayers;                                  		// 0x0278 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FUntypedBulkData_Mirror                     DominantLayerData;                                		// 0x0288 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                SectionBaseX;                                     		// 0x02C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionBaseY;                                     		// 0x02CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                CollisionSizeQuads;                               		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              CollisionScale;                                   		// 0x02D4 (0x0004) [0x0000000000000000]              
	TArray< unsigned char >                            CollisionQuadFlags;                               		// 0x02D8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UPhysicalMaterial* >                 PhysicalMaterials;                                		// 0x02E8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FPointer                                    RBHeightfield;                                    		// 0x02F8 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FBoxSphereBounds                            CachedBoxSphereBounds;                            		// 0x0300 (0x001C) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIncludeHoles : 1;                                		// 0x031C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHeightFieldDataHasHole : 1;                      		// 0x031C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2440 ];

		return pClassPointer;
	};

};



// Class Engine.TerrainComponent ( Property size: 17 iter: 20) 
// Class name index: 7225 
// 0x0098 (0x02D0 - 0x0238)
class UTerrainComponent : public UPrimitiveComponent
{
public:
	TArray< class UShadowMap2D* >                      ShadowMaps;                                       		// 0x0238 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FGuid >                             IrrelevantLights;                                 		// 0x0248 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FPointer                                    TerrainObject;                                    		// 0x0258 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SectionBaseX;                                     		// 0x0260 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionBaseY;                                     		// 0x0264 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionSizeX;                                     		// 0x0268 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionSizeY;                                     		// 0x026C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TrueSectionSizeX;                                 		// 0x0270 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TrueSectionSizeY;                                 		// 0x0274 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FLightMapRef                                LightMap;                                         		// 0x0278 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FTerrainPatchBounds >               PatchBounds;                                      		// 0x0280 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FTerrainMaterialMask >              BatchMaterials;                                   		// 0x0290 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                FullBatch;                                        		// 0x02A0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FTerrainBVTree                              BVTree;                                           		// 0x02A4 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FVector >                           CollisionVertices;                                		// 0x02B4 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    RBHeightfield;                                    		// 0x02C4 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bDisplayCollisionLevel : 1;                       		// 0x02CC (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2442 ];

		return pClassPointer;
	};

};



// Class Engine.H7CombatListLayerInfoObject ( Property size: 3 iter: 3) 
// Class name index: 7227 
// 0x001C (0x007C - 0x0060)
class UH7CombatListLayerInfoObject : public UObject
{
public:
	struct FName                                       LayerName;                                        		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     CombatMap;                                        		// 0x0068 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FColor                                      PaintColor;                                       		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2444 ];

		return pClassPointer;
	};

};



// Class Engine.H7LandscapeGameLayerInfoData ( Property size: 0 iter: 0) 
// Class name index: 7229 
// 0x0000 (0x0060 - 0x0060)
class UH7LandscapeGameLayerInfoData : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2446 ];

		return pClassPointer;
	};

};



// Class Engine.LandscapeInfo ( Property size: 15 iter: 16) 
// Class name index: 7231 
// 0x0304 (0x0364 - 0x0060)
class ULandscapeInfo : public UObject
{
public:
	struct FGuid                                       LandscapeGuid;                                    		// 0x0060 (0x0010) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0070 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.LandscapeInfo.LayerInfoMap
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x00B8 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.LandscapeInfo.CombatListInfoMap
	struct FPointer                                    DataInterface;                                    		// 0x0100 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData02[ 0x48 ];                            		// 0x0108 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.LandscapeInfo.XYtoComponentMap
	unsigned char                                      UnknownData03[ 0x48 ];                            		// 0x0150 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.LandscapeInfo.XYtoCollisionComponentMap
	class ALandscapeProxy*                             LandscapeProxy;                                   		// 0x0198 (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnknownData04[ 0x48 ];                            		// 0x01A0 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.LandscapeInfo.XYtoAddCollisionMap
	struct FSet_Mirror                                 Proxies;                                          		// 0x01E8 (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FSet_Mirror                                 SelectedComponents;                               		// 0x0230 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FSet_Mirror                                 SelectedCollisionComponents;                      		// 0x0278 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FSet_Mirror                                 SelectedRegionComponents;                         		// 0x02C0 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData05[ 0x48 ];                            		// 0x0308 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.LandscapeInfo.SelectedRegion
	struct FString                                     HeightmapFilePath;                                		// 0x0350 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bIsValid : 1;                                     		// 0x0360 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2448 ];

		return pClassPointer;
	};

};



// Class Engine.LandscapeLayerInfoObject ( Property size: 5 iter: 5) 
// Class name index: 7233 
// 0x0020 (0x0080 - 0x0060)
class ULandscapeLayerInfoObject : public UObject
{
public:
	struct FName                                       LayerName;                                        		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Hardness;                                         		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UH7LandscapeGameLayerInfoData*               LayerGameData;                                    		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoWeightBlend : 1;                               		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2450 ];

		return pClassPointer;
	};

};



// Class Engine.TerrainWeightMapTexture ( Property size: 2 iter: 3) 
// Class name index: 7235 
// 0x0018 (0x024C - 0x0234)
class UTerrainWeightMapTexture : public UTexture2D
{
public:
	class ATerrain*                                    ParentTerrain;                                    		// 0x0234 (0x0008) [0x0000000000000002]              ( CPF_Const )
	TArray< struct FPointer >                          WeightedMaterials;                                		// 0x023C (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2452 ];

		return pClassPointer;
	};

};



// Class Engine.TerrainLayerSetup ( Property size: 1 iter: 4) 
// Class name index: 7237 
// 0x0010 (0x0070 - 0x0060)
class UTerrainLayerSetup : public UObject
{
public:
	TArray< struct FTerrainFilteredMaterial >          Materials;                                        		// 0x0060 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2454 ];

		return pClassPointer;
	};

	void PostBeginPlay ( );
};



// Class Engine.TerrainMaterial ( Property size: 9 iter: 10) 
// Class name index: 7239 
// 0x0068 (0x00C8 - 0x0060)
class UTerrainMaterial : public UObject
{
public:
	struct FMatrix                                     LocalToMapping;                                   		// 0x0060 (0x0040) [0x0000000000000000]              
	unsigned char                                      MappingType;                                      		// 0x00A0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingScale;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingRotation;                                  		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingPanU;                                      		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingPanV;                                      		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Material;                                         		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  DisplacementMap;                                  		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              DisplacementScale;                                		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2456 ];

		return pClassPointer;
	};

};



// Class Engine.DataStoreClient ( Property size: 5 iter: 15) 
// Class name index: 7241 
// 0x0050 (0x00C0 - 0x0070)
class UDataStoreClient : public UUIRoot
{
public:
	TArray< struct FString >                           GlobalDataStoreClasses;                           		// 0x0070 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class UUIDataStore* >                      GlobalDataStores;                                 		// 0x0080 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FString >                           PlayerDataStoreClassNames;                        		// 0x0090 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class UClass* >                            PlayerDataStoreClasses;                           		// 0x00A0 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FPlayerDataStoreGroup >             PlayerDataStores;                                 		// 0x00B0 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2458 ];

		return pClassPointer;
	};

	void DebugDumpDataStoreInfo ( unsigned long bVerbose );
	void eventNotifyGameSessionEnded ( );
	class UClass* FindDataStoreClass ( class UClass* RequiredMetaClass );
	void GetPlayerDataStoreClasses ( TArray< class UClass* >* out_DataStoreClasses );
	int FindPlayerDataStoreIndex ( class ULocalPlayer* PlayerOwner );
	bool UnregisterDataStore ( class UUIDataStore* DataStore );
	bool RegisterDataStore ( class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner );
	class UUIDataStore* CreateDataStore ( class UClass* DataStoreClass );
	class UUIDataStore* FindDataStore ( struct FName DataStoreTag, class ULocalPlayer* PlayerOwner );
};



// Class Engine.Console ( Property size: 27 iter: 49) 
// Class name index: 766 
// 0x01C0 (0x0270 - 0x00B0)
class UConsole : public UInteraction
{
public:
	class ULocalPlayer*                                ConsoleTargetPlayer;                              		// 0x00B0 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture_Black;                             		// 0x00B8 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture_White;                             		// 0x00C0 (0x0008) [0x0000000000000000]              
	struct FName                                       ConsoleKey;                                       		// 0x00C8 (0x0008) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FName                                       TypeKey;                                          		// 0x00D0 (0x0008) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxScrollbackSize;                                		// 0x00D8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	TArray< struct FString >                           Scrollback;                                       		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                SBHead;                                           		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                SBPos;                                            		// 0x00F0 (0x0004) [0x0000000000000000]              
	int                                                HistoryTop;                                       		// 0x00F4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HistoryBot;                                       		// 0x00F8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HistoryCur;                                       		// 0x00FC (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     History[ 0x10 ];                                  		// 0x0100 (0x0100) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bNavigatingHistory : 1;                           		// 0x0200 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCaptureKeyInput : 1;                             		// 0x0200 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bCtrl : 1;                                        		// 0x0200 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bEnableUI : 1;                                    		// 0x0200 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bAutoCompleteLocked : 1;                          		// 0x0200 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bRequireCtrlToNavigateAutoComplete : 1;           		// 0x0200 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bIsRuntimeAutoCompleteUpToDate : 1;               		// 0x0200 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	struct FString                                     TypedStr;                                         		// 0x0204 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                TypedStrPos;                                      		// 0x0214 (0x0004) [0x0000000000000000]              
	TArray< struct FAutoCompleteCommand >              ManualAutoCompleteList;                           		// 0x0218 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FAutoCompleteCommand >              AutoCompleteList;                                 		// 0x0228 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                AutoCompleteIndex;                                		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FAutoCompleteNode                           AutoCompleteTree;                                 		// 0x023C (0x0024) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< int >                                      AutoCompleteIndices;                              		// 0x0260 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2460 ];

		return pClassPointer;
	};

	void UpdateCompleteIndices ( );
	void BuildRuntimeAutoCompleteList ( unsigned long bForce );
	void AppendInputText ( struct FString Text );
	bool ProcessControlKey ( struct FName Key, unsigned char Event );
	void FlushPlayerInput ( );
	bool InputChar ( int ControllerId, struct FString Unicode );
	bool InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void PostRender_Console ( class UCanvas* Canvas );
	void StartTyping ( struct FString Text );
	void eventOutputText ( struct FString Text );
	void OutputTextLine ( struct FString Text );
	void ClearOutput ( );
	void ConsoleCommand ( struct FString Command );
	void PurgeCommandFromHistory ( struct FString Command );
	void SetCursorPos ( int Position );
	void SetInputText ( struct FString Text );
	void Initialized ( );
};



// Class Engine.Input ( Property size: 12 iter: 17) 
// Class name index: 649 
// 0x00C8 (0x0178 - 0x00B0)
class UInput : public UInteraction
{
public:
	TArray< struct FKeyBind >                          Bindings;                                         		// 0x00B0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FName >                             PressedKeys;                                      		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                CurrentControllerId;                              		// 0x00D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      CurrentEvent;                                     		// 0x00D4 (0x0001) [0x0000000000000002]              ( CPF_Const )
	float                                              CurrentDelta;                                     		// 0x00D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CurrentDeltaTime;                                 		// 0x00DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00E0 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.Input.NameToPtr
	TArray< struct FPointer >                          AxisArray;                                        		// 0x0128 (0x0010) [0x0000000000101002]              ( CPF_Const | CPF_Native )
	TArray< class USeqEvent_Input* >                   CachedInputEvents;                                		// 0x0138 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class USeqEvent_AnalogInput* >             CachedAnalogInputEvents;                          		// 0x0148 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class USeqEvent_TouchInput* >              CachedTouchInputEvents;                           		// 0x0158 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FTouchTracker >                     CurrentTouches;                                   		// 0x0168 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2462 ];

		return pClassPointer;
	};

	void SetBind ( struct FString Command, struct FName* BindName );
	struct FString GetBind ( struct FName* Key );
	void ResetInput ( );
};



// Class Engine.PlayerInput ( Property size: 58 iter: 77) 
// Class name index: 163 
// 0x0148 (0x02C0 - 0x0178)
class UPlayerInput : public UInput
{
public:
	unsigned long                                      bUsingGamepad : 1;                                		// 0x0178 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bInvertMouse : 1;                                 		// 0x0178 (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bInvertTurn : 1;                                  		// 0x0178 (0x0004) [0x0000000000044000] [0x00000004] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bWasForward : 1;                                  		// 0x0178 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bWasBack : 1;                                     		// 0x0178 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWasLeft : 1;                                     		// 0x0178 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bWasRight : 1;                                    		// 0x0178 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bEdgeForward : 1;                                 		// 0x0178 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bEdgeBack : 1;                                    		// 0x0178 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bEdgeLeft : 1;                                    		// 0x0178 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bEdgeRight : 1;                                   		// 0x0178 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bEnableMouseSmoothing : 1;                        		// 0x0178 (0x0004) [0x0000000000044000] [0x00000800] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bEnableFOVScaling : 1;                            		// 0x0178 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bLockTurnUntilRelease : 1;                        		// 0x0178 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	struct FName                                       LastAxisKeyName;                                  		// 0x017C (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              DoubleClickTimer;                                 		// 0x0184 (0x0004) [0x0000000000000000]              
	float                                              DoubleClickTime;                                  		// 0x0188 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MouseSensitivity;                                 		// 0x018C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              aBaseX;                                           		// 0x0190 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aBaseY;                                           		// 0x0194 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aBaseZ;                                           		// 0x0198 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aMouseX;                                          		// 0x019C (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aMouseY;                                          		// 0x01A0 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aForward;                                         		// 0x01A4 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aTurn;                                            		// 0x01A8 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aStrafe;                                          		// 0x01AC (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aUp;                                              		// 0x01B0 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aLookUp;                                          		// 0x01B4 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aRightAnalogTrigger;                              		// 0x01B8 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aLeftAnalogTrigger;                               		// 0x01BC (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3AccelX;                                       		// 0x01C0 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3AccelY;                                       		// 0x01C4 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3AccelZ;                                       		// 0x01C8 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3Gyro;                                         		// 0x01CC (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aWiiUPointerX;                                    		// 0x01D0 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aWiiUPointerY;                                    		// 0x01D4 (0x0004) [0x0000000000000004]              ( CPF_Input )
	struct FVector                                     aTilt;                                            		// 0x01D8 (0x000C) [0x0000000000000004]              ( CPF_Input )
	struct FVector                                     aRotationRate;                                    		// 0x01E4 (0x000C) [0x0000000000000004]              ( CPF_Input )
	struct FVector                                     aGravity;                                         		// 0x01F0 (0x000C) [0x0000000000000004]              ( CPF_Input )
	struct FVector                                     aAcceleration;                                    		// 0x01FC (0x000C) [0x0000000000000004]              ( CPF_Input )
	struct FVector                                     aTouch[ 0x5 ];                                    		// 0x0208 (0x003C) [0x0000000000000004]              ( CPF_Input )
	struct FVector                                     aBackTouch[ 0x5 ];                                		// 0x0244 (0x003C) [0x0000000000000004]              ( CPF_Input )
	float                                              RawJoyUp;                                         		// 0x0280 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyRight;                                      		// 0x0284 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyLookRight;                                  		// 0x0288 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyLookUp;                                     		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveForwardSpeed;                                 		// 0x0290 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MoveStrafeSpeed;                                  		// 0x0294 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LookRightScale;                                   		// 0x0298 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LookUpScale;                                      		// 0x029C (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	unsigned char                                      bStrafe;                                          		// 0x02A0 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bXAxis;                                           		// 0x02A1 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bYAxis;                                           		// 0x02A2 (0x0001) [0x0000000000000004]              ( CPF_Input )
	float                                              ZeroTime[ 0x2 ];                                  		// 0x02A4 (0x0008) [0x0000000000000000]              
	float                                              SmoothedMouse[ 0x2 ];                             		// 0x02AC (0x0008) [0x0000000000000000]              
	int                                                MouseSamples;                                     		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              MouseSamplingTotal;                               		// 0x02B8 (0x0004) [0x0000000000000000]              
	float                                              AutoUnlockTurnTime;                               		// 0x02BC (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2464 ];

		return pClassPointer;
	};

	void PreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	void ClientInitInputSystem ( );
	void InitInputSystem ( );
	float SmoothMouse ( float aMouse, float DeltaTime, int Index, unsigned char* SampleCount );
	void ClearSmoothing ( );
	void SmartJump ( );
	void Jump ( );
	void ProcessInputMatching ( float DeltaTime );
	unsigned char CheckForDoubleClickMove ( float DeltaTime );
	void CatchDoubleClickInput ( );
	void eventPlayerInput ( float DeltaTime );
	void AdjustMouseSensitivity ( float FOVScale );
	void PostProcessInput ( float DeltaTime );
	void PreProcessInput ( float DeltaTime );
	void DrawHUD ( class AHUD* H );
	void SetSensitivity ( float F );
	bool InvertTurn ( );
	bool InvertMouse ( );
	void CancelMobileInput ( );
};



// Class Engine.PlayerManagerInteraction ( Property size: 0 iter: 0) 
// Class name index: 7246 
// 0x0000 (0x00B0 - 0x00B0)
class UPlayerManagerInteraction : public UInteraction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2466 ];

		return pClassPointer;
	};

};



// Class Engine.UISceneClient ( Property size: 8 iter: 20) 
// Class name index: 7248 
// 0x00AC (0x011C - 0x0070)
class UUISceneClient : public UUIRoot
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x0070 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    RenderViewport;                                   		// 0x0078 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FIntPoint                                   MousePosition;                                    		// 0x0080 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UDataStoreClient*                            DataStoreManager;                                 		// 0x0088 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMatrix                                     CanvasToScreen;                                   		// 0x0090 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMatrix                                     InvCanvasToScreen;                                		// 0x00D0 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UPostProcessChain*                           UIScenePostProcess;                               		// 0x0110 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bEnablePostProcess : 1;                           		// 0x0118 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2468 ];

		return pClassPointer;
	};

	void eventInitializeSceneClient ( );
	struct FMatrix GetInverseCanvasToScreen ( );
	struct FMatrix GetCanvasToScreen ( );
	bool IsUIActive ( int Flags );
};



// Class Engine.UISoundTheme ( Property size: 1 iter: 3) 
// Class name index: 7250 
// 0x0010 (0x0070 - 0x0060)
class UUISoundTheme : public UObject
{
public:
	TArray< struct FSoundEventMapping >                SoundEventBindings;                               		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2470 ];

		return pClassPointer;
	};

	void eventProcessSoundEvent ( struct FName SoundEventName, class APlayerController* SoundOwner );
};



// Class Engine.UIDataStoreSubscriber ( Property size: 0 iter: 6) 
// Class name index: 7252 
// 0x0000 (0x0060 - 0x0060)
class UUIDataStoreSubscriber : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2472 ];

		return pClassPointer;
	};

	void ClearBoundDataStores ( );
	void GetBoundDataStores ( TArray< class UUIDataStore* >* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
};



// Class Engine.UIDataStorePublisher ( Property size: 0 iter: 1) 
// Class name index: 7254 
// 0x0000 (0x0060 - 0x0060)
class UUIDataStorePublisher : public UUIDataStoreSubscriber
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2474 ];

		return pClassPointer;
	};

	bool SaveSubscriberValue ( int BindingIndex, TArray< class UUIDataStore* >* out_BoundDataStores );
};



// Class Engine.UIDataProvider ( Property size: 0 iter: 0) 
// Class name index: 7256 
// 0x0000 (0x0070 - 0x0070)
class UUIDataProvider : public UUIRoot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2476 ];

		return pClassPointer;
	};

};



// Class Engine.UIDataProvider_OnlinePlayerDataBase ( Property size: 1 iter: 3) 
// Class name index: 7258 
// 0x0004 (0x0074 - 0x0070)
class UUIDataProvider_OnlinePlayerDataBase : public UUIDataProvider
{
public:
	int                                                PlayerControllerId;                               		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2478 ];

		return pClassPointer;
	};

	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};



// Class Engine.UIDataProvider_OnlineFriendMessages ( Property size: 7 iter: 14) 
// Class name index: 7260 
// 0x0070 (0x00E4 - 0x0074)
class UUIDataProvider_OnlineFriendMessages : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	TArray< struct FOnlineFriendMessage >              Messages;                                         		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SendingPlayerNameCol;                             		// 0x0084 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsFriendInviteCol;                               		// 0x0094 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bWasAcceptedCol;                                  		// 0x00A4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bWasDeniedCol;                                    		// 0x00B4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MessageCol;                                       		// 0x00C4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LastInviteFrom;                                   		// 0x00D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2480 ];

		return pClassPointer;
	};

	void OnGameInviteReceived ( unsigned char LocalUserNum, struct FString InviterName );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message );
	void OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message );
	void ReadMessages ( );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};



// Class Engine.UIDataProvider_OnlineFriends ( Property size: 15 iter: 20) 
// Class name index: 7262 
// 0x00F0 (0x0164 - 0x0074)
class UUIDataProvider_OnlineFriends : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	TArray< struct FOnlineFriend >                     FriendsList;                                      		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     NickNameCol;                                      		// 0x0084 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PresenceInfoCol;                                  		// 0x0094 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendStateCol;                                   		// 0x00A4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsOnlineCol;                                     		// 0x00B4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsPlayingCol;                                    		// 0x00C4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsPlayingThisGameCol;                            		// 0x00D4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsJoinableCol;                                   		// 0x00E4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bHasVoiceSupportCol;                              		// 0x00F4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bHaveInvitedCol;                                  		// 0x0104 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bHasInvitedYouCol;                                		// 0x0114 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OfflineText;                                      		// 0x0124 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OnlineText;                                       		// 0x0134 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AwayText;                                         		// 0x0144 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BusyText;                                         		// 0x0154 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2482 ];

		return pClassPointer;
	};

	void eventRefreshFriendsList ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnFriendsReadComplete ( unsigned long bWasSuccessful );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};



// Class Engine.UIDataProvider_OnlinePartyChatList ( Property size: 9 iter: 13) 
// Class name index: 7264 
// 0x0090 (0x0104 - 0x0074)
class UUIDataProvider_OnlinePartyChatList : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	TArray< struct FOnlinePartyMember >                PartyMembersList;                                 		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           NatTypes;                                         		// 0x0084 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NickNameCol;                                      		// 0x0094 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NatTypeCol;                                       		// 0x00A4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IsLocalCol;                                       		// 0x00B4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IsInPartyVoiceCol;                                		// 0x00C4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IsTalkingCol;                                     		// 0x00D4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IsInGameSessionCol;                               		// 0x00E4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IsPlayingThisGameCol;                             		// 0x00F4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2484 ];

		return pClassPointer;
	};

	void eventRefreshMembersList ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};



// Class Engine.UIDataProvider_OnlinePlayerStorage ( Property size: 7 iter: 22) 
// Class name index: 7266 
// 0x0028 (0x009C - 0x0074)
class UUIDataProvider_OnlinePlayerStorage : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	class UOnlinePlayerStorage*                        Profile;                                          		// 0x0074 (0x0008) [0x0000000000000000]              
	struct FName                                       ProviderName;                                     		// 0x007C (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bWasErrorLastRead : 1;                            		// 0x0084 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsExternalUIOpen : 1;                            		// 0x0084 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNeedsDeferredRefresh : 1;                        		// 0x0084 (0x0004) [0x0000000000000000] [0x00000004] 
	TArray< struct FPlayerStorageArrayProvider >       PlayerStorageArrayProviders;                      		// 0x0088 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DeviceStorageSizeNeeded;                          		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2486 ];

		return pClassPointer;
	};

	void OnExternalUIChange ( unsigned long bIsOpening );
	void OnStorageDeviceChange ( );
	void OnDeviceSelectionComplete ( unsigned long bWasSuccessful );
	void ShowDeviceSelection ( );
	void RefreshStorageData ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnReadStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
	void ClearReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	void AddReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	bool GetData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	bool WriteData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage );
	bool ReadData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage );
};



// Class Engine.UIDataProvider_OnlineProfileSettings ( Property size: 0 iter: 7) 
// Class name index: 7268 
// 0x0000 (0x009C - 0x009C)
class UUIDataProvider_OnlineProfileSettings : public UUIDataProvider_OnlinePlayerStorage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2488 ];

		return pClassPointer;
	};

	void OnStorageDeviceChange ( );
	void RefreshStorageData ( );
	void ClearReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	void AddReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	bool GetData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	bool WriteData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage );
	bool ReadData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage );
};



// Class Engine.UIDataProvider_PlayerAchievements ( Property size: 1 iter: 12) 
// Class name index: 7270 
// 0x0010 (0x0084 - 0x0074)
class UUIDataProvider_PlayerAchievements : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	TArray< struct FAchievementDetails >               Achievements;                                     		// 0x0074 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2490 ];

		return pClassPointer;
	};

	void UpdateAchievements ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
	void OnPlayerAchievementUnlocked ( unsigned long bWasSuccessful );
	void OnPlayerAchievementsChanged ( int TitleId );
	void GetAchievementDetails ( int AchievementId, struct FAchievementDetails* OutAchievementDetails );
	struct FString GetAchievementIconPathName ( int AchievementId, unsigned long bReturnLockedIcon );
	void PopulateAchievementIcons ( );
	int GetMaxTotalGamerScore ( );
	int GetTotalGamerScore ( );
};



// Class Engine.UIDataProvider_OnlinePlayerStorageArray ( Property size: 4 iter: 4) 
// Class name index: 7272 
// 0x002C (0x009C - 0x0070)
class UUIDataProvider_OnlinePlayerStorageArray : public UUIDataProvider
{
public:
	class UOnlinePlayerStorage*                        PlayerStorage;                                    		// 0x0070 (0x0008) [0x0000000000000000]              
	int                                                PlayerStorageId;                                  		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FString                                     ColumnHeaderText;                                 		// 0x007C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             Values;                                           		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2492 ];

		return pClassPointer;
	};

};



// Class Engine.UIDataProvider_SettingsArray ( Property size: 5 iter: 5) 
// Class name index: 7274 
// 0x0034 (0x00A4 - 0x0070)
class UUIDataProvider_SettingsArray : public UUIDataProvider
{
public:
	class USettings*                                   Settings;                                         		// 0x0070 (0x0008) [0x0000000000000000]              
	int                                                SettingsId;                                       		// 0x0078 (0x0004) [0x0000000000000000]              
	struct FName                                       SettingsName;                                     		// 0x007C (0x0008) [0x0000000000000000]              
	struct FString                                     ColumnHeaderText;                                 		// 0x0084 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FIdToStringMapping >                Values;                                           		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2494 ];

		return pClassPointer;
	};

};



// Class Engine.UIDataStore ( Property size: 3 iter: 11) 
// Class name index: 7276 
// 0x0028 (0x0098 - 0x0070)
class UUIDataStore : public UUIDataProvider
{
public:
	struct FName                                       Tag;                                              		// 0x0070 (0x0008) [0x0000000000000000]              
	TArray< struct FScriptDelegate >                   RefreshSubscriberNotifies;                        		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDataStoreValueUpdated__Delegate;              		// 0x0088 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x008C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2496 ];

		return pClassPointer;
	};

	class UDataStoreClient* GetDataStoreClient ( );
	void eventRefreshSubscribers ( struct FName PropertyTag, unsigned long bInvalidateValues, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool NotifyGameSessionEnded ( );
	void eventSubscriberDetached ( class UUIDataStoreSubscriber* Subscriber );
	void eventSubscriberAttached ( class UUIDataStoreSubscriber* Subscriber );
	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void OnDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
};



// Class Engine.UIDataStore_DynamicResource ( Property size: 4 iter: 10) 
// Class name index: 7278 
// 0x0068 (0x0100 - 0x0098)
class UUIDataStore_DynamicResource : public UUIDataStore
{
public:
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                  		// 0x0098 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UUIDataStore_GameResource*                   GameResourceDataStore;                            		// 0x00A0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FDynamicResourceProviderDefinition > ResourceProviderDefinitions;                      		// 0x00A8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FMultiMap_Mirror                            ResourceProviders;                                		// 0x00B8 (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2498 ];

		return pClassPointer;
	};

	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void OnLoginChange ( unsigned char LocalUserNum );
	bool GetResourceProviders ( struct FName ProviderTag, TArray< class UUIResourceCombinationProvider* >* out_Providers );
	int FindProviderTypeIndex ( struct FName ProviderTag );
};



// Class Engine.UIDataStore_Fonts ( Property size: 0 iter: 0) 
// Class name index: 7280 
// 0x0000 (0x0098 - 0x0098)
class UUIDataStore_Fonts : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2500 ];

		return pClassPointer;
	};

};



// Class Engine.UIDataStore_GameResource ( Property size: 2 iter: 5) 
// Class name index: 7282 
// 0x0058 (0x00F0 - 0x0098)
class UUIDataStore_GameResource : public UUIDataStore
{
public:
	TArray< struct FGameResourceDataProvider >         ElementProviderTypes;                             		// 0x0098 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FMultiMap_Mirror                            ListElementProviders;                             		// 0x00A8 (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2502 ];

		return pClassPointer;
	};

	bool GetResourceProviders ( struct FName ProviderTag, TArray< class UUIResourceDataProvider* >* out_Providers );
	int FindProviderTypeIndex ( struct FName ProviderTag );
};



// Class Engine.UIDataStore_MenuItems ( Property size: 3 iter: 6) 
// Class name index: 7284 
// 0x0060 (0x0150 - 0x00F0)
class UUIDataStore_MenuItems : public UUIDataStore_GameResource
{
public:
	struct FName                                       CurrentGameSettingsTag;                           		// 0x00F0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FMultiMap_Mirror                            OptionProviders;                                  		// 0x00F8 (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UUIDataProvider_MenuItem* >          DynamicProviders;                                 		// 0x0140 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2504 ];

		return pClassPointer;
	};

	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void OnGameSettingsChanged ( class UUIDataProvider* SourceProvider, struct FName PropTag );
};



// Class Engine.UIDataStore_GameState ( Property size: 1 iter: 3) 
// Class name index: 7286 
// 0x0010 (0x00A8 - 0x0098)
class UUIDataStore_GameState : public UUIDataStore
{
public:
	struct FScriptDelegate                             __OnRefreshDataFieldValue__Delegate;              		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x009C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2506 ];

		return pClassPointer;
	};

	bool NotifyGameSessionEnded ( );
	void OnRefreshDataFieldValue ( );
};



// Class Engine.UIDataStore_Registry ( Property size: 1 iter: 4) 
// Class name index: 7288 
// 0x0010 (0x00A8 - 0x0098)
class UUIDataStore_Registry : public UUIDataStore
{
public:
	TArray< struct FRegistryKeyValuePair >             RegistryData;                                     		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2508 ];

		return pClassPointer;
	};

	void eventSetData ( struct FString Key, struct FString Value );
	bool eventGetData ( struct FString Key, struct FString* out_Data );
};



// Class Engine.UIDataStore_Remote ( Property size: 0 iter: 0) 
// Class name index: 7290 
// 0x0000 (0x0098 - 0x0098)
class UUIDataStore_Remote : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2510 ];

		return pClassPointer;
	};

};



// Class Engine.UIDataStore_OnlineGameSearch ( Property size: 6 iter: 22) 
// Class name index: 7292 
// 0x0038 (0x00D0 - 0x0098)
class UUIDataStore_OnlineGameSearch : public UUIDataStore_Remote
{
public:
	struct FName                                       SearchResultsName;                                		// 0x0098 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x00A0 (0x0008) [0x0000000000000000]              
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x00A8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00B0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< struct FGameSearchCfg >                    GameSearchCfgList;                                		// 0x00B8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                SelectedIndex;                                    		// 0x00C8 (0x0004) [0x0000000000000000]              
	int                                                ActiveSearchIndex;                                		// 0x00CC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2512 ];

		return pClassPointer;
	};

	void ClearAllSearchResults ( );
	void eventMoveToPrevious ( unsigned long bInvalidateExistingSearchResults );
	void eventMoveToNext ( unsigned long bInvalidateExistingSearchResults );
	void eventSetCurrentByName ( struct FName SearchName, unsigned long bInvalidateExistingSearchResults );
	void eventSetCurrentByIndex ( int NewIndex, unsigned long bInvalidateExistingSearchResults );
	int FindSearchConfigurationIndex ( struct FName SearchTag );
	class UOnlineGameSearch* eventGetActiveGameSearch ( );
	class UOnlineGameSearch* eventGetCurrentGameSearch ( );
	bool eventShowHostGamercard ( unsigned char ControllerIndex, int ListIndex );
	bool eventGetSearchResultFromIndex ( int ListIndex, struct FOnlineGameSearchResult* Result );
	void OnSearchComplete ( unsigned long bWasSuccessful );
	bool OverrideQuerySubmission ( unsigned char ControllerId, class UOnlineGameSearch* Search );
	bool eventSubmitGameSearch ( unsigned char ControllerIndex, unsigned long bInvalidateExistingSearchResults );
	bool InvalidateCurrentSearchResults ( );
	void eventInit ( );
};



// Class Engine.UIDataStore_OnlinePlayerData ( Property size: 24 iter: 32) 
// Class name index: 7294 
// 0x0104 (0x019C - 0x0098)
class UUIDataStore_OnlinePlayerData : public UUIDataStore_Remote
{
public:
	class UUIDataProvider_OnlineFriends*               FriendsProvider;                                  		// 0x0098 (0x0008) [0x0000000000000000]              
	int                                                PlayerControllerId;                               		// 0x00A0 (0x0004) [0x0000000000000000]              
	struct FString                                     PlayerNick;                                       		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ProfileSettingsClassName;                         		// 0x00B4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      ProfileSettingsClass;                             		// 0x00C4 (0x0008) [0x0000000000000000]              
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                  		// 0x00CC (0x0008) [0x0000000000000000]              
	struct FString                                     ProfileProviderClassName;                         		// 0x00D4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      ProfileProviderClass;                             		// 0x00E4 (0x0008) [0x0000000000000000]              
	struct FString                                     PlayerStorageClassName;                           		// 0x00EC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      PlayerStorageClass;                               		// 0x00FC (0x0008) [0x0000000000000000]              
	class UUIDataProvider_OnlinePlayerStorage*         StorageProvider;                                  		// 0x0104 (0x0008) [0x0000000000000000]              
	struct FString                                     StorageProviderClassName;                         		// 0x010C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      StorageProviderClass;                             		// 0x011C (0x0008) [0x0000000000000000]              
	class UUIDataProvider_OnlineFriendMessages*        FriendMessagesProvider;                           		// 0x0124 (0x0008) [0x0000000000000000]              
	class UUIDataProvider_PlayerAchievements*          AchievementsProvider;                             		// 0x012C (0x0008) [0x0000000000000000]              
	struct FString                                     FriendsProviderClassName;                         		// 0x0134 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      FriendsProviderClass;                             		// 0x0144 (0x0008) [0x0000000000000000]              
	struct FString                                     FriendMessagesProviderClassName;                  		// 0x014C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      FriendMessagesProviderClass;                      		// 0x015C (0x0008) [0x0000000000000000]              
	struct FString                                     AchievementsProviderClassName;                    		// 0x0164 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      AchievementsProviderClass;                        		// 0x0174 (0x0008) [0x0000000000000000]              
	struct FString                                     PartyChatProviderClassName;                       		// 0x017C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      PartyChatProviderClass;                           		// 0x018C (0x0008) [0x0000000000000000]              
	class UUIDataProvider_OnlinePartyChatList*         PartyChatProvider;                                		// 0x0194 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2514 ];

		return pClassPointer;
	};

	class UOnlinePlayerStorage* eventGetCachedPlayerStorage ( int ControllerId );
	class UOnlineProfileSettings* eventGetCachedPlayerProfile ( int ControllerId );
	void ClearDelegates ( );
	void RegisterDelegates ( );
	void OnPlayerDataChange ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};



// Class Engine.UIDataStore_OnlineStats ( Property size: 10 iter: 19) 
// Class name index: 7296 
// 0x008C (0x0124 - 0x0098)
class UUIDataStore_OnlineStats : public UUIDataStore_Remote
{
public:
	TArray< class UClass* >                            StatsReadClasses;                                 		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       StatsReadName;                                    		// 0x00A8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FPlayerNickMetaData                         PlayerNickData;                                   		// 0x00B0 (0x0018) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FRankMetaData                               RankNameMetaData;                                 		// 0x00C8 (0x0018) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FName                                       TotalRowsName;                                    		// 0x00E0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	TArray< class UOnlineStatsRead* >                  StatsReadObjects;                                 		// 0x00E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineStatsRead*                            StatsRead;                                        		// 0x00F8 (0x0008) [0x0000000000000000]              
	unsigned char                                      CurrentReadType;                                  		// 0x0100 (0x0001) [0x0000000000000000]              
	class UOnlineStatsInterface*                       StatsInterface;                                   		// 0x0104 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x010C (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePlayerInterface*                      PlayerInterface;                                  		// 0x0114 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x011C (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2516 ];

		return pClassPointer;
	};

	void SortResultsByRank ( class UOnlineStatsRead* StatsToSort );
	void OnReadComplete ( unsigned long bWasSuccessful );
	bool eventShowGamercard ( unsigned char ConrollerIndex, int ListIndex );
	bool eventRefreshStats ( unsigned char ControllerIndex );
	void SetStatsReadInfo ( );
	void eventInit ( );
};



// Class Engine.UIDataStore_Settings ( Property size: 0 iter: 0) 
// Class name index: 7298 
// 0x0000 (0x0098 - 0x0098)
class UUIDataStore_Settings : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2518 ];

		return pClassPointer;
	};

};



// Class Engine.UIDataStore_OnlineGameSettings ( Property size: 3 iter: 13) 
// Class name index: 7300 
// 0x001C (0x00B4 - 0x0098)
class UUIDataStore_OnlineGameSettings : public UUIDataStore_Settings
{
public:
	TArray< struct FGameSettingsCfg >                  GameSettingsCfgList;                              		// 0x0098 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      SettingsProviderClass;                            		// 0x00A8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                SelectedIndex;                                    		// 0x00B0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2520 ];

		return pClassPointer;
	};

	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void eventMoveToPrevious ( );
	void eventMoveToNext ( );
	void eventSetCurrentByName ( struct FName SettingsName );
	void eventSetCurrentByIndex ( int NewIndex );
	class UUIDataProvider_Settings* eventGetCurrentProvider ( );
	class UOnlineGameSettings* eventGetCurrentGameSettings ( );
	bool eventCreateGame ( unsigned char ControllerIndex );
};



// Class Engine.UIDataStore_StringBase ( Property size: 0 iter: 0) 
// Class name index: 7302 
// 0x0000 (0x0098 - 0x0098)
class UUIDataStore_StringBase : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2522 ];

		return pClassPointer;
	};

};



// Class Engine.UIDataStore_InputAlias ( Property size: 2 iter: 12) 
// Class name index: 7304 
// 0x0058 (0x00F0 - 0x0098)
class UUIDataStore_InputAlias : public UUIDataStore_StringBase
{
public:
	TArray< struct FUIDataStoreInputAlias >            InputAliases;                                     		// 0x0098 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00A8 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.UIDataStore_InputAlias.InputAliasLookupMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2524 ];

		return pClassPointer;
	};

	bool HasAliasMappingForPlatform ( struct FName DesiredAlias, unsigned char DesiredPlatform );
	int FindInputAliasIndex ( struct FName DesiredAlias );
	bool GetAliasInputKeyDataByIndex ( int AliasIndex, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData );
	bool GetAliasInputKeyData ( struct FName DesiredAlias, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData );
	struct FName GetAliasInputKeyNameByIndex ( int AliasIndex, unsigned char OverridePlatform );
	struct FName GetAliasInputKeyName ( struct FName DesiredAlias, unsigned char OverridePlatform );
	struct FString GetAliasFontMarkupByIndex ( int AliasIndex, unsigned char OverridePlatform );
	struct FString GetAliasFontMarkup ( struct FName DesiredAlias, unsigned char OverridePlatform );
};



// Class Engine.UIDataStore_StringAliasMap ( Property size: 3 iter: 7) 
// Class name index: 7306 
// 0x005C (0x00F4 - 0x0098)
class UUIDataStore_StringAliasMap : public UUIDataStore_StringBase
{
public:
	TArray< struct FUIMenuInputMap >                   MenuInputMapArray;                                		// 0x0098 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FMap_Mirror                                 MenuInputSets;                                    		// 0x00A8 (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                PlayerIndex;                                      		// 0x00F0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2526 ];

		return pClassPointer;
	};

	int GetStringWithFieldName ( struct FString FieldName, struct FString* MappedString );
	int FindMappingWithFieldName ( struct FString FieldName, struct FString SetName );
	class ULocalPlayer* GetPlayerOwner ( );
};



// Class Engine.UIPropertyDataProvider ( Property size: 2 iter: 3) 
// Class name index: 7308 
// 0x0020 (0x0090 - 0x0070)
class UUIPropertyDataProvider : public UUIDataProvider
{
public:
	TArray< class UClass* >                            ComplexPropertyTypes;                             		// 0x0070 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FScriptDelegate                             __CanSupportComplexPropertyType__Delegate;        		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0084 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2528 ];

		return pClassPointer;
	};

	bool CanSupportComplexPropertyType ( class UProperty* UnsupportedProperty );
};



// Class Engine.UIDataProvider_Settings ( Property size: 2 iter: 2) 
// Class name index: 7310 
// 0x000C (0x009C - 0x0090)
class UUIDataProvider_Settings : public UUIPropertyDataProvider
{
public:
	class USettings*                                   Settings;                                         		// 0x0090 (0x0008) [0x0000000000000000]              
	unsigned long                                      bIsAListRow : 1;                                  		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2530 ];

		return pClassPointer;
	};

};



// Class Engine.UIResourceDataProvider ( Property size: 1 iter: 2) 
// Class name index: 7312 
// 0x0004 (0x0094 - 0x0090)
class UUIResourceDataProvider : public UUIPropertyDataProvider
{
public:
	unsigned long                                      bSkipDuringEnumeration : 1;                       		// 0x0090 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2532 ];

		return pClassPointer;
	};

	void eventInitializeProvider ( unsigned long bIsEditor );
};



// Class Engine.UIDataProvider_MenuItem ( Property size: 21 iter: 22) 
// Class name index: 7314 
// 0x00A8 (0x013C - 0x0094)
class UUIDataProvider_MenuItem : public UUIResourceDataProvider
{
public:
	unsigned char                                      OptionType;                                       		// 0x0094 (0x0001) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FName >                             OptionSet;                                        		// 0x0098 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DataStoreMarkup;                                  		// 0x00A8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DescriptionMarkup;                                		// 0x00B8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FName                                       RequiredGameMode;                                 		// 0x00C8 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     FriendlyName;                                     		// 0x00D0 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CustomFriendlyName;                               		// 0x00E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x00F0 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bEditableCombo : 1;                               		// 0x0100 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bNumericCombo : 1;                                		// 0x0100 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bKeyboardOrMouseOption : 1;                       		// 0x0100 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bOnlineOnly : 1;                                  		// 0x0100 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bOfflineOnly : 1;                                 		// 0x0100 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bSearchAllInis : 1;                               		// 0x0100 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bRemoveOn360 : 1;                                 		// 0x0100 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bRemoveOnPC : 1;                                  		// 0x0100 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bRemoveOnPS3 : 1;                                 		// 0x0100 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	int                                                EditBoxMaxLength;                                 		// 0x0104 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FUIRangeData                                RangeData;                                        		// 0x0108 (0x0014) [0x0000000000004000]              ( CPF_Config )
	TArray< struct FName >                             SchemaCellFields;                                 		// 0x011C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     IniName;                                          		// 0x012C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2534 ];

		return pClassPointer;
	};

};



// Class Engine.UIResourceCombinationProvider ( Property size: 2 iter: 4) 
// Class name index: 7316 
// 0x0010 (0x0080 - 0x0070)
class UUIResourceCombinationProvider : public UUIDataProvider
{
public:
	class UUIResourceDataProvider*                     StaticDataProvider;                               		// 0x0070 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                  		// 0x0078 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2536 ];

		return pClassPointer;
	};

	void ClearProviderReferences ( );
	void eventInitializeProvider ( unsigned long bIsEditor, class UUIResourceDataProvider* InStaticResourceProvider, class UUIDataProvider_OnlineProfileSettings* InProfileProvider );
};



// Class Engine.GameUISceneClient ( Property size: 11 iter: 20) 
// Class name index: 7318 
// 0x0080 (0x019C - 0x011C)
class UGameUISceneClient : public UUISceneClient
{
public:
	float                                              LatestDeltaTime;                                  		// 0x011C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FDouble                                     DoubleClickStartTime;                             		// 0x0120 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FIntPoint                                   DoubleClickStartPosition;                         		// 0x0128 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMap_Mirror                                 InitialPressedKeys;                               		// 0x0130 (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bUpdateInputProcessingStatus : 1;                 		// 0x0178 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdateSceneViewportSizes : 1;                    		// 0x0178 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bEnableDebugInput : 1;                            		// 0x0178 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bRenderDebugInfo : 1;                             		// 0x0178 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bCaptureUnprocessedInput : 1;                     		// 0x0178 (0x0004) [0x0000000000004002] [0x00000010] ( CPF_Const | CPF_Config )
	TArray< struct FName >                             NavAliases;                                       		// 0x017C (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FName >                             AxisInputKeys;                                    		// 0x018C (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2538 ];

		return pClassPointer;
	};

	int FindLocalPlayerIndex ( class UPlayer* P );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyGameSessionEnded ( );
	void NotifyClientTravel ( class APlayerController* TravellingPlayer, struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	void eventPauseGame ( unsigned long bDesiredPauseState, int PlayerIndex );
	bool CanUnpauseInternalUI ( );
	void RequestInputProcessingUpdate ( );
	unsigned char GetCurrentNetMode ( );
};



// Class Engine.Scene ( Property size: 0 iter: 3) 
// Class name index: 7320 
// 0x0000 (0x0060 - 0x0060)
class UScene : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2540 ];

		return pClassPointer;
	};

};



// Class Engine.InstancedFoliageActor ( Property size: 3 iter: 3) 
// Class name index: 7322 
// 0x0060 (0x02A0 - 0x0240)
class AInstancedFoliageActor : public AActor
{
public:
	struct FMap_Mirror                                 FoliageMeshes;                                    		// 0x0240 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UStaticMesh*                                 SelectedMesh;                                     		// 0x0288 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	TArray< class UInstancedStaticMeshComponent* >     InstancedStaticMeshComponents;                    		// 0x0290 (0x0010) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2542 ];

		return pClassPointer;
	};

};



// Class Engine.InteractiveFoliageActor ( Property size: 14 iter: 16) 
// Class name index: 7324 
// 0x005F (0x02AC - 0x024D)
class AInteractiveFoliageActor : public AStaticMeshActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0250 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector                                     TouchingActorEntryPosition;                       		// 0x0258 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FoliageVelocity;                                  		// 0x0264 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FoliageForce;                                     		// 0x0270 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FoliagePosition;                                  		// 0x027C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	float                                              FoliageDamageImpulseScale;                        		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FoliageTouchImpulseScale;                         		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FoliageStiffness;                                 		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FoliageStiffnessQuadratic;                        		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FoliageDamping;                                   		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDamageImpulse;                                 		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxTouchImpulse;                                  		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxForce;                                         		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Mass;                                             		// 0x02A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2544 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
};



// Class Engine.InteractiveFoliageComponent ( Property size: 1 iter: 1) 
// Class name index: 7326 
// 0x0008 (0x02D0 - 0x02C8)
class UInteractiveFoliageComponent : public UStaticMeshComponent
{
public:
	struct FPointer                                    FoliageSceneProxy;                                		// 0x02C8 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2546 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactoryInteractiveFoliage ( Property size: 0 iter: 0) 
// Class name index: 7328 
// 0x0000 (0x00B0 - 0x00B0)
class UActorFactoryInteractiveFoliage : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2548 ];

		return pClassPointer;
	};

};



// Class Engine.FluidInfluenceActor ( Property size: 5 iter: 7) 
// Class name index: 7330 
// 0x001C (0x025C - 0x0240)
class AFluidInfluenceActor : public AActor
{
public:
	class UArrowComponent*                             FlowDirection;                                    		// 0x0240 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USpriteComponent*                            Sprite;                                           		// 0x0248 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UFluidInfluenceComponent*                    InfluenceComponent;                               		// 0x0250 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bActive : 1;                                      		// 0x0258 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bToggled : 1;                                     		// 0x0258 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2550 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void OnToggle ( class USeqAct_Toggle* inAction );
};



// Class Engine.FluidSurfaceActor ( Property size: 2 iter: 4) 
// Class name index: 7332 
// 0x0010 (0x0250 - 0x0240)
class AFluidSurfaceActor : public AActor
{
public:
	class UFluidSurfaceComponent*                      FluidComponent;                                   		// 0x0240 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             ProjectileEntryEffect;                            		// 0x0248 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2552 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
};



// Class Engine.FluidSurfaceActorMovable ( Property size: 0 iter: 0) 
// Class name index: 7334 
// 0x0000 (0x0250 - 0x0250)
class AFluidSurfaceActorMovable : public AFluidSurfaceActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2554 ];

		return pClassPointer;
	};

};



// Class Engine.FluidInfluenceComponent ( Property size: 26 iter: 27) 
// Class name index: 7336 
// 0x0068 (0x02A0 - 0x0238)
class UFluidInfluenceComponent : public UPrimitiveComponent
{
public:
	unsigned long                                      bActive : 1;                                      		// 0x0238 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RaindropFillEntireFluid : 1;                      		// 0x0238 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bIsToggleTriggered : 1;                           		// 0x0238 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	class AFluidSurfaceActor*                          FluidActor;                                       		// 0x023C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      InfluenceType;                                    		// 0x0244 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistance;                                      		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveStrength;                                     		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveFrequency;                                    		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WavePhase;                                        		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveRadius;                                       		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropAreaRadius;                               		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropRadius;                                   		// 0x0260 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropStrength;                                 		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RaindropRate;                                     		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowSpeed;                                        		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FlowNumRipples;                                   		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowSideMotionRadius;                             		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowWaveRadius;                                   		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowStrength;                                     		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlowFrequency;                                    		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereOuterRadius;                                		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereInnerRadius;                                		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereStrength;                                   		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentAngle;                                     		// 0x0290 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              CurrentTimer;                                     		// 0x0294 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class AFluidSurfaceActor*                          CurrentFluidActor;                                		// 0x0298 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2556 ];

		return pClassPointer;
	};

};



// Class Engine.FluidSurfaceComponent ( Property size: 53 iter: 56) 
// Class name index: 7338 
// 0x00FC (0x0334 - 0x0238)
class UFluidSurfaceComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          FluidMaterial;                                    		// 0x0238 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                LightMapResolution;                               		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                		// 0x0244 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      EnableSimulation : 1;                             		// 0x0260 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableDetail : 1;                                 		// 0x0260 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTiling : 1;                                      		// 0x0260 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPause : 1;                                       		// 0x0260 (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bShowSimulationNormals : 1;                       		// 0x0260 (0x0004) [0x0000000000002001] [0x00000010] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bShowSimulationPosition : 1;                      		// 0x0260 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bShowDetailNormals : 1;                           		// 0x0260 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bShowDetailPosition : 1;                          		// 0x0260 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bShowFluidSimulation : 1;                         		// 0x0260 (0x0004) [0x0000000000002001] [0x00000100] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bShowFluidDetail : 1;                             		// 0x0260 (0x0004) [0x0000000000002001] [0x00000200] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bTestRipple : 1;                                  		// 0x0260 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bTestRippleCenterOnDetail : 1;                    		// 0x0260 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	int                                                SimulationQuadsX;                                 		// 0x0264 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SimulationQuadsY;                                 		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GridSpacing;                                      		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GridSpacingLowRes;                                		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      TargetSimulation;                                 		// 0x0274 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              GPUTessellationFactor;                            		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidDamping;                                     		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidTravelSpeed;                                 		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidHeightScale;                                 		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidUpdateRate;                                  		// 0x028C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceImpact;                                      		// 0x0290 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceContinuous;                                  		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightingContrast;                                 		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      TargetDetail;                                     		// 0x029C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeactivationDistance;                             		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DetailResolution;                                 		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailSize;                                       		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailDamping;                                    		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailTravelSpeed;                                		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailTransfer;                                   		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailHeightScale;                                		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailUpdateRate;                                 		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalLength;                                     		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestRippleSpeed;                                  		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestRippleFrequency;                              		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestRippleRadius;                                 		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidWidth;                                       		// 0x02D4 (0x0004) [0x0000000000000000]              
	float                                              FluidHeight;                                      		// 0x02D8 (0x0004) [0x0000000000000000]              
	float                                              TestRippleTime;                                   		// 0x02DC (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              TestRippleAngle;                                  		// 0x02E0 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              DeactivationTimer;                                		// 0x02E4 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              ViewDistance;                                     		// 0x02E8 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FVector                                     SimulationPosition;                               		// 0x02EC (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FVector                                     DetailPosition;                                   		// 0x02F8 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	TArray< unsigned char >                            ClampMap;                                         		// 0x0304 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< class UShadowMap2D* >                      ShadowMaps;                                       		// 0x0314 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FLightMapRef                                LightMap;                                         		// 0x0324 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    FluidSimulation;                                  		// 0x032C (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2558 ];

		return pClassPointer;
	};

	void SetSimulationPosition ( struct FVector WorldPos );
	void SetDetailPosition ( struct FVector WorldPos );
	void ApplyForce ( struct FVector WorldPos, float Strength, float Radius, unsigned long bImpulse );
};



// Class Engine.SpeedTreeActor ( Property size: 1 iter: 1) 
// Class name index: 7340 
// 0x0008 (0x0248 - 0x0240)
class ASpeedTreeActor : public AActor
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                               		// 0x0240 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2560 ];

		return pClassPointer;
	};

};



// Class Engine.SpeedTreeComponent ( Property size: 26 iter: 30) 
// Class name index: 7342 
// 0x00F4 (0x032C - 0x0238)
class USpeedTreeComponent : public UPrimitiveComponent
{
public:
	class USpeedTree*                                  SpeedTree;                                        		// 0x0238 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseLeafCards : 1;                                		// 0x0240 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseLeafMeshes : 1;                               		// 0x0240 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseBranches : 1;                                 		// 0x0240 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseFronds : 1;                                   		// 0x0240 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUseBillboards : 1;                               		// 0x0240 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	float                                              Lod3DStart;                                       		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Lod3DEnd;                                         		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LodBillboardStart;                                		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LodBillboardEnd;                                  		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LodLevelOverride;                                 		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Branch1Material;                                  		// 0x0258 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Branch2Material;                                  		// 0x0260 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          FrondMaterial;                                    		// 0x0268 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LeafCardMaterial;                                 		// 0x0270 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LeafMeshMaterial;                                 		// 0x0278 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          BillboardMaterial;                                		// 0x0280 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  SpeedTreeIcon;                                    		// 0x0288 (0x0008) [0x0000000000000000]              
	TArray< struct FSpeedTreeStaticLight >             StaticLights;                                     		// 0x0290 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FLightMapRef                                BranchLightMap;                                   		// 0x02A0 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FLightMapRef                                FrondLightMap;                                    		// 0x02A8 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FLightMapRef                                LeafMeshLightMap;                                 		// 0x02B0 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FLightMapRef                                LeafCardLightMap;                                 		// 0x02B8 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FLightMapRef                                BillboardLightMap;                                		// 0x02C0 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x02C8 (0x0008) MISSED OFFSET
	struct FMatrix                                     RotationOnlyMatrix;                               		// 0x02D0 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                		// 0x0310 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2562 ];

		return pClassPointer;
	};

	void SetMaterial ( unsigned char MeshType, class UMaterialInterface* Material );
	class UMaterialInterface* GetMaterial ( unsigned char MeshType );
};



// Class Engine.SpeedTreeActorFactory ( Property size: 1 iter: 1) 
// Class name index: 7344 
// 0x0008 (0x00A4 - 0x009C)
class USpeedTreeActorFactory : public UActorFactory
{
public:
	class USpeedTree*                                  SpeedTree;                                        		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2564 ];

		return pClassPointer;
	};

};



// Class Engine.SpeedTreeComponentFactory ( Property size: 1 iter: 1) 
// Class name index: 7346 
// 0x0008 (0x006C - 0x0064)
class USpeedTreeComponentFactory : public UPrimitiveComponentFactory
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                               		// 0x0064 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2566 ];

		return pClassPointer;
	};

};



// Class Engine.SpeedTree ( Property size: 12 iter: 12) 
// Class name index: 7348 
// 0x0060 (0x00C0 - 0x0060)
class USpeedTree : public UObject
{
public:
	unsigned long                                      bLegacySpeedTree : 1;                             		// 0x0060 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	struct FPointer                                    SRH;                                              		// 0x0064 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	float                                              LeafStaticShadowOpacity;                          		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Branch1Material;                                  		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Branch2Material;                                  		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          FrondMaterial;                                    		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LeafCardMaterial;                                 		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LeafMeshMaterial;                                 		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          BillboardMaterial;                                		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindStrength;                                     		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WindDirection;                                    		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       LightingGuid;                                     		// 0x00B0 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2568 ];

		return pClassPointer;
	};

};



// Class Engine.LensFlareSource ( Property size: 2 iter: 11) 
// Class name index: 7350 
// 0x000C (0x024C - 0x0240)
class ALensFlareSource : public AActor
{
public:
	class ULensFlareComponent*                         LensFlareComp;                                    		// 0x0240 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bCurrentlyActive : 1;                             		// 0x0248 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2570 ];

		return pClassPointer;
	};

	void SetActorParameter ( struct FName ParameterName, class AActor* Param );
	void SetExtColorParameter ( struct FName ParameterName, float Red, float Green, float Blue, float Alpha );
	void SetColorParameter ( struct FName ParameterName, struct FLinearColor Param );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	void eventReplicatedEvent ( struct FName VarName );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventPostBeginPlay ( );
	void SetTemplate ( class ULensFlare* NewTemplate );
};



// Class Engine.LensFlareComponent ( Property size: 22 iter: 30) 
// Class name index: 7352 
// 0x0064 (0x029C - 0x0238)
class ULensFlareComponent : public UPrimitiveComponent
{
public:
	class ULensFlare*                                  Template;                                         		// 0x0238 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDrawLightConeComponent*                     PreviewInnerCone;                                 		// 0x0240 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDrawLightConeComponent*                     PreviewOuterCone;                                 		// 0x0248 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDrawLightRadiusComponent*                   PreviewRadius;                                    		// 0x0250 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bAutoActivate : 1;                                		// 0x0258 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsActive : 1;                                    		// 0x0258 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHasTranslucency : 1;                             		// 0x0258 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bHasUnlitTranslucency : 1;                        		// 0x0258 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bHasUnlitDistortion : 1;                          		// 0x0258 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bUsesSceneColor : 1;                              		// 0x0258 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bHasSeparateTranslucency : 1;                     		// 0x0258 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bUseTrueConeCalculation : 1;                      		// 0x0258 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bVisibleForMobile : 1;                            		// 0x0258 (0x0004) [0x0000000000000000] [0x00000100] 
	float                                              OuterCone;                                        		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InnerCone;                                        		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ConeFudgeFactor;                                  		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Radius;                                           		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinStrength;                                      		// 0x026C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                SourceColor;                                      		// 0x0270 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FLensFlareElementMaterials >        Materials;                                        		// 0x0280 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0290 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              NextTraceTime;                                    		// 0x0298 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2572 ];

		return pClassPointer;
	};

	class UMaterialInstanceConstant* CreateAndSetMaterialInstanceConstant ( int ElementIndex );
	void SetMaterial ( int ElementIndex, class UMaterialInterface* Material );
	class UMaterialInterface* GetMaterial ( int ElementIndex );
	void SetIsActive ( unsigned long bInIsActive );
	void SetSourceColor ( struct FLinearColor InSourceColor );
	void SetTemplate ( class ULensFlare* NewTemplate, unsigned long bForceSet );
};



// Class Engine.LensFlare ( Property size: 21 iter: 23) 
// Class name index: 7354 
// 0x0230 (0x0290 - 0x0060)
class ULensFlare : public UObject
{
public:
	struct FLensFlareElement                           SourceElement;                                    		// 0x0060 (0x0198) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UStaticMesh*                                 SourceMesh;                                       		// 0x01F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SourceDPG;                                        		// 0x0200 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      ReflectionsDPG;                                   		// 0x0201 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< struct FLensFlareElement >                 Reflections;                                      		// 0x0204 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	float                                              OuterCone;                                        		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InnerCone;                                        		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeFudgeFactor;                                  		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseTrueConeCalculation : 1;                      		// 0x0224 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                 		// 0x0224 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRenderDebugLines : 1;                            		// 0x0224 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      ThumbnailImageOutOfDate : 1;                      		// 0x0224 (0x0004) [0x0000000000000000] [0x00000008] 
	float                                              MinStrength;                                      		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRawDistributionFloat                       ScreenPercentageMap;                              		// 0x022C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBox                                        FixedRelativeBoundingBox;                         		// 0x0250 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x026C (0x0008) [0x0000000000000008]              ( CPF_ExportObject )
	int                                                ReflectionCount;                                  		// 0x0274 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    ThumbnailAngle;                                   		// 0x0278 (0x000C) [0x0000000000000000]              
	float                                              ThumbnailDistance;                                		// 0x0284 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  ThumbnailImage;                                   		// 0x0288 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2574 ];

		return pClassPointer;
	};

};



// Class Engine.TextureFlipBook ( Property size: 19 iter: 24) 
// Class name index: 7356 
// 0x0048 (0x027C - 0x0234)
class UTextureFlipBook : public UTexture2D
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0234 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	float                                              TimeIntoMovie;                                    		// 0x023C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              TimeSinceLastFrame;                               		// 0x0240 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              HorizontalScale;                                  		// 0x0244 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              VerticalScale;                                    		// 0x0248 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bPaused : 1;                                      		// 0x024C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bStopped : 1;                                     		// 0x024C (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bLooping : 1;                                     		// 0x024C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAutoPlay : 1;                                    		// 0x024C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	int                                                HorizontalImages;                                 		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                VerticalImages;                                   		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FBMethod;                                         		// 0x0258 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrameRate;                                        		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrameTime;                                        		// 0x0260 (0x0004) [0x0000000000000000]              
	int                                                CurrentRow;                                       		// 0x0264 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CurrentColumn;                                    		// 0x0268 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              RenderOffsetU;                                    		// 0x026C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              RenderOffsetV;                                    		// 0x0270 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0274 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2576 ];

		return pClassPointer;
	};

	void SetCurrentFrame ( int Row, int Col );
	void Stop ( );
	void Pause ( );
	void Play ( );
};



// Class Engine.Texture2DComposite ( Property size: 4 iter: 8) 
// Class name index: 7358 
// 0x001C (0x0148 - 0x012C)
class UTexture2DComposite : public UTexture
{
public:
	TArray< struct FSourceTexture2DRegion >            SourceRegions;                                    		// 0x012C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MaxTextureSize;                                   		// 0x013C (0x0004) [0x0000000000000000]              
	int                                                DestSizeX;                                        		// 0x0140 (0x0004) [0x0000000000000000]              
	int                                                DestSizeY;                                        		// 0x0144 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2578 ];

		return pClassPointer;
	};

	void ResetSourceRegions ( );
	void UpdateCompositeTexture ( int NumMipsToGenerate );
	bool SourceTexturesFullyStreamedIn ( );
};



// Class Engine.Texture2DDynamic ( Property size: 5 iter: 9) 
// Class name index: 7360 
// 0x0014 (0x0140 - 0x012C)
class UTexture2DDynamic : public UTexture
{
public:
	int                                                SizeX;                                            		// 0x012C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                SizeY;                                            		// 0x0130 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned char                                      Format;                                           		// 0x0134 (0x0001) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                NumMips;                                          		// 0x0138 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      bIsResolveTarget : 1;                             		// 0x013C (0x0004) [0x0000000000003000] [0x00000001] ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2580 ];

		return pClassPointer;
	};

	class UTexture2DDynamic* Create ( int InSizeX, int InSizeY, unsigned char InFormat, unsigned long InIsResolveTarget );
	void UpdateMipFromJPEG ( int MipIdx, TArray< unsigned char >* MipData );
	void UpdateMip ( int MipIdx, TArray< unsigned char >* MipData );
	void Init ( int InSizeX, int InSizeY, unsigned char InFormat, unsigned long InIsResolveTarget );
};



// Class Engine.TextureCube ( Property size: 11 iter: 11) 
// Class name index: 7362 
// 0x0044 (0x0170 - 0x012C)
class UTextureCube : public UTexture
{
public:
	int                                                SizeX;                                            		// 0x012C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                SizeY;                                            		// 0x0130 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      Format;                                           		// 0x0134 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NumMips;                                          		// 0x0138 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bIsCubemapValid : 1;                              		// 0x013C (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	class UTexture2D*                                  FacePosX;                                         		// 0x0140 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FaceNegX;                                         		// 0x0148 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FacePosY;                                         		// 0x0150 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FaceNegY;                                         		// 0x0158 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FacePosZ;                                         		// 0x0160 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FaceNegZ;                                         		// 0x0168 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2582 ];

		return pClassPointer;
	};

};



// Class Engine.TextureMovie ( Property size: 15 iter: 19) 
// Class name index: 7364 
// 0x0068 (0x0194 - 0x012C)
class UTextureMovie : public UTexture
{
public:
	int                                                SizeX;                                            		// 0x012C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x0130 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      Format;                                           		// 0x0134 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x0135 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x0136 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MovieStreamSource;                                		// 0x0137 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      DecoderClass;                                     		// 0x0138 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UCodecMovie*                                 Decoder;                                          		// 0x0140 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      Paused : 1;                                       		// 0x0148 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      Stopped : 1;                                      		// 0x0148 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      Looping : 1;                                      		// 0x0148 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      ResetOnLastFrame : 1;                             		// 0x0148 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      AutoPlay : 1;                                     		// 0x0148 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	struct FUntypedBulkData_Mirror                     Data;                                             		// 0x014C (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    ReleaseCodecFence;                                		// 0x018C (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2584 ];

		return pClassPointer;
	};

	void Stop ( );
	void Pause ( );
	void Play ( );
};



// Class Engine.TextureRenderTarget ( Property size: 4 iter: 4) 
// Class name index: 7366 
// 0x0008 (0x0134 - 0x012C)
class UTextureRenderTarget : public UTexture
{
public:
	unsigned long                                      bUpdateImmediate : 1;                             		// 0x012C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNeedsTwoCopies : 1;                              		// 0x012C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRenderOnce : 1;                                  		// 0x012C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	float                                              TargetGamma;                                      		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2586 ];

		return pClassPointer;
	};

};



// Class Engine.TextureRenderTarget2D ( Property size: 7 iter: 8) 
// Class name index: 7368 
// 0x0020 (0x0154 - 0x0134)
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                            		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SizeY;                                            		// 0x0138 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Format;                                           		// 0x013C (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x013D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x013E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ClearColor;                                       		// 0x0140 (0x0010) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bForceLinearGamma : 1;                            		// 0x0150 (0x0004) [0x0000000000002003] [0x00000001] ( CPF_Edit | CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2588 ];

		return pClassPointer;
	};

	class UTextureRenderTarget2D* Create ( int InSizeX, int InSizeY, unsigned char InFormat, struct FLinearColor InClearColor, unsigned long bOnlyRenderOnce );
};



// Class Engine.ScriptedTexture ( Property size: 3 iter: 4) 
// Class name index: 7370 
// 0x0014 (0x0168 - 0x0154)
class UScriptedTexture : public UTextureRenderTarget2D
{
public:
	unsigned long                                      bNeedsUpdate : 1;                                 		// 0x0154 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bSkipNextClear : 1;                               		// 0x0154 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FScriptDelegate                             __Render__Delegate;                               		// 0x0158 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x015C (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2590 ];

		return pClassPointer;
	};

	void Render ( class UCanvas* C );
};



// Class Engine.TextureRenderTargetCube ( Property size: 2 iter: 2) 
// Class name index: 7372 
// 0x0005 (0x0139 - 0x0134)
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                            		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Format;                                           		// 0x0138 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2592 ];

		return pClassPointer;
	};

};



// Class Engine.TextureRenderTarget2DEngine ( Property size: 0 iter: 1) 
// Class name index: 7374 
// 0x0000 (0x012C - 0x012C)
class UTextureRenderTarget2DEngine : public UTexture
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2594 ];

		return pClassPointer;
	};

	class UTextureRenderTarget2DEngine* Create ( );
};



// Class Engine.AudioDevice ( Property size: 48 iter: 56) 
// Class name index: 7376 
// 0x0300 (0x0368 - 0x0068)
class UAudioDevice : public USubsystem
{
public:
	int                                                MaxChannels;                                      		// 0x0068 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                CommonAudioPoolSize;                              		// 0x006C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              LowPassFilterResonance;                           		// 0x0070 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MinCompressedDurationEditor;                      		// 0x0074 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MinCompressedDurationGame;                        		// 0x0078 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FString                                     ChirpInSoundNodeWaveName;                         		// 0x007C (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	class USoundNodeWave*                              ChirpInSoundNodeWave;                             		// 0x008C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FString                                     ChirpOutSoundNodeWaveName;                        		// 0x0094 (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	class USoundNodeWave*                              ChirpOutSoundNodeWave;                            		// 0x00A4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    CommonAudioPool;                                  		// 0x00AC (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                CommonAudioPoolFreeBytes;                         		// 0x00B4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< class UAudioComponent* >                   AudioComponents;                                  		// 0x00B8 (0x0010) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FPointer >                          Sources;                                          		// 0x00C8 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FPointer >                          FreeSources;                                      		// 0x00D8 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00E8 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.WaveInstanceSourceMap
	unsigned long                                      bGameWasTicking : 1;                              		// 0x0130 (0x0004) [0x0000000000001002] [0x00000001] ( CPF_Const | CPF_Native )
	unsigned long                                      bDisableUnrealSetListener : 1;                    		// 0x0130 (0x0004) [0x0000000000001000] [0x00000002] ( CPF_Native )
	unsigned long                                      bSoundSpawningEnabled : 1;                        		// 0x0130 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	TArray< struct FListener >                         Listeners;                                        		// 0x0134 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FQWord                                      CurrentTick;                                      		// 0x0144 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x014C (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.SoundClasses
	unsigned char                                      UnknownData02[ 0x48 ];                            		// 0x0194 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.SourceSoundClasses
	unsigned char                                      UnknownData03[ 0x48 ];                            		// 0x01DC (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.CurrentSoundClasses
	unsigned char                                      UnknownData04[ 0x48 ];                            		// 0x0224 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.DestinationSoundClasses
	unsigned char                                      UnknownData05[ 0x48 ];                            		// 0x026C (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.SoundModes
	struct FPointer                                    Effects;                                          		// 0x02B4 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FName                                       BaseSoundModeName;                                		// 0x02BC (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class USoundMode*                                  CurrentMode;                                      		// 0x02C4 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeStartTime;                               		// 0x02CC (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeFadeInStartTime;                         		// 0x02D4 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeFadeInEndTime;                           		// 0x02DC (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeEndTime;                                 		// 0x02E4 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                ListenerVolumeIndex;                              		// 0x02EC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FInteriorSettings                           ListenerInteriorSettings;                         		// 0x02F0 (0x0024) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     InteriorStartTime;                                		// 0x0314 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     InteriorEndTime;                                  		// 0x031C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     ExteriorEndTime;                                  		// 0x0324 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     InteriorLPFEndTime;                               		// 0x032C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     ExteriorLPFEndTime;                               		// 0x0334 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              InteriorVolumeInterp;                             		// 0x033C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              InteriorLPFInterp;                                		// 0x0340 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              ExteriorVolumeInterp;                             		// 0x0344 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              ExteriorLPFInterp;                                		// 0x0348 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UAudioComponent*                             TestAudioComponent;                               		// 0x034C (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FPointer                                    TextToSpeech;                                     		// 0x0354 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      DebugState;                                       		// 0x035C (0x0001) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              TransientMasterVolume;                            		// 0x0360 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastUpdateTime;                                   		// 0x0364 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2596 ];

		return pClassPointer;
	};

	void SetSimpleListener ( struct FVector Location, struct FVector Up, struct FVector Right, struct FVector Front, unsigned long bUpdateVelocity );
	class USoundClass* FindSoundClass ( struct FName SoundClassName );
	bool SetSoundMode ( struct FName NewMode );
};



// Class Engine.SoundClass ( Property size: 5 iter: 7) 
// Class name index: 7378 
// 0x0080 (0x00E0 - 0x0060)
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                       Properties;                                       		// 0x0060 (0x0020) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FName >                             ChildClassNames;                                  		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bIsChild : 1;                                     		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	int                                                MenuID;                                           		// 0x0094 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0098 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.SoundClass.EditorData

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2598 ];

		return pClassPointer;
	};

};



// Class Engine.SoundMode ( Property size: 7 iter: 9) 
// Class name index: 7380 
// 0x0048 (0x00A8 - 0x0060)
class USoundMode : public UObject
{
public:
	unsigned long                                      bApplyEQ : 1;                                     		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FAudioEQEffect                              EQSettings;                                       		// 0x0064 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FSoundClassAdjuster >               SoundClassEffects;                                		// 0x0088 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              InitialDelay;                                     		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeInTime;                                       		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutTime;                                      		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2600 ];

		return pClassPointer;
	};

};



// Class Engine.MatineePawn ( Property size: 1 iter: 1) 
// Class name index: 7382 
// 0x0008 (0x0558 - 0x0550)
class AMatineePawn : public APawn
{
public:
	class USkeletalMesh*                               PreviewMesh;                                      		// 0x0550 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2602 ];

		return pClassPointer;
	};

};



// Class Engine.Scout ( Property size: 32 iter: 34) 
// Class name index: 7384 
// 0x0098 (0x05E8 - 0x0550)
class AScout : public APawn
{
public:
	TArray< struct FPathSizeInfo >                     PathSizes;                                        		// 0x0550 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              TestJumpZ;                                        		// 0x0560 (0x0004) [0x0000000000000000]              
	float                                              TestGroundSpeed;                                  		// 0x0564 (0x0004) [0x0000000000000000]              
	float                                              TestMaxFallSpeed;                                 		// 0x0568 (0x0004) [0x0000000000000000]              
	float                                              TestFallSpeed;                                    		// 0x056C (0x0004) [0x0000000000000000]              
	float                                              MaxLandingVelocity;                               		// 0x0570 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MinNumPlayerStarts;                               		// 0x0574 (0x0004) [0x0000000000000000]              
	class UClass*                                      DefaultReachSpecClass;                            		// 0x0578 (0x0008) [0x0000000000000000]              
	TArray< struct FColor >                            EdgePathColors;                                   		// 0x0580 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              NavMeshGen_StepSize;                              		// 0x0590 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_EntityHalfHeight;                      		// 0x0594 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_StartingHeightOffset;                  		// 0x0598 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MaxDropHeight;                         		// 0x059C (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MaxStepHeight;                         		// 0x05A0 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_VertZDeltaSnapThresh;                  		// 0x05A4 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinPolyArea;                           		// 0x05A8 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_BorderBackfill_CheckDist;              		// 0x05AC (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinMergeDotAreaThreshold;              		// 0x05B0 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinMergeDotSmallArea;                  		// 0x05B4 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinMergeDotLargeArea;                  		// 0x05B8 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MaxPolyHeight;                         		// 0x05BC (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_HeightMergeThreshold;                  		// 0x05C0 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_EdgeMaxDelta;                          		// 0x05C4 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MaxGroundCheckSize;                    		// 0x05C8 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinEdgeLength;                         		// 0x05CC (0x0004) [0x0000000000000000]              
	unsigned long                                      NavMeshGen_ExpansionDoObstacleMeshSimplification : 1;		// 0x05D0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bHightlightOneWayReachSpecs : 1;                  		// 0x05D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              MinMantleFallDist;                                		// 0x05D4 (0x0004) [0x0000000000000000]              
	float                                              MaxMantleFallDist;                                		// 0x05D8 (0x0004) [0x0000000000000000]              
	float                                              MinMantleLateralDist;                             		// 0x05DC (0x0004) [0x0000000000000000]              
	float                                              MaxMantleLateralDist;                             		// 0x05E0 (0x0004) [0x0000000000000000]              
	float                                              MaxMantleFallTime;                                		// 0x05E4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2604 ];

		return pClassPointer;
	};

	void eventPreBeginPlay ( );
};



// Class Engine.Light ( Property size: 2 iter: 4) 
// Class name index: 7386 
// 0x000C (0x024C - 0x0240)
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                   		// 0x0240 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x0248 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2606 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
};



// Class Engine.DirectionalLight ( Property size: 0 iter: 0) 
// Class name index: 7388 
// 0x0000 (0x024C - 0x024C)
class ADirectionalLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2608 ];

		return pClassPointer;
	};

};



// Class Engine.DirectionalLightToggleable ( Property size: 0 iter: 0) 
// Class name index: 7390 
// 0x0000 (0x024C - 0x024C)
class ADirectionalLightToggleable : public ADirectionalLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2610 ];

		return pClassPointer;
	};

};



// Class Engine.DominantDirectionalLight ( Property size: 0 iter: 0) 
// Class name index: 7392 
// 0x0000 (0x024C - 0x024C)
class ADominantDirectionalLight : public ADirectionalLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2612 ];

		return pClassPointer;
	};

};



// Class Engine.DominantDirectionalLightMovable ( Property size: 0 iter: 0) 
// Class name index: 7394 
// 0x0000 (0x024C - 0x024C)
class ADominantDirectionalLightMovable : public ADominantDirectionalLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2614 ];

		return pClassPointer;
	};

};



// Class Engine.PointLight ( Property size: 0 iter: 0) 
// Class name index: 7396 
// 0x0000 (0x024C - 0x024C)
class APointLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2616 ];

		return pClassPointer;
	};

};



// Class Engine.DominantPointLight ( Property size: 0 iter: 0) 
// Class name index: 7398 
// 0x0000 (0x024C - 0x024C)
class ADominantPointLight : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2618 ];

		return pClassPointer;
	};

};



// Class Engine.PointLightMovable ( Property size: 0 iter: 0) 
// Class name index: 7400 
// 0x0000 (0x024C - 0x024C)
class APointLightMovable : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2620 ];

		return pClassPointer;
	};

};



// Class Engine.PointLightToggleable ( Property size: 0 iter: 4) 
// Class name index: 7402 
// 0x0000 (0x024C - 0x024C)
class APointLightToggleable : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2622 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct APointLightToggleable_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct APointLightToggleable_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
};



// Class Engine.SkyLight ( Property size: 0 iter: 0) 
// Class name index: 7404 
// 0x0000 (0x024C - 0x024C)
class ASkyLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2624 ];

		return pClassPointer;
	};

};



// Class Engine.SkyLightToggleable ( Property size: 0 iter: 0) 
// Class name index: 7406 
// 0x0000 (0x024C - 0x024C)
class ASkyLightToggleable : public ASkyLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2626 ];

		return pClassPointer;
	};

};



// Class Engine.SpotLight ( Property size: 0 iter: 0) 
// Class name index: 7408 
// 0x0000 (0x024C - 0x024C)
class ASpotLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2628 ];

		return pClassPointer;
	};

};



// Class Engine.DominantSpotLight ( Property size: 0 iter: 0) 
// Class name index: 7410 
// 0x0000 (0x024C - 0x024C)
class ADominantSpotLight : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2630 ];

		return pClassPointer;
	};

};



// Class Engine.GeneratedMeshAreaLight ( Property size: 0 iter: 0) 
// Class name index: 7412 
// 0x0000 (0x024C - 0x024C)
class AGeneratedMeshAreaLight : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2632 ];

		return pClassPointer;
	};

};



// Class Engine.SpotLightMovable ( Property size: 0 iter: 0) 
// Class name index: 7414 
// 0x0000 (0x024C - 0x024C)
class ASpotLightMovable : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2634 ];

		return pClassPointer;
	};

};



// Class Engine.SpotLightToggleable ( Property size: 0 iter: 4) 
// Class name index: 7416 
// 0x0000 (0x024C - 0x024C)
class ASpotLightToggleable : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2636 ];

		return pClassPointer;
	};

	void ApplyCheckpointRecord ( struct ASpotLightToggleable_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ASpotLightToggleable_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
};



// Class Engine.StaticLightCollectionActor ( Property size: 2 iter: 2) 
// Class name index: 7418 
// 0x0014 (0x0260 - 0x024C)
class AStaticLightCollectionActor : public ALight
{
public:
	TArray< class ULightComponent* >                   LightComponents;                                  		// 0x024C (0x0010) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                MaxLightComponents;                               		// 0x025C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2638 ];

		return pClassPointer;
	};

};



// Class Engine.LightComponent ( Property size: 47 iter: 63) 
// Class name index: 7420 
// 0x011B (0x01A0 - 0x0085)
class ULightComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneInfo;                                        		// 0x0088 (0x0008) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FMatrix                                     WorldToLight;                                     		// 0x0090 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FMatrix                                     LightToWorld;                                     		// 0x00D0 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FGuid                                       LightGuid;                                        		// 0x0110 (0x0010) [0x0000000000200002]              ( CPF_Const )
	struct FGuid                                       LightmapGuid;                                     		// 0x0120 (0x0010) [0x0000000000200002]              ( CPF_Const )
	float                                              Brightness;                                       		// 0x0130 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LightColor;                                       		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class ULightFunction*                              Function;                                         		// 0x0138 (0x0008) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x0140 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastShadows : 1;                                  		// 0x0140 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastStaticShadows : 1;                            		// 0x0140 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastDynamicShadows : 1;                           		// 0x0140 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCastCompositeShadow : 1;                         		// 0x0140 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAffectCompositeShadowDirection : 1;              		// 0x0140 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNonModulatedSelfShadowing : 1;                   		// 0x0140 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bSelfShadowOnly : 1;                              		// 0x0140 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAllowPreShadow : 1;                              		// 0x0140 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bForceDynamicLight : 1;                           		// 0x0140 (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      UseDirectLightMap : 1;                            		// 0x0140 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bHasLightEverBeenBuiltIntoLightMap : 1;           		// 0x0140 (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bCanAffectDynamicPrimitivesOutsideDynamicChannel : 1;		// 0x0140 (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bRenderLightShafts : 1;                           		// 0x0140 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bUseImageReflectionSpecular : 1;                  		// 0x0140 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bPrecomputedLightingIsValid : 1;                  		// 0x0140 (0x0004) [0x0000000000000002] [0x00008000] ( CPF_Const )
	unsigned long                                      bExplicitlyAssignedLight : 1;                     		// 0x0140 (0x0004) [0x0000000000000002] [0x00010000] ( CPF_Const )
	unsigned long                                      bAllowCompositingIntoDLE : 1;                     		// 0x0140 (0x0004) [0x0000000000000000] [0x00020000] 
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0144 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x014C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      LightAffectsClassification;                       		// 0x0150 (0x0001) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned char                                      LightShadowMode;                                  		// 0x0151 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ModShadowColor;                                   		// 0x0154 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              ModShadowFadeoutTime;                             		// 0x0164 (0x0004) [0x0000000000000000]              
	float                                              ModShadowFadeoutExponent;                         		// 0x0168 (0x0004) [0x0000000000000000]              
	int                                                LightListIndex;                                   		// 0x016C (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	unsigned char                                      ShadowProjectionTechnique;                        		// 0x0170 (0x0001) [0x0000000000000000]              
	unsigned char                                      ShadowFilterQuality;                              		// 0x0171 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinShadowResolution;                              		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxShadowResolution;                              		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShadowFadeResolution;                             		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionDepthRange;                              		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomScale;                                       		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomThreshold;                                   		// 0x0188 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomScreenBlendThreshold;                        		// 0x018C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BloomTint;                                        		// 0x0190 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialBlurPercent;                                		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionMaskDarkness;                            		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReflectionSpecularBrightness;                     		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2640 ];

		return pClassPointer;
	};

	void OnUpdatePropertyLightColor ( );
	void OnUpdatePropertyBrightness ( );
	void OnUpdatePropertyOcclusionMaskDarkness ( );
	void OnUpdatePropertyBloomTint ( );
	void OnUpdatePropertyBloomScale ( );
	void UpdateLightShaftParameters ( );
	void UpdateColorAndBrightness ( );
	struct FVector GetDirection ( );
	struct FVector GetOrigin ( );
	void SetLightProperties ( float NewBrightness, struct FColor NewLightColor, class ULightFunction* NewLightFunction );
	void SetEnabled ( unsigned long bSetEnabled );
};



// Class Engine.DirectionalLightComponent ( Property size: 5 iter: 7) 
// Class name index: 7422 
// 0x0020 (0x01C0 - 0x01A0)
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                              TraceDistance;                                    		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WholeSceneDynamicShadowRadius;                    		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumWholeSceneDynamicShadowCascades;               		// 0x01A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CascadeDistributionExponent;                      		// 0x01AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FLightmassDirectionalLightSettings          LightmassSettings;                                		// 0x01B0 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2642 ];

		return pClassPointer;
	};

	void OnUpdatePropertyBrightness ( );
	void OnUpdatePropertyLightColor ( );
};



// Class Engine.DominantDirectionalLightComponent ( Property size: 2 iter: 2) 
// Class name index: 7424 
// 0x00C0 (0x0280 - 0x01C0)
class UDominantDirectionalLightComponent : public UDirectionalLightComponent
{
public:
	struct FDominantShadowInfo                         DominantLightShadowInfo;                          		// 0x01C0 (0x00B0) [0x0000000000000002]              ( CPF_Const )
	struct FArray_Mirror                               DominantLightShadowMap;                           		// 0x0270 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2644 ];

		return pClassPointer;
	};

};



// Class Engine.PointLightComponent ( Property size: 11 iter: 14) 
// Class name index: 7426 
// 0x00A0 (0x0240 - 0x01A0)
class UPointLightComponent : public ULightComponent
{
public:
	float                                              ShadowRadiusMultiplier;                           		// 0x01A0 (0x0004) [0x0000000000000000]              
	float                                              Radius;                                           		// 0x01A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FalloffExponent;                                  		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShadowFalloffExponent;                            		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinShadowFalloffRadius;                           		// 0x01B0 (0x0004) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x01B4 (0x000C) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                              		// 0x01C0 (0x0040) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     Translation;                                      		// 0x0200 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x020C (0x0004) MISSED OFFSET
	struct FPlane                                      ShadowPlane;                                      		// 0x0210 (0x0010) [0x0000000000000002]              ( CPF_Const )
	class UDrawLightRadiusComponent*                   PreviewLightRadius;                               		// 0x0220 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FLightmassPointLightSettings                LightmassSettings;                                		// 0x0228 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UDrawLightRadiusComponent*                   PreviewLightSourceRadius;                         		// 0x0238 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2646 ];

		return pClassPointer;
	};

	void OnUpdatePropertyBrightness ( );
	void OnUpdatePropertyLightColor ( );
	void SetTranslation ( struct FVector NewTranslation );
};



// Class Engine.DominantPointLightComponent ( Property size: 0 iter: 0) 
// Class name index: 7428 
// 0x0000 (0x0240 - 0x0240)
class UDominantPointLightComponent : public UPointLightComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2648 ];

		return pClassPointer;
	};

};



// Class Engine.SpotLightComponent ( Property size: 6 iter: 7) 
// Class name index: 7430 
// 0x0028 (0x0268 - 0x0240)
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              InnerConeAngle;                                   		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OuterConeAngle;                                   		// 0x0244 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightShaftConeAngle;                              		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UDrawLightConeComponent*                     PreviewInnerCone;                                 		// 0x024C (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDrawLightConeComponent*                     PreviewOuterCone;                                 		// 0x0254 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FRotator                                    Rotation;                                         		// 0x025C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2650 ];

		return pClassPointer;
	};

	void SetRotation ( struct FRotator NewRotation );
};



// Class Engine.DominantSpotLightComponent ( Property size: 2 iter: 2) 
// Class name index: 7432 
// 0x00C8 (0x0330 - 0x0268)
class UDominantSpotLightComponent : public USpotLightComponent
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0268 (0x0008) MISSED OFFSET
	struct FDominantShadowInfo                         DominantLightShadowInfo;                          		// 0x0270 (0x00B0) [0x0000000000000002]              ( CPF_Const )
	struct FArray_Mirror                               DominantLightShadowMap;                           		// 0x0320 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2652 ];

		return pClassPointer;
	};

};



// Class Engine.SkyLightComponent ( Property size: 2 iter: 2) 
// Class name index: 7434 
// 0x0008 (0x01A8 - 0x01A0)
class USkyLightComponent : public ULightComponent
{
public:
	float                                              LowerBrightness;                                  		// 0x01A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LowerColor;                                       		// 0x01A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2654 ];

		return pClassPointer;
	};

};



// Class Engine.SphericalHarmonicLightComponent ( Property size: 2 iter: 2) 
// Class name index: 7436 
// 0x0094 (0x0234 - 0x01A0)
class USphericalHarmonicLightComponent : public ULightComponent
{
public:
	struct FSHVectorRGB                                WorldSpaceIncidentLighting;                       		// 0x01A0 (0x0090) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRenderBeforeModShadows : 1;                      		// 0x0230 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2656 ];

		return pClassPointer;
	};

};



// Class Engine.LightEnvironmentComponent ( Property size: 8 iter: 10) 
// Class name index: 7438 
// 0x0023 (0x00A8 - 0x0085)
class ULightEnvironmentComponent : public UActorComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0088 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bForceNonCompositeDynamicLights : 1;              		// 0x0088 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAllowDynamicShadowsOnTranslucency : 1;           		// 0x0088 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAllowPreShadow : 1;                              		// 0x0088 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bTranslucencyShadowed : 1;                        		// 0x0088 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	float                                              DominantShadowFactor;                             		// 0x008C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class ULightComponent*                             AffectingDominantLight;                           		// 0x0090 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	TArray< class UPrimitiveComponent* >               AffectedComponents;                               		// 0x0098 (0x0010) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2658 ];

		return pClassPointer;
	};

	bool IsEnabled ( );
	void SetEnabled ( unsigned long bNewEnabled );
};



// Class Engine.DynamicLightEnvironmentComponent ( Property size: 37 iter: 39) 
// Class name index: 7440 
// 0x00B0 (0x0158 - 0x00A8)
class UDynamicLightEnvironmentComponent : public ULightEnvironmentComponent
{
public:
	struct FPointer                                    State;                                            		// 0x00A8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              InvisibleUpdateTime;                              		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinTimeBetweenFullUpdates;                        		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSkipUpdateWhenHidden : 1;                        		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCastShadows : 1;                                 		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCompositeShadowsFromDynamicLights : 1;           		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bForceCompositeAllLights : 1;                     		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bAffectedBySmallDynamicLights : 1;                		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bUseBooleanEnvironmentShadowing : 1;              		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bShadowFromEnvironment : 1;                       		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bDynamic : 1;                                     		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bSynthesizeDirectionalLight : 1;                  		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bSynthesizeSHLight : 1;                           		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bRequiresNonLatentUpdates : 1;                    		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bTraceFromClosestBoundsPoint : 1;                 		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bIsCharacterLightEnvironment : 1;                 		// 0x00B8 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bOverrideOwnerLightingChannels : 1;               		// 0x00B8 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bAlwaysInfluencedByDominantDirectionalLight : 1;  		// 0x00B8 (0x0004) [0x0000000000000000] [0x00004000] 
	float                                              VelocityUpdateTimeScale;                          		// 0x00BC (0x0004) [0x0000000000000000]              
	float                                              ShadowInterpolationSpeed;                         		// 0x00C0 (0x0004) [0x0000000000000000]              
	int                                                NumVolumeVisibilitySamples;                       		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightingBoundsScale;                              		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                AmbientShadowColor;                               		// 0x00CC (0x0010) [0x0000000000000000]              
	struct FVector                                     AmbientShadowSourceDirection;                     		// 0x00DC (0x000C) [0x0000000000000000]              
	struct FLinearColor                                AmbientGlow;                                      		// 0x00E8 (0x0010) [0x0000000000000000]              
	float                                              LightDistance;                                    		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              ShadowDistance;                                   		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              ModShadowFadeoutTime;                             		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              ModShadowFadeoutExponent;                         		// 0x0104 (0x0004) [0x0000000000000000]              
	struct FLinearColor                                MaxModulatedShadowColor;                          		// 0x0108 (0x0010) [0x0000000000000000]              
	float                                              DominantShadowTransitionStartDistance;            		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              DominantShadowTransitionEndDistance;              		// 0x011C (0x0004) [0x0000000000000000]              
	float                                              MinShadowAngle;                                   		// 0x0120 (0x0004) [0x0000000000000000]              
	unsigned char                                      BoundsMethod;                                     		// 0x0124 (0x0001) [0x0000000000000000]              
	struct FBoxSphereBounds                            OverriddenBounds;                                 		// 0x0128 (0x001C) [0x0000000000000000]              
	struct FLightingChannelContainer                   OverriddenLightingChannels;                       		// 0x0144 (0x0004) [0x0000000000000000]              
	TArray< class ULightComponent* >                   OverriddenLightComponents;                        		// 0x0148 (0x0010) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2660 ];

		return pClassPointer;
	};

	void ResetEnvironment ( );
};



// Class Engine.ParticleLightEnvironmentComponent ( Property size: 5 iter: 5) 
// Class name index: 7442 
// 0x001C (0x0174 - 0x0158)
class UParticleLightEnvironmentComponent : public UDynamicLightEnvironmentComponent
{
public:
	int                                                ReferenceCount;                                   		// 0x0158 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NumPooledReuses;                                  		// 0x015C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AActor*                                      SharedInstigator;                                 		// 0x0160 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UParticleSystem*                             SharedParticleSystem;                             		// 0x0168 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bAllowDLESharing : 1;                             		// 0x0170 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2662 ];

		return pClassPointer;
	};

};



// Class Engine.DrawLightConeComponent ( Property size: 0 iter: 0) 
// Class name index: 7444 
// 0x0000 (0x0248 - 0x0248)
class UDrawLightConeComponent : public UDrawConeComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2664 ];

		return pClassPointer;
	};

};



// Class Engine.DrawLightRadiusComponent ( Property size: 0 iter: 0) 
// Class name index: 7446 
// 0x0000 (0x0250 - 0x0250)
class UDrawLightRadiusComponent : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2666 ];

		return pClassPointer;
	};

};



// Class Engine.LightFunction ( Property size: 3 iter: 3) 
// Class name index: 7448 
// 0x0018 (0x0078 - 0x0060)
class ULightFunction : public UObject
{
public:
	class UMaterialInterface*                          SourceMaterial;                                   		// 0x0060 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Scale;                                            		// 0x0068 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              DisabledBrightness;                               		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2668 ];

		return pClassPointer;
	};

};



// Class Engine.SkeletalMeshComponent ( Property size: 207 iter: 342) 
// Class name index: 7450 
// 0x0508 (0x0750 - 0x0248)
class USkeletalMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x0248 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      AttachedToSkelComponent;                          		// 0x0250 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAnimTree*                                   AnimTreeTemplate;                                 		// 0x0258 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimNode*                                   Animations;                                       		// 0x0260 (0x0008) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	TArray< class UAnimNode* >                         AnimTickArray;                                    		// 0x0268 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class UAnimNode* >                         AnimAlwaysTickArray;                              		// 0x0278 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< int >                                      AnimTickRelevancyArray;                           		// 0x0288 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< float >                                    AnimTickWeightsArray;                             		// 0x0298 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< class USkelControlBase* >                  SkelControlTickArray;                             		// 0x02A8 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x02B8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPhysicsAssetInstance*                       PhysicsAssetInstance;                             		// 0x02C0 (0x0008) [0x000000000440200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	struct FPointer                                    ApexClothing;                                     		// 0x02C8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              PhysicsWeight;                                    		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GlobalAnimRateScale;                              		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StreamingDistanceMultiplier;                      		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    MeshObject;                                       		// 0x02DC (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FColor                                      WireframeColor;                                   		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FBoneAtom >                         SpaceBases;                                       		// 0x02E8 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FBoneAtom >                         LocalAtoms;                                       		// 0x02F8 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FBoneAtom >                         CachedLocalAtoms;                                 		// 0x0308 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FBoneAtom >                         CachedSpaceBases;                                 		// 0x0318 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                LowUpdateFrameRate;                               		// 0x0328 (0x0004) [0x0000000000044002]              ( CPF_Const | CPF_Config | CPF_GlobalConfig )
	TArray< unsigned char >                            RequiredBones;                                    		// 0x032C (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< unsigned char >                            ComposeOrderedRequiredBones;                      		// 0x033C (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class USkeletalMeshComponent*                      ParentAnimComponent;                              		// 0x034C (0x0008) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< int >                                      ParentBoneMap;                                    		// 0x0354 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UAnimSet* >                          AnimSets;                                         		// 0x0364 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UAnimSet* >                          TemporarySavedAnimSets;                           		// 0x0374 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< class UMorphTargetSet* >                   MorphSets;                                        		// 0x0384 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FActiveMorph >                      ActiveMorphs;                                     		// 0x0394 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FActiveMorph >                      ActiveCurveMorphs;                                		// 0x03A4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x03B4 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.SkeletalMeshComponent.MorphTargetIndexMap
	TArray< struct FAttachment >                       Attachments;                                      		// 0x03FC (0x0010) [0x0000000000680002]              ( CPF_Const | CPF_Component | CPF_NeedCtorLink )
	TArray< unsigned char >                            SkelControlIndex;                                 		// 0x040C (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	TArray< unsigned char >                            PostPhysSkelControlIndex;                         		// 0x041C (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                ForcedLodModel;                                   		// 0x042C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinLodModel;                                      		// 0x0430 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PredictedLODLevel;                                		// 0x0434 (0x0004) [0x0000000000000000]              
	int                                                OldPredictedLODLevel;                             		// 0x0438 (0x0004) [0x0000000000000000]              
	float                                              AnimationLODDistanceFactor;                       		// 0x043C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AnimationLODFrameRate;                            		// 0x0440 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistanceFactor;                                		// 0x0444 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ChunkIndexPreview;                                		// 0x0448 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SectionIndexPreview;                              		// 0x044C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                bForceWireframe;                                  		// 0x0450 (0x0004) [0x0000000000000000]              
	int                                                bForceRefpose;                                    		// 0x0454 (0x0004) [0x0000000000000000]              
	int                                                bOldForceRefPose;                                 		// 0x0458 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNoSkeletonUpdate : 1;                            		// 0x045C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                bDisplayBones;                                    		// 0x0460 (0x0004) [0x0000000000000000]              
	int                                                bShowPrePhysBones;                                		// 0x0464 (0x0004) [0x0000000000000000]              
	int                                                bHideSkin;                                        		// 0x0468 (0x0004) [0x0000000000000000]              
	int                                                bForceRawOffset;                                  		// 0x046C (0x0004) [0x0000000000000000]              
	int                                                bIgnoreControllers;                               		// 0x0470 (0x0004) [0x0000000000000000]              
	int                                                bTransformFromAnimParent;                         		// 0x0474 (0x0004) [0x0000000000000000]              
	int                                                TickTag;                                          		// 0x0478 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                InitTag;                                          		// 0x047C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CachedAtomsTag;                                   		// 0x0480 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                bUseSingleBodyPhysics;                            		// 0x0484 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                bRequiredBonesUpToDate;                           		// 0x0488 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinDistFactorForKinematicUpdate;                  		// 0x048C (0x0004) [0x0000000000000000]              
	int                                                FramesPhysicsAsleep;                              		// 0x0490 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SkipRateForTickAnimNodesAndGetBoneAtoms;          		// 0x0494 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bSkipTickAnimNodes : 1;                           		// 0x0498 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bSkipGetBoneAtoms : 1;                            		// 0x0498 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bInterpolateBoneAtoms : 1;                        		// 0x0498 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasValidBodies : 1;                              		// 0x0498 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bSkipAllUpdateWhenPhysicsAsleep : 1;              		// 0x0498 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bComponentUseFixedSkelBounds : 1;                 		// 0x0498 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bUseBoundsFromParentAnimComponent : 1;            		// 0x0498 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bConsiderAllBodiesForBounds : 1;                  		// 0x0498 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bUpdateSkelWhenNotRendered : 1;                   		// 0x0498 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bIgnoreControllersWhenNotRendered : 1;            		// 0x0498 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bTickAnimNodesWhenNotRendered : 1;                		// 0x0498 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bNotUpdatingKinematicDueToDistance : 1;           		// 0x0498 (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bForceDiscardRootMotion : 1;                      		// 0x0498 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bNotifyRootMotionProcessed : 1;                   		// 0x0498 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bRootMotionModeChangeNotify : 1;                  		// 0x0498 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bRootMotionExtractedNotify : 1;                   		// 0x0498 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bProcessingRootMotion : 1;                        		// 0x0498 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bDisableFaceFXMaterialInstanceCreation : 1;       		// 0x0498 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bDisableFaceFX : 1;                               		// 0x0498 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bAnimTreeInitialised : 1;                         		// 0x0498 (0x0004) [0x0000000000002002] [0x00080000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bForceMeshObjectUpdate : 1;                       		// 0x0498 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bHasPhysicsAssetInstance : 1;                     		// 0x0498 (0x0004) [0x0000000000000003] [0x00200000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateKinematicBonesFromAnimation : 1;           		// 0x0498 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bUpdateJointsFromAnimation : 1;                   		// 0x0498 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bSkelCompFixed : 1;                               		// 0x0498 (0x0004) [0x0000000000000002] [0x01000000] ( CPF_Const )
	unsigned long                                      bHasHadPhysicsBlendedIn : 1;                      		// 0x0498 (0x0004) [0x0000000000000002] [0x02000000] ( CPF_Const )
	unsigned long                                      bForceUpdateAttachmentsInTick : 1;                		// 0x0498 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bEnableFullAnimWeightBodies : 1;                  		// 0x0498 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      bPerBoneVolumeEffects : 1;                        		// 0x0498 (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bPerBoneMotionBlur : 1;                           		// 0x0498 (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bSyncActorLocationToRootRigidBody : 1;            		// 0x0498 (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      bUseRawData : 1;                                  		// 0x0498 (0x0004) [0x0000000000000002] [0x80000000] ( CPF_Const )
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;              		// 0x049C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bOverrideAttachmentOwnerVisibility : 1;           		// 0x049C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNeedsToDeleteHitMask : 1;                        		// 0x049C (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bPauseAnims : 1;                                  		// 0x049C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bChartDistanceFactor : 1;                         		// 0x049C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bEnableLineCheckWithBounds : 1;                   		// 0x049C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bCanHighlightSelectedSections : 1;                		// 0x049C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bUpdateMorphWhenParentAnimComponentExists : 1;    		// 0x049C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	struct FVector                                     LineCheckBoundsScale;                             		// 0x04A0 (0x000C) [0x0000000000000000]              
	unsigned long                                      bEnableClothSimulation : 1;                       		// 0x04AC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableClothCollision : 1;                       		// 0x04AC (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bClothFrozen : 1;                                 		// 0x04AC (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutoFreezeClothWhenNotRendered : 1;              		// 0x04AC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bClothAwakeOnStartup : 1;                         		// 0x04AC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bClothBaseVelClamp : 1;                           		// 0x04AC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bClothBaseVelInterp : 1;                          		// 0x04AC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAttachClothVertsToBaseBody : 1;                  		// 0x04AC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIsClothOnStaticObject : 1;                       		// 0x04AC (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUpdatedFixedClothVerts : 1;                      		// 0x04AC (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bClothPositionalDampening : 1;                    		// 0x04AC (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bClothWindRelativeToOwner : 1;                    		// 0x04AC (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bRecentlyRendered : 1;                            		// 0x04AC (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bCacheAnimSequenceNodes : 1;                      		// 0x04AC (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bNeedsInstanceWeightUpdate : 1;                   		// 0x04AC (0x0004) [0x0000000000002002] [0x00004000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bAlwaysUseInstanceWeights : 1;                    		// 0x04AC (0x0004) [0x0000000000002002] [0x00008000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdateComposeSkeletonPasses : 1;                 		// 0x04AC (0x0004) [0x0000000000002002] [0x00010000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bValidTemporarySavedAnimSets : 1;                 		// 0x04AC (0x0004) [0x0000000000003002] [0x00020000] ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FBonePair >                         InstanceVertexWeightBones;                        		// 0x04B0 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FSkelMeshComponentLODInfo >         LODInfo;                                          		// 0x04C0 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     FrozenLocalToWorldPos;                            		// 0x04D0 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FRotator                                    FrozenLocalToWorldRot;                            		// 0x04DC (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     ClothExternalForce;                               		// 0x04E8 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ClothWind;                                        		// 0x04F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ClothBaseVelClampRange;                           		// 0x0500 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothBlendWeight;                                 		// 0x050C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothDynamicBlendWeight;                          		// 0x0510 (0x0004) [0x0000000000000000]              
	float                                              ClothBlendMinDistanceFactor;                      		// 0x0514 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothBlendMaxDistanceFactor;                      		// 0x0518 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinPosDampRange;                                  		// 0x051C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxPosDampRange;                                  		// 0x0528 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinPosDampScale;                                  		// 0x0534 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxPosDampScale;                                  		// 0x0540 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ClothSim;                                         		// 0x054C (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SceneIndex;                                       		// 0x0554 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FVector >                           ClothMeshPosData;                                 		// 0x0558 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FVector >                           ClothMeshNormalData;                              		// 0x0568 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      ClothMeshIndexData;                               		// 0x0578 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                NumClothMeshVerts;                                		// 0x0588 (0x0004) [0x0000000000000000]              
	int                                                NumClothMeshIndices;                              		// 0x058C (0x0004) [0x0000000000000000]              
	TArray< int >                                      ClothMeshParentData;                              		// 0x0590 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                NumClothMeshParentIndices;                        		// 0x05A0 (0x0004) [0x0000000000000000]              
	TArray< struct FVector >                           ClothMeshWeldedPosData;                           		// 0x05A4 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FVector >                           ClothMeshWeldedNormalData;                        		// 0x05B4 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      ClothMeshWeldedIndexData;                         		// 0x05C4 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                ClothDirtyBufferFlag;                             		// 0x05D4 (0x0004) [0x0000000000000000]              
	unsigned char                                      ClothRBChannel;                                   		// 0x05D8 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRBCollisionChannelContainer                ClothRBCollideWithChannels;                       		// 0x05DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothForceScale;                                  		// 0x05E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothImpulseScale;                                		// 0x05E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothAttachmentTearFactor;                        		// 0x05E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bClothUseCompartment : 1;                         		// 0x05EC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              MinDistanceForClothReset;                         		// 0x05F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     LastClothLocation;                                		// 0x05F4 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      ApexClothingRBChannel;                            		// 0x0600 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRBCollisionChannelContainer                ApexClothingRBCollideWithChannels;                		// 0x0604 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ApexClothingCollisionRBChannel;                   		// 0x0608 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutoFreezeApexClothingWhenNotRendered : 1;       		// 0x060C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLocalSpaceWind : 1;                              		// 0x060C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	struct FVector                                     WindVelocity;                                     		// 0x0610 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindVelocityBlendTime;                            		// 0x061C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSkipInitClothing : 1;                            		// 0x0620 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	struct FPointer                                    SoftBodySim;                                      		// 0x0624 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SoftBodySceneIndex;                               		// 0x062C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bEnableSoftBodySimulation : 1;                    		// 0x0630 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	TArray< struct FVector >                           SoftBodyTetraPosData;                             		// 0x0634 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      SoftBodyTetraIndexData;                           		// 0x0644 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                NumSoftBodyTetraVerts;                            		// 0x0654 (0x0004) [0x0000000000000000]              
	int                                                NumSoftBodyTetraIndices;                          		// 0x0658 (0x0004) [0x0000000000000000]              
	float                                              SoftBodyImpulseScale;                             		// 0x065C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoftBodyFrozen : 1;                              		// 0x0660 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutoFreezeSoftBodyWhenNotRendered : 1;           		// 0x0660 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSoftBodyAwakeOnStartup : 1;                      		// 0x0660 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSoftBodyUseCompartment : 1;                      		// 0x0660 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned char                                      SoftBodyRBChannel;                                		// 0x0664 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRBCollisionChannelContainer                SoftBodyRBCollideWithChannels;                    		// 0x0668 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    SoftBodyASVPlane;                                 		// 0x066C (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UMaterial*                                   LimitMaterial;                                    		// 0x0674 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x067C (0x0004) MISSED OFFSET
	struct FBoneAtom                                   RootMotionDelta;                                  		// 0x0680 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     RootMotionVelocity;                               		// 0x06A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     RootBoneTranslation;                              		// 0x06AC (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     RootMotionAccelScale;                             		// 0x06B8 (0x000C) [0x0000000000000000]              
	unsigned char                                      RootMotionMode;                                   		// 0x06C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PreviousRMM;                                      		// 0x06C5 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      PendingRMM;                                       		// 0x06C6 (0x0001) [0x0000000000000000]              
	unsigned char                                      OldPendingRMM;                                    		// 0x06C7 (0x0001) [0x0000000000000000]              
	int                                                bRMMOneFrameDelay;                                		// 0x06C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      RootMotionRotationMode;                           		// 0x06CC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AnimRotationOnly;                                 		// 0x06CD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FaceFXBlendMode;                                  		// 0x06CE (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    FaceFXActorInstance;                              		// 0x06D0 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UAudioComponent*                             CachedFaceFXAudioComp;                            		// 0x06D8 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	TArray< unsigned char >                            BoneVisibilityStates;                             		// 0x06E0 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UAkEvent*                                    CachedFaceFxAkEvent;                              		// 0x06F0 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData02[ 0x8 ];                             		// 0x06F8 (0x0008) MISSED OFFSET
	struct FBoneAtom                                   LocalToWorldBoneAtom;                             		// 0x0700 (0x0020) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              ProgressiveDrawingFraction;                       		// 0x0720 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      CustomSortAlternateIndexMode;                     		// 0x0724 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	TArray< struct FName >                             MorphTargetsQueried;                              		// 0x0728 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bUseTickOptimization : 1;                         		// 0x0738 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	int                                                TickCount;                                        		// 0x073C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LastDropRate;                                     		// 0x0740 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LastDropRateChange;                               		// 0x0744 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              AccumulatedDroppedDeltaTime;                      		// 0x0748 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              ComponentDroppedDeltaTime;                        		// 0x074C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2670 ];

		return pClassPointer;
	};

	void SetMaterial ( int ElementIndex, class UMaterialInterface* Material );
	struct FRotator GetRotation ( );
	struct FVector GetPosition ( );
	void BreakConstraint ( struct FVector Impulse, struct FVector HitLocation, struct FName InBoneName, unsigned long bVelChange );
	void SkelMeshCompOnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	bool eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	bool eventCreateForceField ( class UAnimNotify_ForceField* AnimNotifyData );
	void StopAnim ( );
	void PlayAnim ( struct FName AnimName, float Duration, unsigned long bLoop, unsigned long bRestartIfAlreadyPlaying, float StartTime, unsigned long bPlayBackwards );
	void ShowMaterialSection ( int MaterialID, unsigned long bShow, int LODIndex );
	void UpdateMeshForBrokenConstraints ( );
	void UnHideBoneByName ( struct FName BoneName );
	void HideBoneByName ( struct FName BoneName, unsigned char PhysBodyOption );
	bool IsBoneHidden ( int BoneIndex );
	void UnHideBone ( int BoneIndex );
	void HideBone ( int BoneIndex, unsigned char PhysBodyOption );
	void SetFaceFXRegisterEx ( struct FString RegName, unsigned char RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration );
	void SetFaceFXRegister ( struct FString RegName, float RegVal, unsigned char RegOp, float InterpDuration );
	float GetFaceFXRegister ( struct FString RegName );
	void DeclareFaceFXRegister ( struct FString RegName );
	bool IsPlayingFaceFXAnim ( );
	void StopFaceFXAnim ( );
	bool PlayFaceFXAnim ( class UFaceFXAnimSet* FaceFXAnimSetRef, struct FString AnimName, struct FString GroupName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay );
	void ToggleInstanceVertexWeights ( unsigned long bEnable, int LODIdx );
	void UpdateInstanceVertexWeightBones ( TArray< struct FBonePair > BonePairs );
	int FindInstanceVertexweightBonePair ( struct FBonePair Bones );
	void RemoveInstanceVertexWeightBoneParented ( struct FName BoneName );
	void AddInstanceVertexWeightBoneParented ( struct FName BoneName, unsigned long bPairWithParent );
	bool GetBonesWithinRadius ( struct FVector Origin, float Radius, int TraceFlags, TArray< struct FName >* out_Bones );
	void UpdateAnimations ( );
	void ForceSkelUpdate ( );
	void UpdateRBBonesFromSpaceBases ( unsigned long bMoveUnfixedBodies, unsigned long bTeleport );
	void SetHasPhysicsAssetInstance ( unsigned long bHasInstance, unsigned long bUseCurrentPosition );
	class URB_BodyInstance* FindBodyInstanceNamed ( struct FName BoneName );
	struct FName FindConstraintBoneName ( int ConstraintIndex );
	int FindConstraintIndex ( struct FName ConstraintName );
	void InitMorphTargets ( );
	void InitSkelControls ( );
	void UpdateParentBoneMap ( );
	void SetParentAnimComponent ( class USkeletalMeshComponent* NewParentAnimComp );
	void SetAnimTreeTemplate ( class UAnimTree* NewTemplate );
	struct FVector GetClosestCollidingBoneLocation ( struct FVector TestLocation, unsigned long bCheckZeroExtent, unsigned long bCheckNonZeroExtent );
	struct FName FindClosestBone ( struct FVector TestLocation, float IgnoreScale, struct FVector* BoneLocation );
	void TransformFromBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation );
	void TransformToBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation );
	struct FVector GetBoneAxis ( struct FName BoneName, unsigned char Axis );
	struct FVector GetRefPosePosition ( int BoneIndex );
	bool BoneIsChildOf ( struct FName BoneName, struct FName ParentBoneName );
	void GetBoneNames ( TArray< struct FName >* BoneNames );
	struct FName GetParentBone ( struct FName BoneName );
	struct FMatrix GetBoneMatrix ( int BoneIndex );
	struct FName GetBoneName ( int BoneIndex );
	int MatchRefBone ( struct FName BoneName );
	struct FVector GetBoneLocation ( struct FName BoneName, int Space );
	struct FQuat GetBoneQuaternion ( struct FName BoneName, int Space );
	class UMorphNodeBase* FindMorphNode ( struct FName InNodeName );
	class USkelControlBase* FindSkelControl ( struct FName InControlName );
	void AllAnimNodes ( class UClass* BaseClass, class UAnimNode** Node );
	class UAnimNode* FindAnimNode ( struct FName InNodeName );
	class UMorphTarget* FindMorphTarget ( struct FName MorphTargetName );
	float GetAnimLength ( struct FName AnimSeqName );
	float GetAnimRateByDuration ( struct FName AnimSeqName, float Duration );
	void RestoreSavedAnimSets ( );
	void SaveAnimSets ( );
	class UAnimSequence* FindAnimSequence ( struct FName AnimSeqName );
	void WakeSoftBody ( );
	void SetSoftBodyFrozen ( unsigned long bNewFrozen );
	void UpdateSoftBodyParams ( );
	void SetClothValidBounds ( struct FVector ClothValidBoundsMin, struct FVector ClothValidBoundsMax );
	void EnableClothValidBounds ( unsigned long IfEnableClothValidBounds );
	void AttachClothToCollidingShapes ( unsigned long AttatchTwoWay, unsigned long AttachTearable );
	void SetClothVelocity ( struct FVector VelocityOffSet );
	void SetClothPosition ( struct FVector ClothOffSet );
	void SetClothSleep ( unsigned long IfClothSleep );
	void SetClothThickness ( float ClothThickness );
	void SetClothTearFactor ( float ClothTearFactor );
	void SetClothStretchingStiffness ( float ClothStretchingStiffness );
	void SetClothSolverIterations ( int ClothSolverIterations );
	void SetClothSleepLinearVelocity ( float ClothSleepLinearVelocity );
	void SetClothPressure ( float ClothPressure );
	void SetClothFriction ( float ClothFriction );
	void SetClothFlags ( int ClothFlags );
	void SetClothDampingCoefficient ( float ClothDampingCoefficient );
	void SetClothCollisionResponseCoefficient ( float ClothCollisionResponseCoefficient );
	void SetClothBendingStiffness ( float ClothBendingStiffness );
	void SetClothAttachmentTearFactor ( float ClothAttachTearFactor );
	void SetClothAttachmentResponseCoefficient ( float ClothAttachmentResponseCoefficient );
	float GetClothThickness ( );
	float GetClothTearFactor ( );
	float GetClothStretchingStiffness ( );
	int GetClothSolverIterations ( );
	float GetClothSleepLinearVelocity ( );
	float GetClothPressure ( );
	float GetClothFriction ( );
	int GetClothFlags ( );
	float GetClothDampingCoefficient ( );
	float GetClothCollisionResponseCoefficient ( );
	float GetClothBendingStiffness ( );
	float GetClothAttachmentTearFactor ( );
	float GetClothAttachmentResponseCoefficient ( );
	void ForceApexClothingTeleport ( );
	void ForceApexClothingTeleportAndReset ( );
	void ResetClothVertsToRefPose ( );
	void SetAttachClothVertsToBaseBody ( unsigned long bAttachVerts );
	void SetClothExternalForce ( struct FVector InForce );
	void UpdateClothParams ( );
	void SetEnableClothingSimulation ( unsigned long bInEnable );
	void SetClothFrozen ( unsigned long bNewFrozen );
	void SetEnableClothSimulation ( unsigned long bInEnable );
	void SetForceRefPose ( unsigned long bNewForceRefPose );
	void SetPhysicsAsset ( class UPhysicsAsset* NewPhysicsAsset, unsigned long bForceReInit );
	void SetSkeletalMesh ( class USkeletalMesh* NewMesh, unsigned long bKeepSpaceBases );
	struct FMatrix GetTransformMatrix ( );
	void AttachedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	bool IsComponentAttached ( class UActorComponent* Component, struct FName BoneName );
	class UActorComponent* FindComponentAttachedToBone ( struct FName InBoneName );
	struct FName GetSocketBoneName ( struct FName InSocketName );
	class USkeletalMeshSocket* GetSocketByName ( struct FName InSocketName );
	bool GetSocketWorldLocationAndRotation ( struct FName InSocketName, int Space, struct FVector* OutLocation, struct FRotator* OutRotation );
	void AttachComponentToSocket ( class UActorComponent* Component, struct FName SocketName );
	void DetachComponent ( class UActorComponent* Component );
	void AttachComponent ( class UActorComponent* Component, struct FName BoneName, struct FVector RelativeLocation, struct FRotator RelativeRotation, struct FVector RelativeScale );
};



// Class Engine.SkeletalMesh ( Property size: 125 iter: 144) 
// Class name index: 7452 
// 0x044C (0x04AC - 0x0060)
class USkeletalMesh : public UObject
{
public:
	struct FBoxSphereBounds                            Bounds;                                           		// 0x0060 (0x001C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	TArray< class UMaterialInterface* >                Materials;                                        		// 0x007C (0x0010) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	TArray< class UApexClothingAsset* >                ClothingAssets;                                   		// 0x008C (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	TArray< struct FApexClothingAssetInfo >            ClothingLodMap;                                   		// 0x009C (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	struct FVector                                     Origin;                                           		// 0x00AC (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	struct FRotator                                    RotOrigin;                                        		// 0x00B8 (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	TArray< int >                                      RefSkeleton;                                      		// 0x00C4 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                SkeletalDepth;                                    		// 0x00D4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00D8 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.SkeletalMesh.NameIndexMap
	struct FIndirectArray_Mirror                       LODModels;                                        		// 0x0120 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    SourceData;                                       		// 0x0130 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FBoneAtom >                         RefBasesInvMatrix;                                		// 0x0138 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< struct FBoneMirrorInfo >                   SkelMirrorTable;                                  		// 0x0148 (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	unsigned char                                      SkelMirrorAxis;                                   		// 0x0158 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SkelMirrorFlipAxis;                               		// 0x0159 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USkeletalMeshSocket* >               Sockets;                                          		// 0x015C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           BoneBreakNames;                                   		// 0x016C (0x0010) [0x0000000000021003]              ( CPF_Edit | CPF_Const | CPF_Native | CPF_EditConst )
	TArray< unsigned char >                            BoneBreakOptions;                                 		// 0x017C (0x0010) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	TArray< struct FSkeletalMeshLODInfo >              LODInfo;                                          		// 0x018C (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	TArray< struct FSkeletalMeshOptimizationSettings > OptimizationSettings;                             		// 0x019C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FName >                             PerPolyCollisionBones;                            		// 0x01AC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FName >                             AddToParentPerPolyCollisionBone;                  		// 0x01BC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< int >                                      PerPolyBoneKDOPs;                                 		// 0x01CC (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bPerPolyUseSoftWeighting : 1;                     		// 0x01DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSimpleLineCollision : 1;                      		// 0x01DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseSimpleBoxCollision : 1;                       		// 0x01DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceCPUSkinning : 1;                            		// 0x01DC (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseFullPrecisionUVs : 1;                         		// 0x01DC (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasBeenSimplified : 1;                           		// 0x01DC (0x0004) [0x0000000000000000] [0x00000020] 
	class UFaceFXAsset*                                FaceFXAsset;                                      		// 0x01E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               BoundsPreviewAsset;                               		// 0x01E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UMorphTargetSet* >                   PreviewMorphSets;                                 		// 0x01F0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                LODBiasPC;                                        		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBiasPS3;                                       		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBiasXbox360;                                   		// 0x0208 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     SourceFilePath;                                   		// 0x020C (0x0010) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	struct FString                                     SourceFileTimestamp;                              		// 0x021C (0x0010) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	TArray< struct FPointer >                          ClothMesh;                                        		// 0x022C (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< float >                                    ClothMeshScale;                                   		// 0x023C (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< int >                                      ClothToGraphicsVertMap;                           		// 0x024C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< float >                                    ClothMovementScale;                               		// 0x025C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      ClothMovementScaleGenMode;                        		// 0x026C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothToAnimMeshMaxDist;                           		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLimitClothToAnimMesh : 1;                        		// 0x0274 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< int >                                      ClothWeldingMap;                                  		// 0x0278 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                ClothWeldingDomain;                               		// 0x0288 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ClothWeldedIndices;                               		// 0x028C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bForceNoWelding : 1;                              		// 0x029C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	int                                                NumFreeClothVerts;                                		// 0x02A0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	TArray< int >                                      ClothIndexBuffer;                                 		// 0x02A4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FName >                             ClothBones;                                       		// 0x02B4 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                ClothHierarchyLevels;                             		// 0x02C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothBendConstraints : 1;                  		// 0x02C8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothDamping : 1;                          		// 0x02C8 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseClothCOMDamping : 1;                          		// 0x02C8 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	float                                              ClothStretchStiffness;                            		// 0x02CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothBendStiffness;                               		// 0x02D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothDensity;                                     		// 0x02D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothThickness;                                   		// 0x02D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothDamping;                                     		// 0x02DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ClothIterations;                                  		// 0x02E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ClothHierarchicalIterations;                      		// 0x02E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothFriction;                                    		// 0x02E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothRelativeGridSpacing;                         		// 0x02EC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothPressure;                                    		// 0x02F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothCollisionResponseCoefficient;                		// 0x02F4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothAttachmentResponseCoefficient;               		// 0x02F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothAttachmentTearFactor;                        		// 0x02FC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothSleepLinearVelocity;                         		// 0x0300 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HardStretchLimitFactor;                           		// 0x0304 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bHardStretchLimit : 1;                            		// 0x0308 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothOrthoBendConstraints : 1;             		// 0x0308 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothSelfCollision : 1;                    		// 0x0308 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothPressure : 1;                         		// 0x0308 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothTwoWayCollision : 1;                  		// 0x0308 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	TArray< struct FClothSpecialBoneInfo >             ClothSpecialBones;                                		// 0x030C (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bEnableClothLineChecks : 1;                       		// 0x031C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bClothMetal : 1;                                  		// 0x031C (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	float                                              ClothMetalImpulseThreshold;                       		// 0x0320 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothMetalPenetrationDepth;                       		// 0x0324 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothMetalMaxDeformationDistance;                 		// 0x0328 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothTearing : 1;                          		// 0x032C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              ClothTearFactor;                                  		// 0x0330 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ClothTearReserve;                                 		// 0x0334 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableValidBounds : 1;                           		// 0x0338 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FVector                                     ValidBoundsMin;                                   		// 0x033C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ValidBoundsMax;                                   		// 0x0348 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FMap_Mirror                                 ClothTornTriMap;                                  		// 0x0354 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< int >                                      SoftBodySurfaceToGraphicsVertMap;                 		// 0x039C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      SoftBodySurfaceIndices;                           		// 0x03AC (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FVector >                           SoftBodyTetraVertsUnscaled;                       		// 0x03BC (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< int >                                      SoftBodyTetraIndices;                             		// 0x03CC (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FSoftBodyTetraLink >                SoftBodyTetraLinks;                               		// 0x03DC (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	TArray< struct FPointer >                          CachedSoftBodyMeshes;                             		// 0x03EC (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< float >                                    CachedSoftBodyMeshScales;                         		// 0x03FC (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	TArray< struct FName >                             SoftBodyBones;                                    		// 0x040C (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	TArray< struct FSoftBodySpecialBoneInfo >          SoftBodySpecialBones;                             		// 0x041C (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              SoftBodyVolumeStiffness;                          		// 0x042C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyStretchingStiffness;                      		// 0x0430 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyDensity;                                  		// 0x0434 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyParticleRadius;                           		// 0x0438 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyDamping;                                  		// 0x043C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SoftBodySolverIterations;                         		// 0x0440 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyFriction;                                 		// 0x0444 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyRelativeGridSpacing;                      		// 0x0448 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodySleepLinearVelocity;                      		// 0x044C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodySelfCollision : 1;                 		// 0x0450 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              SoftBodyAttachmentResponse;                       		// 0x0454 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyCollisionResponse;                        		// 0x0458 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyDetailLevel;                              		// 0x045C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SoftBodySubdivisionLevel;                         		// 0x0460 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bSoftBodyIsoSurface : 1;                          		// 0x0464 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodyDamping : 1;                       		// 0x0464 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseSoftBodyCOMDamping : 1;                       		// 0x0464 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	float                                              SoftBodyAttachmentThreshold;                      		// 0x0468 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodyTwoWayCollision : 1;               		// 0x046C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              SoftBodyAttachmentTearFactor;                     		// 0x0470 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodyLineChecks : 1;                    		// 0x0474 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasVertexColors : 1;                             		// 0x0474 (0x0004) [0x0000000000000000] [0x00000002] 
	TArray< unsigned long >                            GraphicsIndexIsCloth;                             		// 0x0478 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	TArray< float >                                    CachedStreamingTextureFactors;                    		// 0x0488 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              StreamingDistanceMultiplier;                      		// 0x0498 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ReleaseResourcesFence;                            		// 0x049C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FQWord                                      SkelMeshRUID;                                     		// 0x04A0 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseClothingAssetMaterial : 1;                    		// 0x04A8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2672 ];

		return pClassPointer;
	};

};



// Class Engine.SkeletalMeshSocket ( Property size: 9 iter: 9) 
// Class name index: 7454 
// 0x0054 (0x00B4 - 0x0060)
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                       		// 0x0060 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FName                                       BoneName;                                         		// 0x0068 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     RelativeLocation;                                 		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RelativeScale;                                    		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               PreviewSkelMesh;                                  		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      PreviewSkelComp;                                  		// 0x009C (0x0008) [0x00000000040A200B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Transient | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UStaticMesh*                                 PreviewStaticMesh;                                		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             PreviewParticleSystem;                            		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2674 ];

		return pClassPointer;
	};

};



// Class Engine.SplineActor ( Property size: 12 iter: 29) 
// Class name index: 7456 
// 0x0068 (0x02A8 - 0x0240)
class ASplineActor : public AActor
{
public:
	TArray< struct FSplineConnection >                 Connections;                                      		// 0x0240 (0x0010) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct FVector                                     SplineActorTangent;                               		// 0x0250 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      SplineColor;                                      		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisableDestination : 1;                          		// 0x0260 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlreadyVisited : 1;                              		// 0x0260 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	TArray< class ASplineActor* >                      LinksFrom;                                        		// 0x0264 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ASplineActor*                                nextOrdered;                                      		// 0x0274 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ASplineActor*                                prevOrdered;                                      		// 0x027C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ASplineActor*                                previousPath;                                     		// 0x0284 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                bestPathWeight;                                   		// 0x028C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                visitedWeight;                                    		// 0x0290 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FInterpCurveFloat                           SplineVelocityOverTime;                           		// 0x0294 (0x0014) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2676 ];

		return pClassPointer;
	};

	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void OnToggle ( class USeqAct_Toggle* inAction );
	void GetAllConnectedSplineActors ( TArray< class ASplineActor* >* OutSet );
	bool FindSplinePathTo ( class ASplineActor* Goal, TArray< class ASplineActor* >* OutRoute );
	class ASplineActor* GetBestConnectionInDirection ( struct FVector DesiredDir, unsigned long bUseLinksFrom );
	class ASplineActor* GetRandomConnection ( unsigned long bUseLinksFrom );
	void BreakAllConnectionsFrom ( );
	void BreakAllConnections ( );
	void BreakConnectionTo ( class ASplineActor* NextActor );
	class ASplineActor* FindTargetForComponent ( class USplineComponent* SplineComp );
	class USplineComponent* FindSplineComponentTo ( class ASplineActor* NextActor );
	bool IsConnectedTo ( class ASplineActor* NextActor, unsigned long bCheckForDisableDestination );
	void AddConnectionTo ( class ASplineActor* NextActor );
	void UpdateConnectedSplineComponents ( unsigned long bFinish );
	void UpdateSplineComponents ( );
	struct FVector GetWorldSpaceTangent ( );
};



// Class Engine.SplineLoftActor ( Property size: 12 iter: 14) 
// Class name index: 7458 
// 0x0058 (0x0300 - 0x02A8)
class ASplineLoftActor : public ASplineActor
{
public:
	float                                              ScaleX;                                           		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleY;                                           		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class USplineMeshComponent* >              SplineMeshComps;                                  		// 0x02B0 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UStaticMesh*                                 DeformMesh;                                       		// 0x02C0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	TArray< class UMaterialInterface* >                DeformMeshMaterials;                              		// 0x02C8 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              Roll;                                             		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WorldXDir;                                        		// 0x02DC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   Offset;                                           		// 0x02E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSmoothInterpRollAndScale : 1;                    		// 0x02F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAcceptsLights : 1;                               		// 0x02F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	class UDynamicLightEnvironmentComponent*           MeshLightEnvironment;                             		// 0x02F4 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	float                                              MeshMaxDrawDistance;                              		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2678 ];

		return pClassPointer;
	};

	void UpdateSplineParams ( );
	void ClearLoftMesh ( );
};



// Class Engine.SplineLoftActorMovable ( Property size: 0 iter: 0) 
// Class name index: 7460 
// 0x0000 (0x0300 - 0x0300)
class ASplineLoftActorMovable : public ASplineLoftActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2680 ];

		return pClassPointer;
	};

};



// Class Engine.SplineComponent ( Property size: 7 iter: 12) 
// Class name index: 7462 
// 0x003C (0x0274 - 0x0238)
class USplineComponent : public UPrimitiveComponent
{
public:
	struct FInterpCurveVector                          SplineInfo;                                       		// 0x0238 (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              SplineCurviness;                                  		// 0x024C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FColor                                      SplineColor;                                      		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SplineDrawRes;                                    		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SplineArrowSize;                                  		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSplineDisabled : 1;                              		// 0x025C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FInterpCurveFloat                           SplineReparamTable;                               		// 0x0260 (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2682 ];

		return pClassPointer;
	};

	struct FVector GetTangentAtDistanceAlongSpline ( float Distance );
	struct FVector GetLocationAtDistanceAlongSpline ( float Distance );
	float GetSplineLength ( );
	void UpdateSplineReparamTable ( );
	void UpdateSplineCurviness ( );
};



// Class Engine.ProcBuilding ( Property size: 37 iter: 56) 
// Class name index: 7464 
// 0x0118 (0x0394 - 0x027C)
class AProcBuilding : public AVolume
{
public:
	class UProcBuildingRuleset*                        Ruleset;                                          		// 0x027C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPBMeshCompInfo >                   BuildingMeshCompInfos;                            		// 0x0284 (0x0010) [0x00000000004A0003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_Component | CPF_NeedCtorLink )
	TArray< struct FPBFracMeshCompInfo >               BuildingFracMeshCompInfos;                        		// 0x0294 (0x0010) [0x00000000004A0003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_Component | CPF_NeedCtorLink )
	class UStaticMeshComponent*                        SimpleMeshComp;                                   		// 0x02A4 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bGenerateRoofMesh : 1;                            		// 0x02AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bGenerateFloorMesh : 1;                           		// 0x02AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bApplyRulesToRoof : 1;                            		// 0x02AC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bApplyRulesToFloor : 1;                           		// 0x02AC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSplitWallsAtRoofLevels : 1;                      		// 0x02AC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSplitWallsAtWallEdges : 1;                       		// 0x02AC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bQuickEdited : 1;                                 		// 0x02AC (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bBuildingBrushCollision : 1;                      		// 0x02AC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDebugDrawEdgeInfo : 1;                           		// 0x02AC (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDebugDrawScopes : 1;                             		// 0x02AC (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	TArray< class UStaticMeshComponent* >              LODMeshComps;                                     		// 0x02B0 (0x0010) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	TArray< struct FPBFaceUVInfo >                     LODMeshUVInfos;                                   		// 0x02C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPBScope2D >                        TopLevelScopes;                                   		// 0x02D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NumMeshedTopLevelScopes;                          		// 0x02E0 (0x0004) [0x0000000000000000]              
	TArray< struct FPBFaceUVInfo >                     TopLevelScopeUVInfos;                             		// 0x02E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPBScopeProcessInfo >               TopLevelScopeInfos;                               		// 0x02F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FPBEdgeInfo >                       EdgeInfos;                                        		// 0x0304 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              MaxFacadeZ;                                       		// 0x0314 (0x0004) [0x0000000000000000]              
	float                                              MinFacadeZ;                                       		// 0x0318 (0x0004) [0x0000000000000000]              
	TArray< class AProcBuilding* >                     OverlappingBuildings;                             		// 0x031C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              SimpleMeshMassiveLODDistance;                     		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RenderToTexturePullBackAmount;                    		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RoofLightmapRes;                                  		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NonRectWallLightmapRes;                           		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LODRenderToTextureScale;                          		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParamSwatchName;                                  		// 0x0340 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPBMaterialParam >                  BuildingMaterialParams;                           		// 0x0348 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UMaterialInstanceConstant* >         BuildingMatParamMICs;                             		// 0x0358 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AStaticMeshActor*                            LowLODPersistentActor;                            		// 0x0368 (0x0008) [0x0000000000220003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class UStaticMeshComponent*                        CurrentSimpleMeshComp;                            		// 0x0370 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class AActor*                                      CurrentSimpleMeshActor;                           		// 0x0378 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	TArray< class AProcBuilding* >                     AttachedBuildings;                                		// 0x0380 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                BuildingInstanceVersion;                          		// 0x0390 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2684 ];

		return pClassPointer;
	};

	int FindEdgeForTopLevelScope ( int TopLevelScopeIndex, unsigned char Edge );
	void BreakFractureComponent ( class UFracturedStaticMeshComponent* comp, struct FVector BoxMin, struct FVector BoxMax );
	void GetAllGroupedProcBuildings ( TArray< class AProcBuilding* >* OutSet );
	class AProcBuilding* GetBaseMostBuilding ( );
	TArray< class UStaticMeshComponent* > FindComponentsForTopLevelScope ( int TopLevelScopeIndex );
	void ClearBuildingMeshes ( );
};



// Class Engine.ProcBuilding_SimpleLODActor ( Property size: 0 iter: 0) 
// Class name index: 7466 
// 0x0003 (0x0250 - 0x024D)
class AProcBuilding_SimpleLODActor : public AStaticMeshActor
{
public:
//	 LastOffset: 24d
//	 Class Propsize: 250

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2686 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeBase ( Property size: 7 iter: 8) 
// Class name index: 7468 
// 0x0034 (0x0094 - 0x0060)
class UPBRuleNodeBase : public UObject
{
public:
	TArray< struct FPBRuleLink >                       NextRules;                                        		// 0x0060 (0x0010) [0x0000000000400040]              ( CPF_EditConstArray | CPF_NeedCtorLink )
	struct FString                                     Comment;                                          		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                RulePosX;                                         		// 0x0080 (0x0004) [0x0000000000000000]              
	int                                                RulePosY;                                         		// 0x0084 (0x0004) [0x0000000000000000]              
	int                                                InDrawY;                                          		// 0x0088 (0x0004) [0x0000000000000000]              
	int                                                DrawWidth;                                        		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                DrawHeight;                                       		// 0x0090 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2688 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeAlternate ( Property size: 5 iter: 5) 
// Class name index: 7470 
// 0x0010 (0x00A4 - 0x0094)
class UPBRuleNodeAlternate : public UPBRuleNodeBase
{
public:
	unsigned char                                      RepeatAxis;                                       		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              ASize;                                            		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BMaxSize;                                         		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertPatternOrder : 1;                          		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEqualSizeAB : 1;                                 		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2690 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeComment ( Property size: 6 iter: 6) 
// Class name index: 7472 
// 0x0018 (0x00AC - 0x0094)
class UPBRuleNodeComment : public UPBRuleNodeBase
{
public:
	int                                                SizeX;                                            		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SizeY;                                            		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BorderWidth;                                      		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BorderColor;                                      		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFilled : 1;                                      		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FColor                                      FillColor;                                        		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2692 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeCorner ( Property size: 9 iter: 10) 
// Class name index: 7474 
// 0x002C (0x00C0 - 0x0094)
class UPBRuleNodeCorner : public UPBRuleNodeBase
{
public:
	float                                              CornerSize;                                       		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRBCornerAngleInfo >                Angles;                                           		// 0x0098 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              FlatThreshold;                                    		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoMeshForConcaveCorners : 1;                     		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseAdjacentRulesetForRightGap : 1;               		// 0x00AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      CornerType;                                       		// 0x00B0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              CornerShapeOffset;                                		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RoundTesselation;                                 		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoundCurvature;                                   		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2694 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeCycle ( Property size: 4 iter: 4) 
// Class name index: 7476 
// 0x0010 (0x00A4 - 0x0094)
class UPBRuleNodeCycle : public UPBRuleNodeBase
{
public:
	unsigned char                                      RepeatAxis;                                       		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              RepeatSize;                                       		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CycleSize;                                        		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFixRepeatSize : 1;                               		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2696 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeEdgeAngle ( Property size: 2 iter: 4) 
// Class name index: 7478 
// 0x0014 (0x00A8 - 0x0094)
class UPBRuleNodeEdgeAngle : public UPBRuleNodeBase
{
public:
	unsigned char                                      Edge;                                             		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRBEdgeAngleInfo >                  Angles;                                           		// 0x0098 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2698 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeEdgeMesh ( Property size: 2 iter: 2) 
// Class name index: 7480 
// 0x0008 (0x009C - 0x0094)
class UPBRuleNodeEdgeMesh : public UPBRuleNodeBase
{
public:
	float                                              FlatThreshold;                                    		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MainXPullIn;                                      		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2700 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeExtractTopBottom ( Property size: 4 iter: 4) 
// Class name index: 7482 
// 0x0010 (0x00A4 - 0x0094)
class UPBRuleNodeExtractTopBottom : public UPBRuleNodeBase
{
public:
	float                                              ExtractTopZ;                                      		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtractNotTopZ;                                   		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtractBottomZ;                                   		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtractNotBottomZ;                                		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2702 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeLODQuad ( Property size: 1 iter: 1) 
// Class name index: 7484 
// 0x0004 (0x0098 - 0x0094)
class UPBRuleNodeLODQuad : public UPBRuleNodeBase
{
public:
	float                                              MassiveLODDistanceScale;                          		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2704 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeMesh ( Property size: 4 iter: 7) 
// Class name index: 7486 
// 0x0060 (0x00F4 - 0x0094)
class UPBRuleNodeMesh : public UPBRuleNodeBase
{
public:
	TArray< struct FBuildingMeshInfo >                 BuildingMeshes;                                   		// 0x0094 (0x0010) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBuildingMeshInfo                           PartialOccludedBuildingMesh;                      		// 0x00A4 (0x004C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bDoOcclusionTest : 1;                             		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBlockAll : 1;                                    		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2706 ];

		return pClassPointer;
	};

	int PickRandomBuildingMesh ( );
};



// Class Engine.PBRuleNodeOcclusion ( Property size: 0 iter: 0) 
// Class name index: 7488 
// 0x0000 (0x0094 - 0x0094)
class UPBRuleNodeOcclusion : public UPBRuleNodeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2708 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeQuad ( Property size: 6 iter: 6) 
// Class name index: 7490 
// 0x001C (0x00B0 - 0x0094)
class UPBRuleNodeQuad : public UPBRuleNodeBase
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              RepeatMaxSizeX;                                   		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RepeatMaxSizeZ;                                   		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                QuadLightmapRes;                                  		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              YOffset;                                          		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisableMaterialRepeat : 1;                       		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2710 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeRandom ( Property size: 3 iter: 3) 
// Class name index: 7492 
// 0x000C (0x00A0 - 0x0094)
class UPBRuleNodeRandom : public UPBRuleNodeBase
{
public:
	int                                                NumOutputs;                                       		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinNumExecuted;                                   		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxNumExecuted;                                   		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2712 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeRepeat ( Property size: 2 iter: 2) 
// Class name index: 7494 
// 0x0008 (0x009C - 0x0094)
class UPBRuleNodeRepeat : public UPBRuleNodeBase
{
public:
	unsigned char                                      RepeatAxis;                                       		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              RepeatMaxSize;                                    		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2714 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeSize ( Property size: 3 iter: 3) 
// Class name index: 7496 
// 0x000C (0x00A0 - 0x0094)
class UPBRuleNodeSize : public UPBRuleNodeBase
{
public:
	unsigned char                                      SizeAxis;                                         		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecisionSize;                                     		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseTopLevelScopeSize : 1;                        		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2716 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeSplit ( Property size: 2 iter: 3) 
// Class name index: 7498 
// 0x0014 (0x00A8 - 0x0094)
class UPBRuleNodeSplit : public UPBRuleNodeBase
{
public:
	unsigned char                                      SplitAxis;                                        		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FRBSplitInfo >                      SplitSetup;                                       		// 0x0098 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2718 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeSubRuleset ( Property size: 1 iter: 1) 
// Class name index: 7500 
// 0x0008 (0x009C - 0x0094)
class UPBRuleNodeSubRuleset : public UPBRuleNodeBase
{
public:
	class UProcBuildingRuleset*                        SubRuleset;                                       		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2720 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeTransform ( Property size: 3 iter: 3) 
// Class name index: 7502 
// 0x0018 (0x00AC - 0x0094)
class UPBRuleNodeTransform : public UPBRuleNodeBase
{
public:
	class UDistributionVector*                         Translation;                                      		// 0x0094 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDistributionVector*                         Rotation;                                         		// 0x009C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDistributionVector*                         Scale;                                            		// 0x00A4 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2722 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeVariation ( Property size: 1 iter: 1) 
// Class name index: 7504 
// 0x0004 (0x0098 - 0x0094)
class UPBRuleNodeVariation : public UPBRuleNodeBase
{
public:
	unsigned long                                      bVariationOfScopeOnLeft : 1;                      		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2724 ];

		return pClassPointer;
	};

};



// Class Engine.PBRuleNodeWindowWall ( Property size: 9 iter: 9) 
// Class name index: 7506 
// 0x0028 (0x00BC - 0x0094)
class UPBRuleNodeWindowWall : public UPBRuleNodeBase
{
public:
	float                                              CellMaxSizeX;                                     		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CellMaxSizeZ;                                     		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindowSizeX;                                      		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindowSizeZ;                                      		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindowPosX;                                       		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindowPosZ;                                       		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bScaleWindowWithCell : 1;                         		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              YOffset;                                          		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Material;                                         		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2726 ];

		return pClassPointer;
	};

};



// Class Engine.ProcBuildingRuleset ( Property size: 21 iter: 24) 
// Class name index: 7508 
// 0x0084 (0x00E4 - 0x0060)
class UProcBuildingRuleset : public UObject
{
public:
	class UPBRuleNodeBase*                             RootRule;                                         		// 0x0060 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bBeingEdited : 1;                                 		// 0x0068 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bEnableInteriorTexture : 1;                       		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLODOnlyRoof : 1;                                 		// 0x0068 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPickRandomSwatch : 1;                            		// 0x0068 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	class UMaterialInterface*                          DefaultRoofMaterial;                              		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          DefaultFloorMaterial;                             		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          DefaultNonRectWallMaterial;                       		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoofZOffset;                                      		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NotRoofZOffset;                                   		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloorZOffset;                                     		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NotFloorZOffset;                                  		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoofPolyInset;                                    		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloorPolyInset;                                   		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BuildingLODSpecular;                              		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoofEdgeScopeRaise;                               		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    LODCubemap;                                       		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    InteriorTexture;                                  		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< struct FPBVariationInfo >                  Variations;                                       		// 0x00B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< struct FPBParamSwatch >                    ParamSwatches;                                    		// 0x00C4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	TArray< class UPBRuleNodeComment* >                Comments;                                         		// 0x00D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2728 ];

		return pClassPointer;
	};

};



// Class Engine.ReplicationInfo ( Property size: 0 iter: 0) 
// Class name index: 7510 
// 0x0000 (0x0240 - 0x0240)
class AReplicationInfo : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2730 ];

		return pClassPointer;
	};

};



// Class Engine.GameReplicationInfo ( Property size: 14 iter: 28) 
// Class name index: 7512 
// 0x0068 (0x02A8 - 0x0240)
class AGameReplicationInfo : public AReplicationInfo
{
public:
	class UClass*                                      GameClass;                                        		// 0x0240 (0x0008) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bStopCountDown : 1;                               		// 0x0248 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bMatchHasBegun : 1;                               		// 0x0248 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bMatchIsOver : 1;                                 		// 0x0248 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	int                                                RemainingTime;                                    		// 0x024C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                ElapsedTime;                                      		// 0x0250 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                RemainingMinute;                                  		// 0x0254 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                GoalScore;                                        		// 0x0258 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                TimeLimit;                                        		// 0x025C (0x0004) [0x0000000000000020]              ( CPF_Net )
	TArray< class ATeamInfo* >                         Teams;                                            		// 0x0260 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ServerName;                                       		// 0x0270 (0x0010) [0x0000000000444021]              ( CPF_Edit | CPF_Net | CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class AActor*                                      Winner;                                           		// 0x0280 (0x0008) [0x0000000000000020]              ( CPF_Net )
	TArray< class APlayerReplicationInfo* >            PRIArray;                                         		// 0x0288 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class APlayerReplicationInfo* >            InactivePRIArray;                                 		// 0x0298 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2732 ];

		return pClassPointer;
	};

	bool eventShouldShowGore ( );
	bool IsCoopMultiplayerGame ( );
	bool IsMultiplayerGame ( );
	void EndGame ( );
	void StartMatch ( );
	void SetTeam ( int Index, class ATeamInfo* TI );
	void RemovePRI ( class APlayerReplicationInfo* PRI );
	void AddPRI ( class APlayerReplicationInfo* PRI );
	bool OnSameTeam ( class AActor* A, class AActor* B );
	void eventTimer ( );
	void Reset ( );
	void ReceivedGameClass ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};



// Class Engine.PlayerReplicationInfo ( Property size: 41 iter: 65) 
// Class name index: 7514 
// 0x00D0 (0x0310 - 0x0240)
class APlayerReplicationInfo : public AReplicationInfo
{
public:
	float                                              Score;                                            		// 0x0240 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                Deaths;                                           		// 0x0244 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      Ping;                                             		// 0x0248 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      TTSSpeaker;                                       		// 0x0249 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumLives;                                         		// 0x024C (0x0004) [0x0000000000000000]              
	struct FString                                     PlayerName;                                       		// 0x0250 (0x0010) [0x0000000000400020]              ( CPF_Net | CPF_NeedCtorLink )
	struct FString                                     OldName;                                          		// 0x0260 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PlayerID;                                         		// 0x0270 (0x0004) [0x0000000000000020]              ( CPF_Net )
	class ATeamInfo*                                   Team;                                             		// 0x0274 (0x0008) [0x0000000004000020]              ( CPF_Net | CPF_EditInline )
	unsigned long                                      bAdmin : 1;                                       		// 0x027C (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bIsSpectator : 1;                                 		// 0x027C (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bOnlySpectator : 1;                               		// 0x027C (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bWaitingPlayer : 1;                               		// 0x027C (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      bReadyToPlay : 1;                                 		// 0x027C (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      bOutOfLives : 1;                                  		// 0x027C (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      bBot : 1;                                         		// 0x027C (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      bHasBeenWelcomed : 1;                             		// 0x027C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bIsInactive : 1;                                  		// 0x027C (0x0004) [0x0000000000000020] [0x00000100] ( CPF_Net )
	unsigned long                                      bFromPreviousLevel : 1;                           		// 0x027C (0x0004) [0x0000000000000020] [0x00000200] ( CPF_Net )
	int                                                StartTime;                                        		// 0x0280 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FString                                     StringSpectating;                                 		// 0x0284 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StringUnknown;                                    		// 0x0294 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	int                                                Kills;                                            		// 0x02A4 (0x0004) [0x0000000000000000]              
	class UClass*                                      GameMessageClass;                                 		// 0x02A8 (0x0008) [0x0000000000000000]              
	float                                              ExactPing;                                        		// 0x02B0 (0x0004) [0x0000000000000000]              
	struct FString                                     SavedNetworkAddress;                              		// 0x02B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FUniqueNetId                                UniqueId;                                         		// 0x02C4 (0x0008) [0x0000000000000020]              ( CPF_Net )
	struct FName                                       SessionName;                                      		// 0x02CC (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FAutomatedTestingDatum                      AutomatedTestingData;                             		// 0x02D4 (0x0008) [0x0000000000000000]              
	int                                                StatConnectionCounts;                             		// 0x02DC (0x0004) [0x0000000000000000]              
	int                                                StatPingTotals;                                   		// 0x02E0 (0x0004) [0x0000000000000000]              
	int                                                StatPingMin;                                      		// 0x02E4 (0x0004) [0x0000000000000000]              
	int                                                StatPingMax;                                      		// 0x02E8 (0x0004) [0x0000000000000000]              
	int                                                StatPKLTotal;                                     		// 0x02EC (0x0004) [0x0000000000000000]              
	int                                                StatPKLMin;                                       		// 0x02F0 (0x0004) [0x0000000000000000]              
	int                                                StatPKLMax;                                       		// 0x02F4 (0x0004) [0x0000000000000000]              
	int                                                StatMaxInBPS;                                     		// 0x02F8 (0x0004) [0x0000000000000000]              
	int                                                StatAvgInBPS;                                     		// 0x02FC (0x0004) [0x0000000000000000]              
	int                                                StatMaxOutBPS;                                    		// 0x0300 (0x0004) [0x0000000000000000]              
	int                                                StatAvgOutBPS;                                    		// 0x0304 (0x0004) [0x0000000000000000]              
	class UTexture2D*                                  Avatar;                                           		// 0x0308 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2734 ];

		return pClassPointer;
	};

	bool IsPrimaryPlayer ( );
	void UnregisterPlayerFromSession ( );
	void RegisterPlayerWithSession ( );
	bool IsInvalidName ( );
	unsigned char GetTeamNum ( );
	void SetUniqueId ( struct FUniqueNetId PlayerUniqueId );
	void SeamlessTravelTo ( class APlayerReplicationInfo* NewPRI );
	void IncrementDeaths ( int Amt );
	void CopyProperties ( class APlayerReplicationInfo* PRI );
	void OverrideWith ( class APlayerReplicationInfo* PRI );
	class APlayerReplicationInfo* Duplicate ( );
	void SetWaitingPlayer ( unsigned long B );
	void eventSetPlayerName ( struct FString S );
	void DisplayDebug ( class AHUD* HUD, float* YL, float* YPos );
	struct FString GetHumanReadableName ( );
	void Reset ( );
	void eventDestroyed ( );
	bool ShouldBroadCastWelcomeMessage ( unsigned long bExiting );
	void UpdatePing ( float TimeStamp );
	void eventReplicatedEvent ( struct FName VarName );
	void SetPlayerTeam ( class ATeamInfo* NewTeam );
	void ClientInitialize ( class AController* C );
	void eventPostBeginPlay ( );
};



// Class Engine.TeamInfo ( Property size: 5 iter: 11) 
// Class name index: 7516 
// 0x0020 (0x0260 - 0x0240)
class ATeamInfo : public AReplicationInfo
{
public:
	struct FString                                     TeamName;                                         		// 0x0240 (0x0010) [0x0000000000408022]              ( CPF_Const | CPF_Net | CPF_Localized | CPF_NeedCtorLink )
	int                                                Size;                                             		// 0x0250 (0x0004) [0x0000000000000000]              
	float                                              Score;                                            		// 0x0254 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                TeamIndex;                                        		// 0x0258 (0x0004) [0x0000000000000020]              ( CPF_Net )
	struct FColor                                      TeamColor;                                        		// 0x025C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2736 ];

		return pClassPointer;
	};

	unsigned char GetTeamNum ( );
	struct FString GetHumanReadableName ( );
	void RemoveFromTeam ( class AController* Other );
	bool AddToTeam ( class AController* Other );
	void eventDestroyed ( );
	void eventReplicatedEvent ( struct FName VarName );
};



// Class Engine.Camera ( Property size: 49 iter: 88) 
// Class name index: 162 
// 0x0348 (0x0588 - 0x0240)
class ACamera : public AActor
{
public:
	class APlayerController*                           PCOwner;                                          		// 0x0240 (0x0008) [0x0000000000000000]              
	struct FName                                       CameraStyle;                                      		// 0x0248 (0x0008) [0x0000000000000000]              
	float                                              DefaultFOV;                                       		// 0x0250 (0x0004) [0x0000000000000000]              
	unsigned long                                      bLockedFOV : 1;                                   		// 0x0254 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bConstrainAspectRatio : 1;                        		// 0x0254 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bEnsureAspectRatio : 1;                           		// 0x0254 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bEnableFading : 1;                                		// 0x0254 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bFadeAudio : 1;                                   		// 0x0254 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bForceDisableTemporalAA : 1;                      		// 0x0254 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bEnableColorScaling : 1;                          		// 0x0254 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bEnableColorScaleInterp : 1;                      		// 0x0254 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bUseClientSideCameraUpdates : 1;                  		// 0x0254 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bDebugClientSideCamera : 1;                       		// 0x0254 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bShouldSendClientSideCameraUpdate : 1;            		// 0x0254 (0x0004) [0x0000000000000000] [0x00000400] 
	float                                              LockedFOV;                                        		// 0x0258 (0x0004) [0x0000000000000000]              
	float                                              ConstrainedAspectRatio;                           		// 0x025C (0x0004) [0x0000000000000000]              
	float                                              DefaultAspectRatio;                               		// 0x0260 (0x0004) [0x0000000000000000]              
	float                                              EnsuredAspectRatio;                               		// 0x0264 (0x0004) [0x0000000000000000]              
	float                                              OffAxisYawAngle;                                  		// 0x0268 (0x0004) [0x0000000000000000]              
	float                                              OffAxisPitchAngle;                                		// 0x026C (0x0004) [0x0000000000000000]              
	struct FColor                                      FadeColor;                                        		// 0x0270 (0x0004) [0x0000000000000000]              
	float                                              FadeAmount;                                       		// 0x0274 (0x0004) [0x0000000000000000]              
	float                                              CamOverridePostProcessAlpha;                      		// 0x0278 (0x0004) [0x0000000000000000]              
	struct FPostProcessSettings                        CamPostProcessSettings;                           		// 0x027C (0x0160) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRenderingPerformanceOverrides              RenderingOverrides;                               		// 0x03DC (0x0004) [0x0000000000000000]              
	struct FVector                                     ColorScale;                                       		// 0x03E0 (0x000C) [0x0000000000000000]              
	struct FVector                                     DesiredColorScale;                                		// 0x03EC (0x000C) [0x0000000000000000]              
	struct FVector                                     OriginalColorScale;                               		// 0x03F8 (0x000C) [0x0000000000000000]              
	float                                              ColorScaleInterpDuration;                         		// 0x0404 (0x0004) [0x0000000000000000]              
	float                                              ColorScaleInterpStartTime;                        		// 0x0408 (0x0004) [0x0000000000000000]              
	struct FTCameraCache                               CameraCache;                                      		// 0x040C (0x0020) [0x0000000000000000]              
	struct FTCameraCache                               LastFrameCameraCache;                             		// 0x042C (0x0020) [0x0000000000000000]              
	struct FTViewTarget                                ViewTarget;                                       		// 0x044C (0x0038) [0x0000000000000000]              
	struct FTViewTarget                                PendingViewTarget;                                		// 0x0484 (0x0038) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x04BC (0x0004) [0x0000000000000000]              
	struct FViewTargetTransitionParams                 BlendParams;                                      		// 0x04C0 (0x0010) [0x0000000000000000]              
	TArray< class UCameraModifier* >                   ModifierList;                                     		// 0x04D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              FreeCamDistance;                                  		// 0x04E0 (0x0004) [0x0000000000000000]              
	struct FVector                                     FreeCamOffset;                                    		// 0x04E4 (0x000C) [0x0000000000000000]              
	struct FVector2D                                   FadeAlpha;                                        		// 0x04F0 (0x0008) [0x0000000000000000]              
	float                                              FadeTime;                                         		// 0x04F8 (0x0004) [0x0000000000000000]              
	float                                              FadeTimeRemaining;                                		// 0x04FC (0x0004) [0x0000000000000000]              
	TArray< class AEmitterCameraLensEffectBase* >      CameraLensEffects;                                		// 0x0500 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UCameraModifier_CameraShake*                 CameraShakeCamMod;                                		// 0x0510 (0x0008) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class UClass*                                      CameraShakeCamModClass;                           		// 0x0518 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnimInst*                             AnimInstPool[ 0x8 ];                              		// 0x0520 (0x0040) [0x0000000000000000]              
	TArray< class UCameraAnimInst* >                   ActiveAnims;                                      		// 0x0560 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< class UCameraAnimInst* >                   FreeAnims;                                        		// 0x0570 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class ADynamicCameraActor*                         AnimCameraActor;                                  		// 0x0580 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2738 ];

		return pClassPointer;
	};

	void StopCameraAnim ( class UCameraAnimInst* AnimInst, unsigned long bImmediate );
	void StopAllCameraAnimsByType ( class UCameraAnim* Anim, unsigned long bImmediate );
	void StopAllCameraAnims ( unsigned long bImmediate );
	class UCameraAnimInst* PlayCameraAnim ( class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, float Duration, unsigned long bSingleInstance );
	void ClearAllCameraShakes ( );
	void PlayWorldCameraShake ( class UCameraShake* Shake, class AActor* ShakeInstigator, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, unsigned long bTryForceFeedback, unsigned long bOrientShakeTowardsEpicenter );
	float CalcRadialShakeScale ( class ACamera* Cam, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff );
	void StopCameraShake ( class UCameraShake* Shake );
	void PlayCameraShake ( class UCameraShake* Shake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot );
	void ClearCameraLensEffects ( );
	void RemoveCameraLensEffect ( class AEmitterCameraLensEffectBase* Emitter );
	void AddCameraLensEffect ( class UClass* LensEffectEmitterClass );
	class AEmitterCameraLensEffectBase* FindCameraLensEffect ( class UClass* LensEffectEmitterClass );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot );
	void SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	void UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT );
	void CheckViewTarget ( struct FTViewTarget* VT );
	void FillCameraCache ( struct FTPOV* NewPOV );
	struct FTPOV BlendViewTargets ( float Alpha, struct FTViewTarget* A, struct FTViewTarget* B );
	void ApplyAudioFade ( );
	void DoUpdateCamera ( float DeltaTime );
	void eventUpdateCamera ( float DeltaTime );
	void SetDesiredColorScale ( struct FVector NewColorScale, float InterpTime );
	struct FRotator GetCameraRotation ( );
	void GetCameraViewPoint ( struct FVector* OutCamLoc, struct FRotator* OutCamRot );
	void SetFOV ( float NewFOV );
	float GetFOVAngle ( );
	void InitializeFor ( class APlayerController* PC );
	void ApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV );
	void eventDestroyed ( );
	void PostBeginPlay ( );
	class UCameraModifier* CreateCameraModifier ( class UClass* ModifierClass );
};



// Class Engine.CameraActor ( Property size: 8 iter: 10) 
// Class name index: 7519 
// 0x0180 (0x03C0 - 0x0240)
class ACameraActor : public AActor
{
public:
	unsigned long                                      bConstrainAspectRatio : 1;                        		// 0x0240 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCamOverridePostProcess : 1;                      		// 0x0240 (0x0004) [0x0000000020000000] [0x00000002] ( CPF_Deprecated )
	float                                              AspectRatio;                                      		// 0x0244 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              FOVAngle;                                         		// 0x0248 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              CamOverridePostProcessAlpha;                      		// 0x024C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPostProcessSettings                        CamOverridePostProcess;                           		// 0x0250 (0x0160) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x03B0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        MeshComp;                                         		// 0x03B8 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2740 ];

		return pClassPointer;
	};

	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void GetCameraView ( float DeltaTime, struct FTPOV* OutPOV );
};



// Class Engine.DynamicCameraActor ( Property size: 0 iter: 0) 
// Class name index: 7521 
// 0x0000 (0x03C0 - 0x03C0)
class ADynamicCameraActor : public ACameraActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2742 ];

		return pClassPointer;
	};

};



// Class Engine.CameraAnim ( Property size: 7 iter: 7) 
// Class name index: 7523 
// 0x0198 (0x01F8 - 0x0060)
class UCameraAnim : public UObject
{
public:
	class UInterpGroupCamera*                          CameraInterpGroup;                                		// 0x0060 (0x0008) [0x0000000000000000]              
	class UInterpGroup*                                PreviewInterpGroup;                               		// 0x0068 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              AnimLength;                                       		// 0x0070 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FBox                                        BoundingBox;                                      		// 0x0074 (0x001C) [0x0000000000000002]              ( CPF_Const )
	struct FPostProcessSettings                        BasePPSettings;                                   		// 0x0090 (0x0160) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	float                                              BasePPSettingsAlpha;                              		// 0x01F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BaseFOV;                                          		// 0x01F4 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2744 ];

		return pClassPointer;
	};

};



// Class Engine.CameraAnimInst ( Property size: 25 iter: 31) 
// Class name index: 7525 
// 0x0210 (0x0270 - 0x0060)
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                          		// 0x0060 (0x0008) [0x0000000000000000]              
	class UInterpGroupInst*                            InterpGroupInst;                                  		// 0x0068 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              CurTime;                                          		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bLooping : 1;                                     		// 0x0074 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bFinished : 1;                                    		// 0x0074 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bAutoReleaseWhenFinished : 1;                     		// 0x0074 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bBlendingIn : 1;                                  		// 0x0074 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bBlendingOut : 1;                                 		// 0x0074 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	float                                              BlendInTime;                                      		// 0x0078 (0x0004) [0x0000000000000000]              
	float                                              BlendOutTime;                                     		// 0x007C (0x0004) [0x0000000000000000]              
	float                                              CurBlendInTime;                                   		// 0x0080 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurBlendOutTime;                                  		// 0x0084 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlayRate;                                         		// 0x0088 (0x0004) [0x0000000000000000]              
	float                                              BasePlayScale;                                    		// 0x008C (0x0004) [0x0000000000000000]              
	float                                              TransientScaleModifier;                           		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              CurrentBlendWeight;                               		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              RemainingTime;                                    		// 0x0098 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UInterpTrackMove*                            MoveTrack;                                        		// 0x009C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UInterpTrackInstMove*                        MoveInst;                                         		// 0x00A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeSequence*                           SourceAnimNode;                                   		// 0x00AC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      PlaySpace;                                        		// 0x00B4 (0x0001) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0xB ];                             		// 0x00B5 (0x000B) MISSED OFFSET
	struct FMatrix                                     UserPlaySpaceMatrix;                              		// 0x00C0 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct FPostProcessSettings                        LastPPSettings;                                   		// 0x0100 (0x0160) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastPPSettingsAlpha;                              		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     LastCameraLoc;                                    		// 0x0264 (0x000C) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2746 ];

		return pClassPointer;
	};

	void SetPlaySpace ( unsigned char NewSpace, struct FRotator UserPlaySpace );
	void ApplyTransientScaling ( float Scalar );
	void Stop ( unsigned long bImmediate );
	void AdvanceAnim ( float DeltaTime, unsigned long bJump );
	void Update ( float NewRate, float NewScale, float NewBlendInTime, float NewBlendOutTime, float NewDuration );
	void Play ( class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, unsigned long bInLoop, unsigned long bRandomStartTime, float Duration );
};



// Class Engine.CameraModifier ( Property size: 10 iter: 20) 
// Class name index: 7527 
// 0x0020 (0x0080 - 0x0060)
class UCameraModifier : public UObject
{
public:
	unsigned long                                      bDisabled : 1;                                    		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPendingDisable : 1;                              		// 0x0060 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bExclusive : 1;                                   		// 0x0060 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDebug : 1;                                       		// 0x0060 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	class ACamera*                                     CameraOwner;                                      		// 0x0064 (0x0008) [0x0000000000000000]              
	unsigned char                                      Priority;                                         		// 0x006C (0x0001) [0x0000000000000000]              
	float                                              AlphaInTime;                                      		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              AlphaOutTime;                                     		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              Alpha;                                            		// 0x0078 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetAlpha;                                      		// 0x007C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2748 ];

		return pClassPointer;
	};

	void UpdateAlpha ( class ACamera* Camera, float DeltaTime );
	bool ProcessViewRotation ( class AActor* ViewTarget, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void ToggleModifier ( );
	void EnableModifier ( );
	void eventDisableModifier ( unsigned long bImmediate );
	bool RemoveCameraModifier ( class ACamera* Camera );
	bool AddCameraModifier ( class ACamera* Camera );
	bool IsDisabled ( );
	bool ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV );
	void Init ( );
};



// Class Engine.CameraModifier_CameraShake ( Property size: 2 iter: 11) 
// Class name index: 7529 
// 0x0014 (0x0094 - 0x0080)
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray< struct FCameraShakeInstance >              ActiveShakes;                                     		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              SplitScreenShakeScale;                            		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2750 ];

		return pClassPointer;
	};

	bool ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV );
	void UpdateCameraShake ( float DeltaTime, struct FCameraShakeInstance* Shake, struct FTPOV* OutPOV );
	void RemoveAllCameraShakes ( );
	void RemoveCameraShake ( class UCameraShake* Shake );
	void AddCameraShake ( class UCameraShake* NewShake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot );
	struct FCameraShakeInstance InitializeShake ( class UCameraShake* NewShake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot );
	void ReinitShake ( int ActiveShakeIdx, float Scale );
	float InitializeOffset ( struct FFOscillator* Param );
};



// Class Engine.CameraShake ( Property size: 14 iter: 20) 
// Class name index: 7531 
// 0x0080 (0x00E0 - 0x0060)
class UCameraShake : public UObject
{
public:
	unsigned long                                      bSingleInstance : 1;                              		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRandomAnimSegment : 1;                           		// 0x0060 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              OscillationDuration;                              		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OscillationBlendInTime;                           		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OscillationBlendOutTime;                          		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FROscillator                                RotOscillation;                                   		// 0x0070 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	struct FVOscillator                                LocOscillation;                                   		// 0x0094 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	struct FFOscillator                                FOVOscillation;                                   		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnim*                                 Anim;                                             		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimPlayRate;                                     		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimScale;                                        		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimBlendInTime;                                  		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimBlendOutTime;                                 		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomAnimSegmentDuration;                        		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2752 ];

		return pClassPointer;
	};

	float GetLocOscillationMagnitude ( );
	float GetRotOscillationMagnitude ( );
};



// Class Engine.CloudStorageUpgradeHelper ( Property size: 0 iter: 3) 
// Class name index: 7533 
// 0x0000 (0x0060 - 0x0060)
class UCloudStorageUpgradeHelper : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2754 ];

		return pClassPointer;
	};

	void eventGetCloudUpgradeKeys ( TArray< struct FString >* CloudKeys );
	void eventHandleLocalKeyValue ( struct FString* CloudKeyName, struct FPlatformInterfaceData* CloudValue, int* bShouldMoveToCloud, int* bShouldDeleteLocalKey );
	void eventHandleLocalDocument ( struct FString* DocName, int* bShouldMoveToCloud, int* bShouldDeleteLocalFile );
};



// Class Engine.AnalyticEventsBase ( Property size: 4 iter: 23) 
// Class name index: 7535 
// 0x0018 (0x0098 - 0x0080)
class UAnalyticEventsBase : public UPlatformInterfaceBase
{
public:
	unsigned long                                      bSessionInProgress : 1;                           		// 0x0080 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bAutoStartSession : 1;                            		// 0x0080 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	int                                                SessionPauseThresholdSec;                         		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     UserId;                                           		// 0x0088 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2756 ];

		return pClassPointer;
	};

	void eventSendCachedEvents ( );
	void eventLogCurrencyGivenEvent ( struct FString GameCurrencyType, int GameCurrencyAmount );
	void eventLogCurrencyPurchaseEvent ( struct FString GameCurrencyType, int GameCurrencyAmount, struct FString RealCurrencyType, float RealMoneyCost, struct FString PaymentProvider );
	void eventLogItemPurchaseEvent ( struct FString ItemId, struct FString Currency, int PerItemCost, int ItemQuantity );
	void eventLogUserAttributeUpdateArray ( TArray< struct FEventStringParam > AttributeArray );
	void eventLogUserAttributeUpdate ( struct FString AttributeName, struct FString AttributeValue );
	void eventLogErrorMessage ( struct FString ErrorName, struct FString ErrorMessage );
	void eventEndStringEventParamArray ( struct FString EventName, TArray< struct FEventStringParam > ParamArray );
	void eventLogStringEventParamArray ( struct FString EventName, TArray< struct FEventStringParam > ParamArray, unsigned long bTimed );
	void eventEndStringEventParam ( struct FString EventName, struct FString ParamName, struct FString ParamValue );
	void eventLogStringEventParam ( struct FString EventName, struct FString ParamName, struct FString ParamValue, unsigned long bTimed );
	void eventEndStringEvent ( struct FString EventName );
	void eventLogStringEvent ( struct FString EventName, unsigned long bTimed );
	void eventEndSession ( );
	void eventStartSession ( );
	void eventSetUserId ( struct FString NewUserId );
	void eventInit ( );
	bool IsSessionInProgress ( );
};



// Class Engine.MultiProviderAnalytics ( Property size: 2 iter: 19) 
// Class name index: 7537 
// 0x0020 (0x00B8 - 0x0098)
class UMultiProviderAnalytics : public UAnalyticEventsBase
{
public:
	TArray< struct FString >                           AnalyticsProviderClassNames;                      		// 0x0098 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< class UAnalyticEventsBase* >               AnalyticsProviders;                               		// 0x00A8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2758 ];

		return pClassPointer;
	};

	void eventSendCachedEvents ( );
	void eventLogCurrencyGivenEvent ( struct FString GameCurrencyType, int GameCurrencyAmount );
	void eventLogCurrencyPurchaseEvent ( struct FString GameCurrencyType, int GameCurrencyAmount, struct FString RealCurrencyType, float RealMoneyCost, struct FString PaymentProvider );
	void eventLogItemPurchaseEvent ( struct FString ItemId, struct FString Currency, int PerItemCost, int ItemQuantity );
	void eventLogUserAttributeUpdateArray ( TArray< struct FEventStringParam > AttributeArray );
	void eventLogUserAttributeUpdate ( struct FString AttributeName, struct FString AttributeValue );
	void eventLogErrorMessage ( struct FString ErrorName, struct FString ErrorMessage );
	void eventEndStringEventParamArray ( struct FString EventName, TArray< struct FEventStringParam > ParamArray );
	void eventLogStringEventParamArray ( struct FString EventName, TArray< struct FEventStringParam > ParamArray, unsigned long bTimed );
	void eventEndStringEventParam ( struct FString EventName, struct FString ParamName, struct FString ParamValue );
	void eventLogStringEventParam ( struct FString EventName, struct FString ParamName, struct FString ParamValue, unsigned long bTimed );
	void eventEndStringEvent ( struct FString EventName );
	void eventLogStringEvent ( struct FString EventName, unsigned long bTimed );
	void eventEndSession ( );
	void eventStartSession ( );
	void eventSetUserId ( struct FString NewUserId );
	void Init ( );
};



// Class Engine.AppNotificationsBase ( Property size: 5 iter: 23) 
// Class name index: 7539 
// 0x006C (0x00EC - 0x0080)
class UAppNotificationsBase : public UPlatformInterfaceBase
{
public:
	struct FLaunchNotificationInfo                     AppLaunchNotification;                            		// 0x0080 (0x002C) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReceivedLocalNotification__Delegate;          		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x00B0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnReceivedRemoteNotification__Delegate;         		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x00C0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnRegisterForRemoteNotificationsComplete__Delegate;		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x00D0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnApplicationWillEnterForeground__Delegate;     		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x00E0 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2760 ];

		return pClassPointer;
	};

	void DebugLogNotification ( struct FNotificationInfo* Notification );
	void OnApplicationWillEnterForeground ( );
	bool AllowsRemoteNotificationsSounds ( );
	bool AllowsRemoteNotificationsBadegeIcons ( );
	bool AllowsRemoteNotificationsAlerts ( );
	bool AreRemoteNotificationsEnabled ( );
	void OnRegisterForRemoteNotificationsComplete ( unsigned long bDidAccept, struct FString PushNotificationToken );
	void RegisterForRemoteNotifications ( unsigned long bWantsAlerts, unsigned long bWantsBadge, unsigned long bWantsSound );
	void OnReceivedRemoteNotification ( unsigned long bWasAppActive, struct FNotificationInfo* Notification );
	void OnReceivedLocalNotification ( unsigned long bWasAppActive, struct FNotificationInfo* Notification );
	void CancelScheduledLocalNotification ( struct FNotificationMessageInfo* KeyValue );
	void CancelAllScheduledLocalNotifications ( );
	void ScheduleLocalNotification ( int StartOffsetSeconds, struct FNotificationInfo* Notification );
	bool WasLaunchedViaNotification ( );
	void eventInit ( );
};



// Class Engine.CloudStorageBase ( Property size: 2 iter: 26) 
// Class name index: 7541 
// 0x0014 (0x0094 - 0x0080)
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray< struct FString >                           LocalCloudFiles;                                  		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bSuppressDelegateCalls : 1;                       		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2762 ];

		return pClassPointer;
	};

	bool eventUpgradeLocalStorageToCloud ( class UCloudStorageUpgradeHelper* UpgradeHelper, unsigned long bForceSearchAgain );
	bool eventResolveConflictWithVersionIndex ( int Index );
	bool eventResolveConflictWithNewestDocument ( );
	bool eventWaitForWritesToFinish ( float MaxTimeSeconds );
	bool eventIsStillWritingFiles ( );
	bool eventSaveDocumentWithObject ( int Index, class UObject* ObjectData, int SaveVersion );
	bool eventSaveDocumentWithBytes ( int Index, TArray< unsigned char > ByteData );
	bool eventSaveDocumentWithString ( int Index, struct FString StringData );
	bool eventWriteCloudDocument ( int Index );
	class UObject* eventParseDocumentAsObject ( int Index, class UClass* ObjectClass, int ExpectedVersion, unsigned long bIsForConflict );
	void eventParseDocumentAsBytes ( int Index, unsigned long bIsForConflict, TArray< unsigned char >* ByteData );
	struct FString eventParseDocumentAsString ( int Index, unsigned long bIsForConflict );
	bool eventReadCloudDocument ( int Index, unsigned long bIsForConflict );
	void eventDeleteAllCloudDocuments ( );
	int eventCreateCloudDocument ( struct FString Filename );
	struct FString eventGetCloudDocumentName ( int Index );
	int eventGetNumCloudDocuments ( unsigned long bIsForConflict );
	bool eventQueryForCloudDocuments ( );
	bool eventWriteKeyValue ( struct FString KeyName, struct FPlatformInterfaceData* Value );
	bool eventReadKeyValueFromLocalStore ( struct FString KeyName, unsigned char Type, struct FPlatformInterfaceDelegateResult* Value );
	bool eventReadKeyValue ( struct FString KeyName, unsigned char Type, struct FPlatformInterfaceDelegateResult* Value );
	bool IsUsingLocalStorage ( );
	void eventInit ( );
};



// Class Engine.FacebookIntegration ( Property size: 6 iter: 14) 
// Class name index: 7543 
// 0x0060 (0x00E0 - 0x0080)
class UFacebookIntegration : public UPlatformInterfaceBase
{
public:
	struct FString                                     AppID;                                            		// 0x0080 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	TArray< struct FString >                           Permissions;                                      		// 0x0090 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     UserName;                                         		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     UserId;                                           		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AccessToken;                                      		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FFacebookFriend >                   FriendsList;                                      		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2764 ];

		return pClassPointer;
	};

	void eventDisconnect ( );
	void eventFacebookDialog ( struct FString Action, TArray< struct FString > ParamKeysAndValues );
	void eventFacebookRequest ( struct FString GraphRequest );
	bool eventIsAuthorized ( );
	bool eventAuthorize ( );
	bool eventInit ( );
};



// Class Engine.GoogleIntegration ( Property size: 10 iter: 18) 
// Class name index: 7545 
// 0x00A0 (0x0120 - 0x0080)
class UGoogleIntegration : public UPlatformInterfaceBase
{
public:
	TArray< struct FString >                           Scopes;                                           		// 0x0080 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ClientId;                                         		// 0x0090 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ClientSecret;                                     		// 0x00A0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ClientName;                                       		// 0x00B0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     UserAuthToken;                                    		// 0x00C0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     UserId;                                           		// 0x00D0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     UserEmail;                                        		// 0x00E0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     UserName;                                         		// 0x00F0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FGoogleFriend >                     Friends;                                          		// 0x0100 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	TArray< struct FYouTubeChannel >                   Subscriptions;                                    		// 0x0110 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2766 ];

		return pClassPointer;
	};

	void eventSubscribeToYouTubeChannel ( struct FString ChannelId );
	bool eventRevokeAuthorization ( );
	bool eventIsAuthorized ( );
	bool eventAuthorize ( );
	bool eventInit ( );
};



// Class Engine.InAppMessageBase ( Property size: 0 iter: 4) 
// Class name index: 7547 
// 0x0000 (0x0080 - 0x0080)
class UInAppMessageBase : public UPlatformInterfaceBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2768 ];

		return pClassPointer;
	};

	bool eventShowInAppEmailUI ( struct FString InitialSubject, struct FString InitialMessage );
	bool eventShowInAppSMSUI ( struct FString InitialMessage );
	void eventInit ( );
};



// Class Engine.InGameAdManager ( Property size: 1 iter: 7) 
// Class name index: 7549 
// 0x0004 (0x0084 - 0x0080)
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	unsigned long                                      bShouldPauseWhileAdOpen : 1;                      		// 0x0080 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2770 ];

		return pClassPointer;
	};

	void SetPauseWhileAdOpen ( unsigned long bShouldPause );
	void ForceCloseAd ( );
	void HideBanner ( );
	void ShowBanner ( unsigned long bShowBottomOfScreen );
	void eventInit ( );
};



// Class Engine.TwitterIntegrationBase ( Property size: 0 iter: 10) 
// Class name index: 7551 
// 0x0000 (0x0080 - 0x0080)
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2772 ];

		return pClassPointer;
	};

	bool eventTwitterRequest ( struct FString URL, TArray< struct FString > ParamKeysAndValues, unsigned char RequestMethod, int AccountIndex );
	struct FString eventGetAccountId ( int AccountIndex );
	struct FString eventGetAccountName ( int AccountIndex );
	int eventGetNumAccounts ( );
	bool eventAuthorizeAccounts ( );
	bool eventShowTweetUI ( struct FString InitialMessage, struct FString URL, struct FString Picture );
	bool eventCanShowTweetUI ( );
	void eventInit ( );
};



// Class Engine.PlatformInterfaceWebResponse ( Property size: 6 iter: 9) 
// Class name index: 7553 
// 0x0080 (0x00E0 - 0x0060)
class UPlatformInterfaceWebResponse : public UObject
{
public:
	struct FString                                     OriginalURL;                                      		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ResponseCode;                                     		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                Tag;                                              		// 0x0074 (0x0004) [0x0000000000000000]              
	struct FMap_Mirror                                 Headers;                                          		// 0x0078 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FString                                     StringResponse;                                   		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< unsigned char >                            BinaryResponse;                                   		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 2774 ];

		return pClassPointer;
	};

	struct FString GetHeaderValue ( struct FString HeaderName );
	void GetHeader ( int HeaderIndex, struct FString* Header, struct FString* Value );
	int GetNumHeaders ( );
};



// Class Engine.SeqEvent_MobileTouch ( Property size: 0 iter: 0) 
// Class name index: 24845 
// 0x0000 (0x0178 - 0x0178)
class USeqEvent_MobileTouch : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 7072 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_AttachToActor ( Property size: 7 iter: 8) 
// Class name index: 24816 
// 0x0024 (0x0178 - 0x0154)
class USeqAct_AttachToActor : public USequenceAction
{
public:
	unsigned long                                      bDetach : 1;                                      		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHardAttach : 1;                                  		// 0x0154 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseRelativeOffset : 1;                           		// 0x0154 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseRelativeRotation : 1;                         		// 0x0154 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0158 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RelativeOffset;                                   		// 0x0160 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x016C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 7080 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_ToggleHidden ( Property size: 2 iter: 2) 
// Class name index: 24837 
// 0x0014 (0x016C - 0x0158)
class USeqAct_ToggleHidden : public USeqAct_Toggle
{
public:
	unsigned long                                      bToggleBasedActors : 1;                           		// 0x0158 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UClass* >                            IgnoreBasedClasses;                               		// 0x015C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 7094 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetVelocity ( Property size: 3 iter: 4) 
// Class name index: 24831 
// 0x0014 (0x0168 - 0x0154)
class USeqAct_SetVelocity : public USequenceAction
{
public:
	struct FVector                                     VelocityDir;                                      		// 0x0154 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              VelocityMag;                                      		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelocityRelativeToActorRotation : 1;             		// 0x0164 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 7115 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_Teleport ( Property size: 4 iter: 6) 
// Class name index: 24832 
// 0x0018 (0x016C - 0x0154)
class USeqAct_Teleport : public USequenceAction
{
public:
	unsigned long                                      bUpdateRotation : 1;                              		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCheckOverlap : 1;                                		// 0x0154 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	float                                              TeleportDistance;                                 		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	TArray< class AVolume* >                           TeleportVolumes;                                  		// 0x015C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 7121 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	bool ShouldTeleport ( class AActor* TestActor, struct FVector TeleportLocation, float TeleportDist, TArray< class AVolume* > Volumes );
};



// Class Engine.SeqAct_Destroy ( Property size: 2 iter: 2) 
// Class name index: 24819 
// 0x0014 (0x0168 - 0x0154)
class USeqAct_Destroy : public USequenceAction
{
public:
	unsigned long                                      bDestroyBasedActors : 1;                          		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	TArray< class UClass* >                            IgnoreBasedClasses;                               		// 0x0158 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 7137 ];

		return pClassPointer;
	};

};



// Class Engine.LocalMessage ( Property size: 10 iter: 19) 
// Class name index: 20602 
// 0x0014 (0x0074 - 0x0060)
class ULocalMessage : public UObject
{
public:
	unsigned long                                      bIsSpecial : 1;                                   		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsUnique : 1;                                    		// 0x0060 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsPartiallyUnique : 1;                           		// 0x0060 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsConsoleMessage : 1;                            		// 0x0060 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bBeep : 1;                                        		// 0x0060 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bCountInstances : 1;                              		// 0x0060 (0x0004) [0x0000000000000000] [0x00000020] 
	float                                              Lifetime;                                         		// 0x0064 (0x0004) [0x0000000000000000]              
	struct FColor                                      DrawColor;                                        		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              PosY;                                             		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                FontSize;                                         		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 7204 ];

		return pClassPointer;
	};

	bool PartiallyDuplicates ( int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2 );
	bool IsConsoleMessage ( int Switch );
	float GetLifeTime ( int Switch );
	int GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer );
	float GetPos ( int Switch, class AHUD* myHUD );
	struct FColor GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FColor GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};



// Class Engine.SeqEvent_HitWall ( Property size: 0 iter: 0) 
// Class name index: 24843 
// 0x0000 (0x0178 - 0x0178)
class USeqEvent_HitWall : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 7215 ];

		return pClassPointer;
	};

};



// Class Engine.OnlinePlayerInterface ( Property size: 0 iter: 108) 
// Class name index: 22353 
// 0x0000 (0x0060 - 0x0060)
class UOnlinePlayerInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8119 ];

		return pClassPointer;
	};

	unsigned char GetAchievements ( unsigned char LocalUserNum, int TitleId, TArray< struct FAchievementDetails >* Achievements );
	void ClearReadAchievementsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAchievementsCompleteDelegate );
	void AddReadAchievementsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAchievementsCompleteDelegate );
	void OnReadAchievementsComplete ( int TitleId );
	bool ReadAchievements ( unsigned char LocalUserNum, int TitleId, unsigned long bShouldReadText, unsigned long bShouldReadImages );
	void ClearUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate );
	void AddUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate );
	void OnUnlockAchievementComplete ( unsigned long bWasSuccessful );
	bool UnlockAchievement ( unsigned char LocalUserNum, int AchievementId, float PercentComplete );
	bool DeleteMessage ( unsigned char LocalUserNum, int MessageIndex );
	void ClearFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate );
	void AddFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate );
	void OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message );
	void GetFriendMessages ( unsigned char LocalUserNum, TArray< struct FOnlineFriendMessage >* FriendMessages );
	void ClearJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate );
	void AddJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate );
	void OnJoinFriendGameComplete ( unsigned long bWasSuccessful );
	bool JoinFriendGame ( unsigned char LocalUserNum, struct FUniqueNetId Friend );
	void ClearReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate );
	void AddReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate );
	void OnReceivedGameInvite ( unsigned char LocalUserNum, struct FString InviterName );
	bool SendGameInviteToFriends ( unsigned char LocalUserNum, TArray< struct FUniqueNetId > Friends, struct FString Text );
	bool SendGameInviteToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Text );
	bool SendMessageToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Message );
	void ClearFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate );
	void AddFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate );
	void OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message );
	bool RemoveFriend ( unsigned char LocalUserNum, struct FUniqueNetId FormerFriend );
	bool DenyFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer );
	bool AcceptFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer );
	void ClearAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate );
	void AddAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate );
	void OnAddFriendByNameComplete ( unsigned long bWasSuccessful );
	bool AddFriendByName ( unsigned char LocalUserNum, struct FString FriendName, struct FString Message );
	bool AddFriend ( unsigned char LocalUserNum, struct FUniqueNetId NewFriend, struct FString Message );
	struct FString GetKeyboardInputResults ( unsigned char* bWasCanceled );
	void ClearKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate );
	void AddKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate );
	void OnKeyboardInputComplete ( unsigned long bWasSuccessful );
	bool ShowKeyboardUI ( unsigned char LocalUserNum, struct FString TitleText, struct FString DescriptionText, unsigned long bIsPassword, unsigned long bShouldValidate, struct FString DefaultText, int MaxResultLength );
	void SetOnlineStatus ( unsigned char LocalUserNum, int StatusId, TArray< struct FLocalizedStringSetting >* LocalizedStringSettings, TArray< struct FSettingsProperty >* Properties );
	unsigned char GetFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt, TArray< struct FOnlineFriend >* Friends );
	void ClearReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate );
	void AddReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate );
	void OnReadFriendsComplete ( unsigned long bWasSuccessful );
	bool ReadFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt );
	void ClearWritePlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate );
	void AddWritePlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate );
	void OnWritePlayerStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool WritePlayerStorage ( unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int DeviceID );
	class UOnlinePlayerStorage* GetPlayerStorage ( unsigned char LocalUserNum );
	void ClearReadPlayerStorageForNetIdCompleteDelegate ( struct FUniqueNetId NetId, struct FScriptDelegate ReadPlayerStorageForNetIdCompleteDelegate );
	void AddReadPlayerStorageForNetIdCompleteDelegate ( struct FUniqueNetId NetId, struct FScriptDelegate ReadPlayerStorageForNetIdCompleteDelegate );
	void OnReadPlayerStorageForNetIdComplete ( struct FUniqueNetId NetId, unsigned long bWasSuccessful );
	bool ReadPlayerStorageForNetId ( unsigned char LocalUserNum, struct FUniqueNetId NetId, class UOnlinePlayerStorage* PlayerStorage );
	void ClearReadPlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadPlayerStorageCompleteDelegate );
	void AddReadPlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadPlayerStorageCompleteDelegate );
	void OnReadPlayerStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool ReadPlayerStorage ( unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int DeviceID );
	void ClearWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate );
	void AddWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate );
	void OnWriteProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool WriteProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings );
	class UOnlineProfileSettings* GetProfileSettings ( unsigned char LocalUserNum );
	void ClearReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate );
	void AddReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate );
	void OnReadProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool ReadProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings );
	void ClearFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate );
	void AddFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate );
	void ClearMutingChangeDelegate ( struct FScriptDelegate MutingDelegate );
	void AddMutingChangeDelegate ( struct FScriptDelegate MutingDelegate );
	void ClearLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate );
	void AddLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate );
	void ClearLoginStatusChangeDelegate ( struct FScriptDelegate LoginStatusDelegate, unsigned char LocalUserNum );
	void AddLoginStatusChangeDelegate ( struct FScriptDelegate LoginStatusDelegate, unsigned char LocalUserNum );
	void OnLoginStatusChange ( unsigned char NewStatus, struct FUniqueNetId NewId );
	void ClearLoginChangeDelegate ( struct FScriptDelegate LoginDelegate );
	void AddLoginChangeDelegate ( struct FScriptDelegate LoginDelegate );
	bool ShowFriendsUI ( unsigned char LocalUserNum );
	bool IsMuted ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool AreAnyFriends ( unsigned char LocalUserNum, TArray< struct FFriendsQuery >* Query );
	bool IsFriend ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	unsigned char CanShowPresenceInformation ( unsigned char LocalUserNum );
	unsigned char CanViewPlayerProfiles ( unsigned char LocalUserNum );
	unsigned char CanPurchaseContent ( unsigned char LocalUserNum );
	unsigned char CanDownloadUserContent ( unsigned char LocalUserNum );
	unsigned char CanCommunicate ( unsigned char LocalUserNum );
	unsigned char CanPlayOnline ( unsigned char LocalUserNum );
	bool IsLocalLogin ( unsigned char LocalUserNum );
	bool IsGuestLogin ( unsigned char LocalUserNum );
	struct FString GetPlayerNickname ( unsigned char LocalUserNum );
	bool GetUniquePlayerId ( unsigned char LocalUserNum, struct FUniqueNetId* PlayerID );
	unsigned char GetLoginStatus ( unsigned char LocalUserNum );
	void ClearLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate );
	void AddLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate );
	void OnLogoutCompleted ( unsigned long bWasSuccessful );
	bool Logout ( unsigned char LocalUserNum );
	void ClearLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate );
	void AddLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate );
	void OnLoginFailed ( unsigned char LocalUserNum, unsigned char ErrorCode );
	bool AutoLogin ( );
	bool Login ( unsigned char LocalUserNum, struct FString LoginName, struct FString Password, unsigned long bWantsLocalOnly );
	bool ShowLoginUI ( unsigned long bShowOnlineOnly );
	void OnFriendsChange ( );
	void OnMutingChange ( );
	void OnLoginCancelled ( );
	void OnLoginChange ( unsigned char LocalUserNum );
};



// Class Engine.SharedCloudFileInterface ( Property size: 0 iter: 11) 
// Class name index: 25381 
// 0x0000 (0x0060 - 0x0060)
class USharedCloudFileInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8147 ];

		return pClassPointer;
	};

	void ClearWriteSharedFileCompleteDelegate ( struct FScriptDelegate WriteSharedFileCompleteDelegate );
	void AddWriteSharedFileCompleteDelegate ( struct FScriptDelegate WriteSharedFileCompleteDelegate );
	bool WriteSharedFile ( struct FString UserId, struct FString Filename, TArray< unsigned char >* Contents );
	void OnWriteSharedFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename, struct FString SharedHandle );
	void ClearReadSharedFileCompleteDelegate ( struct FScriptDelegate ReadSharedFileCompleteDelegate );
	void AddReadSharedFileCompleteDelegate ( struct FScriptDelegate ReadSharedFileCompleteDelegate );
	bool ReadSharedFile ( struct FString SharedHandle );
	void OnReadSharedFileComplete ( unsigned long bWasSuccessful, struct FString SharedHandle );
	bool ClearSharedFile ( struct FString SharedHandle );
	bool ClearSharedFiles ( );
	bool GetSharedFileContents ( struct FString SharedHandle, TArray< unsigned char >* FileContents );
};



// Class Engine.UserCloudFileInterface ( Property size: 0 iter: 26) 
// Class name index: 27095 
// 0x0000 (0x0060 - 0x0060)
class UUserCloudFileInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8152 ];

		return pClassPointer;
	};

	void GetLastNCloudSaveOwners ( TArray< struct FString >* McpIds );
	void ClearReadLastNCloudSaveOwnersCompleteDelegate ( struct FScriptDelegate CompleteDelegate );
	void AddReadLastNCloudSaveOwnersCompleteDelegate ( struct FScriptDelegate CompleteDelegate );
	void OnReadLastNCloudSaveOwnersComplete ( unsigned long bWasSuccessful );
	void ReadLastNCloudSaveOwners ( int Count, struct FString Filename );
	void ClearAllDelegates ( );
	void ClearDeleteUserFileCompleteDelegate ( struct FScriptDelegate DeleteUserFileCompleteDelegate );
	void AddDeleteUserFileCompleteDelegate ( struct FScriptDelegate DeleteUserFileCompleteDelegate );
	bool DeleteUserFile ( struct FString UserId, struct FString Filename, unsigned long bShouldCloudDelete, unsigned long bShouldLocallyDelete );
	void OnDeleteUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename );
	void ClearWriteUserFileCompleteDelegate ( struct FScriptDelegate WriteUserFileCompleteDelegate );
	void AddWriteUserFileCompleteDelegate ( struct FScriptDelegate WriteUserFileCompleteDelegate );
	bool WriteUserFile ( struct FString UserId, struct FString Filename, TArray< unsigned char >* FileContents );
	void OnWriteUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename );
	void ClearReadUserFileCompleteDelegate ( struct FScriptDelegate ReadUserFileCompleteDelegate );
	void AddReadUserFileCompleteDelegate ( struct FScriptDelegate ReadUserFileCompleteDelegate );
	bool ReadUserFile ( struct FString UserId, struct FString Filename );
	void OnReadUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename );
	void GetUserFileList ( struct FString UserId, TArray< struct FEmsFile >* UserFiles );
	void ClearEnumerateUserFileCompleteDelegate ( struct FScriptDelegate EnumerateUserFileCompleteDelegate );
	void AddEnumerateUserFileCompleteDelegate ( struct FScriptDelegate EnumerateUserFileCompleteDelegate );
	void EnumerateUserFiles ( struct FString UserId );
	void OnEnumerateUserFilesComplete ( unsigned long bWasSuccessful, struct FString UserId );
	bool ClearFile ( struct FString UserId, struct FString Filename );
	bool ClearFiles ( struct FString UserId );
	bool GetFileContents ( struct FString UserId, struct FString Filename, TArray< unsigned char >* FileContents );
};



// Class Engine.OnlineSocialInterface ( Property size: 0 iter: 12) 
// Class name index: 22360 
// 0x0000 (0x0060 - 0x0060)
class UOnlineSocialInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8161 ];

		return pClassPointer;
	};

	void ClearPostLinkCompleted ( unsigned char LocalUserNum, struct FScriptDelegate PostLinkDelegate );
	void AddPostLinkCompleted ( unsigned char LocalUserNum, struct FScriptDelegate PostLinkDelegate );
	void OnPostLinkCompleted ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool PostLink ( unsigned char LocalUserNum, struct FSocialPostLinkInfo* PostLinkInfo );
	void ClearPostImageCompleted ( unsigned char LocalUserNum, struct FScriptDelegate PostImageDelegate );
	void AddPostImageCompleted ( unsigned char LocalUserNum, struct FScriptDelegate PostImageDelegate );
	void OnPostImageCompleted ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool PostImage ( unsigned char LocalUserNum, TArray< unsigned char > FullImage, struct FSocialPostImageInfo* PostImageInfo );
	void ClearQuerySocialPostPrivilegesCompleted ( struct FScriptDelegate PostPrivilegesDelegate );
	void AddQuerySocialPostPrivilegesCompleted ( struct FScriptDelegate PostPrivilegesDelegate );
	void OnQuerySocialPostPrivilegesCompleted ( unsigned long bWasSuccessful, struct FSocialPostPrivileges PostPrivileges );
	bool QuerySocialPostPrivileges ( );
};



// Class Engine.OnlineTitleFileCacheInterface ( Property size: 0 iter: 16) 
// Class name index: 22370 
// 0x0000 (0x0060 - 0x0060)
class UOnlineTitleFileCacheInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8166 ];

		return pClassPointer;
	};

	bool DeleteTitleFile ( struct FString Filename );
	bool DeleteTitleFiles ( float MaxAgeSeconds );
	bool ClearCachedFile ( struct FString Filename );
	bool ClearCachedFiles ( );
	struct FString GetTitleFileLogicalName ( struct FString Filename );
	struct FString GetTitleFileHash ( struct FString Filename );
	unsigned char GetTitleFileState ( struct FString Filename );
	bool GetTitleFileContents ( struct FString Filename, TArray< unsigned char >* FileContents );
	void ClearSaveTitleFileCompleteDelegate ( struct FScriptDelegate SaveCompleteDelegate );
	void AddSaveTitleFileCompleteDelegate ( struct FScriptDelegate SaveCompleteDelegate );
	void OnSaveTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename );
	bool SaveTitleFile ( struct FString Filename, struct FString LogicalName, TArray< unsigned char > FileContents );
	void ClearLoadTitleFileCompleteDelegate ( struct FScriptDelegate LoadCompleteDelegate );
	void AddLoadTitleFileCompleteDelegate ( struct FScriptDelegate LoadCompleteDelegate );
	void OnLoadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename );
	bool LoadTitleFile ( struct FString Filename );
};



// Class Engine.OnlineTitleFileInterface ( Property size: 0 iter: 13) 
// Class name index: 22371 
// 0x0000 (0x0060 - 0x0060)
class UOnlineTitleFileInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8171 ];

		return pClassPointer;
	};

	void GetTitleFileList ( TArray< struct FEmsFile >* FileList );
	void ClearRequestTitleFileListCompleteDelegate ( struct FScriptDelegate RequestTitleFileListDelegate );
	void AddRequestTitleFileListCompleteDelegate ( struct FScriptDelegate RequestTitleFileListDelegate );
	void OnRequestTitleFileListComplete ( unsigned long bWasSuccessful, struct FString ResultStr );
	void RequestTitleFileList ( );
	bool ClearDownloadedFile ( struct FString Filename );
	bool ClearDownloadedFiles ( );
	unsigned char GetTitleFileState ( struct FString Filename );
	bool GetTitleFileContents ( struct FString Filename, TArray< unsigned char >* FileContents );
	void ClearReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	void AddReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	bool ReadTitleFile ( struct FString FileToRead );
	void OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename );
};



// Class Engine.OnlinePartyChatInterface ( Property size: 0 iter: 18) 
// Class name index: 22349 
// 0x0000 (0x0060 - 0x0060)
class UOnlinePartyChatInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8176 ];

		return pClassPointer;
	};

	bool IsInPartyChat ( unsigned char LocalUserNum );
	bool ShowCommunitySessionsUI ( unsigned char LocalUserNum );
	bool ShowVoiceChannelUI ( unsigned char LocalUserNum );
	bool ShowPartyUI ( unsigned char LocalUserNum );
	int GetPartyBandwidth ( );
	bool SetPartyMemberCustomData ( unsigned char LocalUserNum, int Data1, int Data2, int Data3, int Data4 );
	void ClearPartyMembersInfoChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate PartyMembersInfoChangedDelegate );
	void AddPartyMembersInfoChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate PartyMembersInfoChangedDelegate );
	void OnPartyMembersInfoChanged ( struct FString PlayerName, struct FUniqueNetId PlayerID, int CustomData1, int CustomData2, int CustomData3, int CustomData4 );
	void ClearPartyMemberListChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate PartyMemberListChangedDelegate );
	void AddPartyMemberListChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate PartyMemberListChangedDelegate );
	void OnPartyMemberListChanged ( unsigned long bJoinedOrLeft, struct FString PlayerName, struct FUniqueNetId PlayerID );
	bool GetPartyMemberInformation ( struct FUniqueNetId MemberId, struct FOnlinePartyMember* PartyMember );
	bool GetPartyMembersInformation ( TArray< struct FOnlinePartyMember >* PartyMembers );
	void ClearSendPartyGameInvitesCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate SendPartyGameInvitesCompleteDelegate );
	void AddSendPartyGameInvitesCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate SendPartyGameInvitesCompleteDelegate );
	void OnSendPartyGameInvitesComplete ( unsigned long bWasSuccessful );
	bool SendPartyGameInvites ( unsigned char LocalUserNum );
};



// Class Engine.OnlineNewsInterface ( Property size: 0 iter: 5) 
// Class name index: 22348 
// 0x0000 (0x0060 - 0x0060)
class UOnlineNewsInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8181 ];

		return pClassPointer;
	};

	struct FString GetNews ( unsigned char LocalUserNum, unsigned char NewsType );
	void ClearReadNewsCompletedDelegate ( struct FScriptDelegate ReadNewsDelegate );
	void AddReadNewsCompletedDelegate ( struct FScriptDelegate ReadNewsDelegate );
	void OnReadNewsCompleted ( unsigned long bWasSuccessful, unsigned char NewsType );
	bool ReadNews ( unsigned char LocalUserNum, unsigned char NewsType );
};



// Class Engine.OnlineStatsInterface ( Property size: 0 iter: 22) 
// Class name index: 22362 
// 0x0000 (0x0060 - 0x0060)
class UOnlineStatsInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8186 ];

		return pClassPointer;
	};

	void CalcAggregateSkill ( TArray< struct FDouble > Mus, TArray< struct FDouble > Sigmas, struct FDouble* OutAggregateMu, struct FDouble* OutAggregateSigma );
	bool RegisterStatGuid ( struct FUniqueNetId PlayerID, struct FString* ClientStatGuid );
	struct FString GetClientStatGuid ( );
	void ClearRegisterHostStatGuidCompleteDelegateDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate );
	void AddRegisterHostStatGuidCompleteDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate );
	void OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful );
	bool RegisterHostStatGuid ( struct FString* HostStatGuid );
	struct FString GetHostStatGuid ( );
	bool WriteOnlinePlayerScores ( struct FName SessionName, int LeaderboardId, TArray< struct FOnlinePlayerScore >* PlayerScores );
	void ClearFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate );
	void AddFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate );
	void OnFlushOnlineStatsComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool FlushOnlineStats ( struct FName SessionName );
	bool WriteOnlineStats ( struct FName SessionName, struct FUniqueNetId Player, class UOnlineStatsWrite* StatsWrite );
	void FreeStats ( class UOnlineStatsRead* StatsRead );
	void ClearReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate );
	void AddReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate );
	void OnReadOnlineStatsComplete ( unsigned long bWasSuccessful );
	bool ReadOnlineStatsByRankAroundPlayer ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int NumRows );
	bool ReadOnlineStatsByRank ( class UOnlineStatsRead* StatsRead, int StartIndex, int NumToRead );
	bool ReadOnlineStatsForFriends ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead );
	bool ReadOnlineStats ( class UOnlineStatsRead* StatsRead, TArray< struct FUniqueNetId >* Players );
};



// Class Engine.OnlineVoiceInterface ( Property size: 0 iter: 25) 
// Class name index: 22372 
// 0x0000 (0x0060 - 0x0060)
class UOnlineVoiceInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8191 ];

		return pClassPointer;
	};

	bool UnmuteAll ( unsigned char LocalUserNum );
	bool MuteAll ( unsigned char LocalUserNum, unsigned long bAllowFriends );
	bool SetSpeechRecognitionObject ( unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj );
	bool SelectVocabulary ( unsigned char LocalUserNum, int VocabularyId );
	void ClearRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate );
	void AddRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate );
	void OnRecognitionComplete ( );
	bool GetRecognitionResults ( unsigned char LocalUserNum, TArray< struct FSpeechRecognizedWord >* Words );
	bool StopSpeechRecognition ( unsigned char LocalUserNum );
	bool StartSpeechRecognition ( unsigned char LocalUserNum );
	void StopNetworkedVoice ( unsigned char LocalUserNum );
	void StartNetworkedVoice ( unsigned char LocalUserNum );
	void ClearPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate );
	void AddPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate );
	void OnPlayerTalkingStateChange ( struct FUniqueNetId Player, unsigned long bIsTalking );
	bool UnmuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, unsigned long bIsSystemWide );
	bool MuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, unsigned long bIsSystemWide );
	bool SetRemoteTalkerPriority ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, int Priority );
	bool IsHeadsetPresent ( unsigned char LocalUserNum );
	bool IsRemotePlayerTalking ( struct FUniqueNetId PlayerID );
	bool IsLocalPlayerTalking ( unsigned char LocalUserNum );
	bool UnregisterRemoteTalker ( struct FUniqueNetId PlayerID );
	bool RegisterRemoteTalker ( struct FUniqueNetId PlayerID );
	bool UnregisterLocalTalker ( unsigned char LocalUserNum );
	bool RegisterLocalTalker ( unsigned char LocalUserNum );
};



// Class Engine.OnlineContentInterface ( Property size: 0 iter: 37) 
// Class name index: 22336 
// 0x0000 (0x0060 - 0x0060)
class UOnlineContentInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8196 ];

		return pClassPointer;
	};

	bool ClearSaveGames ( unsigned char LocalUserNum );
	bool DeleteSaveGame ( unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename );
	void ClearWriteSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate WriteSaveGameDataCompleteDelegate );
	void AddWriteSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate WriteSaveGameDataCompleteDelegate );
	void OnWriteSaveGameDataComplete ( unsigned long bWasSuccessful, unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName );
	bool WriteSaveGameData ( unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName, TArray< unsigned char >* SaveGameData );
	void ClearReadSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadSaveGameDataCompleteDelegate );
	void AddReadSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadSaveGameDataCompleteDelegate );
	void OnReadSaveGameDataComplete ( unsigned long bWasSuccessful, unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName );
	bool GetSaveGameData ( unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName, unsigned char* bIsValid, TArray< unsigned char >* SaveGameData );
	bool ReadSaveGameData ( unsigned char LocalUserNum, int DeviceID, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName );
	void GetAvailableDownloadCounts ( unsigned char LocalUserNum, int* NewDownloads, int* TotalDownloads );
	void ClearQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate );
	void AddQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate );
	void OnQueryAvailableDownloadsComplete ( unsigned long bWasSuccessful );
	bool QueryAvailableDownloads ( unsigned char LocalUserNum, int CategoryMask );
	bool ClearCrossTitleSaveGames ( unsigned char LocalUserNum );
	void ClearReadCrossTitleSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadSaveGameDataCompleteDelegate );
	void AddReadCrossTitleSaveGameDataComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadSaveGameDataCompleteDelegate );
	void OnReadCrossTitleSaveGameDataComplete ( unsigned long bWasSuccessful, unsigned char LocalUserNum, int DeviceID, int TitleId, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName );
	bool GetCrossTitleSaveGameData ( unsigned char LocalUserNum, int DeviceID, int TitleId, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName, unsigned char* bIsValid, TArray< unsigned char >* SaveGameData );
	bool ReadCrossTitleSaveGameData ( unsigned char LocalUserNum, int DeviceID, int TitleId, struct FString FriendlyName, struct FString Filename, struct FString SaveFileName );
	void ClearReadCrossTitleContentCompleteDelegate ( unsigned char LocalUserNum, unsigned char ContentType, struct FScriptDelegate ReadContentCompleteDelegate );
	void AddReadCrossTitleContentCompleteDelegate ( unsigned char LocalUserNum, unsigned char ContentType, struct FScriptDelegate ReadContentCompleteDelegate );
	void OnReadCrossTitleContentComplete ( unsigned long bWasSuccessful );
	unsigned char GetCrossTitleContentList ( unsigned char LocalUserNum, unsigned char ContentType, TArray< struct FOnlineCrossTitleContent >* ContentList );
	void ClearCrossTitleContentList ( unsigned char LocalUserNum, unsigned char ContentType );
	bool ReadCrossTitleContentList ( unsigned char LocalUserNum, unsigned char ContentType, int TitleId, int DeviceID );
	unsigned char GetContentList ( unsigned char LocalUserNum, unsigned char ContentType, TArray< struct FOnlineContent >* ContentList );
	void ClearContentList ( unsigned char LocalUserNum, unsigned char ContentType );
	bool ReadContentList ( unsigned char LocalUserNum, unsigned char ContentType, int DeviceID );
	void ClearReadContentComplete ( unsigned char LocalUserNum, unsigned char ContentType, struct FScriptDelegate ReadContentCompleteDelegate );
	void AddReadContentComplete ( unsigned char LocalUserNum, unsigned char ContentType, struct FScriptDelegate ReadContentCompleteDelegate );
	void OnReadContentComplete ( unsigned long bWasSuccessful );
	void ClearContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum );
	void AddContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum );
	void OnContentChange ( );
};



// Class Engine.OnlineGameInterface ( Property size: 0 iter: 74) 
// Class name index: 22341 
// 0x0000 (0x0060 - 0x0060)
class UOnlineGameInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8201 ];

		return pClassPointer;
	};

	void ClearJoinMigratedOnlineGameCompleteDelegate ( struct FScriptDelegate JoinMigratedOnlineGameCompleteDelegate );
	void AddJoinMigratedOnlineGameCompleteDelegate ( struct FScriptDelegate JoinMigratedOnlineGameCompleteDelegate );
	void OnJoinMigratedOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool JoinMigratedOnlineGame ( unsigned char PlayerNum, struct FName SessionName, struct FOnlineGameSearchResult* DesiredGame );
	void ClearMigrateOnlineGameCompleteDelegate ( struct FScriptDelegate MigrateOnlineGameCompleteDelegate );
	void AddMigrateOnlineGameCompleteDelegate ( struct FScriptDelegate MigrateOnlineGameCompleteDelegate );
	void OnMigrateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool MigrateOnlineGame ( unsigned char HostingPlayerNum, struct FName SessionName );
	void ClearRecalculateSkillRatingCompleteDelegate ( struct FScriptDelegate RecalculateSkillRatingGameCompleteDelegate );
	void AddRecalculateSkillRatingCompleteDelegate ( struct FScriptDelegate RecalculateSkillRatingCompleteDelegate );
	void OnRecalculateSkillRatingComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool RecalculateSkillRating ( struct FName SessionName, TArray< struct FUniqueNetId >* Players );
	bool AcceptGameInvite ( unsigned char LocalUserNum, struct FName SessionName );
	void ClearGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate );
	void AddGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate );
	void OnGameInviteAccepted ( struct FOnlineGameSearchResult* InviteResult );
	TArray< struct FOnlineArbitrationRegistrant > GetArbitratedPlayers ( struct FName SessionName );
	void ClearArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate );
	void AddArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate );
	void OnArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool RegisterForArbitration ( struct FName SessionName );
	void ClearEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate );
	void AddEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate );
	void OnEndOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool EndOnlineGame ( struct FName SessionName );
	void ClearStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate );
	void AddStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate );
	void OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool StartOnlineGame ( struct FName SessionName );
	void ClearUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate );
	void AddUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate );
	void OnUnregisterPlayerComplete ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful );
	bool UnregisterPlayers ( struct FName SessionName, TArray< struct FUniqueNetId >* Players );
	bool UnregisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID );
	void ClearRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate );
	void AddRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate );
	void OnRegisterPlayerComplete ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful );
	bool RegisterPlayers ( struct FName SessionName, TArray< struct FUniqueNetId >* Players );
	bool RegisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasInvited );
	bool GetResolvedConnectString ( struct FName SessionName, struct FString* ConnectInfo );
	void ClearJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate );
	void AddJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate );
	void OnJoinOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool JoinOnlineGame ( unsigned char PlayerNum, struct FName SessionName, struct FOnlineGameSearchResult* DesiredGame );
	bool QueryNonAdvertisedData ( int StartAt, int NumberToQuery );
	bool FreeSearchResults ( class UOnlineGameSearch* Search );
	class UOnlineGameSearch* GetGameSearch ( );
	bool BindPlatformSpecificSessionToSearch ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, unsigned char* PlatformSpecificInfo );
	bool ReadPlatformSpecificSessionInfoBySessionName ( struct FName SessionName, unsigned char* PlatformSpecificInfo );
	bool ReadPlatformSpecificSessionInfo ( struct FOnlineGameSearchResult* DesiredGame, unsigned char* PlatformSpecificInfo );
	void ClearQosStatusChangedDelegate ( struct FScriptDelegate QosStatusChangedDelegate );
	void AddQosStatusChangedDelegate ( struct FScriptDelegate QosStatusChangedDelegate );
	void OnQosStatusChanged ( int NumComplete, int NumTotal );
	void ClearCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate );
	void AddCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate );
	void OnCancelFindOnlineGamesComplete ( unsigned long bWasSuccessful );
	bool CancelFindOnlineGames ( );
	void ClearFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate );
	void AddFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate );
	void OnFindOnlineGamesComplete ( unsigned long bWasSuccessful );
	bool FindOnlineGames ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings );
	void ClearDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate );
	void AddDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate );
	void OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool DestroyOnlineGame ( struct FName SessionName );
	class UOnlineGameSettings* GetGameSettings ( struct FName SessionName );
	void ClearUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate );
	void AddUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate );
	void OnUpdateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool UpdateOnlineGame ( struct FName SessionName, class UOnlineGameSettings* UpdatedGameSettings, unsigned long bShouldRefreshOnlineData );
	void ClearCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate );
	void AddCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate );
	void OnCreateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool CreateOnlineGame ( unsigned char HostingPlayerNum, struct FName SessionName, class UOnlineGameSettings* NewGameSettings );
};



// Class Engine.OnlineSystemInterface ( Property size: 0 iter: 21) 
// Class name index: 22369 
// 0x0000 (0x0060 - 0x0060)
class UOnlineSystemInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8206 ];

		return pClassPointer;
	};

	int GetLocale ( );
	void ClearStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate );
	void AddStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate );
	void OnStorageDeviceChange ( );
	unsigned char GetNATType ( );
	void ClearConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate );
	void AddConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate );
	void OnConnectionStatusChange ( unsigned char ConnectionStatus );
	bool IsControllerConnected ( int ControllerId );
	void ClearControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate );
	void AddControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate );
	void OnControllerChange ( int ControllerId, unsigned long bIsConnected );
	void SetNetworkNotificationPosition ( unsigned char NewPos );
	unsigned char GetNetworkNotificationPosition ( );
	void ClearExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate );
	void AddExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate );
	void OnExternalUIChange ( unsigned long bIsOpening );
	void ClearLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate );
	void AddLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate );
	void OnLinkStatusChange ( unsigned long bIsConnected );
	bool HasLinkConnection ( );
};



// Class Engine.OnlinePlayerInterfaceEx ( Property size: 0 iter: 28) 
// Class name index: 22354 
// 0x0000 (0x0060 - 0x0060)
class UOnlinePlayerInterfaceEx : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8211 ];

		return pClassPointer;
	};

	bool ShowCustomMessageUI ( unsigned char LocalUserNum, struct FString MessageTitle, struct FString NonEditableMessage, struct FString EditableMessage, TArray< struct FUniqueNetId >* Recipients );
	void ClearCrossTitleProfileSettings ( unsigned char LocalUserNum, int TitleId );
	class UOnlineProfileSettings* GetCrossTitleProfileSettings ( unsigned char LocalUserNum, int TitleId );
	void ClearReadCrossTitleProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate );
	void AddReadCrossTitleProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate );
	void OnReadCrossTitleProfileSettingsComplete ( unsigned char LocalUserNum, int TitleId, unsigned long bWasSuccessful );
	bool ReadCrossTitleProfileSettings ( unsigned char LocalUserNum, int TitleId, class UOnlineProfileSettings* ProfileSettings );
	bool UnlockAvatarAward ( unsigned char LocalUserNum, int AvatarItemId );
	bool ShowCustomPlayersUI ( unsigned char LocalUserNum, struct FString Title, struct FString Description, TArray< struct FUniqueNetId >* Players );
	bool ShowPlayersUI ( unsigned char LocalUserNum );
	bool ShowFriendsInviteUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	void ClearProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate );
	void AddProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate );
	void OnProfileDataChanged ( );
	bool UnlockGamerPicture ( unsigned char LocalUserNum, int PictureId );
	bool IsDeviceValid ( int DeviceID, int SizeNeeded );
	int GetDeviceSelectionResults ( unsigned char LocalUserNum, struct FString* DeviceName );
	void ClearDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate );
	void AddDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate );
	void OnDeviceSelectionComplete ( unsigned long bWasSuccessful );
	bool ShowDeviceSelectionUI ( unsigned char LocalUserNum, int SizeNeeded, unsigned long bManageStorage );
	bool ShowMembershipMarketplaceUI ( unsigned char LocalUserNum );
	bool ShowContentMarketplaceUI ( unsigned char LocalUserNum, int CategoryMask, int OfferId );
	bool ShowInviteUI ( unsigned char LocalUserNum, struct FString InviteText );
	bool ShowAchievementsUI ( unsigned char LocalUserNum );
	bool ShowMessagesUI ( unsigned char LocalUserNum );
	bool ShowGamerCardUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool ShowFeedbackUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
};



// Class Engine.OnlineAccountInterface ( Property size: 0 iter: 8) 
// Class name index: 22332 
// 0x0000 (0x0060 - 0x0060)
class UOnlineAccountInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8219 ];

		return pClassPointer;
	};

	bool GetLocalAccountNames ( TArray< struct FString >* Accounts );
	bool DeleteLocalAccount ( struct FString UserName, struct FString Password );
	bool RenameLocalAccount ( struct FString NewUserName, struct FString OldUserName, struct FString Password );
	bool CreateLocalAccount ( struct FString UserName, struct FString Password );
	void ClearCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate );
	void AddCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate );
	void OnCreateOnlineAccountCompleted ( unsigned char ErrorStatus );
	bool CreateOnlineAccount ( struct FString UserName, struct FString Password, struct FString EmailAddress, struct FString ProductKey );
};



// Class Engine.AccessControl ( Property size: 28 iter: 72) 
// Class name index: 11326 
// 0x0164 (0x03A4 - 0x0240)
class AAccessControl : public AInfo
{
public:
	TArray< struct FString >                           IPPolicies;                                       		// 0x0240 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	TArray< struct FUniqueNetId >                      BannedIDs;                                        		// 0x0250 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     IPBanned;                                         		// 0x0260 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WrongPassword;                                    		// 0x0270 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NeedPassword;                                     		// 0x0280 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SessionBanned;                                    		// 0x0290 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KickedMsg;                                        		// 0x02A0 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DefaultKickReason;                                		// 0x02B0 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IdleKickReason;                                   		// 0x02C0 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UClass*                                      AdminClass;                                       		// 0x02D0 (0x0008) [0x0000000000000000]              
	struct FString                                     AdminPassword;                                    		// 0x02D8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     GamePassword;                                     		// 0x02E8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     ACDisplayText[ 0x3 ];                             		// 0x02F8 (0x0030) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ACDescText[ 0x3 ];                                		// 0x0328 (0x0030) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bDontAddDefaultAdmin : 1;                         		// 0x0358 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAuthenticateClients : 1;                         		// 0x0358 (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bAuthenticateServer : 1;                          		// 0x0358 (0x0004) [0x0000000000044000] [0x00000004] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bAuthenticateListenHost : 1;                      		// 0x0358 (0x0004) [0x0000000000044000] [0x00000008] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bAuthDelegatesRegistered : 1;                     		// 0x0358 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bPendingListenAuth : 1;                           		// 0x0358 (0x0004) [0x0000000000000000] [0x00000020] 
	int                                                MaxAuthRetryCount;                                		// 0x035C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                AuthRetryDelay;                                   		// 0x0360 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x0364 (0x0008) [0x0000000000000000]              
	class UOnlineAuthInterface*                        CachedAuthInt;                                    		// 0x036C (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0374 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	TArray< struct FPendingClientAuth >                ClientsPendingAuth;                               		// 0x037C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FServerAuthRetry >                  ServerAuthRetries;                                		// 0x038C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ListenAuthTicketUID;                              		// 0x039C (0x0004) [0x0000000000000000]              
	int                                                ListenAuthRetryCount;                             		// 0x03A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8394 ];

		return pClassPointer;
	};

	bool IsPendingAuth ( struct FUniqueNetId PlayerUID );
	void Cleanup ( unsigned long bExit );
	void NotifyExit ( );
	void NotifyGameEnding ( );
	void NotifyServerTravel ( unsigned long bSeamless );
	void OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void StaticOnClientConnectionClose ( class UPlayer* ClientConnection );
	void OnClientConnectionClose ( class UPlayer* ClientConnection );
	void ListenHostAuthTimeout ( );
	void EndListenHostAuth ( );
	void ContinueListenHostAuth ( );
	void BeginListenHostAuth ( unsigned long bRetry );
	void ProcessServerAuthRetryRequest ( class UPlayer* ClientConnection );
	void ProcessServerAuthRequest ( class UPlayer* ClientConnection, struct FUniqueNetId ClientUID, int ClientIP, int ClientPort );
	void OnClientAuthComplete ( unsigned long bSuccess, struct FUniqueNetId ClientUID, class UPlayer* ClientConnection, struct FString ExtraInfo );
	void ProcessClientAuthResponse ( struct FUniqueNetId ClientUID, int ClientIP, int AuthTicketUID );
	void OnAuthReady ( );
	void PendingAuthTimer ( );
	void PostLogin ( class APlayerController* NewPlayer );
	void eventPreLogin ( struct FString Options, struct FString Address, struct FUniqueNetId UniqueId, unsigned long bSupportsAuth, unsigned long bSpectator, struct FString* OutError );
	void ClearAuthDelegates ( unsigned long bExiting );
	void RegisterAuthDelegates ( );
	void InitAuthHooks ( );
	bool IsIDBanned ( struct FUniqueNetId* NetId );
	bool CheckIPPolicy ( struct FString Address );
	bool ValidLogin ( struct FString UserName, struct FString Password );
	bool ParseAdminOptions ( struct FString Options );
	void AdminExited ( class APlayerController* P );
	void AdminEntered ( class APlayerController* P );
	bool AdminLogout ( class APlayerController* P );
	bool AdminLogin ( class APlayerController* P, struct FString Password );
	bool KickPlayer ( class APlayerController* C, struct FString KickReason );
	bool ForceKickPlayer ( class APlayerController* C, struct FString KickReason );
	void KickBan ( struct FString Target );
	void Kick ( struct FString Target );
	class AController* GetControllerFromString ( struct FString Target );
	bool RequiresPassword ( );
	void SetGamePassword ( struct FString P );
	bool SetAdminPassword ( struct FString P );
	bool IsAdmin ( class APlayerController* P );
	void Destroyed ( );
	void PostBeginPlay ( );
};



// Class Engine.Admin ( Property size: 0 iter: 12) 
// Class name index: 11636 
// 0x0000 (0x0724 - 0x0724)
class AAdmin : public APlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8702 ];

		return pClassPointer;
	};

	void ServerSwitch ( struct FString URL );
	void Switch ( struct FString URL );
	void ServerRestartMap ( );
	void RestartMap ( );
	void PlayerList ( );
	void ServerKick ( struct FString S );
	void Kick ( struct FString S );
	void ServerKickBan ( struct FString S );
	void KickBan ( struct FString S );
	void ServerAdmin ( struct FString CommandLine );
	void Admin ( struct FString CommandLine );
	void eventPostBeginPlay ( );
};



// Class Engine.ApexDestructibleActorSpawnable ( Property size: 0 iter: 0) 
// Class name index: 11967 
// 0x0000 (0x0298 - 0x0298)
class AApexDestructibleActorSpawnable : public AApexDestructibleActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8736 ];

		return pClassPointer;
	};

};



// Class Engine.EmitterSpawnable ( Property size: 1 iter: 3) 
// Class name index: 17345 
// 0x0008 (0x025C - 0x0254)
class AEmitterSpawnable : public AEmitter
{
public:
	class UParticleSystem*                             ParticleTemplate;                                 		// 0x0254 (0x0008) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8748 ];

		return pClassPointer;
	};

	void eventReplicatedEvent ( struct FName VarName );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
};



// Class Engine.KAssetSpawnable ( Property size: 0 iter: 0) 
// Class name index: 20114 
// 0x0000 (0x025C - 0x025C)
class AKAssetSpawnable : public AKAsset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8765 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactorySkeletalMeshCinematic ( Property size: 0 iter: 0) 
// Class name index: 11416 
// 0x0000 (0x00B4 - 0x00B4)
class UActorFactorySkeletalMeshCinematic : public UActorFactorySkeletalMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8776 ];

		return pClassPointer;
	};

};



// Class Engine.ActorFactorySkeletalMeshMAT ( Property size: 0 iter: 0) 
// Class name index: 11417 
// 0x0000 (0x00B4 - 0x00B4)
class UActorFactorySkeletalMeshMAT : public UActorFactorySkeletalMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 8778 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_ToggleGodMode ( Property size: 0 iter: 0) 
// Class name index: 24836 
// 0x0000 (0x0154 - 0x0154)
class USeqAct_ToggleGodMode : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 9259 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_Death ( Property size: 0 iter: 0) 
// Class name index: 24842 
// 0x0000 (0x0178 - 0x0178)
class USeqEvent_Death : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 9260 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_ControlMovieTexture ( Property size: 1 iter: 3) 
// Class name index: 24818 
// 0x0008 (0x015C - 0x0154)
class USeqAct_ControlMovieTexture : public USequenceAction
{
public:
	class UTextureMovie*                               MovieTexture;                                     		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 9835 ];

		return pClassPointer;
	};

	void eventActivated ( );
};



// Class Engine.SeqAct_SetSoundMode ( Property size: 2 iter: 4) 
// Class name index: 24829 
// 0x000C (0x0160 - 0x0154)
class USeqAct_SetSoundMode : public USequenceAction
{
public:
	class USoundMode*                                  SoundMode;                                        		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTopPriority : 1;                                 		// 0x015C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 12343 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};



// Class Engine.SeqAct_FlyThroughHasEnded ( Property size: 0 iter: 0) 
// Class name index: 24820 
// 0x0000 (0x0154 - 0x0154)
class USeqAct_FlyThroughHasEnded : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 12361 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_ConsoleCommand ( Property size: 2 iter: 4) 
// Class name index: 24817 
// 0x0020 (0x0174 - 0x0154)
class USeqAct_ConsoleCommand : public USequenceAction
{
public:
	struct FString                                     Command;                                          		// 0x0154 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FString >                           Commands;                                         		// 0x0164 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 12459 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
	void VersionUpdated ( int OldVersion, int NewVersion );
};



// Class Engine.SeqAct_ToggleCinematicMode ( Property size: 7 iter: 8) 
// Class name index: 24834 
// 0x0004 (0x0158 - 0x0154)
class USeqAct_ToggleCinematicMode : public USequenceAction
{
public:
	unsigned long                                      bDisableMovement : 1;                             		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableTurning : 1;                              		// 0x0154 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bHidePlayer : 1;                                  		// 0x0154 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDisableInput : 1;                                		// 0x0154 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bHideHUD : 1;                                     		// 0x0154 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDeadBodies : 1;                                  		// 0x0154 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDroppedPickups : 1;                              		// 0x0154 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 12466 ];

		return pClassPointer;
	};

	void eventActivated ( );
};



// Class Engine.SeqAct_ForceFeedback ( Property size: 2 iter: 2) 
// Class name index: 24821 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_ForceFeedback : public USequenceAction
{
public:
	class UForceFeedbackWaveform*                      FFWaveform;                                       		// 0x0154 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UClass*                                      PredefinedWaveForm;                               		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 12478 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_ToggleHUD ( Property size: 0 iter: 1) 
// Class name index: 24838 
// 0x0000 (0x0154 - 0x0154)
class USeqAct_ToggleHUD : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 12484 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_ToggleInput ( Property size: 2 iter: 2) 
// Class name index: 24839 
// 0x0004 (0x015C - 0x0158)
class USeqAct_ToggleInput : public USeqAct_Toggle
{
public:
	unsigned long                                      bToggleMovement : 1;                              		// 0x0158 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bToggleTurning : 1;                               		// 0x0158 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 12491 ];

		return pClassPointer;
	};

};



// Class Engine.DmgType_Suicided ( Property size: 0 iter: 0) 
// Class name index: 16885 
// 0x0000 (0x0090 - 0x0090)
class UDmgType_Suicided : public UKillZDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 12666 ];

		return pClassPointer;
	};

};



// Class Engine.GameMessage ( Property size: 23 iter: 24) 
// Class name index: 18579 
// 0x0170 (0x01E4 - 0x0074)
class UGameMessage : public ULocalMessage
{
public:
	struct FString                                     SwitchLevelMessage;                               		// 0x0074 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LeftMessage;                                      		// 0x0084 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedTeamMessage;                                		// 0x0094 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedPlaceMessage;                               		// 0x00A4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedSpawnMessage;                               		// 0x00B4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnteredMessage;                                   		// 0x00C4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MaxedOutMessage;                                  		// 0x00D4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ArbitrationMessage;                               		// 0x00E4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OvertimeMessage;                                  		// 0x00F4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GlobalNameChange;                                 		// 0x0104 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewTeamMessage;                                   		// 0x0114 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewTeamMessageTrailer;                            		// 0x0124 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoNameChange;                                     		// 0x0134 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VoteStarted;                                      		// 0x0144 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VotePassed;                                       		// 0x0154 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MustHaveStats;                                    		// 0x0164 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CantBeSpectator;                                  		// 0x0174 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CantBePlayer;                                     		// 0x0184 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BecameSpectator;                                  		// 0x0194 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewPlayerMessage;                                 		// 0x01A4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KickWarning;                                      		// 0x01B4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewSpecMessage;                                   		// 0x01C4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SpecEnteredMessage;                               		// 0x01D4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 12712 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};



// Class Engine.CoverReplicator ( Property size: 1 iter: 23) 
// Class name index: 15989 
// 0x0010 (0x0250 - 0x0240)
class ACoverReplicator : public AReplicationInfo
{
public:
	TArray< struct FCoverReplicationInfo >             CoverReplicationData;                             		// 0x0240 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 12734 ];

		return pClassPointer;
	};

	void ClientReceiveLinkDisabledState ( int Index, class ACoverLink* Link, unsigned long bLinkDisabled );
	void ServerSendLinkDisabledState ( int Index );
	void NotifyLinkDisabledStateChange ( class ACoverLink* Link );
	void ClientReceiveManualCoverTypeSlots ( int Index, class ACoverLink* Link, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone );
	void ServerSendManualCoverTypeSlots ( int Index );
	void NotifySetManualCoverTypeForSlots ( class ACoverLink* Link, unsigned char NewCoverType, TArray< int >* SlotIndices );
	void ClientReceiveAdjustedSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned long bDone );
	void ServerSendAdjustedSlots ( int Index );
	void NotifyAutoAdjustSlots ( class ACoverLink* Link, TArray< int >* SlotIndices );
	void ClientReceiveDisabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned long bDone );
	void ServerSendDisabledSlots ( int Index );
	void NotifyDisabledSlots ( class ACoverLink* Link, TArray< int >* SlotIndices );
	void ClientReceiveEnabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned long bDone );
	void ServerSendEnabledSlots ( int Index );
	void NotifyEnabledSlots ( class ACoverLink* Link, TArray< int >* SlotIndices );
	void ClientReceiveInitialCoverReplicationInfo ( int Index, class ACoverLink* Link, unsigned long bLinkDisabled, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone );
	void ServerSendInitialCoverReplicationInfo ( int Index );
	void ClientSetOwner ( class APlayerController* PC );
	void ReplicateInitialCoverInfo ( );
	void PurgeOldEntries ( );
};



// Class Engine.SplineComponentSimplified ( Property size: 0 iter: 0) 
// Class name index: 25849 
// 0x0000 (0x0274 - 0x0274)
class USplineComponentSimplified : public USplineComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 13629 ];

		return pClassPointer;
	};

};



// Class Engine.AmbientSoundSimpleSplineNonLoop ( Property size: 0 iter: 0) 
// Class name index: 11779 
// 0x0000 (0x0270 - 0x0270)
class AAmbientSoundSimpleSplineNonLoop : public AAmbientSoundSimpleSpline
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 13684 ];

		return pClassPointer;
	};

};



// Class Engine.AnimNotify_PlayFaceFXAnim ( Property size: 7 iter: 8) 
// Class name index: 11893 
// 0x0040 (0x00A4 - 0x0064)
class UAnimNotify_PlayFaceFXAnim : public UAnimNotify_Scripted
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x0064 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     GroupName;                                        		// 0x006C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     AnimName;                                         		// 0x007C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USoundCue*                                   SoundCueToPlay;                                   		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAkEvent*                                    AkEventToPlay;                                    		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOverridePlayingAnim : 1;                         		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              PlayFrequency;                                    		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 14729 ];

		return pClassPointer;
	};

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};



// Class Engine.BroadcastHandler ( Property size: 2 iter: 10) 
// Class name index: 14282 
// 0x0008 (0x0248 - 0x0240)
class ABroadcastHandler : public AInfo
{
public:
	int                                                SentText;                                         		// 0x0240 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMuteSpectators : 1;                              		// 0x0244 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 15372 ];

		return pClassPointer;
	};

	void eventAllowBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventAllowBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void BroadcastTeam ( class AController* Sender, struct FString msg, struct FName Type );
	void Broadcast ( class AActor* Sender, struct FString msg, struct FName Type );
	void BroadcastLocalized ( class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void BroadcastText ( class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, struct FString msg, struct FName Type );
	bool AllowsBroadcast ( class AActor* broadcaster, int InLen );
	void UpdateSentText ( );
};



// Class Engine.HttpFactory ( Property size: 1 iter: 2) 
// Class name index: 19425 
// 0x0010 (0x0070 - 0x0060)
class UHttpFactory : public UObject
{
public:
	struct FString                                     HttpRequestClassName;                             		// 0x0060 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 16270 ];

		return pClassPointer;
	};

	class UHttpRequestInterface* CreateRequest ( );
};



// Class Engine.CloudSaveSystemKVSInterface ( Property size: 0 iter: 2) 
// Class name index: 15669 
// 0x0000 (0x0060 - 0x0060)
class UCloudSaveSystemKVSInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 16481 ];

		return pClassPointer;
	};

	bool WriteKeyValue ( int SaveSlotIndex, struct FString KeyName, struct FPlatformInterfaceData* Value );
	bool ReadKeyValue ( int SaveSlotIndex, struct FString KeyName, unsigned char Type, struct FPlatformInterfaceDelegateResult* Value );
};



// Class Engine.CloudSaveSystemDataBlobStoreInterface ( Property size: 0 iter: 6) 
// Class name index: 15668 
// 0x0000 (0x0060 - 0x0060)
class UCloudSaveSystemDataBlobStoreInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 16485 ];

		return pClassPointer;
	};

	bool DeleteDataBlob ( struct FString StorageID, struct FString BlobName, struct FScriptDelegate InDeleteDataBlobCallback );
	void DeleteDataBlobCallbackDelegate ( unsigned long bWasSucessfull, struct FString StorageID, struct FString BlobName, struct FString Error );
	void SetDataBlob ( struct FString StorageID, struct FString BlobName, struct FScriptDelegate InSetDataBlobCallback, TArray< unsigned char >* DataBlob );
	void SetDataBlobCallbackDelegate ( unsigned long bWasSucessfull, struct FString StorageID, struct FString BlobName, struct FString Error );
	void GetDataBlob ( struct FString StorageID, struct FString BlobName, struct FScriptDelegate OnGetDataBlobComplete );
	void GetDataBlobCallbackDelegate ( unsigned long bWasSuccessful, struct FString StorageID, struct FString BlobName, struct FString Error, TArray< unsigned char >* DataBlob );
};



// Class Engine.CloudStorageBaseCloudSaveSystemKVS ( Property size: 1 iter: 5) 
// Class name index: 15671 
// 0x0008 (0x0068 - 0x0060)
class UCloudStorageBaseCloudSaveSystemKVS : public UObject
{
public:
	class UCloudStorageBase*                           CloudStorage;                                     		// 0x0060 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 16635 ];

		return pClassPointer;
	};

	struct FString GenerateKeyNameForSaveSlot ( int SaveSlotIndex, struct FString KeyName );
	bool WriteKeyValue ( int SaveSlotIndex, struct FString KeyName, struct FPlatformInterfaceData* Value );
	bool ReadKeyValue ( int SaveSlotIndex, struct FString KeyName, unsigned char Type, struct FPlatformInterfaceDelegateResult* Value );
	void Init ( class UCloudStorageBase* InCloudStorage );
};



// Class Engine.ColorScaleVolume ( Property size: 2 iter: 4) 
// Class name index: 15736 
// 0x0010 (0x028C - 0x027C)
class AColorScaleVolume : public AVolume
{
public:
	struct FVector                                     ColorScale;                                       		// 0x027C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpTime;                                       		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 16671 ];

		return pClassPointer;
	};

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};



// Class Engine.SeqAct_SetDamageInstigator ( Property size: 1 iter: 1) 
// Class name index: 24824 
// 0x0008 (0x015C - 0x0154)
class USeqAct_SetDamageInstigator : public USequenceAction
{
public:
	class AActor*                                      DamageInstigator;                                 		// 0x0154 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18069 ];

		return pClassPointer;
	};

};



// Class Engine.VolumeTimer ( Property size: 1 iter: 3) 
// Class name index: 27353 
// 0x0008 (0x0248 - 0x0240)
class AVolumeTimer : public AInfo
{
public:
	class APhysicsVolume*                              V;                                                		// 0x0240 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18072 ];

		return pClassPointer;
	};

	void eventTimer ( );
	void eventPostBeginPlay ( );
};



// Class Engine.DmgType_Crushed ( Property size: 0 iter: 0) 
// Class name index: 16883 
// 0x0000 (0x0090 - 0x0090)
class UDmgType_Crushed : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18202 ];

		return pClassPointer;
	};

};



// Class Engine.DmgType_Fell ( Property size: 0 iter: 0) 
// Class name index: 16884 
// 0x0000 (0x0090 - 0x0090)
class UDmgType_Fell : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18204 ];

		return pClassPointer;
	};

};



// Class Engine.DmgType_Telefragged ( Property size: 0 iter: 0) 
// Class name index: 16886 
// 0x0000 (0x0090 - 0x0090)
class UDmgType_Telefragged : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18207 ];

		return pClassPointer;
	};

};



// Class Engine.DynamicPhysicsVolume ( Property size: 1 iter: 2) 
// Class name index: 17096 
// 0x0004 (0x02D0 - 0x02CC)
class ADynamicPhysicsVolume : public APhysicsVolume
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x02CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18457 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};



// Class Engine.DynamicTriggerVolume ( Property size: 1 iter: 2) 
// Class name index: 17101 
// 0x0004 (0x0280 - 0x027C)
class ADynamicTriggerVolume : public ATriggerVolume
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x027C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18519 ];

		return pClassPointer;
	};

	void eventPostBeginPlay ( );
};



// Class Engine.SeqAct_SetParticleSysParam ( Property size: 3 iter: 3) 
// Class name index: 24827 
// 0x0018 (0x016C - 0x0154)
class USeqAct_SetParticleSysParam : public USequenceAction
{
public:
	TArray< struct FParticleSysParam >                 InstanceParameters;                               		// 0x0154 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bOverrideScalar : 1;                              		// 0x0164 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ScalarValue;                                      		// 0x0168 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 18817 ];

		return pClassPointer;
	};

};



// Class Engine.ExponentialHeightFog ( Property size: 2 iter: 5) 
// Class name index: 17815 
// 0x000C (0x024C - 0x0240)
class AExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*              Component;                                        		// 0x0240 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x0248 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 19301 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};



// Class Engine.FailedConnect ( Property size: 1 iter: 3) 
// Class name index: 17927 
// 0x0040 (0x00B4 - 0x0074)
class UFailedConnect : public ULocalMessage
{
public:
	struct FString                                     FailMessage[ 0x4 ];                               		// 0x0074 (0x0040) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 19422 ];

		return pClassPointer;
	};

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	int GetFailSwitch ( struct FString FailString );
};



// Class Engine.FracturedSMActorSpawnable ( Property size: 0 iter: 0) 
// Class name index: 18377 
// 0x0000 (0x02D4 - 0x02D4)
class AFracturedSMActorSpawnable : public AFracturedStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 20439 ];

		return pClassPointer;
	};

};



// Class Engine.FracturedStaticMeshActor_Spawnable ( Property size: 1 iter: 1) 
// Class name index: 18378 
// 0x0008 (0x02DC - 0x02D4)
class AFracturedStaticMeshActor_Spawnable : public AFracturedStaticMeshActor
{
public:
	class UDynamicLightEnvironmentComponent*           mLightEnv;                                        		// 0x02D4 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 20444 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_PlayerSpawned ( Property size: 1 iter: 1) 
// Class name index: 24847 
// 0x0008 (0x0180 - 0x0178)
class USeqEvent_PlayerSpawned : public USequenceEvent
{
public:
	class UObject*                                     SpawnPoint;                                       		// 0x0178 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 21290 ];

		return pClassPointer;
	};

};



// Class Engine.HeightFog ( Property size: 2 iter: 5) 
// Class name index: 19334 
// 0x000C (0x024C - 0x0240)
class AHeightFog : public AInfo
{
public:
	class UHeightFogComponent*                         Component;                                        		// 0x0240 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x0248 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 22395 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};



// Class Engine.InterpActor_ForCinematic ( Property size: 0 iter: 0) 
// Class name index: 19878 
// 0x0000 (0x02DC - 0x02DC)
class AInterpActor_ForCinematic : public AInterpActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 23014 ];

		return pClassPointer;
	};

};



// Class Engine.MaterialInstanceTimeVaryingActor ( Property size: 1 iter: 1) 
// Class name index: 20873 
// 0x0008 (0x0248 - 0x0240)
class AMaterialInstanceTimeVaryingActor : public AActor
{
public:
	class UMaterialInstanceTimeVarying*                MatInst;                                          		// 0x0240 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 24851 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_GiveInventory ( Property size: 3 iter: 3) 
// Class name index: 24822 
// 0x0014 (0x0168 - 0x0154)
class USeqAct_GiveInventory : public USequenceAction
{
public:
	TArray< class UClass* >                            InventoryList;                                    		// 0x0154 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bClearExisting : 1;                               		// 0x0164 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceReplace : 1;                                		// 0x0164 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 25502 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_AssignController ( Property size: 1 iter: 1) 
// Class name index: 24815 
// 0x0008 (0x015C - 0x0154)
class USeqAct_AssignController : public USequenceAction
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 25505 ];

		return pClassPointer;
	};

};



// Class Engine.NavMeshBoundsVolume ( Property size: 0 iter: 0) 
// Class name index: 21589 
// 0x0000 (0x027C - 0x027C)
class ANavMeshBoundsVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 25969 ];

		return pClassPointer;
	};

};



// Class Engine.OnlineCommunityContentInterface ( Property size: 0 iter: 25) 
// Class name index: 22334 
// 0x0000 (0x0060 - 0x0060)
class UOnlineCommunityContentInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 26640 ];

		return pClassPointer;
	};

	void RateContent ( unsigned char PlayerNum, int NewRating, struct FCommunityContentFile* FileToRate );
	void ClearGetContentPayloadCompleteDelegate ( struct FScriptDelegate GetContentPayloadCompleteDelegate );
	void AddGetContentPayloadCompleteDelegate ( struct FScriptDelegate GetContentPayloadCompleteDelegate );
	void OnGetContentPayloadComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded, TArray< unsigned char >* Payload );
	bool GetContentPayload ( unsigned char PlayerNum, struct FCommunityContentFile* FileDownloaded );
	void ClearDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate );
	void AddDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate );
	void OnDownloadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded );
	bool DownloadContent ( unsigned char PlayerNum, struct FCommunityContentFile* FileToDownload );
	void ClearUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate );
	void AddUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate );
	void OnUploadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile UploadedFile );
	bool UploadContent ( unsigned char PlayerNum, TArray< unsigned char >* Payload, struct FCommunityContentMetadata* MetaData );
	bool GetFriendsContentList ( unsigned char PlayerNum, struct FOnlineFriend* Friend, TArray< struct FCommunityContentFile >* ContentFiles );
	void ClearReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate );
	void AddReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate );
	void OnReadFriendsContentListComplete ( unsigned long bWasSuccessful );
	bool ReadFriendsContentList ( unsigned char PlayerNum, int StartAt, int NumToRead, TArray< struct FOnlineFriend >* Friends );
	bool GetContentList ( unsigned char PlayerNum, TArray< struct FCommunityContentFile >* ContentFiles );
	void ClearReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate );
	void AddReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate );
	void OnReadContentListComplete ( unsigned long bWasSuccessful );
	bool ReadContentList ( unsigned char PlayerNum, int StartAt, int NumToRead );
	void Exit ( );
	bool Init ( );
};



// Class Engine.OnlineEventsInterface ( Property size: 0 iter: 3) 
// Class name index: 22338 
// 0x0000 (0x0060 - 0x0060)
class UOnlineEventsInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 26891 ];

		return pClassPointer;
	};

	bool UpdatePlaylistPopulation ( int PlaylistId, int NumPlayers );
	bool UploadGameplayEventsData ( struct FUniqueNetId UniqueId, TArray< unsigned char >* Payload );
	bool UploadPlayerData ( struct FUniqueNetId UniqueId, struct FString PlayerNick, class UOnlineProfileSettings* ProfileSettings, class UOnlinePlayerStorage* PlayerStorage );
};



// Class Engine.OnlinePlaylistGameTypeProvider ( Property size: 4 iter: 4) 
// Class name index: 22356 
// 0x002C (0x00C0 - 0x0094)
class UOnlinePlaylistGameTypeProvider : public UUIResourceDataProvider
{
public:
	struct FName                                       PlaylistGameTypeName;                             		// 0x0094 (0x0008) [0x0000000000004000]              ( CPF_Config )
	struct FString                                     DisplayName;                                      		// 0x009C (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x00AC (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	int                                                GameTypeId;                                       		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 27789 ];

		return pClassPointer;
	};

};



// Class Engine.OnlineRecentPlayersList ( Property size: 8 iter: 25) 
// Class name index: 22358 
// 0x0058 (0x00B8 - 0x0060)
class UOnlineRecentPlayersList : public UObject
{
public:
	TArray< struct FUniqueNetId >                      RecentPlayers;                                    		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	TArray< struct FRecentParty >                      RecentParties;                                    		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FRecentParty                                LastParty;                                        		// 0x0080 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MaxRecentPlayers;                                 		// 0x0098 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxRecentParties;                                 		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                RecentPlayersAddIndex;                            		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                RecentPartiesAddIndex;                            		// 0x00A4 (0x0004) [0x0000000000000000]              
	TArray< struct FCurrentPlayerMet >                 CurrentPlayers;                                   		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 27833 ];

		return pClassPointer;
	};

	int GetCurrentPlayersListCount ( );
	void SetCurrentPlayersList ( TArray< struct FCurrentPlayerMet > Players );
	bool ShowCurrentPlayersList ( unsigned char LocalUserNum, struct FString Title, struct FString Description );
	bool ShowLastPartyPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description );
	bool ShowRecentPartiesPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description );
	bool ShowRecentPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description );
	void SetLastParty ( struct FUniqueNetId PartyLeader, TArray< struct FUniqueNetId >* PartyMembers );
	int GetTeamForCurrentPlayer ( struct FUniqueNetId Player );
	int GetSkillForCurrentPlayer ( struct FUniqueNetId Player );
	void GetPlayersFromCurrentPlayers ( TArray< struct FUniqueNetId >* Players );
	void GetPlayersFromRecentParties ( TArray< struct FUniqueNetId >* Players );
	void ClearRecentParties ( );
	void AddPartyToRecentParties ( struct FUniqueNetId PartyLeader, TArray< struct FUniqueNetId >* PartyMembers );
	void ClearRecentPlayers ( );
	void AddPlayerToRecentPlayers ( struct FUniqueNetId NewPlayer );
};



// Class Engine.OnlineSuppliedUIInterface ( Property size: 0 iter: 5) 
// Class name index: 22368 
// 0x0000 (0x0060 - 0x0060)
class UOnlineSuppliedUIInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 28125 ];

		return pClassPointer;
	};

	bool ShowMatchmakingUI ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, class UOnlineGameSettings* GameSettings );
	void ClearShowOnlineStatsUICompleteDelegate ( struct FScriptDelegate ShowOnlineStatsUICompleteDelegate );
	void AddShowOnlineStatsUICompleteDelegate ( struct FScriptDelegate ShowOnlineStatsUICompleteDelegate );
	bool ShowOnlineStatsUI ( class UOnlineStatsRead* StatsRead, TArray< struct FUniqueNetId >* Players );
	void OnShowOnlineStatsUIComplete ( );
};



// Class Engine.PathNode_Dynamic ( Property size: 0 iter: 1) 
// Class name index: 22885 
// 0x0000 (0x0358 - 0x0358)
class APathNode_Dynamic : public APathNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 29440 ];

		return pClassPointer;
	};

	struct FString eventGetDebugAbbrev ( );
};



// Class Engine.SeqEvent_AIReachedRouteActor ( Property size: 0 iter: 0) 
// Class name index: 24841 
// 0x0000 (0x0178 - 0x0178)
class USeqEvent_AIReachedRouteActor : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 29448 ];

		return pClassPointer;
	};

};



// Class Engine.SeqEvent_PickupStatusChange ( Property size: 0 iter: 0) 
// Class name index: 24846 
// 0x0000 (0x0178 - 0x0178)
class USeqEvent_PickupStatusChange : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 29985 ];

		return pClassPointer;
	};

};



// Class Engine.RadialBlurActor ( Property size: 1 iter: 1) 
// Class name index: 23800 
// 0x0008 (0x0248 - 0x0240)
class ARadialBlurActor : public AActor
{
public:
	class URadialBlurComponent*                        RadialBlur;                                       		// 0x0240 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30499 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_ToggleConstraintDrive ( Property size: 4 iter: 4) 
// Class name index: 24835 
// 0x0004 (0x0158 - 0x0154)
class USeqAct_ToggleConstraintDrive : public USequenceAction
{
public:
	unsigned long                                      bEnableAngularPositionDrive : 1;                  		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableAngularVelocityDrive : 1;                  		// 0x0154 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableLinearPositionDrive : 1;                   		// 0x0154 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableLinearvelocityDrive : 1;                   		// 0x0154 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30701 ];

		return pClassPointer;
	};

};



// Class Engine.RB_BSJointActor ( Property size: 0 iter: 0) 
// Class name index: 23881 
// 0x0000 (0x0274 - 0x0274)
class ARB_BSJointActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30746 ];

		return pClassPointer;
	};

};



// Class Engine.RB_ConstraintActorSpawnable ( Property size: 0 iter: 0) 
// Class name index: 23882 
// 0x0000 (0x0274 - 0x0274)
class ARB_ConstraintActorSpawnable : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30751 ];

		return pClassPointer;
	};

};



// Class Engine.RB_HingeActor ( Property size: 0 iter: 0) 
// Class name index: 23883 
// 0x0000 (0x0274 - 0x0274)
class ARB_HingeActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30812 ];

		return pClassPointer;
	};

};



// Class Engine.RB_PrismaticActor ( Property size: 0 iter: 0) 
// Class name index: 23886 
// 0x0000 (0x0274 - 0x0274)
class ARB_PrismaticActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30829 ];

		return pClassPointer;
	};

};



// Class Engine.RB_PulleyJointActor ( Property size: 0 iter: 0) 
// Class name index: 23887 
// 0x0000 (0x0274 - 0x0274)
class ARB_PulleyJointActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30834 ];

		return pClassPointer;
	};

};



// Class Engine.ReverbVolumeToggleable ( Property size: 0 iter: 1) 
// Class name index: 24342 
// 0x0000 (0x02C0 - 0x02C0)
class AReverbVolumeToggleable : public AReverbVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 30899 ];

		return pClassPointer;
	};

	void OnToggle ( class USeqAct_Toggle* Action );
};



// Class Engine.SeqAct_AddRemoveFaceFXAnimSet ( Property size: 1 iter: 1) 
// Class name index: 24813 
// 0x0010 (0x0164 - 0x0154)
class USeqAct_AddRemoveFaceFXAnimSet : public USequenceAction
{
public:
	TArray< class UFaceFXAnimSet* >                    FaceFXAnimSets;                                   		// 0x0154 (0x0010) [0x0000000020400000]              ( CPF_NeedCtorLink | CPF_Deprecated )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31119 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_AIAbortMoveToActor ( Property size: 0 iter: 0) 
// Class name index: 24814 
// 0x0000 (0x0154 - 0x0154)
class USeqAct_AIAbortMoveToActor : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31123 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_MITV_Activate ( Property size: 1 iter: 3) 
// Class name index: 24823 
// 0x0004 (0x0158 - 0x0154)
class USeqAct_MITV_Activate : public USequenceAction
{
public:
	float                                              DurationOfMITV;                                   		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31347 ];

		return pClassPointer;
	};

	void eventActivated ( );
	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_SetMatInstTexParam ( Property size: 3 iter: 3) 
// Class name index: 24825 
// 0x0018 (0x016C - 0x0154)
class USeqAct_SetMatInstTexParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    NewTexture;                                       		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParamName;                                        		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31486 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetMatInstVectorParam ( Property size: 3 iter: 4) 
// Class name index: 24826 
// 0x0020 (0x0174 - 0x0154)
class USeqAct_SetMatInstVectorParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParamName;                                        		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                VectorValue;                                      		// 0x0164 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31491 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqAct_SetSkelControlTarget ( Property size: 2 iter: 2) 
// Class name index: 24828 
// 0x0018 (0x016C - 0x0154)
class USeqAct_SetSkelControlTarget : public USequenceAction
{
public:
	struct FName                                       SkelControlName;                                  		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	TArray< class UObject* >                           TargetActors;                                     		// 0x015C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31510 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_SetVector ( Property size: 1 iter: 2) 
// Class name index: 24830 
// 0x000C (0x0160 - 0x0154)
class USeqAct_SetVector : public USeqAct_SetSequenceVariable
{
public:
	struct FVector                                     DefaultValue;                                     		// 0x0154 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31525 ];

		return pClassPointer;
	};

	void eventActivated ( );
};



// Class Engine.SeqAct_ToggleAffectedByHitEffects ( Property size: 0 iter: 0) 
// Class name index: 24833 
// 0x0000 (0x0154 - 0x0154)
class USeqAct_ToggleAffectedByHitEffects : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31618 ];

		return pClassPointer;
	};

};



// Class Engine.SeqAct_UpdatePhysBonesFromAnim ( Property size: 0 iter: 1) 
// Class name index: 24840 
// 0x0000 (0x0154 - 0x0154)
class USeqAct_UpdatePhysBonesFromAnim : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31643 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqEvent_LOS ( Property size: 3 iter: 4) 
// Class name index: 24844 
// 0x000C (0x0184 - 0x0178)
class USeqEvent_LOS : public USequenceEvent
{
public:
	float                                              ScreenCenterDistance;                             		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TriggerDistance;                                  		// 0x017C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCheckForObstructions : 1;                        		// 0x0180 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31749 ];

		return pClassPointer;
	};

	int eventGetObjClassVersion ( );
};



// Class Engine.SeqVar_Byte ( Property size: 0 iter: 0) 
// Class name index: 24861 
// 0x0000 (0x00D4 - 0x00D4)
class USeqVar_Byte : public USequenceVariable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31864 ];

		return pClassPointer;
	};

};



// Class Engine.SeqVar_Name ( Property size: 0 iter: 0) 
// Class name index: 24862 
// 0x0000 (0x00D4 - 0x00D4)
class USeqVar_Name : public USequenceVariable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31880 ];

		return pClassPointer;
	};

};



// Class Engine.SeqVar_Union ( Property size: 0 iter: 0) 
// Class name index: 24863 
// 0x0000 (0x00D4 - 0x00D4)
class USeqVar_Union : public USequenceVariable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 31910 ];

		return pClassPointer;
	};

};



// Class Engine.SkeletalMeshActorMATSpawnable ( Property size: 0 iter: 0) 
// Class name index: 25506 
// 0x0000 (0x02B0 - 0x02B0)
class ASkeletalMeshActorMATSpawnable : public ASkeletalMeshActorMAT
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 32538 ];

		return pClassPointer;
	};

};



// Class Engine.SkeletalMeshActorMATWalkable ( Property size: 0 iter: 0) 
// Class name index: 25507 
// 0x0000 (0x02B0 - 0x02B0)
class ASkeletalMeshActorMATWalkable : public ASkeletalMeshActorMAT
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 32543 ];

		return pClassPointer;
	};

};



// Class Engine.Trigger_Dynamic ( Property size: 0 iter: 0) 
// Class name index: 26844 
// 0x0000 (0x0250 - 0x0250)
class ATrigger_Dynamic : public ATrigger
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33810 ];

		return pClassPointer;
	};

};



// Class Engine.Trigger_LOS ( Property size: 1 iter: 2) 
// Class name index: 26845 
// 0x0010 (0x0260 - 0x0250)
class ATrigger_LOS : public ATrigger
{
public:
	TArray< class APlayerController* >                 PCsWithLOS;                                       		// 0x0250 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33814 ];

		return pClassPointer;
	};

	void eventTick ( float DeltaTime );
};



// Class Engine.TriggeredPath ( Property size: 2 iter: 5) 
// Class name index: 26851 
// 0x000C (0x0364 - 0x0358)
class ATriggeredPath : public ANavigationPoint
{
public:
	unsigned long                                      bOpen : 1;                                        		// 0x0358 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class AActor*                                      MyTrigger;                                        		// 0x035C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33834 ];

		return pClassPointer;
	};

	bool eventSuggestMovePreparation ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void OnToggle ( class USeqAct_Toggle* inAction );
};



// Class Engine.TriggerStreamingLevel ( Property size: 1 iter: 3) 
// Class name index: 26857 
// 0x0010 (0x0260 - 0x0250)
class ATriggerStreamingLevel : public ATrigger
{
public:
	TArray< struct FLevelStreamingData >               Levels;                                           		// 0x0250 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33848 ];

		return pClassPointer;
	};

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};



// Class Engine.UICharacterSummary ( Property size: 4 iter: 4) 
// Class name index: 26925 
// 0x0034 (0x00C8 - 0x0094)
class UUICharacterSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassPathName;                                    		// 0x0094 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CharacterName;                                    		// 0x00A4 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CharacterBio;                                     		// 0x00B4 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bIsDisabled : 1;                                  		// 0x00C4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 33919 ];

		return pClassPointer;
	};

};



// Class Engine.UIGameInfoSummary ( Property size: 8 iter: 8) 
// Class name index: 26930 
// 0x0064 (0x00F8 - 0x0094)
class UUIGameInfoSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassName;                                        		// 0x0094 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     GameAcronym;                                      		// 0x00A4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     MapPrefix;                                        		// 0x00B4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned long                                      bIsTeamGame : 1;                                  		// 0x00C4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bIsDisabled : 1;                                  		// 0x00C4 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	struct FString                                     GameSettingsClassName;                            		// 0x00C8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     GameName;                                         		// 0x00D8 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x00E8 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 34554 ];

		return pClassPointer;
	};

};



// Class Engine.UIMapSummary ( Property size: 4 iter: 4) 
// Class name index: 26938 
// 0x0040 (0x00D4 - 0x0094)
class UUIMapSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     MapName;                                          		// 0x0094 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ScreenshotPathName;                               		// 0x00A4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DisplayName;                                      		// 0x00B4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x00C4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 34678 ];

		return pClassPointer;
	};

};



// Class Engine.UIWeaponSummary ( Property size: 4 iter: 4) 
// Class name index: 26944 
// 0x0034 (0x00C8 - 0x0094)
class UUIWeaponSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassPathName;                                    		// 0x0094 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FriendlyName;                                     		// 0x00A4 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeaponDescription;                                		// 0x00B4 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bIsDisabled : 1;                                  		// 0x00C4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 34700 ];

		return pClassPointer;
	};

};



// Class Engine.UserCloudFileCloudSaveSystemDataBlobStore ( Property size: 7 iter: 17) 
// Class name index: 27094 
// 0x0070 (0x00D0 - 0x0060)
class UUserCloudFileCloudSaveSystemDataBlobStore : public UObject
{
public:
	class UUserCloudFileInterface*                     UserCloudFile;                                    		// 0x0060 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0068 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             GetDataBlobCallback;                              		// 0x0070 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0074 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             SetDataBlobCallback;                              		// 0x0080 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x0084 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             DeleteDataBlobCallback;                           		// 0x0090 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x0094 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __GetDataBlobCallbackDelegate__Delegate;          		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData04[ 0x4 ];                             		// 0x00A4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __SetDataBlobCallbackDelegate__Delegate;          		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData05[ 0x4 ];                             		// 0x00B4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __DeleteDataBlobCallbackDelegate__Delegate;       		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData06[ 0x4 ];                             		// 0x00C4 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 34706 ];

		return pClassPointer;
	};

	void OnDeleteUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename );
	bool DeleteDataBlob ( struct FString StorageID, struct FString BlobName, struct FScriptDelegate InDeleteDataBlobCallback );
	void OnWriteUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename );
	void SetDataBlob ( struct FString StorageID, struct FString BlobName, struct FScriptDelegate InSetDataBlobCallback, TArray< unsigned char >* DataBlob );
	void OnReadUserFileComplete ( unsigned long bWasSuccessful, struct FString UserId, struct FString Filename );
	void GetDataBlob ( struct FString StorageID, struct FString BlobName, struct FScriptDelegate InGetDataBlobCallback );
	void Init ( class UUserCloudFileInterface* InUserCloudFile );
	void DeleteDataBlobCallbackDelegate ( unsigned long bWasSucessfull, struct FString StorageID, struct FString BlobName, struct FString Error );
	void SetDataBlobCallbackDelegate ( unsigned long bWasSucessfull, struct FString StorageID, struct FString BlobName, struct FString Error );
	void GetDataBlobCallbackDelegate ( unsigned long bWasSuccessful, struct FString StorageID, struct FString BlobName, struct FString Error, TArray< unsigned char >* DataBlob );
};



// Class Engine.WaterVolume ( Property size: 4 iter: 8) 
// Class name index: 27397 
// 0x0020 (0x02EC - 0x02CC)
class AWaterVolume : public APhysicsVolume
{
public:
	class USoundCue*                                   EntrySound;                                       		// 0x02CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      EntryActor;                                       		// 0x02D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ExitSound;                                        		// 0x02DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ExitActor;                                        		// 0x02E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 34853 ];

		return pClassPointer;
	};

	void PlayExitSplash ( class AActor* Other );
	void eventUnTouch ( class AActor* Other );
	void PlayEntrySplash ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};



// Class Engine.WindDirectionalSource ( Property size: 1 iter: 1) 
// Class name index: 27508 
// 0x0008 (0x0248 - 0x0240)
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                        		// 0x0240 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass()
	{
		if ( ! pClassPointer )
			pClassPointer = (UClass*) UObject::GObjObjects()->Data[ 35169 ];

		return pClassPointer;
	};

};




#ifdef _MSC_VER
	#pragma pack ( pop )
#endif